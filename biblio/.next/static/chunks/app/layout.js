/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Csrc%5C%5CReactScanComponent.tsx%22%2C%22ids%22%3A%5B%22ReactScan%22%5D%7D&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Csrc%5C%5CReactScanComponent.tsx%22%2C%22ids%22%3A%5B%22ReactScan%22%5D%7D&server=false! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Geist\",\"arguments\":[{\"variable\":\"--font-geist-sans\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistSans\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src\\\\\\\\app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Geist\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-geist-sans\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"geistSans\\\"}\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Geist_Mono\",\"arguments\":[{\"variable\":\"--font-geist-mono\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistMono\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src\\\\\\\\app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Geist_Mono\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-geist-mono\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"geistMono\\\"}\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/globals.css */ \"(app-pages-browser)/./src/app/globals.css\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/ReactScanComponent.tsx */ \"(app-pages-browser)/./src/ReactScanComponent.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q2xhcnNfd29yayU1QyU1Q2Vrc2FtZW4lNUMlNUNiaWJsaW8tY2FzZSU1QyU1Q2JpYmxpbyU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNmb250JTVDJTVDZ29vZ2xlJTVDJTVDdGFyZ2V0LmNzcyUzRiU3QiU1QyUyMnBhdGglNUMlMjIlM0ElNUMlMjJzcmMlNUMlNUMlNUMlNUNhcHAlNUMlNUMlNUMlNUNsYXlvdXQudHN4JTVDJTIyJTJDJTVDJTIyaW1wb3J0JTVDJTIyJTNBJTVDJTIyR2Vpc3QlNUMlMjIlMkMlNUMlMjJhcmd1bWVudHMlNUMlMjIlM0ElNUIlN0IlNUMlMjJ2YXJpYWJsZSU1QyUyMiUzQSU1QyUyMi0tZm9udC1nZWlzdC1zYW5zJTVDJTIyJTJDJTVDJTIyc3Vic2V0cyU1QyUyMiUzQSU1QiU1QyUyMmxhdGluJTVDJTIyJTVEJTdEJTVEJTJDJTVDJTIydmFyaWFibGVOYW1lJTVDJTIyJTNBJTVDJTIyZ2Vpc3RTYW5zJTVDJTIyJTdEJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNsYXJzX3dvcmslNUMlNUNla3NhbWVuJTVDJTVDYmlibGlvLWNhc2UlNUMlNUNiaWJsaW8lNUMlNUNub2RlX21vZHVsZXMlNUMlNUNuZXh0JTVDJTVDZm9udCU1QyU1Q2dvb2dsZSU1QyU1Q3RhcmdldC5jc3MlM0YlN0IlNUMlMjJwYXRoJTVDJTIyJTNBJTVDJTIyc3JjJTVDJTVDJTVDJTVDYXBwJTVDJTVDJTVDJTVDbGF5b3V0LnRzeCU1QyUyMiUyQyU1QyUyMmltcG9ydCU1QyUyMiUzQSU1QyUyMkdlaXN0X01vbm8lNUMlMjIlMkMlNUMlMjJhcmd1bWVudHMlNUMlMjIlM0ElNUIlN0IlNUMlMjJ2YXJpYWJsZSU1QyUyMiUzQSU1QyUyMi0tZm9udC1nZWlzdC1tb25vJTVDJTIyJTJDJTVDJTIyc3Vic2V0cyU1QyUyMiUzQSU1QiU1QyUyMmxhdGluJTVDJTIyJTVEJTdEJTVEJTJDJTVDJTIydmFyaWFibGVOYW1lJTVDJTIyJTNBJTVDJTIyZ2Vpc3RNb25vJTVDJTIyJTdEJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNsYXJzX3dvcmslNUMlNUNla3NhbWVuJTVDJTVDYmlibGlvLWNhc2UlNUMlNUNiaWJsaW8lNUMlNUNzcmMlNUMlNUNhcHAlNUMlNUNnbG9iYWxzLmNzcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDbGFyc193b3JrJTVDJTVDZWtzYW1lbiU1QyU1Q2JpYmxpby1jYXNlJTVDJTVDYmlibGlvJTVDJTVDc3JjJTVDJTVDUmVhY3RTY2FuQ29tcG9uZW50LnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMlJlYWN0U2NhbiUyMiU1RCU3RCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLDRnQkFBdVM7QUFDdlM7QUFDQSxzaEJBQTRTO0FBQzVTO0FBQ0Esb0tBQXVHO0FBQ3ZHO0FBQ0Esa0xBQTRJIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxsYXJzX3dvcmtcXFxcZWtzYW1lblxcXFxiaWJsaW8tY2FzZVxcXFxiaWJsaW9cXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZm9udFxcXFxnb29nbGVcXFxcdGFyZ2V0LmNzcz97XFxcInBhdGhcXFwiOlxcXCJzcmNcXFxcXFxcXGFwcFxcXFxcXFxcbGF5b3V0LnRzeFxcXCIsXFxcImltcG9ydFxcXCI6XFxcIkdlaXN0XFxcIixcXFwiYXJndW1lbnRzXFxcIjpbe1xcXCJ2YXJpYWJsZVxcXCI6XFxcIi0tZm9udC1nZWlzdC1zYW5zXFxcIixcXFwic3Vic2V0c1xcXCI6W1xcXCJsYXRpblxcXCJdfV0sXFxcInZhcmlhYmxlTmFtZVxcXCI6XFxcImdlaXN0U2Fuc1xcXCJ9XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxsYXJzX3dvcmtcXFxcZWtzYW1lblxcXFxiaWJsaW8tY2FzZVxcXFxiaWJsaW9cXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZm9udFxcXFxnb29nbGVcXFxcdGFyZ2V0LmNzcz97XFxcInBhdGhcXFwiOlxcXCJzcmNcXFxcXFxcXGFwcFxcXFxcXFxcbGF5b3V0LnRzeFxcXCIsXFxcImltcG9ydFxcXCI6XFxcIkdlaXN0X01vbm9cXFwiLFxcXCJhcmd1bWVudHNcXFwiOlt7XFxcInZhcmlhYmxlXFxcIjpcXFwiLS1mb250LWdlaXN0LW1vbm9cXFwiLFxcXCJzdWJzZXRzXFxcIjpbXFxcImxhdGluXFxcIl19XSxcXFwidmFyaWFibGVOYW1lXFxcIjpcXFwiZ2Vpc3RNb25vXFxcIn1cIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXGxhcnNfd29ya1xcXFxla3NhbWVuXFxcXGJpYmxpby1jYXNlXFxcXGJpYmxpb1xcXFxzcmNcXFxcYXBwXFxcXGdsb2JhbHMuY3NzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJSZWFjdFNjYW5cIl0gKi8gXCJDOlxcXFxsYXJzX3dvcmtcXFxcZWtzYW1lblxcXFxiaWJsaW8tY2FzZVxcXFxiaWJsaW9cXFxcc3JjXFxcXFJlYWN0U2NhbkNvbXBvbmVudC50c3hcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Csrc%5C%5CReactScanComponent.tsx%22%2C%22ids%22%3A%5B%22ReactScan%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@preact/signals-core/dist/signals-core.module.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@preact/signals-core/dist/signals-core.module.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signal: () => (/* binding */ u),\n/* harmony export */   batch: () => (/* binding */ r),\n/* harmony export */   computed: () => (/* binding */ w),\n/* harmony export */   effect: () => (/* binding */ E),\n/* harmony export */   signal: () => (/* binding */ d),\n/* harmony export */   untracked: () => (/* binding */ n)\n/* harmony export */ });\nvar i=Symbol.for(\"preact-signals\");function t(){if(!(s>1)){var i,t=!1;while(void 0!==h){var r=h;h=void 0;f++;while(void 0!==r){var o=r.o;r.o=void 0;r.f&=-3;if(!(8&r.f)&&c(r))try{r.c()}catch(r){if(!t){i=r;t=!0}}r=o}}f=0;s--;if(t)throw i}else s--}function r(i){if(s>0)return i();s++;try{return i()}finally{t()}}var o=void 0;function n(i){var t=o;o=void 0;try{return i()}finally{o=t}}var h=void 0,s=0,f=0,v=0;function e(i){if(void 0!==o){var t=i.n;if(void 0===t||t.t!==o){t={i:0,S:i,p:o.s,n:void 0,t:o,e:void 0,x:void 0,r:t};if(void 0!==o.s)o.s.n=t;o.s=t;i.n=t;if(32&o.f)i.S(t);return t}else if(-1===t.i){t.i=0;if(void 0!==t.n){t.n.p=t.p;if(void 0!==t.p)t.p.n=t.n;t.p=o.s;t.n=void 0;o.s.n=t;o.s=t}return t}}}function u(i){this.v=i;this.i=0;this.n=void 0;this.t=void 0}u.prototype.brand=i;u.prototype.h=function(){return!0};u.prototype.S=function(i){if(this.t!==i&&void 0===i.e){i.x=this.t;if(void 0!==this.t)this.t.e=i;this.t=i}};u.prototype.U=function(i){if(void 0!==this.t){var t=i.e,r=i.x;if(void 0!==t){t.x=r;i.e=void 0}if(void 0!==r){r.e=t;i.x=void 0}if(i===this.t)this.t=r}};u.prototype.subscribe=function(i){var t=this;return E(function(){var r=t.value,n=o;o=void 0;try{i(r)}finally{o=n}})};u.prototype.valueOf=function(){return this.value};u.prototype.toString=function(){return this.value+\"\"};u.prototype.toJSON=function(){return this.value};u.prototype.peek=function(){var i=o;o=void 0;try{return this.value}finally{o=i}};Object.defineProperty(u.prototype,\"value\",{get:function(){var i=e(this);if(void 0!==i)i.i=this.i;return this.v},set:function(i){if(i!==this.v){if(f>100)throw new Error(\"Cycle detected\");this.v=i;this.i++;v++;s++;try{for(var r=this.t;void 0!==r;r=r.x)r.t.N()}finally{t()}}}});function d(i){return new u(i)}function c(i){for(var t=i.s;void 0!==t;t=t.n)if(t.S.i!==t.i||!t.S.h()||t.S.i!==t.i)return!0;return!1}function a(i){for(var t=i.s;void 0!==t;t=t.n){var r=t.S.n;if(void 0!==r)t.r=r;t.S.n=t;t.i=-1;if(void 0===t.n){i.s=t;break}}}function l(i){var t=i.s,r=void 0;while(void 0!==t){var o=t.p;if(-1===t.i){t.S.U(t);if(void 0!==o)o.n=t.n;if(void 0!==t.n)t.n.p=o}else r=t;t.S.n=t.r;if(void 0!==t.r)t.r=void 0;t=o}i.s=r}function y(i){u.call(this,void 0);this.x=i;this.s=void 0;this.g=v-1;this.f=4}(y.prototype=new u).h=function(){this.f&=-3;if(1&this.f)return!1;if(32==(36&this.f))return!0;this.f&=-5;if(this.g===v)return!0;this.g=v;this.f|=1;if(this.i>0&&!c(this)){this.f&=-2;return!0}var i=o;try{a(this);o=this;var t=this.x();if(16&this.f||this.v!==t||0===this.i){this.v=t;this.f&=-17;this.i++}}catch(i){this.v=i;this.f|=16;this.i++}o=i;l(this);this.f&=-2;return!0};y.prototype.S=function(i){if(void 0===this.t){this.f|=36;for(var t=this.s;void 0!==t;t=t.n)t.S.S(t)}u.prototype.S.call(this,i)};y.prototype.U=function(i){if(void 0!==this.t){u.prototype.U.call(this,i);if(void 0===this.t){this.f&=-33;for(var t=this.s;void 0!==t;t=t.n)t.S.U(t)}}};y.prototype.N=function(){if(!(2&this.f)){this.f|=6;for(var i=this.t;void 0!==i;i=i.x)i.t.N()}};Object.defineProperty(y.prototype,\"value\",{get:function(){if(1&this.f)throw new Error(\"Cycle detected\");var i=e(this);this.h();if(void 0!==i)i.i=this.i;if(16&this.f)throw this.v;return this.v}});function w(i){return new y(i)}function _(i){var r=i.u;i.u=void 0;if(\"function\"==typeof r){s++;var n=o;o=void 0;try{r()}catch(t){i.f&=-2;i.f|=8;g(i);throw t}finally{o=n;t()}}}function g(i){for(var t=i.s;void 0!==t;t=t.n)t.S.U(t);i.x=void 0;i.s=void 0;_(i)}function p(i){if(o!==this)throw new Error(\"Out-of-order effect\");l(this);o=i;this.f&=-2;if(8&this.f)g(this);t()}function b(i){this.x=i;this.u=void 0;this.s=void 0;this.o=void 0;this.f=32}b.prototype.c=function(){var i=this.S();try{if(8&this.f)return;if(void 0===this.x)return;var t=this.x();if(\"function\"==typeof t)this.u=t}finally{i()}};b.prototype.S=function(){if(1&this.f)throw new Error(\"Cycle detected\");this.f|=1;this.f&=-9;_(this);a(this);s++;var i=o;o=this;return p.bind(this,i)};b.prototype.N=function(){if(!(2&this.f)){this.f|=2;this.o=h;h=this}};b.prototype.d=function(){this.f|=8;if(!(1&this.f))g(this)};function E(i){var t=new b(i);try{t.c()}catch(i){t.d();throw i}return t.d.bind(t)}//# sourceMappingURL=signals-core.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcHJlYWN0L3NpZ25hbHMtY29yZS9kaXN0L3NpZ25hbHMtY29yZS5tb2R1bGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsbUNBQW1DLGFBQWEsV0FBVyxXQUFXLGtCQUFrQixRQUFRLFNBQVMsSUFBSSxrQkFBa0IsVUFBVSxXQUFXLFFBQVEsc0JBQXNCLE1BQU0sU0FBUyxPQUFPLElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxhQUFhLFNBQVMsY0FBYyxrQkFBa0IsSUFBSSxJQUFJLFdBQVcsUUFBUSxLQUFLLGFBQWEsY0FBYyxRQUFRLFNBQVMsSUFBSSxXQUFXLFFBQVEsS0FBSyx5QkFBeUIsY0FBYyxlQUFlLFVBQVUsd0JBQXdCLEdBQUcsa0RBQWtELHdCQUF3QixNQUFNLE1BQU0saUJBQWlCLFNBQVMsa0JBQWtCLE1BQU0saUJBQWlCLFVBQVUsMEJBQTBCLFFBQVEsV0FBVyxRQUFRLE1BQU0sV0FBVyxjQUFjLFNBQVMsU0FBUyxjQUFjLGNBQWMsb0JBQW9CLHlCQUF5QixVQUFVLDBCQUEwQiw2QkFBNkIsV0FBVyw4QkFBOEIsV0FBVywwQkFBMEIsb0JBQW9CLGdCQUFnQixlQUFlLE1BQU0sV0FBVyxlQUFlLE1BQU0sV0FBVyx5QkFBeUIsa0NBQWtDLFdBQVcsb0JBQW9CLGtCQUFrQixTQUFTLElBQUksS0FBSyxRQUFRLEtBQUssR0FBRywrQkFBK0IsbUJBQW1CLGdDQUFnQyxzQkFBc0IsOEJBQThCLG1CQUFtQiw0QkFBNEIsUUFBUSxTQUFTLElBQUksa0JBQWtCLFFBQVEsTUFBTSwyQ0FBMkMsZUFBZSxjQUFjLHlCQUF5QixjQUFjLGlCQUFpQixlQUFlLDJDQUEyQyxTQUFTLFNBQVMsSUFBSSxJQUFJLElBQUksaUJBQWlCLFdBQVcsY0FBYyxRQUFRLE9BQU8sRUFBRSxjQUFjLGdCQUFnQixjQUFjLGNBQWMsV0FBVyxxREFBcUQsU0FBUyxjQUFjLGNBQWMsV0FBVyxPQUFPLFlBQVksb0JBQW9CLFFBQVEsT0FBTyxpQkFBaUIsTUFBTSxRQUFRLGNBQWMsbUJBQW1CLGtCQUFrQixVQUFVLGFBQWEsU0FBUyxzQkFBc0Isd0JBQXdCLFNBQVMsVUFBVSwyQkFBMkIsSUFBSSxNQUFNLGNBQWMsb0JBQW9CLFNBQVMsY0FBYyxXQUFXLFNBQVMsaUNBQWlDLFdBQVcscUJBQXFCLDRCQUE0QixXQUFXLHVCQUF1QixTQUFTLFVBQVUsdUJBQXVCLFdBQVcsU0FBUyxRQUFRLElBQUksUUFBUSxPQUFPLGVBQWUsc0NBQXNDLFNBQVMsWUFBWSxVQUFVLFNBQVMsU0FBUyxXQUFXLFNBQVMsSUFBSSxRQUFRLFdBQVcsVUFBVSwwQkFBMEIsb0JBQW9CLFdBQVcsaUJBQWlCLFdBQVcsZUFBZSw0QkFBNEIsMEJBQTBCLG9CQUFvQiwyQkFBMkIsb0JBQW9CLFlBQVksaUJBQWlCLFdBQVcsa0JBQWtCLHlCQUF5QixnQkFBZ0IsVUFBVSxpQkFBaUIsV0FBVyxnQkFBZ0IsMkNBQTJDLGVBQWUsOENBQThDLGNBQWMsU0FBUyx5QkFBeUIsMEJBQTBCLGVBQWUsRUFBRSxjQUFjLGdCQUFnQixjQUFjLFVBQVUsV0FBVyx5QkFBeUIsSUFBSSxRQUFRLFNBQVMsSUFBSSxJQUFJLFNBQVMsUUFBUSxPQUFPLEtBQUssUUFBUSxRQUFRLElBQUksTUFBTSxjQUFjLGNBQWMsV0FBVyxlQUFlLFdBQVcsV0FBVyxLQUFLLGNBQWMsbURBQW1ELFFBQVEsSUFBSSxXQUFXLG9CQUFvQixJQUFJLGNBQWMsU0FBUyxjQUFjLGNBQWMsY0FBYyxVQUFVLHlCQUF5QixlQUFlLElBQUksbUJBQW1CLDBCQUEwQixlQUFlLGlDQUFpQyxRQUFRLE1BQU0seUJBQXlCLDhDQUE4QyxVQUFVLFdBQVcsUUFBUSxRQUFRLElBQUksUUFBUSxPQUFPLHVCQUF1Qix5QkFBeUIsZ0JBQWdCLFVBQVUsU0FBUyxTQUFTLHlCQUF5QixVQUFVLHdCQUF3QixjQUFjLGVBQWUsSUFBSSxNQUFNLFNBQVMsTUFBTSxRQUFRLG1CQUF1RyIsInNvdXJjZXMiOlsiQzpcXGxhcnNfd29ya1xcZWtzYW1lblxcYmlibGlvLWNhc2VcXGJpYmxpb1xcbm9kZV9tb2R1bGVzXFxAcHJlYWN0XFxzaWduYWxzLWNvcmVcXGRpc3RcXHNpZ25hbHMtY29yZS5tb2R1bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGk9U3ltYm9sLmZvcihcInByZWFjdC1zaWduYWxzXCIpO2Z1bmN0aW9uIHQoKXtpZighKHM+MSkpe3ZhciBpLHQ9ITE7d2hpbGUodm9pZCAwIT09aCl7dmFyIHI9aDtoPXZvaWQgMDtmKys7d2hpbGUodm9pZCAwIT09cil7dmFyIG89ci5vO3Iubz12b2lkIDA7ci5mJj0tMztpZighKDgmci5mKSYmYyhyKSl0cnl7ci5jKCl9Y2F0Y2gocil7aWYoIXQpe2k9cjt0PSEwfX1yPW99fWY9MDtzLS07aWYodCl0aHJvdyBpfWVsc2Ugcy0tfWZ1bmN0aW9uIHIoaSl7aWYocz4wKXJldHVybiBpKCk7cysrO3RyeXtyZXR1cm4gaSgpfWZpbmFsbHl7dCgpfX12YXIgbz12b2lkIDA7ZnVuY3Rpb24gbihpKXt2YXIgdD1vO289dm9pZCAwO3RyeXtyZXR1cm4gaSgpfWZpbmFsbHl7bz10fX12YXIgaD12b2lkIDAscz0wLGY9MCx2PTA7ZnVuY3Rpb24gZShpKXtpZih2b2lkIDAhPT1vKXt2YXIgdD1pLm47aWYodm9pZCAwPT09dHx8dC50IT09byl7dD17aTowLFM6aSxwOm8ucyxuOnZvaWQgMCx0Om8sZTp2b2lkIDAseDp2b2lkIDAscjp0fTtpZih2b2lkIDAhPT1vLnMpby5zLm49dDtvLnM9dDtpLm49dDtpZigzMiZvLmYpaS5TKHQpO3JldHVybiB0fWVsc2UgaWYoLTE9PT10Lmkpe3QuaT0wO2lmKHZvaWQgMCE9PXQubil7dC5uLnA9dC5wO2lmKHZvaWQgMCE9PXQucCl0LnAubj10Lm47dC5wPW8uczt0Lm49dm9pZCAwO28ucy5uPXQ7by5zPXR9cmV0dXJuIHR9fX1mdW5jdGlvbiB1KGkpe3RoaXMudj1pO3RoaXMuaT0wO3RoaXMubj12b2lkIDA7dGhpcy50PXZvaWQgMH11LnByb3RvdHlwZS5icmFuZD1pO3UucHJvdG90eXBlLmg9ZnVuY3Rpb24oKXtyZXR1cm4hMH07dS5wcm90b3R5cGUuUz1mdW5jdGlvbihpKXtpZih0aGlzLnQhPT1pJiZ2b2lkIDA9PT1pLmUpe2kueD10aGlzLnQ7aWYodm9pZCAwIT09dGhpcy50KXRoaXMudC5lPWk7dGhpcy50PWl9fTt1LnByb3RvdHlwZS5VPWZ1bmN0aW9uKGkpe2lmKHZvaWQgMCE9PXRoaXMudCl7dmFyIHQ9aS5lLHI9aS54O2lmKHZvaWQgMCE9PXQpe3QueD1yO2kuZT12b2lkIDB9aWYodm9pZCAwIT09cil7ci5lPXQ7aS54PXZvaWQgMH1pZihpPT09dGhpcy50KXRoaXMudD1yfX07dS5wcm90b3R5cGUuc3Vic2NyaWJlPWZ1bmN0aW9uKGkpe3ZhciB0PXRoaXM7cmV0dXJuIEUoZnVuY3Rpb24oKXt2YXIgcj10LnZhbHVlLG49bztvPXZvaWQgMDt0cnl7aShyKX1maW5hbGx5e289bn19KX07dS5wcm90b3R5cGUudmFsdWVPZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfTt1LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlK1wiXCJ9O3UucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfTt1LnByb3RvdHlwZS5wZWVrPWZ1bmN0aW9uKCl7dmFyIGk9bztvPXZvaWQgMDt0cnl7cmV0dXJuIHRoaXMudmFsdWV9ZmluYWxseXtvPWl9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodS5wcm90b3R5cGUsXCJ2YWx1ZVwiLHtnZXQ6ZnVuY3Rpb24oKXt2YXIgaT1lKHRoaXMpO2lmKHZvaWQgMCE9PWkpaS5pPXRoaXMuaTtyZXR1cm4gdGhpcy52fSxzZXQ6ZnVuY3Rpb24oaSl7aWYoaSE9PXRoaXMudil7aWYoZj4xMDApdGhyb3cgbmV3IEVycm9yKFwiQ3ljbGUgZGV0ZWN0ZWRcIik7dGhpcy52PWk7dGhpcy5pKys7disrO3MrKzt0cnl7Zm9yKHZhciByPXRoaXMudDt2b2lkIDAhPT1yO3I9ci54KXIudC5OKCl9ZmluYWxseXt0KCl9fX19KTtmdW5jdGlvbiBkKGkpe3JldHVybiBuZXcgdShpKX1mdW5jdGlvbiBjKGkpe2Zvcih2YXIgdD1pLnM7dm9pZCAwIT09dDt0PXQubilpZih0LlMuaSE9PXQuaXx8IXQuUy5oKCl8fHQuUy5pIT09dC5pKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIGEoaSl7Zm9yKHZhciB0PWkuczt2b2lkIDAhPT10O3Q9dC5uKXt2YXIgcj10LlMubjtpZih2b2lkIDAhPT1yKXQucj1yO3QuUy5uPXQ7dC5pPS0xO2lmKHZvaWQgMD09PXQubil7aS5zPXQ7YnJlYWt9fX1mdW5jdGlvbiBsKGkpe3ZhciB0PWkucyxyPXZvaWQgMDt3aGlsZSh2b2lkIDAhPT10KXt2YXIgbz10LnA7aWYoLTE9PT10Lmkpe3QuUy5VKHQpO2lmKHZvaWQgMCE9PW8pby5uPXQubjtpZih2b2lkIDAhPT10Lm4pdC5uLnA9b31lbHNlIHI9dDt0LlMubj10LnI7aWYodm9pZCAwIT09dC5yKXQucj12b2lkIDA7dD1vfWkucz1yfWZ1bmN0aW9uIHkoaSl7dS5jYWxsKHRoaXMsdm9pZCAwKTt0aGlzLng9aTt0aGlzLnM9dm9pZCAwO3RoaXMuZz12LTE7dGhpcy5mPTR9KHkucHJvdG90eXBlPW5ldyB1KS5oPWZ1bmN0aW9uKCl7dGhpcy5mJj0tMztpZigxJnRoaXMuZilyZXR1cm4hMTtpZigzMj09KDM2JnRoaXMuZikpcmV0dXJuITA7dGhpcy5mJj0tNTtpZih0aGlzLmc9PT12KXJldHVybiEwO3RoaXMuZz12O3RoaXMuZnw9MTtpZih0aGlzLmk+MCYmIWModGhpcykpe3RoaXMuZiY9LTI7cmV0dXJuITB9dmFyIGk9bzt0cnl7YSh0aGlzKTtvPXRoaXM7dmFyIHQ9dGhpcy54KCk7aWYoMTYmdGhpcy5mfHx0aGlzLnYhPT10fHwwPT09dGhpcy5pKXt0aGlzLnY9dDt0aGlzLmYmPS0xNzt0aGlzLmkrK319Y2F0Y2goaSl7dGhpcy52PWk7dGhpcy5mfD0xNjt0aGlzLmkrK31vPWk7bCh0aGlzKTt0aGlzLmYmPS0yO3JldHVybiEwfTt5LnByb3RvdHlwZS5TPWZ1bmN0aW9uKGkpe2lmKHZvaWQgMD09PXRoaXMudCl7dGhpcy5mfD0zNjtmb3IodmFyIHQ9dGhpcy5zO3ZvaWQgMCE9PXQ7dD10Lm4pdC5TLlModCl9dS5wcm90b3R5cGUuUy5jYWxsKHRoaXMsaSl9O3kucHJvdG90eXBlLlU9ZnVuY3Rpb24oaSl7aWYodm9pZCAwIT09dGhpcy50KXt1LnByb3RvdHlwZS5VLmNhbGwodGhpcyxpKTtpZih2b2lkIDA9PT10aGlzLnQpe3RoaXMuZiY9LTMzO2Zvcih2YXIgdD10aGlzLnM7dm9pZCAwIT09dDt0PXQubil0LlMuVSh0KX19fTt5LnByb3RvdHlwZS5OPWZ1bmN0aW9uKCl7aWYoISgyJnRoaXMuZikpe3RoaXMuZnw9Njtmb3IodmFyIGk9dGhpcy50O3ZvaWQgMCE9PWk7aT1pLngpaS50Lk4oKX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LnByb3RvdHlwZSxcInZhbHVlXCIse2dldDpmdW5jdGlvbigpe2lmKDEmdGhpcy5mKXRocm93IG5ldyBFcnJvcihcIkN5Y2xlIGRldGVjdGVkXCIpO3ZhciBpPWUodGhpcyk7dGhpcy5oKCk7aWYodm9pZCAwIT09aSlpLmk9dGhpcy5pO2lmKDE2JnRoaXMuZil0aHJvdyB0aGlzLnY7cmV0dXJuIHRoaXMudn19KTtmdW5jdGlvbiB3KGkpe3JldHVybiBuZXcgeShpKX1mdW5jdGlvbiBfKGkpe3ZhciByPWkudTtpLnU9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHIpe3MrKzt2YXIgbj1vO289dm9pZCAwO3RyeXtyKCl9Y2F0Y2godCl7aS5mJj0tMjtpLmZ8PTg7ZyhpKTt0aHJvdyB0fWZpbmFsbHl7bz1uO3QoKX19fWZ1bmN0aW9uIGcoaSl7Zm9yKHZhciB0PWkuczt2b2lkIDAhPT10O3Q9dC5uKXQuUy5VKHQpO2kueD12b2lkIDA7aS5zPXZvaWQgMDtfKGkpfWZ1bmN0aW9uIHAoaSl7aWYobyE9PXRoaXMpdGhyb3cgbmV3IEVycm9yKFwiT3V0LW9mLW9yZGVyIGVmZmVjdFwiKTtsKHRoaXMpO289aTt0aGlzLmYmPS0yO2lmKDgmdGhpcy5mKWcodGhpcyk7dCgpfWZ1bmN0aW9uIGIoaSl7dGhpcy54PWk7dGhpcy51PXZvaWQgMDt0aGlzLnM9dm9pZCAwO3RoaXMubz12b2lkIDA7dGhpcy5mPTMyfWIucHJvdG90eXBlLmM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLlMoKTt0cnl7aWYoOCZ0aGlzLmYpcmV0dXJuO2lmKHZvaWQgMD09PXRoaXMueClyZXR1cm47dmFyIHQ9dGhpcy54KCk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdCl0aGlzLnU9dH1maW5hbGx5e2koKX19O2IucHJvdG90eXBlLlM9ZnVuY3Rpb24oKXtpZigxJnRoaXMuZil0aHJvdyBuZXcgRXJyb3IoXCJDeWNsZSBkZXRlY3RlZFwiKTt0aGlzLmZ8PTE7dGhpcy5mJj0tOTtfKHRoaXMpO2EodGhpcyk7cysrO3ZhciBpPW87bz10aGlzO3JldHVybiBwLmJpbmQodGhpcyxpKX07Yi5wcm90b3R5cGUuTj1mdW5jdGlvbigpe2lmKCEoMiZ0aGlzLmYpKXt0aGlzLmZ8PTI7dGhpcy5vPWg7aD10aGlzfX07Yi5wcm90b3R5cGUuZD1mdW5jdGlvbigpe3RoaXMuZnw9ODtpZighKDEmdGhpcy5mKSlnKHRoaXMpfTtmdW5jdGlvbiBFKGkpe3ZhciB0PW5ldyBiKGkpO3RyeXt0LmMoKX1jYXRjaChpKXt0LmQoKTt0aHJvdyBpfXJldHVybiB0LmQuYmluZCh0KX1leHBvcnR7dSBhcyBTaWduYWwsciBhcyBiYXRjaCx3IGFzIGNvbXB1dGVkLEUgYXMgZWZmZWN0LGQgYXMgc2lnbmFsLG4gYXMgdW50cmFja2VkfTsvLyMgc291cmNlTWFwcGluZ1VSTD1zaWduYWxzLWNvcmUubW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@preact/signals-core/dist/signals-core.module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@preact/signals/dist/signals.module.js":
/*!*************************************************************!*\
  !*** ./node_modules/@preact/signals/dist/signals.module.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signal: () => (/* reexport safe */ _preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.Signal),\n/* harmony export */   batch: () => (/* reexport safe */ _preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.batch),\n/* harmony export */   computed: () => (/* reexport safe */ _preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.computed),\n/* harmony export */   effect: () => (/* reexport safe */ _preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.effect),\n/* harmony export */   signal: () => (/* reexport safe */ _preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.signal),\n/* harmony export */   untracked: () => (/* reexport safe */ _preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.untracked),\n/* harmony export */   useComputed: () => (/* binding */ useComputed),\n/* harmony export */   useSignal: () => (/* binding */ useSignal),\n/* harmony export */   useSignalEffect: () => (/* binding */ useSignalEffect)\n/* harmony export */ });\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ \"(app-pages-browser)/./node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var preact_hooks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact/hooks */ \"(app-pages-browser)/./node_modules/preact/hooks/dist/hooks.module.js\");\n/* harmony import */ var _preact_signals_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @preact/signals-core */ \"(app-pages-browser)/./node_modules/@preact/signals-core/dist/signals-core.module.js\");\nvar v,s;function l(i,n){preact__WEBPACK_IMPORTED_MODULE_0__.options[i]=n.bind(null,preact__WEBPACK_IMPORTED_MODULE_0__.options[i]||function(){})}function d(i){if(s)s();s=i&&i.S()}function h(i){var r=this,f=i.data,o=useSignal(f);o.value=f;var e=(0,preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function(){var i=r.__v;while(i=i.__)if(i.__c){i.__c.__$f|=4;break}r.__$u.c=function(){var i,t=r.__$u.S(),f=e.value;t();if((0,preact__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(f)||3!==(null==(i=r.base)?void 0:i.nodeType)){r.__$f|=1;r.setState({})}else r.base.data=f};return (0,_preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.computed)(function(){var i=o.value.value;return 0===i?0:!0===i?\"\":i||\"\"})},[]);return e.value}h.displayName=\"_st\";Object.defineProperties(_preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.Signal.prototype,{constructor:{configurable:!0,value:void 0},type:{configurable:!0,value:h},props:{configurable:!0,get:function(){return{data:this}}},__b:{configurable:!0,value:1}});l(\"__b\",function(i,r){if(\"string\"==typeof r.type){var n,t=r.props;for(var f in t)if(\"children\"!==f){var o=t[f];if(o instanceof _preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.Signal){if(!n)r.__np=n={};n[f]=o;t[f]=o.peek()}}}i(r)});l(\"__r\",function(i,r){d();var n,t=r.__c;if(t){t.__$f&=-2;if(void 0===(n=t.__$u))t.__$u=n=function(i){var r;(0,_preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.effect)(function(){r=this});r.c=function(){t.__$f|=1;t.setState({})};return r}()}v=t;d(n);i(r)});l(\"__e\",function(i,r,n,t){d();v=void 0;i(r,n,t)});l(\"diffed\",function(i,r){d();v=void 0;var n;if(\"string\"==typeof r.type&&(n=r.__e)){var t=r.__np,f=r.props;if(t){var o=n.U;if(o)for(var e in o){var u=o[e];if(void 0!==u&&!(e in t)){u.d();o[e]=void 0}}else n.U=o={};for(var a in t){var c=o[a],s=t[a];if(void 0===c){c=p(n,a,s,f);o[a]=c}else c.o(s,f)}}}i(r)});function p(i,r,n,t){var f=r in i&&void 0===i.ownerSVGElement,o=(0,_preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.signal)(n);return{o:function(i,r){o.value=i;t=r},d:(0,_preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.effect)(function(){var n=o.value.value;if(t[r]!==n){t[r]=n;if(f)i[r]=n;else if(n)i.setAttribute(r,n);else i.removeAttribute(r)}})}}l(\"unmount\",function(i,r){if(\"string\"==typeof r.type){var n=r.__e;if(n){var t=n.U;if(t){n.U=void 0;for(var f in t){var o=t[f];if(o)o.d()}}}}else{var e=r.__c;if(e){var u=e.__$u;if(u){e.__$u=void 0;u.d()}}}i(r)});l(\"__h\",function(i,r,n,t){if(t<3||9===t)r.__$f|=2;i(r,n,t)});preact__WEBPACK_IMPORTED_MODULE_0__.Component.prototype.shouldComponentUpdate=function(i,r){var n=this.__$u,t=n&&void 0!==n.s;for(var f in r)return!0;if(this.__f||\"boolean\"==typeof this.u&&!0===this.u){if(!(t||2&this.__$f||4&this.__$f))return!0;if(1&this.__$f)return!0}else{if(!(t||4&this.__$f))return!0;if(3&this.__$f)return!0}for(var o in i)if(\"__source\"!==o&&i[o]!==this.props[o])return!0;for(var e in this.props)if(!(e in i))return!0;return!1};function useSignal(i){return (0,preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function(){return (0,_preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.signal)(i)},[])}function useComputed(i){var r=(0,preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useRef)(i);r.current=i;v.__$f|=4;return (0,preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function(){return (0,_preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.computed)(function(){return r.current()})},[])}function useSignalEffect(i){var r=(0,preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useRef)(i);r.current=i;(0,preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function(){return (0,_preact_signals_core__WEBPACK_IMPORTED_MODULE_2__.effect)(function(){return r.current()})},[])}//# sourceMappingURL=signals.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcHJlYWN0L3NpZ25hbHMvZGlzdC9zaWduYWxzLm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBMFMsUUFBUSxnQkFBZ0IsMkNBQUMsZ0JBQWdCLDJDQUFDLGlCQUFpQixFQUFFLGNBQWMsU0FBUyxXQUFXLGNBQWMsbUNBQW1DLFVBQVUsTUFBTSxxREFBQyxZQUFZLFlBQVksdUJBQXVCLGNBQWMsTUFBTSxvQkFBb0IsNkJBQTZCLElBQUksR0FBRyxzREFBQywrQ0FBK0MsVUFBVSxhQUFhLEVBQUUsb0JBQW9CLE9BQU8sOERBQUMsWUFBWSxvQkFBb0IsK0JBQStCLEVBQUUsS0FBSyxlQUFlLG9CQUFvQix3QkFBd0Isd0RBQUMsWUFBWSxhQUFhLDZCQUE2QixPQUFPLHdCQUF3QixRQUFRLCtCQUErQixPQUFPLFlBQVksTUFBTSx5QkFBeUIsRUFBRSxzQkFBc0IsNEJBQTRCLGdCQUFnQixrQ0FBa0MsV0FBVyxnQkFBZ0Isd0RBQUMsRUFBRSxrQkFBa0IsT0FBTyxnQkFBZ0IsS0FBSyxFQUFFLHNCQUFzQixJQUFJLGNBQWMsTUFBTSxXQUFXLDRDQUE0QyxNQUFNLDREQUFDLFlBQVksT0FBTyxFQUFFLGVBQWUsVUFBVSxhQUFhLEdBQUcsU0FBUyxHQUFHLElBQUksS0FBSyxLQUFLLEVBQUUsMEJBQTBCLElBQUksU0FBUyxTQUFTLEVBQUUseUJBQXlCLElBQUksU0FBUyxNQUFNLHVDQUF1Qyx1QkFBdUIsTUFBTSxVQUFVLHFCQUFxQixXQUFXLDBCQUEwQixNQUFNLGFBQWEsY0FBYyxnQkFBZ0Isa0JBQWtCLGVBQWUsYUFBYSxPQUFPLGdCQUFnQixLQUFLLEVBQUUsb0JBQW9CLDJDQUEyQyw0REFBQyxJQUFJLE9BQU8sZ0JBQWdCLFVBQVUsSUFBSSxHQUFHLDREQUFDLFlBQVksb0JBQW9CLGFBQWEsT0FBTyxZQUFZLDhCQUE4QiwyQkFBMkIsR0FBRywwQkFBMEIsNEJBQTRCLFlBQVksTUFBTSxVQUFVLE1BQU0sV0FBVyxnQkFBZ0IsV0FBVyxjQUFjLEtBQUssWUFBWSxNQUFNLGFBQWEsTUFBTSxjQUFjLFFBQVEsS0FBSyxFQUFFLDBCQUEwQix3QkFBd0IsU0FBUyxFQUFFLDZDQUFDLCtDQUErQyxrQ0FBa0Msd0JBQXdCLG9EQUFvRCwyQ0FBMkMsd0JBQXdCLEtBQUssOEJBQThCLHdCQUF3QixnRUFBZ0UsOENBQThDLFVBQVUsc0JBQXNCLE9BQU8scURBQUMsWUFBWSxPQUFPLDREQUFDLElBQUksS0FBSyx3QkFBd0IsTUFBTSxvREFBQyxJQUFJLFlBQVksVUFBVSxPQUFPLHFEQUFDLFlBQVksT0FBTyw4REFBQyxZQUFZLG1CQUFtQixFQUFFLEtBQUssNEJBQTRCLE1BQU0sb0RBQUMsSUFBSSxZQUFZLHVEQUFDLFlBQVksT0FBTyw0REFBQyxZQUFZLG1CQUFtQixFQUFFLEtBQW1EIiwic291cmNlcyI6WyJDOlxcbGFyc193b3JrXFxla3NhbWVuXFxiaWJsaW8tY2FzZVxcYmlibGlvXFxub2RlX21vZHVsZXNcXEBwcmVhY3RcXHNpZ25hbHNcXGRpc3RcXHNpZ25hbHMubW9kdWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtDb21wb25lbnQgYXMgaSxvcHRpb25zIGFzIHIsaXNWYWxpZEVsZW1lbnQgYXMgbn1mcm9tXCJwcmVhY3RcIjtpbXBvcnR7dXNlTWVtbyBhcyB0LHVzZVJlZiBhcyBmLHVzZUVmZmVjdCBhcyBvfWZyb21cInByZWFjdC9ob29rc1wiO2ltcG9ydHtTaWduYWwgYXMgZSxjb21wdXRlZCBhcyB1LHNpZ25hbCBhcyBhLGVmZmVjdCBhcyBjfWZyb21cIkBwcmVhY3Qvc2lnbmFscy1jb3JlXCI7ZXhwb3J0e1NpZ25hbCxiYXRjaCxjb21wdXRlZCxlZmZlY3Qsc2lnbmFsLHVudHJhY2tlZH1mcm9tXCJAcHJlYWN0L3NpZ25hbHMtY29yZVwiO3ZhciB2LHM7ZnVuY3Rpb24gbChpLG4pe3JbaV09bi5iaW5kKG51bGwscltpXXx8ZnVuY3Rpb24oKXt9KX1mdW5jdGlvbiBkKGkpe2lmKHMpcygpO3M9aSYmaS5TKCl9ZnVuY3Rpb24gaChpKXt2YXIgcj10aGlzLGY9aS5kYXRhLG89dXNlU2lnbmFsKGYpO28udmFsdWU9Zjt2YXIgZT10KGZ1bmN0aW9uKCl7dmFyIGk9ci5fX3Y7d2hpbGUoaT1pLl9fKWlmKGkuX19jKXtpLl9fYy5fXyRmfD00O2JyZWFrfXIuX18kdS5jPWZ1bmN0aW9uKCl7dmFyIGksdD1yLl9fJHUuUygpLGY9ZS52YWx1ZTt0KCk7aWYobihmKXx8MyE9PShudWxsPT0oaT1yLmJhc2UpP3ZvaWQgMDppLm5vZGVUeXBlKSl7ci5fXyRmfD0xO3Iuc2V0U3RhdGUoe30pfWVsc2Ugci5iYXNlLmRhdGE9Zn07cmV0dXJuIHUoZnVuY3Rpb24oKXt2YXIgaT1vLnZhbHVlLnZhbHVlO3JldHVybiAwPT09aT8wOiEwPT09aT9cIlwiOml8fFwiXCJ9KX0sW10pO3JldHVybiBlLnZhbHVlfWguZGlzcGxheU5hbWU9XCJfc3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTp2b2lkIDB9LHR5cGU6e2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTpofSxwcm9wczp7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybntkYXRhOnRoaXN9fX0sX19iOntjb25maWd1cmFibGU6ITAsdmFsdWU6MX19KTtsKFwiX19iXCIsZnVuY3Rpb24oaSxyKXtpZihcInN0cmluZ1wiPT10eXBlb2Ygci50eXBlKXt2YXIgbix0PXIucHJvcHM7Zm9yKHZhciBmIGluIHQpaWYoXCJjaGlsZHJlblwiIT09Zil7dmFyIG89dFtmXTtpZihvIGluc3RhbmNlb2YgZSl7aWYoIW4pci5fX25wPW49e307bltmXT1vO3RbZl09by5wZWVrKCl9fX1pKHIpfSk7bChcIl9fclwiLGZ1bmN0aW9uKGkscil7ZCgpO3ZhciBuLHQ9ci5fX2M7aWYodCl7dC5fXyRmJj0tMjtpZih2b2lkIDA9PT0obj10Ll9fJHUpKXQuX18kdT1uPWZ1bmN0aW9uKGkpe3ZhciByO2MoZnVuY3Rpb24oKXtyPXRoaXN9KTtyLmM9ZnVuY3Rpb24oKXt0Ll9fJGZ8PTE7dC5zZXRTdGF0ZSh7fSl9O3JldHVybiByfSgpfXY9dDtkKG4pO2kocil9KTtsKFwiX19lXCIsZnVuY3Rpb24oaSxyLG4sdCl7ZCgpO3Y9dm9pZCAwO2kocixuLHQpfSk7bChcImRpZmZlZFwiLGZ1bmN0aW9uKGkscil7ZCgpO3Y9dm9pZCAwO3ZhciBuO2lmKFwic3RyaW5nXCI9PXR5cGVvZiByLnR5cGUmJihuPXIuX19lKSl7dmFyIHQ9ci5fX25wLGY9ci5wcm9wcztpZih0KXt2YXIgbz1uLlU7aWYobylmb3IodmFyIGUgaW4gbyl7dmFyIHU9b1tlXTtpZih2b2lkIDAhPT11JiYhKGUgaW4gdCkpe3UuZCgpO29bZV09dm9pZCAwfX1lbHNlIG4uVT1vPXt9O2Zvcih2YXIgYSBpbiB0KXt2YXIgYz1vW2FdLHM9dFthXTtpZih2b2lkIDA9PT1jKXtjPXAobixhLHMsZik7b1thXT1jfWVsc2UgYy5vKHMsZil9fX1pKHIpfSk7ZnVuY3Rpb24gcChpLHIsbix0KXt2YXIgZj1yIGluIGkmJnZvaWQgMD09PWkub3duZXJTVkdFbGVtZW50LG89YShuKTtyZXR1cm57bzpmdW5jdGlvbihpLHIpe28udmFsdWU9aTt0PXJ9LGQ6YyhmdW5jdGlvbigpe3ZhciBuPW8udmFsdWUudmFsdWU7aWYodFtyXSE9PW4pe3Rbcl09bjtpZihmKWlbcl09bjtlbHNlIGlmKG4paS5zZXRBdHRyaWJ1dGUocixuKTtlbHNlIGkucmVtb3ZlQXR0cmlidXRlKHIpfX0pfX1sKFwidW5tb3VudFwiLGZ1bmN0aW9uKGkscil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHIudHlwZSl7dmFyIG49ci5fX2U7aWYobil7dmFyIHQ9bi5VO2lmKHQpe24uVT12b2lkIDA7Zm9yKHZhciBmIGluIHQpe3ZhciBvPXRbZl07aWYobylvLmQoKX19fX1lbHNle3ZhciBlPXIuX19jO2lmKGUpe3ZhciB1PWUuX18kdTtpZih1KXtlLl9fJHU9dm9pZCAwO3UuZCgpfX19aShyKX0pO2woXCJfX2hcIixmdW5jdGlvbihpLHIsbix0KXtpZih0PDN8fDk9PT10KXIuX18kZnw9MjtpKHIsbix0KX0pO2kucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihpLHIpe3ZhciBuPXRoaXMuX18kdSx0PW4mJnZvaWQgMCE9PW4ucztmb3IodmFyIGYgaW4gcilyZXR1cm4hMDtpZih0aGlzLl9fZnx8XCJib29sZWFuXCI9PXR5cGVvZiB0aGlzLnUmJiEwPT09dGhpcy51KXtpZighKHR8fDImdGhpcy5fXyRmfHw0JnRoaXMuX18kZikpcmV0dXJuITA7aWYoMSZ0aGlzLl9fJGYpcmV0dXJuITB9ZWxzZXtpZighKHR8fDQmdGhpcy5fXyRmKSlyZXR1cm4hMDtpZigzJnRoaXMuX18kZilyZXR1cm4hMH1mb3IodmFyIG8gaW4gaSlpZihcIl9fc291cmNlXCIhPT1vJiZpW29dIT09dGhpcy5wcm9wc1tvXSlyZXR1cm4hMDtmb3IodmFyIGUgaW4gdGhpcy5wcm9wcylpZighKGUgaW4gaSkpcmV0dXJuITA7cmV0dXJuITF9O2Z1bmN0aW9uIHVzZVNpZ25hbChpKXtyZXR1cm4gdChmdW5jdGlvbigpe3JldHVybiBhKGkpfSxbXSl9ZnVuY3Rpb24gdXNlQ29tcHV0ZWQoaSl7dmFyIHI9ZihpKTtyLmN1cnJlbnQ9aTt2Ll9fJGZ8PTQ7cmV0dXJuIHQoZnVuY3Rpb24oKXtyZXR1cm4gdShmdW5jdGlvbigpe3JldHVybiByLmN1cnJlbnQoKX0pfSxbXSl9ZnVuY3Rpb24gdXNlU2lnbmFsRWZmZWN0KGkpe3ZhciByPWYoaSk7ci5jdXJyZW50PWk7byhmdW5jdGlvbigpe3JldHVybiBjKGZ1bmN0aW9uKCl7cmV0dXJuIHIuY3VycmVudCgpfSl9LFtdKX1leHBvcnR7dXNlQ29tcHV0ZWQsdXNlU2lnbmFsLHVzZVNpZ25hbEVmZmVjdH07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnbmFscy5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@preact/signals/dist/signals.module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(()=>{\"use strict\";var e={413:(e,r,t)=>{var n=t(916);var i=Object.create(null);var a=typeof document===\"undefined\";var o=Array.prototype.forEach;function debounce(e,r){var t=0;return function(){var n=this;var i=arguments;var a=function functionCall(){return e.apply(n,i)};clearTimeout(t);t=setTimeout(a,r)}}function noop(){}function getCurrentScriptUrl(e){var r=i[e];if(!r){if(document.currentScript){r=document.currentScript.src}else{var t=document.getElementsByTagName(\"script\");var a=t[t.length-1];if(a){r=a.src}}i[e]=r}return function(e){if(!r){return null}var t=r.split(/([^\\\\/]+)\\.js$/);var i=t&&t[1];if(!i){return[r.replace(\".js\",\".css\")]}if(!e){return[r.replace(\".js\",\".css\")]}return e.split(\",\").map((function(e){var t=new RegExp(\"\".concat(i,\"\\\\.js$\"),\"g\");return n(r.replace(t,\"\".concat(e.replace(/{fileName}/g,i),\".css\")))}))}}function updateCss(e,r){if(!r){if(!e.href){return}r=e.href.split(\"?\")[0]}if(!isUrlRequest(r)){return}if(e.isLoaded===false){return}if(!r||!(r.indexOf(\".css\")>-1)){return}e.visited=true;var t=e.cloneNode();t.isLoaded=false;t.addEventListener(\"load\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.addEventListener(\"error\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.href=\"\".concat(r,\"?\").concat(Date.now());if(e.nextSibling){e.parentNode.insertBefore(t,e.nextSibling)}else{e.parentNode.appendChild(t)}}function getReloadUrl(e,r){var t;e=n(e,{stripWWW:false});r.some((function(n){if(e.indexOf(r)>-1){t=n}}));return t}function reloadStyle(e){if(!e){return false}var r=document.querySelectorAll(\"link\");var t=false;o.call(r,(function(r){if(!r.href){return}var n=getReloadUrl(r.href,e);if(!isUrlRequest(n)){return}if(r.visited===true){return}if(n){updateCss(r,n);t=true}}));return t}function reloadAll(){var e=document.querySelectorAll(\"link\");o.call(e,(function(e){if(e.visited===true){return}updateCss(e)}))}function isUrlRequest(e){if(!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)){return false}return true}e.exports=function(e,r){if(a){console.log(\"no window.document found, will not HMR CSS\");return noop}var t=getCurrentScriptUrl(e);function update(){var e=t(r.filename);var n=reloadStyle(e);if(r.locals){console.log(\"[HMR] Detected local css modules. Reload all css\");reloadAll();return}if(n){console.log(\"[HMR] css reload %s\",e.join(\" \"))}else{console.log(\"[HMR] Reload all css\");reloadAll()}}return debounce(update,50)}},916:e=>{function normalizeUrl(e){return e.reduce((function(e,r){switch(r){case\"..\":e.pop();break;case\".\":break;default:e.push(r)}return e}),[]).join(\"/\")}e.exports=function(e){e=e.trim();if(/^data:/i.test(e)){return e}var r=e.indexOf(\"//\")!==-1?e.split(\"//\")[0]+\"//\":\"\";var t=e.replace(new RegExp(r,\"i\"),\"\").split(\"/\");var n=t[0].toLowerCase().replace(/\\.$/,\"\");t[0]=\"\";var i=normalizeUrl(t);return r+n+i}}};var r={};function __nccwpck_require__(t){var n=r[t];if(n!==undefined){return n.exports}var i=r[t]={exports:{}};var a=true;try{e[t](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(413);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLGFBQWEsT0FBTyxjQUFjLGFBQWEsMEJBQTBCLG9DQUFvQyw4QkFBOEIsdUJBQXVCLFFBQVEsa0JBQWtCLFdBQVcsZ0JBQWdCLDhCQUE4QixxQkFBcUIsZ0JBQWdCLG1CQUFtQixpQkFBaUIsZ0NBQWdDLFdBQVcsT0FBTywyQkFBMkIsNkJBQTZCLEtBQUssOENBQThDLG9CQUFvQixNQUFNLFNBQVMsT0FBTyxtQkFBbUIsT0FBTyxZQUFZLGdDQUFnQyxjQUFjLE9BQU8sZ0NBQWdDLE9BQU8sZ0NBQWdDLHFDQUFxQyw0Q0FBNEMsMkNBQTJDLFNBQVMsZ0JBQWdCLElBQUksd0JBQXdCLE9BQU8sWUFBWSxPQUFPLHVCQUF1QixxQkFBcUIsT0FBTyx1QkFBdUIsT0FBTyxnQ0FBZ0MsT0FBTyxlQUFlLG9CQUFvQixpQkFBaUIsc0NBQXNDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsdUNBQXVDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsMkNBQTJDLGtCQUFrQiwyQ0FBMkMsS0FBSyw2QkFBNkIsMkJBQTJCLE1BQU0sT0FBTyxlQUFlLEVBQUUsb0JBQW9CLG9CQUFvQixLQUFLLEdBQUcsU0FBUyx3QkFBd0IsT0FBTyxhQUFhLHdDQUF3QyxZQUFZLHNCQUFzQixZQUFZLE9BQU8sNkJBQTZCLHFCQUFxQixPQUFPLHFCQUFxQixPQUFPLE1BQU0sZUFBZSxRQUFRLEdBQUcsU0FBUyxxQkFBcUIsd0NBQXdDLHNCQUFzQixxQkFBcUIsT0FBTyxhQUFhLEdBQUcseUJBQXlCLHlDQUF5QyxhQUFhLFlBQVksd0JBQXdCLE1BQU0sMERBQTBELFlBQVksNkJBQTZCLGtCQUFrQixvQkFBb0IscUJBQXFCLGFBQWEsZ0VBQWdFLFlBQVksT0FBTyxNQUFNLCtDQUErQyxLQUFLLG9DQUFvQyxhQUFhLDRCQUE0QixTQUFTLHlCQUF5QiwrQkFBK0IsVUFBVSxpQkFBaUIsTUFBTSxjQUFjLGtCQUFrQixTQUFTLGdCQUFnQixzQkFBc0IsV0FBVyxzQkFBc0IsU0FBUyxvREFBb0QsaURBQWlELDJDQUEyQyxRQUFRLHNCQUFzQixnQkFBZ0IsU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsiQzpcXGxhcnNfd29ya1xcZWtzYW1lblxcYmlibGlvLWNhc2VcXGJpYmxpb1xcbm9kZV9tb2R1bGVzXFxuZXh0XFxkaXN0XFxjb21waWxlZFxcbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXGhtclxcaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezQxMzooZSxyLHQpPT57dmFyIG49dCg5MTYpO3ZhciBpPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIGE9dHlwZW9mIGRvY3VtZW50PT09XCJ1bmRlZmluZWRcIjt2YXIgbz1BcnJheS5wcm90b3R5cGUuZm9yRWFjaDtmdW5jdGlvbiBkZWJvdW5jZShlLHIpe3ZhciB0PTA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpczt2YXIgaT1hcmd1bWVudHM7dmFyIGE9ZnVuY3Rpb24gZnVuY3Rpb25DYWxsKCl7cmV0dXJuIGUuYXBwbHkobixpKX07Y2xlYXJUaW1lb3V0KHQpO3Q9c2V0VGltZW91dChhLHIpfX1mdW5jdGlvbiBub29wKCl7fWZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwoZSl7dmFyIHI9aVtlXTtpZighcil7aWYoZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7cj1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY31lbHNle3ZhciB0PWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO3ZhciBhPXRbdC5sZW5ndGgtMV07aWYoYSl7cj1hLnNyY319aVtlXT1yfXJldHVybiBmdW5jdGlvbihlKXtpZighcil7cmV0dXJuIG51bGx9dmFyIHQ9ci5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTt2YXIgaT10JiZ0WzFdO2lmKCFpKXtyZXR1cm5bci5yZXBsYWNlKFwiLmpzXCIsXCIuY3NzXCIpXX1pZighZSl7cmV0dXJuW3IucmVwbGFjZShcIi5qc1wiLFwiLmNzc1wiKV19cmV0dXJuIGUuc3BsaXQoXCIsXCIpLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IFJlZ0V4cChcIlwiLmNvbmNhdChpLFwiXFxcXC5qcyRcIiksXCJnXCIpO3JldHVybiBuKHIucmVwbGFjZSh0LFwiXCIuY29uY2F0KGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLGkpLFwiLmNzc1wiKSkpfSkpfX1mdW5jdGlvbiB1cGRhdGVDc3MoZSxyKXtpZighcil7aWYoIWUuaHJlZil7cmV0dXJufXI9ZS5ocmVmLnNwbGl0KFwiP1wiKVswXX1pZighaXNVcmxSZXF1ZXN0KHIpKXtyZXR1cm59aWYoZS5pc0xvYWRlZD09PWZhbHNlKXtyZXR1cm59aWYoIXJ8fCEoci5pbmRleE9mKFwiLmNzc1wiKT4tMSkpe3JldHVybn1lLnZpc2l0ZWQ9dHJ1ZTt2YXIgdD1lLmNsb25lTm9kZSgpO3QuaXNMb2FkZWQ9ZmFsc2U7dC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLChmdW5jdGlvbigpe2lmKHQuaXNMb2FkZWQpe3JldHVybn10LmlzTG9hZGVkPXRydWU7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSkpO3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsKGZ1bmN0aW9uKCl7aWYodC5pc0xvYWRlZCl7cmV0dXJufXQuaXNMb2FkZWQ9dHJ1ZTtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9KSk7dC5ocmVmPVwiXCIuY29uY2F0KHIsXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtpZihlLm5leHRTaWJsaW5nKXtlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsZS5uZXh0U2libGluZyl9ZWxzZXtlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodCl9fWZ1bmN0aW9uIGdldFJlbG9hZFVybChlLHIpe3ZhciB0O2U9bihlLHtzdHJpcFdXVzpmYWxzZX0pO3Iuc29tZSgoZnVuY3Rpb24obil7aWYoZS5pbmRleE9mKHIpPi0xKXt0PW59fSkpO3JldHVybiB0fWZ1bmN0aW9uIHJlbG9hZFN0eWxlKGUpe2lmKCFlKXtyZXR1cm4gZmFsc2V9dmFyIHI9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7dmFyIHQ9ZmFsc2U7by5jYWxsKHIsKGZ1bmN0aW9uKHIpe2lmKCFyLmhyZWYpe3JldHVybn12YXIgbj1nZXRSZWxvYWRVcmwoci5ocmVmLGUpO2lmKCFpc1VybFJlcXVlc3Qobikpe3JldHVybn1pZihyLnZpc2l0ZWQ9PT10cnVlKXtyZXR1cm59aWYobil7dXBkYXRlQ3NzKHIsbik7dD10cnVlfX0pKTtyZXR1cm4gdH1mdW5jdGlvbiByZWxvYWRBbGwoKXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1wiKTtvLmNhbGwoZSwoZnVuY3Rpb24oZSl7aWYoZS52aXNpdGVkPT09dHJ1ZSl7cmV0dXJufXVwZGF0ZUNzcyhlKX0pKX1mdW5jdGlvbiBpc1VybFJlcXVlc3QoZSl7aWYoIS9eW2EtekEtWl1bYS16QS1aXFxkK1xcLS5dKjovLnRlc3QoZSkpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihhKXtjb25zb2xlLmxvZyhcIm5vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTU1wiKTtyZXR1cm4gbm9vcH12YXIgdD1nZXRDdXJyZW50U2NyaXB0VXJsKGUpO2Z1bmN0aW9uIHVwZGF0ZSgpe3ZhciBlPXQoci5maWxlbmFtZSk7dmFyIG49cmVsb2FkU3R5bGUoZSk7aWYoci5sb2NhbHMpe2NvbnNvbGUubG9nKFwiW0hNUl0gRGV0ZWN0ZWQgbG9jYWwgY3NzIG1vZHVsZXMuIFJlbG9hZCBhbGwgY3NzXCIpO3JlbG9hZEFsbCgpO3JldHVybn1pZihuKXtjb25zb2xlLmxvZyhcIltITVJdIGNzcyByZWxvYWQgJXNcIixlLmpvaW4oXCIgXCIpKX1lbHNle2NvbnNvbGUubG9nKFwiW0hNUl0gUmVsb2FkIGFsbCBjc3NcIik7cmVsb2FkQWxsKCl9fXJldHVybiBkZWJvdW5jZSh1cGRhdGUsNTApfX0sOTE2OmU9PntmdW5jdGlvbiBub3JtYWxpemVVcmwoZSl7cmV0dXJuIGUucmVkdWNlKChmdW5jdGlvbihlLHIpe3N3aXRjaChyKXtjYXNlXCIuLlwiOmUucG9wKCk7YnJlYWs7Y2FzZVwiLlwiOmJyZWFrO2RlZmF1bHQ6ZS5wdXNoKHIpfXJldHVybiBlfSksW10pLmpvaW4oXCIvXCIpfWUuZXhwb3J0cz1mdW5jdGlvbihlKXtlPWUudHJpbSgpO2lmKC9eZGF0YTovaS50ZXN0KGUpKXtyZXR1cm4gZX12YXIgcj1lLmluZGV4T2YoXCIvL1wiKSE9PS0xP2Uuc3BsaXQoXCIvL1wiKVswXStcIi8vXCI6XCJcIjt2YXIgdD1lLnJlcGxhY2UobmV3IFJlZ0V4cChyLFwiaVwiKSxcIlwiKS5zcGxpdChcIi9cIik7dmFyIG49dFswXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLFwiXCIpO3RbMF09XCJcIjt2YXIgaT1ub3JtYWxpemVVcmwodCk7cmV0dXJuIHIrbitpfX19O3ZhciByPXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18odCl7dmFyIG49clt0XTtpZihuIT09dW5kZWZpbmVkKXtyZXR1cm4gbi5leHBvcnRzfXZhciBpPXJbdF09e2V4cG9ydHM6e319O3ZhciBhPXRydWU7dHJ5e2VbdF0oaSxpLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7YT1mYWxzZX1maW5hbGx5e2lmKGEpZGVsZXRlIHJbdF19cmV0dXJuIGkuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHQ9X19uY2N3cGNrX3JlcXVpcmVfXyg0MTMpO21vZHVsZS5leHBvcnRzPXR9KSgpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/preact/compat/dist/compat.module.js":
/*!**********************************************************!*\
  !*** ./node_modules/preact/compat/dist/compat.module.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Children: () => (/* binding */ O),\n/* harmony export */   Component: () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_0__.Component),\n/* harmony export */   Fragment: () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   PureComponent: () => (/* binding */ N),\n/* harmony export */   StrictMode: () => (/* binding */ Cn),\n/* harmony export */   Suspense: () => (/* binding */ P),\n/* harmony export */   SuspenseList: () => (/* binding */ B),\n/* harmony export */   __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: () => (/* binding */ hn),\n/* harmony export */   cloneElement: () => (/* binding */ _n),\n/* harmony export */   createContext: () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_0__.createContext),\n/* harmony export */   createElement: () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_0__.createElement),\n/* harmony export */   createFactory: () => (/* binding */ dn),\n/* harmony export */   createPortal: () => (/* binding */ $),\n/* harmony export */   createRef: () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_0__.createRef),\n/* harmony export */   \"default\": () => (/* binding */ Rn),\n/* harmony export */   findDOMNode: () => (/* binding */ Sn),\n/* harmony export */   flushSync: () => (/* binding */ En),\n/* harmony export */   forwardRef: () => (/* binding */ D),\n/* harmony export */   hydrate: () => (/* binding */ tn),\n/* harmony export */   isElement: () => (/* binding */ xn),\n/* harmony export */   isFragment: () => (/* binding */ mn),\n/* harmony export */   isMemo: () => (/* binding */ yn),\n/* harmony export */   isValidElement: () => (/* binding */ pn),\n/* harmony export */   lazy: () => (/* binding */ z),\n/* harmony export */   memo: () => (/* binding */ M),\n/* harmony export */   render: () => (/* binding */ nn),\n/* harmony export */   startTransition: () => (/* binding */ R),\n/* harmony export */   unmountComponentAtNode: () => (/* binding */ bn),\n/* harmony export */   unstable_batchedUpdates: () => (/* binding */ gn),\n/* harmony export */   useCallback: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useCallback),\n/* harmony export */   useContext: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useContext),\n/* harmony export */   useDebugValue: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useDebugValue),\n/* harmony export */   useDeferredValue: () => (/* binding */ w),\n/* harmony export */   useEffect: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useEffect),\n/* harmony export */   useErrorBoundary: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useErrorBoundary),\n/* harmony export */   useId: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useId),\n/* harmony export */   useImperativeHandle: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle),\n/* harmony export */   useInsertionEffect: () => (/* binding */ I),\n/* harmony export */   useLayoutEffect: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect),\n/* harmony export */   useMemo: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useMemo),\n/* harmony export */   useReducer: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useReducer),\n/* harmony export */   useRef: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useRef),\n/* harmony export */   useState: () => (/* reexport safe */ preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useState),\n/* harmony export */   useSyncExternalStore: () => (/* binding */ C),\n/* harmony export */   useTransition: () => (/* binding */ k),\n/* harmony export */   version: () => (/* binding */ vn)\n/* harmony export */ });\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ \"(app-pages-browser)/./node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var preact_hooks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact/hooks */ \"(app-pages-browser)/./node_modules/preact/hooks/dist/hooks.module.js\");\nfunction g(n,t){for(var e in t)n[e]=t[e];return n}function E(n,t){for(var e in n)if(\"__source\"!==e&&!(e in t))return!0;for(var r in t)if(\"__source\"!==r&&n[r]!==t[r])return!0;return!1}function C(n,t){var e=t(),r=(0,preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useState)({t:{__:e,u:t}}),u=r[0].t,o=r[1];return (0,preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(function(){u.__=e,u.u=t,x(u)&&o({t:u})},[n,e,t]),(0,preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function(){return x(u)&&o({t:u}),n(function(){x(u)&&o({t:u})})},[n]),e}function x(n){var t,e,r=n.u,u=n.__;try{var o=r();return!((t=u)===(e=o)&&(0!==t||1/t==1/e)||t!=t&&e!=e)}catch(n){return!0}}function R(n){n()}function w(n){return n}function k(){return[!1,R]}var I=preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect;function N(n,t){this.props=n,this.context=t}function M(n,e){function r(n){var t=this.props.ref,r=t==n.ref;return!r&&t&&(t.call?t(null):t.current=null),e?!e(this.props,n)||!r:E(this.props,n)}function u(e){return this.shouldComponentUpdate=r,(0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(n,e)}return u.displayName=\"Memo(\"+(n.displayName||n.name)+\")\",u.prototype.isReactComponent=!0,u.__f=!0,u}(N.prototype=new preact__WEBPACK_IMPORTED_MODULE_0__.Component).isPureReactComponent=!0,N.prototype.shouldComponentUpdate=function(n,t){return E(this.props,n)||E(this.state,t)};var T=preact__WEBPACK_IMPORTED_MODULE_0__.options.__b;preact__WEBPACK_IMPORTED_MODULE_0__.options.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),T&&T(n)};var A=\"undefined\"!=typeof Symbol&&Symbol.for&&Symbol.for(\"react.forward_ref\")||3911;function D(n){function t(t){var e=g({},t);return delete e.ref,n(e,t.ref||null)}return t.$$typeof=A,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName=\"ForwardRef(\"+(n.displayName||n.name)+\")\",t}var L=function(n,t){return null==n?null:(0,preact__WEBPACK_IMPORTED_MODULE_0__.toChildArray)((0,preact__WEBPACK_IMPORTED_MODULE_0__.toChildArray)(n).map(t))},O={map:L,forEach:L,count:function(n){return n?(0,preact__WEBPACK_IMPORTED_MODULE_0__.toChildArray)(n).length:0},only:function(n){var t=(0,preact__WEBPACK_IMPORTED_MODULE_0__.toChildArray)(n);if(1!==t.length)throw\"Children.only\";return t[0]},toArray:preact__WEBPACK_IMPORTED_MODULE_0__.toChildArray},F=preact__WEBPACK_IMPORTED_MODULE_0__.options.__e;preact__WEBPACK_IMPORTED_MODULE_0__.options.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;)if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);F(n,t,e,r)};var U=preact__WEBPACK_IMPORTED_MODULE_0__.options.unmount;function V(n,t,e){return n&&(n.__c&&n.__c.__H&&(n.__c.__H.__.forEach(function(n){\"function\"==typeof n.__c&&n.__c()}),n.__c.__H=null),null!=(n=g({},n)).__c&&(n.__c.__P===e&&(n.__c.__P=t),n.__c=null),n.__k=n.__k&&n.__k.map(function(n){return V(n,t,e)})),n}function W(n,t,e){return n&&e&&(n.__v=null,n.__k=n.__k&&n.__k.map(function(n){return W(n,t,e)}),n.__c&&n.__c.__P===t&&(n.__e&&e.appendChild(n.__e),n.__c.__e=!0,n.__c.__P=e)),n}function P(){this.__u=0,this.o=null,this.__b=null}function j(n){var t=n.__.__c;return t&&t.__a&&t.__a(n)}function z(n){var e,r,u;function o(o){if(e||(e=n()).then(function(n){r=n.default||n},function(n){u=n}),u)throw u;if(!r)throw e;return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(r,o)}return o.displayName=\"Lazy\",o.__f=!0,o}function B(){this.i=null,this.l=null}preact__WEBPACK_IMPORTED_MODULE_0__.options.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&32&n.__u&&(n.type=null),U&&U(n)},(P.prototype=new preact__WEBPACK_IMPORTED_MODULE_0__.Component).__c=function(n,t){var e=t.__c,r=this;null==r.o&&(r.o=[]),r.o.push(e);var u=j(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(c):c())};e.__R=i;var c=function(){if(!--r.__u){if(r.state.__a){var n=r.state.__a;r.__v.__k[0]=W(n,n.__c.__P,n.__c.__O)}var t;for(r.setState({__a:r.__b=null});t=r.o.pop();)t.forceUpdate()}};r.__u++||32&t.__u||r.setState({__a:r.__b=r.__v.__k[0]}),n.then(i,i)},P.prototype.componentWillUnmount=function(){this.o=[]},P.prototype.render=function(n,e){if(this.__b){if(this.__v.__k){var r=document.createElement(\"div\"),o=this.__v.__k[0].__c;this.__v.__k[0]=V(this.__b,r,o.__O=o.__P)}this.__b=null}var i=e.__a&&(0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(preact__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,n.fallback);return i&&(i.__u&=-33),[(0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(preact__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,e.__a?null:n.children),i]};var H=function(n,t,e){if(++e[1]===e[0]&&n.l.delete(t),n.props.revealOrder&&(\"t\"!==n.props.revealOrder[0]||!n.l.size))for(e=n.i;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.i=e=e[2]}};function Z(n){return this.getChildContext=function(){return n.context},n.children}function Y(n){var e=this,r=n.h;e.componentWillUnmount=function(){(0,preact__WEBPACK_IMPORTED_MODULE_0__.render)(null,e.v),e.v=null,e.h=null},e.h&&e.h!==r&&e.componentWillUnmount(),e.v||(e.h=r,e.v={nodeType:1,parentNode:r,childNodes:[],contains:function(){return!0},appendChild:function(n){this.childNodes.push(n),e.h.appendChild(n)},insertBefore:function(n,t){this.childNodes.push(n),e.h.insertBefore(n,t)},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),e.h.removeChild(n)}}),(0,preact__WEBPACK_IMPORTED_MODULE_0__.render)((0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(Z,{context:e.context},n.__v),e.v)}function $(n,e){var r=(0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(Y,{__v:n,h:e});return r.containerInfo=e,r}(B.prototype=new preact__WEBPACK_IMPORTED_MODULE_0__.Component).__a=function(n){var t=this,e=j(t.__v),r=t.l.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),H(t,n,r)):u()};e?e(o):o()}},B.prototype.render=function(n){this.i=null,this.l=new Map;var t=(0,preact__WEBPACK_IMPORTED_MODULE_0__.toChildArray)(n.children);n.revealOrder&&\"b\"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.l.set(t[e],this.i=[1,0,this.i]);return n.children},B.prototype.componentDidUpdate=B.prototype.componentDidMount=function(){var n=this;this.l.forEach(function(t,e){H(n,e,t)})};var q=\"undefined\"!=typeof Symbol&&Symbol.for&&Symbol.for(\"react.element\")||60103,G=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,J=/^on(Ani|Tra|Tou|BeforeInp|Compo)/,K=/[A-Z0-9]/g,Q=\"undefined\"!=typeof document,X=function(n){return(\"undefined\"!=typeof Symbol&&\"symbol\"==typeof Symbol()?/fil|che|rad/:/fil|che|ra/).test(n)};function nn(n,t,e){return null==t.__k&&(t.textContent=\"\"),(0,preact__WEBPACK_IMPORTED_MODULE_0__.render)(n,t),\"function\"==typeof e&&e(),n?n.__c:null}function tn(n,t,e){return (0,preact__WEBPACK_IMPORTED_MODULE_0__.hydrate)(n,t),\"function\"==typeof e&&e(),n?n.__c:null}preact__WEBPACK_IMPORTED_MODULE_0__.Component.prototype.isReactComponent={},[\"componentWillMount\",\"componentWillReceiveProps\",\"componentWillUpdate\"].forEach(function(t){Object.defineProperty(preact__WEBPACK_IMPORTED_MODULE_0__.Component.prototype,t,{configurable:!0,get:function(){return this[\"UNSAFE_\"+t]},set:function(n){Object.defineProperty(this,t,{configurable:!0,writable:!0,value:n})}})});var en=preact__WEBPACK_IMPORTED_MODULE_0__.options.event;function rn(){}function un(){return this.cancelBubble}function on(){return this.defaultPrevented}preact__WEBPACK_IMPORTED_MODULE_0__.options.event=function(n){return en&&(n=en(n)),n.persist=rn,n.isPropagationStopped=un,n.isDefaultPrevented=on,n.nativeEvent=n};var cn,ln={enumerable:!1,configurable:!0,get:function(){return this.class}},fn=preact__WEBPACK_IMPORTED_MODULE_0__.options.vnode;preact__WEBPACK_IMPORTED_MODULE_0__.options.vnode=function(n){\"string\"==typeof n.type&&function(n){var t=n.props,e=n.type,u={},o=-1===e.indexOf(\"-\");for(var i in t){var c=t[i];if(!(\"value\"===i&&\"defaultValue\"in t&&null==c||Q&&\"children\"===i&&\"noscript\"===e||\"class\"===i||\"className\"===i)){var l=i.toLowerCase();\"defaultValue\"===i&&\"value\"in t&&null==t.value?i=\"value\":\"download\"===i&&!0===c?c=\"\":\"translate\"===l&&\"no\"===c?c=!1:\"o\"===l[0]&&\"n\"===l[1]?\"ondoubleclick\"===l?i=\"ondblclick\":\"onchange\"!==l||\"input\"!==e&&\"textarea\"!==e||X(t.type)?\"onfocus\"===l?i=\"onfocusin\":\"onblur\"===l?i=\"onfocusout\":J.test(i)&&(i=l):l=i=\"oninput\":o&&G.test(i)?i=i.replace(K,\"-$&\").toLowerCase():null===c&&(c=void 0),\"oninput\"===l&&u[i=l]&&(i=\"oninputCapture\"),u[i]=c}}\"select\"==e&&u.multiple&&Array.isArray(u.value)&&(u.value=(0,preact__WEBPACK_IMPORTED_MODULE_0__.toChildArray)(t.children).forEach(function(n){n.props.selected=-1!=u.value.indexOf(n.props.value)})),\"select\"==e&&null!=u.defaultValue&&(u.value=(0,preact__WEBPACK_IMPORTED_MODULE_0__.toChildArray)(t.children).forEach(function(n){n.props.selected=u.multiple?-1!=u.defaultValue.indexOf(n.props.value):u.defaultValue==n.props.value})),t.class&&!t.className?(u.class=t.class,Object.defineProperty(u,\"className\",ln)):(t.className&&!t.class||t.class&&t.className)&&(u.class=u.className=t.className),n.props=u}(n),n.$$typeof=q,fn&&fn(n)};var an=preact__WEBPACK_IMPORTED_MODULE_0__.options.__r;preact__WEBPACK_IMPORTED_MODULE_0__.options.__r=function(n){an&&an(n),cn=n.__c};var sn=preact__WEBPACK_IMPORTED_MODULE_0__.options.diffed;preact__WEBPACK_IMPORTED_MODULE_0__.options.diffed=function(n){sn&&sn(n);var t=n.props,e=n.__e;null!=e&&\"textarea\"===n.type&&\"value\"in t&&t.value!==e.value&&(e.value=null==t.value?\"\":t.value),cn=null};var hn={ReactCurrentDispatcher:{current:{readContext:function(n){return cn.__n[n.__c].props.value},useCallback:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useCallback,useContext:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useContext,useDebugValue:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useDebugValue,useDeferredValue:w,useEffect:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useEffect,useId:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useId,useImperativeHandle:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle,useInsertionEffect:I,useLayoutEffect:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect,useMemo:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useMemo,useReducer:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useReducer,useRef:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useRef,useState:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useState,useSyncExternalStore:C,useTransition:k}}},vn=\"18.3.1\";function dn(n){return preact__WEBPACK_IMPORTED_MODULE_0__.createElement.bind(null,n)}function pn(n){return!!n&&n.$$typeof===q}function mn(n){return pn(n)&&n.type===preact__WEBPACK_IMPORTED_MODULE_0__.Fragment}function yn(n){return!!n&&!!n.displayName&&(\"string\"==typeof n.displayName||n.displayName instanceof String)&&n.displayName.startsWith(\"Memo(\")}function _n(n){return pn(n)?preact__WEBPACK_IMPORTED_MODULE_0__.cloneElement.apply(null,arguments):n}function bn(n){return!!n.__k&&((0,preact__WEBPACK_IMPORTED_MODULE_0__.render)(null,n),!0)}function Sn(n){return n&&(n.base||1===n.nodeType&&n)||null}var gn=function(n,t){return n(t)},En=function(n,t){return n(t)},Cn=preact__WEBPACK_IMPORTED_MODULE_0__.Fragment,xn=pn,Rn={useState:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useState,useId:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useId,useReducer:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useReducer,useEffect:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useEffect,useLayoutEffect:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect,useInsertionEffect:I,useTransition:k,useDeferredValue:w,useSyncExternalStore:C,startTransition:R,useRef:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useRef,useImperativeHandle:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle,useMemo:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useMemo,useCallback:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useCallback,useContext:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useContext,useDebugValue:preact_hooks__WEBPACK_IMPORTED_MODULE_1__.useDebugValue,version:\"18.3.1\",Children:O,render:nn,hydrate:tn,unmountComponentAtNode:bn,createPortal:$,createElement:preact__WEBPACK_IMPORTED_MODULE_0__.createElement,createContext:preact__WEBPACK_IMPORTED_MODULE_0__.createContext,createFactory:dn,cloneElement:_n,createRef:preact__WEBPACK_IMPORTED_MODULE_0__.createRef,Fragment:preact__WEBPACK_IMPORTED_MODULE_0__.Fragment,isValidElement:pn,isElement:xn,isFragment:mn,isMemo:yn,findDOMNode:Sn,Component:preact__WEBPACK_IMPORTED_MODULE_0__.Component,PureComponent:N,memo:M,forwardRef:D,flushSync:En,unstable_batchedUpdates:gn,StrictMode:Cn,Suspense:P,SuspenseList:B,lazy:z,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:hn};\n//# sourceMappingURL=compat.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/preact/compat/dist/compat.module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/preact/dist/preact.module.js":
/*!***************************************************!*\
  !*** ./node_modules/preact/dist/preact.module.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Component: () => (/* binding */ x),\n/* harmony export */   Fragment: () => (/* binding */ k),\n/* harmony export */   cloneElement: () => (/* binding */ G),\n/* harmony export */   createContext: () => (/* binding */ J),\n/* harmony export */   createElement: () => (/* binding */ _),\n/* harmony export */   createRef: () => (/* binding */ b),\n/* harmony export */   h: () => (/* binding */ _),\n/* harmony export */   hydrate: () => (/* binding */ E),\n/* harmony export */   isValidElement: () => (/* binding */ t),\n/* harmony export */   options: () => (/* binding */ l),\n/* harmony export */   render: () => (/* binding */ D),\n/* harmony export */   toChildArray: () => (/* binding */ H)\n/* harmony export */ });\nvar n,l,u,t,i,r,o,e,f,c,s,a,h,p={},v=[],y=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,d=Array.isArray;function w(n,l){for(var u in l)n[u]=l[u];return n}function g(n){n&&n.parentNode&&n.parentNode.removeChild(n)}function _(l,u,t){var i,r,o,e={};for(o in u)\"key\"==o?i=u[o]:\"ref\"==o?r=u[o]:e[o]=u[o];if(arguments.length>2&&(e.children=arguments.length>3?n.call(arguments,2):t),\"function\"==typeof l&&null!=l.defaultProps)for(o in l.defaultProps)void 0===e[o]&&(e[o]=l.defaultProps[o]);return m(l,e,i,r,null)}function m(n,t,i,r,o){var e={type:n,props:t,key:i,ref:r,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:null==o?++u:o,__i:-1,__u:0};return null==o&&null!=l.vnode&&l.vnode(e),e}function b(){return{current:null}}function k(n){return n.children}function x(n,l){this.props=n,this.context=l}function S(n,l){if(null==l)return n.__?S(n.__,n.__i+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return\"function\"==typeof n.type?S(n):null}function C(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return C(n)}}function M(n){(!n.__d&&(n.__d=!0)&&i.push(n)&&!$.__r++||r!==l.debounceRendering)&&((r=l.debounceRendering)||o)($)}function $(){for(var n,u,t,r,o,f,c,s=1;i.length;)i.length>s&&i.sort(e),n=i.shift(),s=i.length,n.__d&&(t=void 0,o=(r=(u=n).__v).__e,f=[],c=[],u.__P&&((t=w({},r)).__v=r.__v+1,l.vnode&&l.vnode(t),j(u.__P,t,r,u.__n,u.__P.namespaceURI,32&r.__u?[o]:null,f,null==o?S(r):o,!!(32&r.__u),c),t.__v=r.__v,t.__.__k[t.__i]=t,z(f,t,c),t.__e!=o&&C(t)));$.__r=0}function I(n,l,u,t,i,r,o,e,f,c,s){var a,h,y,d,w,g,_=t&&t.__k||v,m=l.length;for(f=P(u,l,_,f,m),a=0;a<m;a++)null!=(y=u.__k[a])&&(h=-1===y.__i?p:_[y.__i]||p,y.__i=a,g=j(n,y,h,i,r,o,e,f,c,s),d=y.__e,y.ref&&h.ref!=y.ref&&(h.ref&&V(h.ref,null,y),s.push(y.ref,y.__c||d,y)),null==w&&null!=d&&(w=d),4&y.__u||h.__k===y.__k?f=A(y,f,n):\"function\"==typeof y.type&&void 0!==g?f=g:d&&(f=d.nextSibling),y.__u&=-7);return u.__e=w,f}function P(n,l,u,t,i){var r,o,e,f,c,s=u.length,a=s,h=0;for(n.__k=new Array(i),r=0;r<i;r++)null!=(o=l[r])&&\"boolean\"!=typeof o&&\"function\"!=typeof o?(f=r+h,(o=n.__k[r]=\"string\"==typeof o||\"number\"==typeof o||\"bigint\"==typeof o||o.constructor==String?m(null,o,null,null,null):d(o)?m(k,{children:o},null,null,null):void 0===o.constructor&&o.__b>0?m(o.type,o.props,o.key,o.ref?o.ref:null,o.__v):o).__=n,o.__b=n.__b+1,e=null,-1!==(c=o.__i=L(o,u,f,a))&&(a--,(e=u[c])&&(e.__u|=2)),null==e||null===e.__v?(-1==c&&h--,\"function\"!=typeof o.type&&(o.__u|=4)):c!=f&&(c==f-1?h--:c==f+1?h++:(c>f?h--:h++,o.__u|=4))):n.__k[r]=null;if(a)for(r=0;r<s;r++)null!=(e=u[r])&&0==(2&e.__u)&&(e.__e==t&&(t=S(e)),q(e,e));return t}function A(n,l,u){var t,i;if(\"function\"==typeof n.type){for(t=n.__k,i=0;t&&i<t.length;i++)t[i]&&(t[i].__=n,l=A(t[i],l,u));return l}n.__e!=l&&(l&&n.type&&!u.contains(l)&&(l=S(n)),u.insertBefore(n.__e,l||null),l=n.__e);do{l=l&&l.nextSibling}while(null!=l&&8==l.nodeType);return l}function H(n,l){return l=l||[],null==n||\"boolean\"==typeof n||(d(n)?n.some(function(n){H(n,l)}):l.push(n)),l}function L(n,l,u,t){var i,r,o=n.key,e=n.type,f=l[u];if(null===f||f&&o==f.key&&e===f.type&&0==(2&f.__u))return u;if(t>(null!=f&&0==(2&f.__u)?1:0))for(i=u-1,r=u+1;i>=0||r<l.length;){if(i>=0){if((f=l[i])&&0==(2&f.__u)&&o==f.key&&e===f.type)return i;i--}if(r<l.length){if((f=l[r])&&0==(2&f.__u)&&o==f.key&&e===f.type)return r;r++}}return-1}function T(n,l,u){\"-\"==l[0]?n.setProperty(l,null==u?\"\":u):n[l]=null==u?\"\":\"number\"!=typeof u||y.test(l)?u:u+\"px\"}function F(n,l,u,t,i){var r;n:if(\"style\"==l)if(\"string\"==typeof u)n.style.cssText=u;else{if(\"string\"==typeof t&&(n.style.cssText=t=\"\"),t)for(l in t)u&&l in u||T(n.style,l,\"\");if(u)for(l in u)t&&u[l]===t[l]||T(n.style,l,u[l])}else if(\"o\"==l[0]&&\"n\"==l[1])r=l!=(l=l.replace(f,\"$1\")),l=l.toLowerCase()in n||\"onFocusOut\"==l||\"onFocusIn\"==l?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+r]=u,u?t?u.u=t.u:(u.u=c,n.addEventListener(l,r?a:s,r)):n.removeEventListener(l,r?a:s,r);else{if(\"http://www.w3.org/2000/svg\"==i)l=l.replace(/xlink(H|:h)/,\"h\").replace(/sName$/,\"s\");else if(\"width\"!=l&&\"height\"!=l&&\"href\"!=l&&\"list\"!=l&&\"form\"!=l&&\"tabIndex\"!=l&&\"download\"!=l&&\"rowSpan\"!=l&&\"colSpan\"!=l&&\"role\"!=l&&\"popover\"!=l&&l in n)try{n[l]=null==u?\"\":u;break n}catch(n){}\"function\"==typeof u||(null==u||!1===u&&\"-\"!=l[4]?n.removeAttribute(l):n.setAttribute(l,\"popover\"==l&&1==u?\"\":u))}}function O(n){return function(u){if(this.l){var t=this.l[u.type+n];if(null==u.t)u.t=c++;else if(u.t<t.u)return;return t(l.event?l.event(u):u)}}}function j(n,u,t,i,r,o,e,f,c,s){var a,h,p,v,y,_,m,b,S,C,M,$,P,A,H,L,T,F,O=u.type;if(void 0!==u.constructor)return null;128&t.__u&&(c=!!(32&t.__u),o=[f=u.__e=t.__e]),(a=l.__b)&&a(u);n:if(\"function\"==typeof O)try{if(b=u.props,S=\"prototype\"in O&&O.prototype.render,C=(a=O.contextType)&&i[a.__c],M=a?C?C.props.value:a.__:i,t.__c?m=(h=u.__c=t.__c).__=h.__E:(S?u.__c=h=new O(b,M):(u.__c=h=new x(b,M),h.constructor=O,h.render=B),C&&C.sub(h),h.props=b,h.state||(h.state={}),h.context=M,h.__n=i,p=h.__d=!0,h.__h=[],h._sb=[]),S&&null==h.__s&&(h.__s=h.state),S&&null!=O.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=w({},h.__s)),w(h.__s,O.getDerivedStateFromProps(b,h.__s))),v=h.props,y=h.state,h.__v=u,p)S&&null==O.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),S&&null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(S&&null==O.getDerivedStateFromProps&&b!==v&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(b,M),!h.__e&&(null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(b,h.__s,M)||u.__v==t.__v)){for(u.__v!=t.__v&&(h.props=b,h.state=h.__s,h.__d=!1),u.__e=t.__e,u.__k=t.__k,u.__k.some(function(n){n&&(n.__=u)}),$=0;$<h._sb.length;$++)h.__h.push(h._sb[$]);h._sb=[],h.__h.length&&e.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(b,h.__s,M),S&&null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(v,y,_)})}if(h.context=M,h.props=b,h.__P=n,h.__e=!1,P=l.__r,A=0,S){for(h.state=h.__s,h.__d=!1,P&&P(u),a=h.render(h.props,h.state,h.context),H=0;H<h._sb.length;H++)h.__h.push(h._sb[H]);h._sb=[]}else do{h.__d=!1,P&&P(u),a=h.render(h.props,h.state,h.context),h.state=h.__s}while(h.__d&&++A<25);h.state=h.__s,null!=h.getChildContext&&(i=w(w({},i),h.getChildContext())),S&&!p&&null!=h.getSnapshotBeforeUpdate&&(_=h.getSnapshotBeforeUpdate(v,y)),T=(L=null!=a&&a.type===k&&null==a.key)?a.props.children:a,L&&(a.props.children=null),f=I(n,d(T)?T:[T],u,t,i,r,o,e,f,c,s),h.base=u.__e,u.__u&=-161,h.__h.length&&e.push(h),m&&(h.__E=h.__=null)}catch(n){if(u.__v=null,c||null!=o)if(n.then){for(u.__u|=c?160:128;f&&8==f.nodeType&&f.nextSibling;)f=f.nextSibling;o[o.indexOf(f)]=null,u.__e=f}else for(F=o.length;F--;)g(o[F]);else u.__e=t.__e,u.__k=t.__k;l.__e(n,u,t)}else null==o&&u.__v==t.__v?(u.__k=t.__k,u.__e=t.__e):f=u.__e=N(t.__e,u,t,i,r,o,e,c,s);return(a=l.diffed)&&a(u),128&u.__u?void 0:f}function z(n,u,t){for(var i=0;i<t.length;i++)V(t[i],t[++i],t[++i]);l.__c&&l.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u)})}catch(n){l.__e(n,u.__v)}})}function N(u,t,i,r,o,e,f,c,s){var a,h,v,y,w,_,m,b=i.props,k=t.props,x=t.type;if(\"svg\"==x?o=\"http://www.w3.org/2000/svg\":\"math\"==x?o=\"http://www.w3.org/1998/Math/MathML\":o||(o=\"http://www.w3.org/1999/xhtml\"),null!=e)for(a=0;a<e.length;a++)if((w=e[a])&&\"setAttribute\"in w==!!x&&(x?w.localName==x:3==w.nodeType)){u=w,e[a]=null;break}if(null==u){if(null==x)return document.createTextNode(k);u=document.createElementNS(o,x,k.is&&k),c&&(l.__m&&l.__m(t,e),c=!1),e=null}if(null===x)b===k||c&&u.data===k||(u.data=k);else{if(e=e&&n.call(u.childNodes),b=i.props||p,!c&&null!=e)for(b={},a=0;a<u.attributes.length;a++)b[(w=u.attributes[a]).name]=w.value;for(a in b)if(w=b[a],\"children\"==a);else if(\"dangerouslySetInnerHTML\"==a)v=w;else if(!(a in k)){if(\"value\"==a&&\"defaultValue\"in k||\"checked\"==a&&\"defaultChecked\"in k)continue;F(u,a,null,w,o)}for(a in k)w=k[a],\"children\"==a?y=w:\"dangerouslySetInnerHTML\"==a?h=w:\"value\"==a?_=w:\"checked\"==a?m=w:c&&\"function\"!=typeof w||b[a]===w||F(u,a,w,b[a],o);if(h)c||v&&(h.__html===v.__html||h.__html===u.innerHTML)||(u.innerHTML=h.__html),t.__k=[];else if(v&&(u.innerHTML=\"\"),I(\"template\"===t.type?u.content:u,d(y)?y:[y],t,i,r,\"foreignObject\"==x?\"http://www.w3.org/1999/xhtml\":o,e,f,e?e[0]:i.__k&&S(i,0),c,s),null!=e)for(a=e.length;a--;)g(e[a]);c||(a=\"value\",\"progress\"==x&&null==_?u.removeAttribute(\"value\"):void 0!==_&&(_!==u[a]||\"progress\"==x&&!_||\"option\"==x&&_!==b[a])&&F(u,a,_,b[a],o),a=\"checked\",void 0!==m&&m!==u[a]&&F(u,a,m,b[a],o))}return u}function V(n,u,t){try{if(\"function\"==typeof n){var i=\"function\"==typeof n.__u;i&&n.__u(),i&&null==u||(n.__u=n(u))}else n.current=u}catch(n){l.__e(n,t)}}function q(n,u,t){var i,r;if(l.unmount&&l.unmount(n),(i=n.ref)&&(i.current&&i.current!==n.__e||V(i,null,u)),null!=(i=n.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(n){l.__e(n,u)}i.base=i.__P=null}if(i=n.__k)for(r=0;r<i.length;r++)i[r]&&q(i[r],u,t||\"function\"!=typeof n.type);t||g(n.__e),n.__c=n.__=n.__e=void 0}function B(n,l,u){return this.constructor(n,u)}function D(u,t,i){var r,o,e,f;t==document&&(t=document.documentElement),l.__&&l.__(u,t),o=(r=\"function\"==typeof i)?null:i&&i.__k||t.__k,e=[],f=[],j(t,u=(!r&&i||t).__k=_(k,null,[u]),o||p,p,t.namespaceURI,!r&&i?[i]:o?null:t.firstChild?n.call(t.childNodes):null,e,!r&&i?i:o?o.__e:t.firstChild,r,f),z(e,u,f)}function E(n,l){D(n,l,E)}function G(l,u,t){var i,r,o,e,f=w({},l.props);for(o in l.type&&l.type.defaultProps&&(e=l.type.defaultProps),u)\"key\"==o?i=u[o]:\"ref\"==o?r=u[o]:f[o]=void 0===u[o]&&void 0!==e?e[o]:u[o];return arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):t),m(l.type,f,i||l.key,r||l.ref,null)}function J(n){function l(n){var u,t;return this.getChildContext||(u=new Set,(t={})[l.__c]=this,this.getChildContext=function(){return t},this.componentWillUnmount=function(){u=null},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.forEach(function(n){n.__e=!0,M(n)})},this.sub=function(n){u.add(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u&&u.delete(n),l&&l.call(n)}}),n.children}return l.__c=\"__cC\"+h++,l.__=n,l.Provider=l.__l=(l.Consumer=function(n,l){return n.children(l)}).contextType=l,l}n=v.slice,l={__e:function(n,l,u,t){for(var i,r,o;l=l.__;)if((i=l.__c)&&!i.__)try{if((r=i.constructor)&&null!=r.getDerivedStateFromError&&(i.setState(r.getDerivedStateFromError(n)),o=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(n,t||{}),o=i.__d),o)return i.__E=i}catch(l){n=l}throw n}},u=0,t=function(n){return null!=n&&null==n.constructor},x.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=w({},this.state),\"function\"==typeof n&&(n=n(w({},u),this.props)),n&&w(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),M(this))},x.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),M(this))},x.prototype.render=k,i=[],o=\"function\"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,e=function(n,l){return n.__v.__b-l.__v.__b},$.__r=0,f=/(PointerCapture)$|Capture$/i,c=0,s=O(!1),a=O(!0),h=0;\n//# sourceMappingURL=preact.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/preact/dist/preact.module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/preact/hooks/dist/hooks.module.js":
/*!********************************************************!*\
  !*** ./node_modules/preact/hooks/dist/hooks.module.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCallback: () => (/* binding */ q),\n/* harmony export */   useContext: () => (/* binding */ x),\n/* harmony export */   useDebugValue: () => (/* binding */ P),\n/* harmony export */   useEffect: () => (/* binding */ y),\n/* harmony export */   useErrorBoundary: () => (/* binding */ b),\n/* harmony export */   useId: () => (/* binding */ g),\n/* harmony export */   useImperativeHandle: () => (/* binding */ F),\n/* harmony export */   useLayoutEffect: () => (/* binding */ _),\n/* harmony export */   useMemo: () => (/* binding */ T),\n/* harmony export */   useReducer: () => (/* binding */ h),\n/* harmony export */   useRef: () => (/* binding */ A),\n/* harmony export */   useState: () => (/* binding */ d)\n/* harmony export */ });\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ \"(app-pages-browser)/./node_modules/preact/dist/preact.module.js\");\nvar t,r,u,i,o=0,f=[],c=preact__WEBPACK_IMPORTED_MODULE_0__.options,e=c.__b,a=c.__r,v=c.diffed,l=c.__c,m=c.unmount,s=c.__;function p(n,t){c.__h&&c.__h(r,n,o||t),o=0;var u=r.__H||(r.__H={__:[],__h:[]});return n>=u.__.length&&u.__.push({}),u.__[n]}function d(n){return o=1,h(D,n)}function h(n,u,i){var o=p(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):D(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}))}],o.__c=r,!r.__f)){var f=function(n,t,r){if(!o.__c.__H)return!0;var u=o.__c.__H.__.filter(function(n){return!!n.__c});if(u.every(function(n){return!n.__N}))return!c||c.call(this,n,t,r);var i=o.__c.props!==n;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0)}}),c&&c.call(this,n,t,r)||i};r.__f=!0;var c=r.shouldComponentUpdate,e=r.componentWillUpdate;r.componentWillUpdate=function(n,t,r){if(this.__e){var u=c;c=void 0,f(n,t,r),c=u}e&&e.call(this,n,t,r)},r.shouldComponentUpdate=f}return o.__N||o.__}function y(n,u){var i=p(t++,3);!c.__s&&C(i.__H,u)&&(i.__=n,i.u=u,r.__H.__h.push(i))}function _(n,u){var i=p(t++,4);!c.__s&&C(i.__H,u)&&(i.__=n,i.u=u,r.__h.push(i))}function A(n){return o=5,T(function(){return{current:n}},[])}function F(n,t,r){o=6,_(function(){if(\"function\"==typeof n){var r=n(t());return function(){n(null),r&&\"function\"==typeof r&&r()}}if(n)return n.current=t(),function(){return n.current=null}},null==r?r:r.concat(n))}function T(n,r){var u=p(t++,7);return C(u.__H,r)&&(u.__=n(),u.__H=r,u.__h=n),u.__}function q(n,t){return o=8,T(function(){return n},t)}function x(n){var u=r.context[n.__c],i=p(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r)),u.props.value):n.__}function P(n,t){c.useDebugValue&&c.useDebugValue(t?t(n):n)}function b(n){var u=p(t++,10),i=d();return u.__=n,r.componentDidCatch||(r.componentDidCatch=function(n,t){u.__&&u.__(n,t),i[1](n)}),[i[0],function(){i[1](void 0)}]}function g(){var n=p(t++,11);if(!n.__){for(var u=r.__v;null!==u&&!u.__m&&null!==u.__;)u=u.__;var i=u.__m||(u.__m=[0,0]);n.__=\"P\"+i[0]+\"-\"+i[1]++}return n.__}function j(){for(var n;n=f.shift();)if(n.__P&&n.__H)try{n.__H.__h.forEach(z),n.__H.__h.forEach(B),n.__H.__h=[]}catch(t){n.__H.__h=[],c.__e(t,n.__v)}}c.__b=function(n){r=null,e&&e(n)},c.__=function(n,t){n&&t.__k&&t.__k.__m&&(n.__m=t.__k.__m),s&&s(n,t)},c.__r=function(n){a&&a(n),t=0;var i=(r=n.__c).__H;i&&(u===r?(i.__h=[],r.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.u=n.__N=void 0})):(i.__h.forEach(z),i.__h.forEach(B),i.__h=[],t=0)),u=r},c.diffed=function(n){v&&v(n);var t=n.__c;t&&t.__H&&(t.__H.__h.length&&(1!==f.push(t)&&i===c.requestAnimationFrame||((i=c.requestAnimationFrame)||w)(j)),t.__H.__.forEach(function(n){n.u&&(n.__H=n.u),n.u=void 0})),u=r=null},c.__c=function(n,t){t.some(function(n){try{n.__h.forEach(z),n.__h=n.__h.filter(function(n){return!n.__||B(n)})}catch(r){t.some(function(n){n.__h&&(n.__h=[])}),t=[],c.__e(r,n.__v)}}),l&&l(n,t)},c.unmount=function(n){m&&m(n);var t,r=n.__c;r&&r.__H&&(r.__H.__.forEach(function(n){try{z(n)}catch(n){t=n}}),r.__H=void 0,t&&c.__e(t,r.__v))};var k=\"function\"==typeof requestAnimationFrame;function w(n){var t,r=function(){clearTimeout(u),k&&cancelAnimationFrame(t),setTimeout(n)},u=setTimeout(r,100);k&&(t=requestAnimationFrame(r))}function z(n){var t=r,u=n.__c;\"function\"==typeof u&&(n.__c=void 0,u()),r=t}function B(n){var t=r;n.__c=n.__(),r=t}function C(n,t){return!n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function D(n,t){return\"function\"==typeof t?t(n):t}\n//# sourceMappingURL=hooks.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmVhY3QvaG9va3MvZGlzdC9ob29rcy5tb2R1bGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFpQyx1QkFBdUIsMkNBQUMsdURBQXVELGdCQUFnQiwyQkFBMkIscUJBQXFCLGFBQWEsRUFBRSxtQ0FBbUMsVUFBVSxjQUFjLGtCQUFrQixrQkFBa0IsZUFBZSx1REFBdUQsd0NBQXdDLDJDQUEyQyxHQUFHLG1CQUFtQixzQkFBc0IsdUJBQXVCLHNDQUFzQyxjQUFjLEVBQUUsdUJBQXVCLGFBQWEsK0JBQStCLHNCQUFzQiw2QkFBNkIsVUFBVSxjQUFjLDZDQUE2Qyw0QkFBNEIsU0FBUyxzREFBc0Qsc0NBQXNDLGFBQWEsUUFBUSxzQkFBc0Isc0JBQXNCLDJCQUEyQixtQkFBbUIsZ0JBQWdCLGVBQWUscURBQXFELGdCQUFnQixlQUFlLGlEQUFpRCxjQUFjLHdCQUF3QixPQUFPLFdBQVcsS0FBSyxrQkFBa0IsaUJBQWlCLHlCQUF5QixhQUFhLGtCQUFrQixzQ0FBc0MscUNBQXFDLHVCQUF1Qix3QkFBd0IsZ0JBQWdCLGVBQWUsbURBQW1ELGdCQUFnQix3QkFBd0IsU0FBUyxJQUFJLGNBQWMsa0NBQWtDLG1FQUFtRSxnQkFBZ0IsMkNBQTJDLGNBQWMsc0JBQXNCLHNFQUFzRSx3QkFBd0IsbUJBQW1CLGFBQWEsRUFBRSxhQUFhLGdCQUFnQixVQUFVLGdCQUFnQiw4QkFBOEIsUUFBUSwyQkFBMkIseUJBQXlCLFlBQVksYUFBYSxVQUFVLFlBQVkscUJBQXFCLHVEQUF1RCxTQUFTLDZCQUE2QixrQkFBa0IsZUFBZSxvQkFBb0IsaURBQWlELG1CQUFtQixZQUFZLG9CQUFvQixzREFBc0QscUNBQXFDLHlEQUF5RCxzQkFBc0IsUUFBUSxZQUFZLDRJQUE0SSw0QkFBNEIsWUFBWSxxQkFBcUIsbUJBQW1CLElBQUksZ0RBQWdELGtCQUFrQixFQUFFLFNBQVMsbUJBQW1CLGtCQUFrQix1QkFBdUIsWUFBWSx1QkFBdUIsUUFBUSxjQUFjLHdDQUF3QyxJQUFJLEtBQUssU0FBUyxLQUFLLG1DQUFtQywrQ0FBK0MsY0FBYyxtQkFBbUIseURBQXlELHFCQUFxQixnQ0FBZ0MsY0FBYyxnQkFBZ0IsNkNBQTZDLGNBQWMsUUFBUSxpQkFBaUIsZ0JBQWdCLG9EQUFvRCxnQkFBZ0IsRUFBRSxnQkFBZ0Isa0NBQW1QO0FBQ2hvSCIsInNvdXJjZXMiOlsiQzpcXGxhcnNfd29ya1xcZWtzYW1lblxcYmlibGlvLWNhc2VcXGJpYmxpb1xcbm9kZV9tb2R1bGVzXFxwcmVhY3RcXGhvb2tzXFxkaXN0XFxob29rcy5tb2R1bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e29wdGlvbnMgYXMgbn1mcm9tXCJwcmVhY3RcIjt2YXIgdCxyLHUsaSxvPTAsZj1bXSxjPW4sZT1jLl9fYixhPWMuX19yLHY9Yy5kaWZmZWQsbD1jLl9fYyxtPWMudW5tb3VudCxzPWMuX187ZnVuY3Rpb24gcChuLHQpe2MuX19oJiZjLl9faChyLG4sb3x8dCksbz0wO3ZhciB1PXIuX19IfHwoci5fX0g9e19fOltdLF9faDpbXX0pO3JldHVybiBuPj11Ll9fLmxlbmd0aCYmdS5fXy5wdXNoKHt9KSx1Ll9fW25dfWZ1bmN0aW9uIGQobil7cmV0dXJuIG89MSxoKEQsbil9ZnVuY3Rpb24gaChuLHUsaSl7dmFyIG89cCh0KyssMik7aWYoby50PW4sIW8uX19jJiYoby5fXz1baT9pKHUpOkQodm9pZCAwLHUpLGZ1bmN0aW9uKG4pe3ZhciB0PW8uX19OP28uX19OWzBdOm8uX19bMF0scj1vLnQodCxuKTt0IT09ciYmKG8uX19OPVtyLG8uX19bMV1dLG8uX19jLnNldFN0YXRlKHt9KSl9XSxvLl9fYz1yLCFyLl9fZikpe3ZhciBmPWZ1bmN0aW9uKG4sdCxyKXtpZighby5fX2MuX19IKXJldHVybiEwO3ZhciB1PW8uX19jLl9fSC5fXy5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuISFuLl9fY30pO2lmKHUuZXZlcnkoZnVuY3Rpb24obil7cmV0dXJuIW4uX19OfSkpcmV0dXJuIWN8fGMuY2FsbCh0aGlzLG4sdCxyKTt2YXIgaT1vLl9fYy5wcm9wcyE9PW47cmV0dXJuIHUuZm9yRWFjaChmdW5jdGlvbihuKXtpZihuLl9fTil7dmFyIHQ9bi5fX1swXTtuLl9fPW4uX19OLG4uX19OPXZvaWQgMCx0IT09bi5fX1swXSYmKGk9ITApfX0pLGMmJmMuY2FsbCh0aGlzLG4sdCxyKXx8aX07ci5fX2Y9ITA7dmFyIGM9ci5zaG91bGRDb21wb25lbnRVcGRhdGUsZT1yLmNvbXBvbmVudFdpbGxVcGRhdGU7ci5jb21wb25lbnRXaWxsVXBkYXRlPWZ1bmN0aW9uKG4sdCxyKXtpZih0aGlzLl9fZSl7dmFyIHU9YztjPXZvaWQgMCxmKG4sdCxyKSxjPXV9ZSYmZS5jYWxsKHRoaXMsbix0LHIpfSxyLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mfXJldHVybiBvLl9fTnx8by5fX31mdW5jdGlvbiB5KG4sdSl7dmFyIGk9cCh0KyssMyk7IWMuX19zJiZDKGkuX19ILHUpJiYoaS5fXz1uLGkudT11LHIuX19ILl9faC5wdXNoKGkpKX1mdW5jdGlvbiBfKG4sdSl7dmFyIGk9cCh0KyssNCk7IWMuX19zJiZDKGkuX19ILHUpJiYoaS5fXz1uLGkudT11LHIuX19oLnB1c2goaSkpfWZ1bmN0aW9uIEEobil7cmV0dXJuIG89NSxUKGZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bn19LFtdKX1mdW5jdGlvbiBGKG4sdCxyKXtvPTYsXyhmdW5jdGlvbigpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pe3ZhciByPW4odCgpKTtyZXR1cm4gZnVuY3Rpb24oKXtuKG51bGwpLHImJlwiZnVuY3Rpb25cIj09dHlwZW9mIHImJnIoKX19aWYobilyZXR1cm4gbi5jdXJyZW50PXQoKSxmdW5jdGlvbigpe3JldHVybiBuLmN1cnJlbnQ9bnVsbH19LG51bGw9PXI/cjpyLmNvbmNhdChuKSl9ZnVuY3Rpb24gVChuLHIpe3ZhciB1PXAodCsrLDcpO3JldHVybiBDKHUuX19ILHIpJiYodS5fXz1uKCksdS5fX0g9cix1Ll9faD1uKSx1Ll9ffWZ1bmN0aW9uIHEobix0KXtyZXR1cm4gbz04LFQoZnVuY3Rpb24oKXtyZXR1cm4gbn0sdCl9ZnVuY3Rpb24geChuKXt2YXIgdT1yLmNvbnRleHRbbi5fX2NdLGk9cCh0KyssOSk7cmV0dXJuIGkuYz1uLHU/KG51bGw9PWkuX18mJihpLl9fPSEwLHUuc3ViKHIpKSx1LnByb3BzLnZhbHVlKTpuLl9ffWZ1bmN0aW9uIFAobix0KXtjLnVzZURlYnVnVmFsdWUmJmMudXNlRGVidWdWYWx1ZSh0P3Qobik6bil9ZnVuY3Rpb24gYihuKXt2YXIgdT1wKHQrKywxMCksaT1kKCk7cmV0dXJuIHUuX189bixyLmNvbXBvbmVudERpZENhdGNofHwoci5jb21wb25lbnREaWRDYXRjaD1mdW5jdGlvbihuLHQpe3UuX18mJnUuX18obix0KSxpWzFdKG4pfSksW2lbMF0sZnVuY3Rpb24oKXtpWzFdKHZvaWQgMCl9XX1mdW5jdGlvbiBnKCl7dmFyIG49cCh0KyssMTEpO2lmKCFuLl9fKXtmb3IodmFyIHU9ci5fX3Y7bnVsbCE9PXUmJiF1Ll9fbSYmbnVsbCE9PXUuX187KXU9dS5fXzt2YXIgaT11Ll9fbXx8KHUuX19tPVswLDBdKTtuLl9fPVwiUFwiK2lbMF0rXCItXCIraVsxXSsrfXJldHVybiBuLl9ffWZ1bmN0aW9uIGooKXtmb3IodmFyIG47bj1mLnNoaWZ0KCk7KWlmKG4uX19QJiZuLl9fSCl0cnl7bi5fX0guX19oLmZvckVhY2goeiksbi5fX0guX19oLmZvckVhY2goQiksbi5fX0guX19oPVtdfWNhdGNoKHQpe24uX19ILl9faD1bXSxjLl9fZSh0LG4uX192KX19Yy5fX2I9ZnVuY3Rpb24obil7cj1udWxsLGUmJmUobil9LGMuX189ZnVuY3Rpb24obix0KXtuJiZ0Ll9fayYmdC5fX2suX19tJiYobi5fX209dC5fX2suX19tKSxzJiZzKG4sdCl9LGMuX19yPWZ1bmN0aW9uKG4pe2EmJmEobiksdD0wO3ZhciBpPShyPW4uX19jKS5fX0g7aSYmKHU9PT1yPyhpLl9faD1bXSxyLl9faD1bXSxpLl9fLmZvckVhY2goZnVuY3Rpb24obil7bi5fX04mJihuLl9fPW4uX19OKSxuLnU9bi5fX049dm9pZCAwfSkpOihpLl9faC5mb3JFYWNoKHopLGkuX19oLmZvckVhY2goQiksaS5fX2g9W10sdD0wKSksdT1yfSxjLmRpZmZlZD1mdW5jdGlvbihuKXt2JiZ2KG4pO3ZhciB0PW4uX19jO3QmJnQuX19IJiYodC5fX0guX19oLmxlbmd0aCYmKDEhPT1mLnB1c2godCkmJmk9PT1jLnJlcXVlc3RBbmltYXRpb25GcmFtZXx8KChpPWMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKXx8dykoaikpLHQuX19ILl9fLmZvckVhY2goZnVuY3Rpb24obil7bi51JiYobi5fX0g9bi51KSxuLnU9dm9pZCAwfSkpLHU9cj1udWxsfSxjLl9fYz1mdW5jdGlvbihuLHQpe3Quc29tZShmdW5jdGlvbihuKXt0cnl7bi5fX2guZm9yRWFjaCh6KSxuLl9faD1uLl9faC5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuIW4uX198fEIobil9KX1jYXRjaChyKXt0LnNvbWUoZnVuY3Rpb24obil7bi5fX2gmJihuLl9faD1bXSl9KSx0PVtdLGMuX19lKHIsbi5fX3YpfX0pLGwmJmwobix0KX0sYy51bm1vdW50PWZ1bmN0aW9uKG4pe20mJm0obik7dmFyIHQscj1uLl9fYztyJiZyLl9fSCYmKHIuX19ILl9fLmZvckVhY2goZnVuY3Rpb24obil7dHJ5e3oobil9Y2F0Y2gobil7dD1ufX0pLHIuX19IPXZvaWQgMCx0JiZjLl9fZSh0LHIuX192KSl9O3ZhciBrPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZTtmdW5jdGlvbiB3KG4pe3ZhciB0LHI9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSksayYmY2FuY2VsQW5pbWF0aW9uRnJhbWUodCksc2V0VGltZW91dChuKX0sdT1zZXRUaW1lb3V0KHIsMTAwKTtrJiYodD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocikpfWZ1bmN0aW9uIHoobil7dmFyIHQ9cix1PW4uX19jO1wiZnVuY3Rpb25cIj09dHlwZW9mIHUmJihuLl9fYz12b2lkIDAsdSgpKSxyPXR9ZnVuY3Rpb24gQihuKXt2YXIgdD1yO24uX19jPW4uX18oKSxyPXR9ZnVuY3Rpb24gQyhuLHQpe3JldHVybiFufHxuLmxlbmd0aCE9PXQubGVuZ3RofHx0LnNvbWUoZnVuY3Rpb24odCxyKXtyZXR1cm4gdCE9PW5bcl19KX1mdW5jdGlvbiBEKG4sdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD90KG4pOnR9ZXhwb3J0e3EgYXMgdXNlQ2FsbGJhY2sseCBhcyB1c2VDb250ZXh0LFAgYXMgdXNlRGVidWdWYWx1ZSx5IGFzIHVzZUVmZmVjdCxiIGFzIHVzZUVycm9yQm91bmRhcnksZyBhcyB1c2VJZCxGIGFzIHVzZUltcGVyYXRpdmVIYW5kbGUsXyBhcyB1c2VMYXlvdXRFZmZlY3QsVCBhcyB1c2VNZW1vLGggYXMgdXNlUmVkdWNlcixBIGFzIHVzZVJlZixkIGFzIHVzZVN0YXRlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhvb2tzLm1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/preact/hooks/dist/hooks.module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js":
/*!*******************************************************************!*\
  !*** ./node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Fragment: () => (/* reexport safe */ preact__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   jsx: () => (/* binding */ u),\n/* harmony export */   jsxAttr: () => (/* binding */ l),\n/* harmony export */   jsxDEV: () => (/* binding */ u),\n/* harmony export */   jsxEscape: () => (/* binding */ s),\n/* harmony export */   jsxTemplate: () => (/* binding */ a),\n/* harmony export */   jsxs: () => (/* binding */ u)\n/* harmony export */ });\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ \"(app-pages-browser)/./node_modules/preact/dist/preact.module.js\");\nvar t=/[\"&<]/;function n(r){if(0===r.length||!1===t.test(r))return r;for(var e=0,n=0,o=\"\",f=\"\";n<r.length;n++){switch(r.charCodeAt(n)){case 34:f=\"&quot;\";break;case 38:f=\"&amp;\";break;case 60:f=\"&lt;\";break;default:continue}n!==e&&(o+=r.slice(e,n)),o+=f,e=n+1}return n!==e&&(o+=r.slice(e,n)),o}var o=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,f=0,i=Array.isArray;function u(e,t,n,o,i,u){t||(t={});var a,c,p=t;if(\"ref\"in p)for(c in p={},t)\"ref\"==c?a=t[c]:p[c]=t[c];var l={type:e,props:p,key:n,ref:a,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:--f,__i:-1,__u:0,__source:i,__self:u};if(\"function\"==typeof e&&(a=e.defaultProps))for(c in a)void 0===p[c]&&(p[c]=a[c]);return preact__WEBPACK_IMPORTED_MODULE_0__.options.vnode&&preact__WEBPACK_IMPORTED_MODULE_0__.options.vnode(l),l}function a(r){var t=u(preact__WEBPACK_IMPORTED_MODULE_0__.Fragment,{tpl:r,exprs:[].slice.call(arguments,1)});return t.key=t.__v,t}var c={},p=/[A-Z]/g;function l(e,t){if(preact__WEBPACK_IMPORTED_MODULE_0__.options.attr){var f=preact__WEBPACK_IMPORTED_MODULE_0__.options.attr(e,t);if(\"string\"==typeof f)return f}if(\"ref\"===e||\"key\"===e)return\"\";if(\"style\"===e&&\"object\"==typeof t){var i=\"\";for(var u in t){var a=t[u];if(null!=a&&\"\"!==a){var l=\"-\"==u[0]?u:c[u]||(c[u]=u.replace(p,\"-$&\").toLowerCase()),s=\";\";\"number\"!=typeof a||l.startsWith(\"--\")||o.test(l)||(s=\"px;\"),i=i+l+\":\"+a+s}}return e+'=\"'+i+'\"'}return null==t||!1===t||\"function\"==typeof t||\"object\"==typeof t?\"\":!0===t?e:e+'=\"'+n(t)+'\"'}function s(r){if(null==r||\"boolean\"==typeof r||\"function\"==typeof r)return null;if(\"object\"==typeof r){if(void 0===r.constructor)return r;if(i(r)){for(var e=0;e<r.length;e++)r[e]=s(r[e]);return r}}return n(\"\"+r)}\n//# sourceMappingURL=jsxRuntime.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcmVhY3QvanN4LXJ1bnRpbWUvZGlzdC9qc3hSdW50aW1lLm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUE0RSxjQUFjLGNBQWMseUNBQXlDLDBCQUEwQixXQUFXLEtBQUssd0JBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsb0NBQW9DLGtDQUFrQyw4RkFBOEYsd0JBQXdCLFFBQVEsRUFBRSxZQUFZLDBCQUEwQiw2QkFBNkIsT0FBTyxpSUFBaUksa0ZBQWtGLE9BQU8sMkNBQUMsUUFBUSwyQ0FBQyxZQUFZLGNBQWMsUUFBUSw0Q0FBQyxFQUFFLHVDQUF1QyxFQUFFLHFCQUFxQixRQUFRLFlBQVksZ0JBQWdCLEdBQUcsMkNBQUMsT0FBTyxNQUFNLDJDQUFDLFdBQVcsK0JBQStCLGlDQUFpQyxvQ0FBb0MsU0FBUyxnQkFBZ0IsV0FBVyxvQkFBb0Isb0VBQW9FLEVBQUUsMERBQTBELGtCQUFrQixvQkFBb0IsNkZBQTZGLGNBQWMsa0VBQWtFLHVCQUF1QixtQ0FBbUMsU0FBUyxZQUFZLFdBQVcsaUJBQWlCLFVBQVUsZUFBbUc7QUFDM29EIiwic291cmNlcyI6WyJDOlxcbGFyc193b3JrXFxla3NhbWVuXFxiaWJsaW8tY2FzZVxcYmlibGlvXFxub2RlX21vZHVsZXNcXHByZWFjdFxcanN4LXJ1bnRpbWVcXGRpc3RcXGpzeFJ1bnRpbWUubW9kdWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtvcHRpb25zIGFzIHIsRnJhZ21lbnQgYXMgZX1mcm9tXCJwcmVhY3RcIjtleHBvcnR7RnJhZ21lbnR9ZnJvbVwicHJlYWN0XCI7dmFyIHQ9L1tcIiY8XS87ZnVuY3Rpb24gbihyKXtpZigwPT09ci5sZW5ndGh8fCExPT09dC50ZXN0KHIpKXJldHVybiByO2Zvcih2YXIgZT0wLG49MCxvPVwiXCIsZj1cIlwiO248ci5sZW5ndGg7bisrKXtzd2l0Y2goci5jaGFyQ29kZUF0KG4pKXtjYXNlIDM0OmY9XCImcXVvdDtcIjticmVhaztjYXNlIDM4OmY9XCImYW1wO1wiO2JyZWFrO2Nhc2UgNjA6Zj1cIiZsdDtcIjticmVhaztkZWZhdWx0OmNvbnRpbnVlfW4hPT1lJiYobys9ci5zbGljZShlLG4pKSxvKz1mLGU9bisxfXJldHVybiBuIT09ZSYmKG8rPXIuc2xpY2UoZSxuKSksb312YXIgbz0vYWNpdHxleCg/OnN8Z3xufHB8JCl8cnBofGdyaWR8b3dzfG1uY3xudHd8aW5lW2NoXXx6b298Xm9yZHxpdGVyYS9pLGY9MCxpPUFycmF5LmlzQXJyYXk7ZnVuY3Rpb24gdShlLHQsbixvLGksdSl7dHx8KHQ9e30pO3ZhciBhLGMscD10O2lmKFwicmVmXCJpbiBwKWZvcihjIGluIHA9e30sdClcInJlZlwiPT1jP2E9dFtjXTpwW2NdPXRbY107dmFyIGw9e3R5cGU6ZSxwcm9wczpwLGtleTpuLHJlZjphLF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19jOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjotLWYsX19pOi0xLF9fdTowLF9fc291cmNlOmksX19zZWxmOnV9O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihhPWUuZGVmYXVsdFByb3BzKSlmb3IoYyBpbiBhKXZvaWQgMD09PXBbY10mJihwW2NdPWFbY10pO3JldHVybiByLnZub2RlJiZyLnZub2RlKGwpLGx9ZnVuY3Rpb24gYShyKXt2YXIgdD11KGUse3RwbDpyLGV4cHJzOltdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpfSk7cmV0dXJuIHQua2V5PXQuX192LHR9dmFyIGM9e30scD0vW0EtWl0vZztmdW5jdGlvbiBsKGUsdCl7aWYoci5hdHRyKXt2YXIgZj1yLmF0dHIoZSx0KTtpZihcInN0cmluZ1wiPT10eXBlb2YgZilyZXR1cm4gZn1pZihcInJlZlwiPT09ZXx8XCJrZXlcIj09PWUpcmV0dXJuXCJcIjtpZihcInN0eWxlXCI9PT1lJiZcIm9iamVjdFwiPT10eXBlb2YgdCl7dmFyIGk9XCJcIjtmb3IodmFyIHUgaW4gdCl7dmFyIGE9dFt1XTtpZihudWxsIT1hJiZcIlwiIT09YSl7dmFyIGw9XCItXCI9PXVbMF0/dTpjW3VdfHwoY1t1XT11LnJlcGxhY2UocCxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpKSxzPVwiO1wiO1wibnVtYmVyXCIhPXR5cGVvZiBhfHxsLnN0YXJ0c1dpdGgoXCItLVwiKXx8by50ZXN0KGwpfHwocz1cInB4O1wiKSxpPWkrbCtcIjpcIithK3N9fXJldHVybiBlKyc9XCInK2krJ1wiJ31yZXR1cm4gbnVsbD09dHx8ITE9PT10fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0fHxcIm9iamVjdFwiPT10eXBlb2YgdD9cIlwiOiEwPT09dD9lOmUrJz1cIicrbih0KSsnXCInfWZ1bmN0aW9uIHMocil7aWYobnVsbD09cnx8XCJib29sZWFuXCI9PXR5cGVvZiByfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiByKXJldHVybiBudWxsO2lmKFwib2JqZWN0XCI9PXR5cGVvZiByKXtpZih2b2lkIDA9PT1yLmNvbnN0cnVjdG9yKXJldHVybiByO2lmKGkocikpe2Zvcih2YXIgZT0wO2U8ci5sZW5ndGg7ZSsrKXJbZV09cyhyW2VdKTtyZXR1cm4gcn19cmV0dXJuIG4oXCJcIityKX1leHBvcnR7dSBhcyBqc3gsbCBhcyBqc3hBdHRyLHUgYXMganN4REVWLHMgYXMganN4RXNjYXBlLGEgYXMganN4VGVtcGxhdGUsdSBhcyBqc3hzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzeFJ1bnRpbWUubW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"d8d6a1d7b200\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJDOlxcbGFyc193b3JrXFxla3NhbWVuXFxiaWJsaW8tY2FzZVxcYmlibGlvXFxzcmNcXGFwcFxcZ2xvYmFscy5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJkOGQ2YTFkN2IyMDBcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/ReactScanComponent.tsx":
/*!************************************!*\
  !*** ./src/ReactScanComponent.tsx ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactScan: () => (/* binding */ ReactScan)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_scan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-scan */ \"(app-pages-browser)/./node_modules/react-scan/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n// path/to/ReactScanComponent\n/* __next_internal_client_entry_do_not_use__ ReactScan auto */ \nvar _s = $RefreshSig$();\n// react-scan must be imported before react\n\n\nfunction ReactScan() {\n    _s();\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"ReactScan.useEffect\": ()=>{\n            (0,react_scan__WEBPACK_IMPORTED_MODULE_1__.scan)({\n                enabled: true\n            });\n        }\n    }[\"ReactScan.useEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, void 0, false);\n}\n_s(ReactScan, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ReactScan;\nvar _c;\n$RefreshReg$(_c, \"ReactScan\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9SZWFjdFNjYW5Db21wb25lbnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsNkJBQTZCOzs7QUFFN0IsMkNBQTJDO0FBQ1Q7QUFDSztBQUVoQyxTQUFTRTs7SUFDZEQsZ0RBQVNBOytCQUFDO1lBQ1JELGdEQUFJQSxDQUFDO2dCQUNIRyxTQUFTO1lBQ1g7UUFDRjs4QkFBRyxFQUFFO0lBRUwscUJBQU87QUFDVDtHQVJnQkQ7S0FBQUEiLCJzb3VyY2VzIjpbIkM6XFxsYXJzX3dvcmtcXGVrc2FtZW5cXGJpYmxpby1jYXNlXFxiaWJsaW9cXHNyY1xcUmVhY3RTY2FuQ29tcG9uZW50LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYXRoL3RvL1JlYWN0U2NhbkNvbXBvbmVudFxyXG5cInVzZSBjbGllbnRcIjtcclxuLy8gcmVhY3Qtc2NhbiBtdXN0IGJlIGltcG9ydGVkIGJlZm9yZSByZWFjdFxyXG5pbXBvcnQgeyBzY2FuIH0gZnJvbSBcInJlYWN0LXNjYW5cIjtcclxuaW1wb3J0IHsgSlNYLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBSZWFjdFNjYW4oKTogSlNYLkVsZW1lbnQge1xyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBzY2FuKHtcclxuICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgIH0pO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgcmV0dXJuIDw+PC8+O1xyXG59Il0sIm5hbWVzIjpbInNjYW4iLCJ1c2VFZmZlY3QiLCJSZWFjdFNjYW4iLCJlbmFibGVkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/ReactScanComponent.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Geist\",\"arguments\":[{\"variable\":\"--font-geist-sans\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistSans\"}":
/*!*************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/font/google/target.css?{"path":"src\\app\\layout.tsx","import":"Geist","arguments":[{"variable":"--font-geist-sans","subsets":["latin"]}],"variableName":"geistSans"} ***!
  \*************************************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'Geist', 'Geist Fallback'\",\"fontStyle\":\"normal\"},\"className\":\"__className_4d318d\",\"variable\":\"__variable_4d318d\"};\n    if(true) {\n      // 1742157541057\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1wicGF0aFwiOlwic3JjXFxcXGFwcFxcXFxsYXlvdXQudHN4XCIsXCJpbXBvcnRcIjpcIkdlaXN0XCIsXCJhcmd1bWVudHNcIjpbe1widmFyaWFibGVcIjpcIi0tZm9udC1nZWlzdC1zYW5zXCIsXCJzdWJzZXRzXCI6W1wibGF0aW5cIl19XSxcInZhcmlhYmxlTmFtZVwiOlwiZ2Vpc3RTYW5zXCJ9IiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCLFNBQVMsOERBQThEO0FBQ3pGLE9BQU8sSUFBVTtBQUNqQjtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLHdNQUE2SCxjQUFjLHNEQUFzRDtBQUMvTixNQUFNLFVBQVU7QUFDaEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcbGFyc193b3JrXFxla3NhbWVuXFxiaWJsaW8tY2FzZVxcYmlibGlvXFxub2RlX21vZHVsZXNcXG5leHRcXGZvbnRcXGdvb2dsZVxcdGFyZ2V0LmNzcz97XCJwYXRoXCI6XCJzcmNcXGFwcFxcbGF5b3V0LnRzeFwiLFwiaW1wb3J0XCI6XCJHZWlzdFwiLFwiYXJndW1lbnRzXCI6W3tcInZhcmlhYmxlXCI6XCItLWZvbnQtZ2Vpc3Qtc2Fuc1wiLFwic3Vic2V0c1wiOltcImxhdGluXCJdfV0sXCJ2YXJpYWJsZU5hbWVcIjpcImdlaXN0U2Fuc1wifXxhcHAtcGFnZXMtYnJvd3NlciJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic3R5bGVcIjp7XCJmb250RmFtaWx5XCI6XCInR2Vpc3QnLCAnR2Vpc3QgRmFsbGJhY2snXCIsXCJmb250U3R5bGVcIjpcIm5vcm1hbFwifSxcImNsYXNzTmFtZVwiOlwiX19jbGFzc05hbWVfNGQzMThkXCIsXCJ2YXJpYWJsZVwiOlwiX192YXJpYWJsZV80ZDMxOGRcIn07XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTc0MjE1NzU0MTA1N1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJDOi9sYXJzX3dvcmsvZWtzYW1lbi9iaWJsaW8tY2FzZS9iaWJsaW8vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJwdWJsaWNQYXRoXCI6XCIvX25leHQvXCIsXCJlc01vZHVsZVwiOmZhbHNlLFwibG9jYWxzXCI6dHJ1ZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Geist\",\"arguments\":[{\"variable\":\"--font-geist-sans\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistSans\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Geist_Mono\",\"arguments\":[{\"variable\":\"--font-geist-mono\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistMono\"}":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/font/google/target.css?{"path":"src\\app\\layout.tsx","import":"Geist_Mono","arguments":[{"variable":"--font-geist-mono","subsets":["latin"]}],"variableName":"geistMono"} ***!
  \******************************************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'Geist Mono', 'Geist Mono Fallback'\",\"fontStyle\":\"normal\"},\"className\":\"__className_ea5f4b\",\"variable\":\"__variable_ea5f4b\"};\n    if(true) {\n      // 1742157541041\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1wicGF0aFwiOlwic3JjXFxcXGFwcFxcXFxsYXlvdXQudHN4XCIsXCJpbXBvcnRcIjpcIkdlaXN0X01vbm9cIixcImFyZ3VtZW50c1wiOlt7XCJ2YXJpYWJsZVwiOlwiLS1mb250LWdlaXN0LW1vbm9cIixcInN1YnNldHNcIjpbXCJsYXRpblwiXX1dLFwidmFyaWFibGVOYW1lXCI6XCJnZWlzdE1vbm9cIn0iLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQkFBa0IsU0FBUyx3RUFBd0U7QUFDbkcsT0FBTyxJQUFVO0FBQ2pCO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsd01BQTZILGNBQWMsc0RBQXNEO0FBQy9OLE1BQU0sVUFBVTtBQUNoQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxsYXJzX3dvcmtcXGVrc2FtZW5cXGJpYmxpby1jYXNlXFxiaWJsaW9cXG5vZGVfbW9kdWxlc1xcbmV4dFxcZm9udFxcZ29vZ2xlXFx0YXJnZXQuY3NzP3tcInBhdGhcIjpcInNyY1xcYXBwXFxsYXlvdXQudHN4XCIsXCJpbXBvcnRcIjpcIkdlaXN0X01vbm9cIixcImFyZ3VtZW50c1wiOlt7XCJ2YXJpYWJsZVwiOlwiLS1mb250LWdlaXN0LW1vbm9cIixcInN1YnNldHNcIjpbXCJsYXRpblwiXX1dLFwidmFyaWFibGVOYW1lXCI6XCJnZWlzdE1vbm9cIn18YXBwLXBhZ2VzLWJyb3dzZXIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInN0eWxlXCI6e1wiZm9udEZhbWlseVwiOlwiJ0dlaXN0IE1vbm8nLCAnR2Vpc3QgTW9ubyBGYWxsYmFjaydcIixcImZvbnRTdHlsZVwiOlwibm9ybWFsXCJ9LFwiY2xhc3NOYW1lXCI6XCJfX2NsYXNzTmFtZV9lYTVmNGJcIixcInZhcmlhYmxlXCI6XCJfX3ZhcmlhYmxlX2VhNWY0YlwifTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNzQyMTU3NTQxMDQxXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIkM6L2xhcnNfd29yay9la3NhbWVuL2JpYmxpby1jYXNlL2JpYmxpby9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIi9fbmV4dC9cIixcImVzTW9kdWxlXCI6ZmFsc2UsXCJsb2NhbHNcIjp0cnVlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIFxuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Geist_Mono\",\"arguments\":[{\"variable\":\"--font-geist-mono\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistMono\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE$2\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function disabledLog() {}\n    function disableLogs() {\n      if (0 === disabledDepth) {\n        prevLog = console.log;\n        prevInfo = console.info;\n        prevWarn = console.warn;\n        prevError = console.error;\n        prevGroup = console.group;\n        prevGroupCollapsed = console.groupCollapsed;\n        prevGroupEnd = console.groupEnd;\n        var props = {\n          configurable: !0,\n          enumerable: !0,\n          value: disabledLog,\n          writable: !0\n        };\n        Object.defineProperties(console, {\n          info: props,\n          log: props,\n          warn: props,\n          error: props,\n          group: props,\n          groupCollapsed: props,\n          groupEnd: props\n        });\n      }\n      disabledDepth++;\n    }\n    function reenableLogs() {\n      disabledDepth--;\n      if (0 === disabledDepth) {\n        var props = { configurable: !0, enumerable: !0, writable: !0 };\n        Object.defineProperties(console, {\n          log: assign({}, props, { value: prevLog }),\n          info: assign({}, props, { value: prevInfo }),\n          warn: assign({}, props, { value: prevWarn }),\n          error: assign({}, props, { value: prevError }),\n          group: assign({}, props, { value: prevGroup }),\n          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),\n          groupEnd: assign({}, props, { value: prevGroupEnd })\n        });\n      }\n      0 > disabledDepth &&\n        console.error(\n          \"disabledDepth fell below zero. This is a bug in React. Please file an issue.\"\n        );\n    }\n    function describeBuiltInComponentFrame(name) {\n      if (void 0 === prefix)\n        try {\n          throw Error();\n        } catch (x) {\n          var match = x.stack.trim().match(/\\n( *(at )?)/);\n          prefix = (match && match[1]) || \"\";\n          suffix =\n            -1 < x.stack.indexOf(\"\\n    at\")\n              ? \" (<anonymous>)\"\n              : -1 < x.stack.indexOf(\"@\")\n                ? \"@unknown:0:0\"\n                : \"\";\n        }\n      return \"\\n\" + prefix + name + suffix;\n    }\n    function describeNativeComponentFrame(fn, construct) {\n      if (!fn || reentry) return \"\";\n      var frame = componentFrameCache.get(fn);\n      if (void 0 !== frame) return frame;\n      reentry = !0;\n      frame = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var previousDispatcher = null;\n      previousDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = null;\n      disableLogs();\n      try {\n        var RunInRootFrame = {\n          DetermineComponentFrameRoot: function () {\n            try {\n              if (construct) {\n                var Fake = function () {\n                  throw Error();\n                };\n                Object.defineProperty(Fake.prototype, \"props\", {\n                  set: function () {\n                    throw Error();\n                  }\n                });\n                if (\"object\" === typeof Reflect && Reflect.construct) {\n                  try {\n                    Reflect.construct(Fake, []);\n                  } catch (x) {\n                    var control = x;\n                  }\n                  Reflect.construct(fn, [], Fake);\n                } else {\n                  try {\n                    Fake.call();\n                  } catch (x$0) {\n                    control = x$0;\n                  }\n                  fn.call(Fake.prototype);\n                }\n              } else {\n                try {\n                  throw Error();\n                } catch (x$1) {\n                  control = x$1;\n                }\n                (Fake = fn()) &&\n                  \"function\" === typeof Fake.catch &&\n                  Fake.catch(function () {});\n              }\n            } catch (sample) {\n              if (sample && control && \"string\" === typeof sample.stack)\n                return [sample.stack, control.stack];\n            }\n            return [null, null];\n          }\n        };\n        RunInRootFrame.DetermineComponentFrameRoot.displayName =\n          \"DetermineComponentFrameRoot\";\n        var namePropDescriptor = Object.getOwnPropertyDescriptor(\n          RunInRootFrame.DetermineComponentFrameRoot,\n          \"name\"\n        );\n        namePropDescriptor &&\n          namePropDescriptor.configurable &&\n          Object.defineProperty(\n            RunInRootFrame.DetermineComponentFrameRoot,\n            \"name\",\n            { value: \"DetermineComponentFrameRoot\" }\n          );\n        var _RunInRootFrame$Deter =\n            RunInRootFrame.DetermineComponentFrameRoot(),\n          sampleStack = _RunInRootFrame$Deter[0],\n          controlStack = _RunInRootFrame$Deter[1];\n        if (sampleStack && controlStack) {\n          var sampleLines = sampleStack.split(\"\\n\"),\n            controlLines = controlStack.split(\"\\n\");\n          for (\n            _RunInRootFrame$Deter = namePropDescriptor = 0;\n            namePropDescriptor < sampleLines.length &&\n            !sampleLines[namePropDescriptor].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            namePropDescriptor++;\n          for (\n            ;\n            _RunInRootFrame$Deter < controlLines.length &&\n            !controlLines[_RunInRootFrame$Deter].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            _RunInRootFrame$Deter++;\n          if (\n            namePropDescriptor === sampleLines.length ||\n            _RunInRootFrame$Deter === controlLines.length\n          )\n            for (\n              namePropDescriptor = sampleLines.length - 1,\n                _RunInRootFrame$Deter = controlLines.length - 1;\n              1 <= namePropDescriptor &&\n              0 <= _RunInRootFrame$Deter &&\n              sampleLines[namePropDescriptor] !==\n                controlLines[_RunInRootFrame$Deter];\n\n            )\n              _RunInRootFrame$Deter--;\n          for (\n            ;\n            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;\n            namePropDescriptor--, _RunInRootFrame$Deter--\n          )\n            if (\n              sampleLines[namePropDescriptor] !==\n              controlLines[_RunInRootFrame$Deter]\n            ) {\n              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {\n                do\n                  if (\n                    (namePropDescriptor--,\n                    _RunInRootFrame$Deter--,\n                    0 > _RunInRootFrame$Deter ||\n                      sampleLines[namePropDescriptor] !==\n                        controlLines[_RunInRootFrame$Deter])\n                  ) {\n                    var _frame =\n                      \"\\n\" +\n                      sampleLines[namePropDescriptor].replace(\n                        \" at new \",\n                        \" at \"\n                      );\n                    fn.displayName &&\n                      _frame.includes(\"<anonymous>\") &&\n                      (_frame = _frame.replace(\"<anonymous>\", fn.displayName));\n                    \"function\" === typeof fn &&\n                      componentFrameCache.set(fn, _frame);\n                    return _frame;\n                  }\n                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);\n              }\n              break;\n            }\n        }\n      } finally {\n        (reentry = !1),\n          (ReactSharedInternals.H = previousDispatcher),\n          reenableLogs(),\n          (Error.prepareStackTrace = frame);\n      }\n      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : \"\")\n        ? describeBuiltInComponentFrame(sampleLines)\n        : \"\";\n      \"function\" === typeof fn && componentFrameCache.set(fn, sampleLines);\n      return sampleLines;\n    }\n    function describeUnknownElementTypeFrameInDEV(type) {\n      if (null == type) return \"\";\n      if (\"function\" === typeof type) {\n        var prototype = type.prototype;\n        return describeNativeComponentFrame(\n          type,\n          !(!prototype || !prototype.isReactComponent)\n        );\n      }\n      if (\"string\" === typeof type) return describeBuiltInComponentFrame(type);\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame(\"Suspense\");\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame(\"SuspenseList\");\n      }\n      if (\"object\" === typeof type)\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return (type = describeNativeComponentFrame(type.render, !1)), type;\n          case REACT_MEMO_TYPE:\n            return describeUnknownElementTypeFrameInDEV(type.type);\n          case REACT_LAZY_TYPE:\n            prototype = type._payload;\n            type = type._init;\n            try {\n              return describeUnknownElementTypeFrameInDEV(type(prototype));\n            } catch (x) {}\n        }\n      return \"\";\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(type, key, self, source, owner, props) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      if (\n        \"string\" === typeof type ||\n        \"function\" === typeof type ||\n        type === REACT_FRAGMENT_TYPE ||\n        type === REACT_PROFILER_TYPE ||\n        type === REACT_STRICT_MODE_TYPE ||\n        type === REACT_SUSPENSE_TYPE ||\n        type === REACT_SUSPENSE_LIST_TYPE ||\n        type === REACT_OFFSCREEN_TYPE ||\n        (\"object\" === typeof type &&\n          null !== type &&\n          (type.$$typeof === REACT_LAZY_TYPE ||\n            type.$$typeof === REACT_MEMO_TYPE ||\n            type.$$typeof === REACT_CONTEXT_TYPE ||\n            type.$$typeof === REACT_CONSUMER_TYPE ||\n            type.$$typeof === REACT_FORWARD_REF_TYPE ||\n            type.$$typeof === REACT_CLIENT_REFERENCE$1 ||\n            void 0 !== type.getModuleId))\n      ) {\n        var children = config.children;\n        if (void 0 !== children)\n          if (isStaticChildren)\n            if (isArrayImpl(children)) {\n              for (\n                isStaticChildren = 0;\n                isStaticChildren < children.length;\n                isStaticChildren++\n              )\n                validateChildKeys(children[isStaticChildren], type);\n              Object.freeze && Object.freeze(children);\n            } else\n              console.error(\n                \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n              );\n          else validateChildKeys(children, type);\n      } else {\n        children = \"\";\n        if (\n          void 0 === type ||\n          (\"object\" === typeof type &&\n            null !== type &&\n            0 === Object.keys(type).length)\n        )\n          children +=\n            \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\";\n        null === type\n          ? (isStaticChildren = \"null\")\n          : isArrayImpl(type)\n            ? (isStaticChildren = \"array\")\n            : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE\n              ? ((isStaticChildren =\n                  \"<\" +\n                  (getComponentNameFromType(type.type) || \"Unknown\") +\n                  \" />\"),\n                (children =\n                  \" Did you accidentally export a JSX literal instead of a component?\"))\n              : (isStaticChildren = typeof type);\n        console.error(\n          \"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",\n          isStaticChildren,\n          children\n        );\n      }\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(type, children, self, source, getOwner(), maybeKey);\n    }\n    function validateChildKeys(node, parentType) {\n      if (\n        \"object\" === typeof node &&\n        node &&\n        node.$$typeof !== REACT_CLIENT_REFERENCE\n      )\n        if (isArrayImpl(node))\n          for (var i = 0; i < node.length; i++) {\n            var child = node[i];\n            isValidElement(child) && validateExplicitKey(child, parentType);\n          }\n        else if (isValidElement(node))\n          node._store && (node._store.validated = 1);\n        else if (\n          (null === node || \"object\" !== typeof node\n            ? (i = null)\n            : ((i =\n                (MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL]) ||\n                node[\"@@iterator\"]),\n              (i = \"function\" === typeof i ? i : null)),\n          \"function\" === typeof i &&\n            i !== node.entries &&\n            ((i = i.call(node)), i !== node))\n        )\n          for (; !(node = i.next()).done; )\n            isValidElement(node.value) &&\n              validateExplicitKey(node.value, parentType);\n    }\n    function isValidElement(object) {\n      return (\n        \"object\" === typeof object &&\n        null !== object &&\n        object.$$typeof === REACT_ELEMENT_TYPE\n      );\n    }\n    function validateExplicitKey(element, parentType) {\n      if (\n        element._store &&\n        !element._store.validated &&\n        null == element.key &&\n        ((element._store.validated = 1),\n        (parentType = getCurrentComponentErrorInfo(parentType)),\n        !ownerHasKeyUseWarning[parentType])\n      ) {\n        ownerHasKeyUseWarning[parentType] = !0;\n        var childOwner = \"\";\n        element &&\n          null != element._owner &&\n          element._owner !== getOwner() &&\n          ((childOwner = null),\n          \"number\" === typeof element._owner.tag\n            ? (childOwner = getComponentNameFromType(element._owner.type))\n            : \"string\" === typeof element._owner.name &&\n              (childOwner = element._owner.name),\n          (childOwner = \" It was passed a child from \" + childOwner + \".\"));\n        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;\n        ReactSharedInternals.getCurrentStack = function () {\n          var stack = describeUnknownElementTypeFrameInDEV(element.type);\n          prevGetCurrentStack && (stack += prevGetCurrentStack() || \"\");\n          return stack;\n        };\n        console.error(\n          'Each child in a list should have a unique \"key\" prop.%s%s See https://react.dev/link/warning-keys for more information.',\n          parentType,\n          childOwner\n        );\n        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;\n      }\n    }\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = \"\",\n        owner = getOwner();\n      owner &&\n        (owner = getComponentNameFromType(owner.type)) &&\n        (info = \"\\n\\nCheck the render method of `\" + owner + \"`.\");\n      info ||\n        ((parentType = getComponentNameFromType(parentType)) &&\n          (info =\n            \"\\n\\nCheck the top-level render call using <\" + parentType + \">.\"));\n      return info;\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\"),\n      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,\n      REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      assign = Object.assign,\n      REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"),\n      isArrayImpl = Array.isArray,\n      disabledDepth = 0,\n      prevLog,\n      prevInfo,\n      prevWarn,\n      prevError,\n      prevGroup,\n      prevGroupCollapsed,\n      prevGroupEnd;\n    disabledLog.__reactDisabledLog = !0;\n    var prefix,\n      suffix,\n      reentry = !1;\n    var componentFrameCache = new (\n      \"function\" === typeof WeakMap ? WeakMap : Map\n    )();\n    var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var didWarnAboutKeySpread = {},\n      ownerHasKeyUseWarning = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      return jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self);\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIkM6XFxsYXJzX3dvcmtcXGVrc2FtZW5cXGJpYmxpby1jYXNlXFxiaWJsaW9cXG5vZGVfbW9kdWxlc1xcbmV4dFxcZGlzdFxcY29tcGlsZWRcXHJlYWN0XFxqc3gtZGV2LXJ1bnRpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bippy/dist/chunk-ZF32UKFC.js":
/*!***************************************************!*\
  !*** ./node_modules/bippy/dist/chunk-ZF32UKFC.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIPPY_INSTRUMENTATION_STRING: () => (/* binding */ BIPPY_INSTRUMENTATION_STRING),\n/* harmony export */   CONCURRENT_MODE_NUMBER: () => (/* binding */ CONCURRENT_MODE_NUMBER),\n/* harmony export */   CONCURRENT_MODE_SYMBOL_STRING: () => (/* binding */ CONCURRENT_MODE_SYMBOL_STRING),\n/* harmony export */   ClassComponentTag: () => (/* binding */ ClassComponentTag),\n/* harmony export */   ContextConsumerTag: () => (/* binding */ ContextConsumerTag),\n/* harmony export */   DEPRECATED_ASYNC_MODE_SYMBOL_STRING: () => (/* binding */ DEPRECATED_ASYNC_MODE_SYMBOL_STRING),\n/* harmony export */   DehydratedSuspenseComponentTag: () => (/* binding */ DehydratedSuspenseComponentTag),\n/* harmony export */   ELEMENT_TYPE_SYMBOL_STRING: () => (/* binding */ ELEMENT_TYPE_SYMBOL_STRING),\n/* harmony export */   ForwardRefTag: () => (/* binding */ ForwardRefTag),\n/* harmony export */   FragmentTag: () => (/* binding */ FragmentTag),\n/* harmony export */   FunctionComponentTag: () => (/* binding */ FunctionComponentTag),\n/* harmony export */   HostComponentTag: () => (/* binding */ HostComponentTag),\n/* harmony export */   HostHoistableTag: () => (/* binding */ HostHoistableTag),\n/* harmony export */   HostRootTag: () => (/* binding */ HostRootTag),\n/* harmony export */   HostSingletonTag: () => (/* binding */ HostSingletonTag),\n/* harmony export */   HostTextTag: () => (/* binding */ HostTextTag),\n/* harmony export */   INSTALL_HOOK_SCRIPT_STRING: () => (/* binding */ INSTALL_HOOK_SCRIPT_STRING),\n/* harmony export */   LegacyHiddenComponentTag: () => (/* binding */ LegacyHiddenComponentTag),\n/* harmony export */   MemoComponentTag: () => (/* binding */ MemoComponentTag),\n/* harmony export */   OffscreenComponentTag: () => (/* binding */ OffscreenComponentTag),\n/* harmony export */   SimpleMemoComponentTag: () => (/* binding */ SimpleMemoComponentTag),\n/* harmony export */   SuspenseComponentTag: () => (/* binding */ SuspenseComponentTag),\n/* harmony export */   TRANSITIONAL_ELEMENT_TYPE_SYMBOL_STRING: () => (/* binding */ TRANSITIONAL_ELEMENT_TYPE_SYMBOL_STRING),\n/* harmony export */   createFiberVisitor: () => (/* binding */ createFiberVisitor),\n/* harmony export */   detectReactBuildType: () => (/* binding */ detectReactBuildType),\n/* harmony export */   didFiberCommit: () => (/* binding */ didFiberCommit),\n/* harmony export */   didFiberRender: () => (/* binding */ didFiberRender),\n/* harmony export */   fiberIdMap: () => (/* binding */ fiberIdMap),\n/* harmony export */   getDisplayName: () => (/* binding */ getDisplayName),\n/* harmony export */   getFiberFromHostInstance: () => (/* binding */ getFiberFromHostInstance),\n/* harmony export */   getFiberId: () => (/* binding */ getFiberId),\n/* harmony export */   getFiberStack: () => (/* binding */ getFiberStack),\n/* harmony export */   getMutatedHostFibers: () => (/* binding */ getMutatedHostFibers),\n/* harmony export */   getNearestHostFiber: () => (/* binding */ getNearestHostFiber),\n/* harmony export */   getNearestHostFibers: () => (/* binding */ getNearestHostFibers),\n/* harmony export */   getRDTHook: () => (/* binding */ getRDTHook),\n/* harmony export */   getTimings: () => (/* binding */ getTimings),\n/* harmony export */   getType: () => (/* binding */ getType),\n/* harmony export */   hasMemoCache: () => (/* binding */ hasMemoCache),\n/* harmony export */   hasRDTHook: () => (/* binding */ hasRDTHook),\n/* harmony export */   installRDTHook: () => (/* binding */ installRDTHook),\n/* harmony export */   instrument: () => (/* binding */ instrument),\n/* harmony export */   isCompositeFiber: () => (/* binding */ isCompositeFiber),\n/* harmony export */   isHostFiber: () => (/* binding */ isHostFiber),\n/* harmony export */   isInstrumentationActive: () => (/* binding */ isInstrumentationActive),\n/* harmony export */   isReactRefresh: () => (/* binding */ isReactRefresh),\n/* harmony export */   isRealReactDevtools: () => (/* binding */ isRealReactDevtools),\n/* harmony export */   isServiceWorkerRegistered: () => (/* binding */ isServiceWorkerRegistered),\n/* harmony export */   isValidElement: () => (/* binding */ isValidElement),\n/* harmony export */   isValidFiber: () => (/* binding */ isValidFiber),\n/* harmony export */   mountFiberRecursively: () => (/* binding */ mountFiberRecursively),\n/* harmony export */   onCommitFiberRoot: () => (/* binding */ onCommitFiberRoot),\n/* harmony export */   patchRDTHook: () => (/* binding */ patchRDTHook),\n/* harmony export */   secure: () => (/* binding */ secure),\n/* harmony export */   setFiberId: () => (/* binding */ setFiberId),\n/* harmony export */   shouldFilterFiber: () => (/* binding */ shouldFilterFiber),\n/* harmony export */   traverseContexts: () => (/* binding */ traverseContexts),\n/* harmony export */   traverseEffects: () => (/* binding */ traverseEffects),\n/* harmony export */   traverseFiber: () => (/* binding */ traverseFiber),\n/* harmony export */   traverseProps: () => (/* binding */ traverseProps),\n/* harmony export */   traverseRenderedFibers: () => (/* binding */ traverseRenderedFibers),\n/* harmony export */   traverseState: () => (/* binding */ traverseState),\n/* harmony export */   unmountFiber: () => (/* binding */ unmountFiber),\n/* harmony export */   unmountFiberChildrenRecursively: () => (/* binding */ unmountFiberChildrenRecursively),\n/* harmony export */   updateFiberRecursively: () => (/* binding */ updateFiberRecursively),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/**\n * @license bippy\n *\n * Copyright (c) Aiden Bai, Million Software, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// src/rdt-hook.ts\nvar version = \"0.2.7\";\nvar BIPPY_INSTRUMENTATION_STRING = `bippy-${version}`;\nvar NO_OP = () => {\n};\nvar checkDCE = (fn) => {\n  try {\n    const code = Function.prototype.toString.call(fn);\n    if (code.indexOf(\"^_^\") > -1) {\n      setTimeout(() => {\n        throw new Error(\n          \"React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://reactjs.org/link/perf-use-production-build\"\n        );\n      });\n    }\n  } catch {\n  }\n};\nvar isRealReactDevtools = (rdtHook = getRDTHook()) => {\n  return \"getFiberRoots\" in rdtHook;\n};\nvar isReactRefreshOverride = false;\nvar isReactRefresh = (rdtHook = getRDTHook()) => {\n  if (isReactRefreshOverride) return true;\n  return !(\"checkDCE\" in rdtHook);\n};\nvar installRDTHook = (onActive) => {\n  const renderers = /* @__PURE__ */ new Map();\n  let i = 0;\n  const rdtHook = {\n    checkDCE,\n    supportsFiber: true,\n    supportsFlight: true,\n    hasUnsupportedRendererAttached: false,\n    renderers,\n    onCommitFiberRoot: NO_OP,\n    onCommitFiberUnmount: NO_OP,\n    onPostCommitFiberRoot: NO_OP,\n    inject(renderer) {\n      const nextID = ++i;\n      renderers.set(nextID, renderer);\n      if (!rdtHook._instrumentationIsActive) {\n        rdtHook._instrumentationIsActive = true;\n        onActive?.();\n      }\n      return nextID;\n    },\n    _instrumentationSource: BIPPY_INSTRUMENTATION_STRING,\n    _instrumentationIsActive: false\n  };\n  try {\n    Object.defineProperty(globalThis, \"__REACT_DEVTOOLS_GLOBAL_HOOK__\", {\n      value: rdtHook\n    });\n  } catch {\n    patchRDTHook(onActive);\n  }\n  return rdtHook;\n};\nvar patchRDTHook = (onActive) => {\n  try {\n    const rdtHook = globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n    if (!rdtHook._instrumentationSource) {\n      isReactRefreshOverride = isReactRefresh(rdtHook);\n      rdtHook.checkDCE = checkDCE;\n      rdtHook.supportsFiber = true;\n      rdtHook.supportsFlight = true;\n      rdtHook.hasUnsupportedRendererAttached = false;\n      rdtHook._instrumentationSource = BIPPY_INSTRUMENTATION_STRING;\n      rdtHook._instrumentationIsActive = true;\n    }\n  } catch {\n  }\n  onActive?.();\n};\nvar hasRDTHook = () => {\n  return Object.prototype.hasOwnProperty.call(\n    globalThis,\n    \"__REACT_DEVTOOLS_GLOBAL_HOOK__\"\n  );\n};\nvar getRDTHook = (onActive) => {\n  if (!hasRDTHook()) {\n    return installRDTHook(onActive);\n  }\n  patchRDTHook(onActive);\n  return globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n};\nvar isRegistered = false;\nvar isServiceWorkerRegistered = () => {\n  return isRegistered;\n};\ntry {\n  if (typeof window !== \"undefined\" && // @ts-expect-error `document` may not be defined in some enviroments\n  (window.document?.createElement || window.navigator?.product === \"ReactNative\")) {\n    installRDTHook();\n    if (typeof navigator !== \"undefined\" && \"serviceWorker\" in navigator) {\n      navigator.serviceWorker.register(__webpack_require__.tu(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(\"_app-pages-browser_node_modules_bippy_dist_sw_js\"), __webpack_require__.b))).then(() => {\n        isRegistered = true;\n      }).catch(() => {\n      });\n    }\n  }\n} catch {\n}\nvar INSTALL_HOOK_SCRIPT_STRING = \"(()=>{try{var t=()=>{};const n=new Map;let o=0;globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__={checkDCE:t,supportsFiber:!0,supportsFlight:!0,hasUnsupportedRendererAttached:!1,renderers:n,onCommitFiberRoot:t,onCommitFiberUnmount:t,onPostCommitFiberRoot:t,inject(t){var e=++o;return n.set(e,t),globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__._instrumentationIsActive=!0,e},_instrumentationIsActive:!1}}catch{}})()\";\n\n// src/core.ts\nvar FunctionComponentTag = 0;\nvar ClassComponentTag = 1;\nvar HostRootTag = 3;\nvar HostComponentTag = 5;\nvar HostTextTag = 6;\nvar FragmentTag = 7;\nvar ContextConsumerTag = 9;\nvar ForwardRefTag = 11;\nvar SuspenseComponentTag = 13;\nvar MemoComponentTag = 14;\nvar SimpleMemoComponentTag = 15;\nvar DehydratedSuspenseComponentTag = 18;\nvar OffscreenComponentTag = 22;\nvar LegacyHiddenComponentTag = 23;\nvar HostHoistableTag = 26;\nvar HostSingletonTag = 27;\nvar CONCURRENT_MODE_NUMBER = 60111;\nvar ELEMENT_TYPE_SYMBOL_STRING = \"Symbol(react.element)\";\nvar TRANSITIONAL_ELEMENT_TYPE_SYMBOL_STRING = \"Symbol(react.transitional.element)\";\nvar CONCURRENT_MODE_SYMBOL_STRING = \"Symbol(react.concurrent_mode)\";\nvar DEPRECATED_ASYNC_MODE_SYMBOL_STRING = \"Symbol(react.async_mode)\";\nvar PerformedWork = 1;\nvar Placement = 2;\nvar Hydrating = 4096;\nvar Update = 4;\nvar Cloned = 8;\nvar ChildDeletion = 16;\nvar ContentReset = 32;\nvar Snapshot = 1024;\nvar Visibility = 8192;\nvar MutationMask = Placement | Update | ChildDeletion | ContentReset | Hydrating | Visibility | Snapshot;\nvar isValidElement = (element) => typeof element === \"object\" && element != null && \"$$typeof\" in element && // react 18 uses Symbol.for('react.element'), react 19 uses Symbol.for('react.transitional.element')\n[\n  ELEMENT_TYPE_SYMBOL_STRING,\n  TRANSITIONAL_ELEMENT_TYPE_SYMBOL_STRING\n].includes(String(element.$$typeof));\nvar isValidFiber = (fiber) => typeof fiber === \"object\" && fiber != null && \"tag\" in fiber && \"stateNode\" in fiber && \"return\" in fiber && \"child\" in fiber && \"sibling\" in fiber && \"flags\" in fiber;\nvar isHostFiber = (fiber) => {\n  switch (fiber.tag) {\n    case HostComponentTag:\n    // @ts-expect-error: it exists\n    case HostHoistableTag:\n    // @ts-expect-error: it exists\n    case HostSingletonTag:\n      return true;\n    default:\n      return typeof fiber.type === \"string\";\n  }\n};\nvar isCompositeFiber = (fiber) => {\n  switch (fiber.tag) {\n    case FunctionComponentTag:\n    case ClassComponentTag:\n    case SimpleMemoComponentTag:\n    case MemoComponentTag:\n    case ForwardRefTag:\n      return true;\n    default:\n      return false;\n  }\n};\nvar traverseContexts = (fiber, selector) => {\n  try {\n    const nextDependencies = fiber.dependencies;\n    const prevDependencies = fiber.alternate?.dependencies;\n    if (!nextDependencies || !prevDependencies) return false;\n    if (typeof nextDependencies !== \"object\" || !(\"firstContext\" in nextDependencies) || typeof prevDependencies !== \"object\" || !(\"firstContext\" in prevDependencies)) {\n      return false;\n    }\n    let nextContext = nextDependencies.firstContext;\n    let prevContext = prevDependencies.firstContext;\n    while (nextContext && typeof nextContext === \"object\" && \"memoizedValue\" in nextContext || prevContext && typeof prevContext === \"object\" && \"memoizedValue\" in prevContext) {\n      if (selector(nextContext, prevContext) === true) return true;\n      nextContext = nextContext?.next;\n      prevContext = prevContext?.next;\n    }\n  } catch {\n  }\n  return false;\n};\nvar traverseState = (fiber, selector) => {\n  try {\n    let nextState = fiber.memoizedState;\n    let prevState = fiber.alternate?.memoizedState;\n    while (nextState || prevState) {\n      if (selector(nextState, prevState) === true) return true;\n      nextState = nextState?.next;\n      prevState = prevState?.next;\n    }\n  } catch {\n  }\n  return false;\n};\nvar traverseEffects = (fiber, selector) => {\n  try {\n    let nextState = (\n      // biome-ignore lint/suspicious/noExplicitAny: underlying type is unknown\n      fiber.updateQueue?.lastEffect\n    );\n    let prevState = (\n      // biome-ignore lint/suspicious/noExplicitAny: underlying type is unknown\n      fiber.alternate?.updateQueue?.lastEffect\n    );\n    while (nextState || prevState) {\n      if (selector(nextState, prevState) === true) return true;\n      if (nextState?.next === nextState || prevState?.next === prevState) {\n        break;\n      }\n      nextState = nextState?.next;\n      prevState = prevState?.next;\n    }\n  } catch {\n  }\n  return false;\n};\nvar traverseProps = (fiber, selector) => {\n  try {\n    const nextProps = fiber.memoizedProps;\n    const prevProps = fiber.alternate?.memoizedProps || {};\n    const allKeys = /* @__PURE__ */ new Set([\n      ...Object.keys(prevProps),\n      ...Object.keys(nextProps)\n    ]);\n    for (const propName of allKeys) {\n      const prevValue = prevProps?.[propName];\n      const nextValue = nextProps?.[propName];\n      if (selector(propName, nextValue, prevValue) === true) return true;\n    }\n  } catch {\n  }\n  return false;\n};\nvar didFiberRender = (fiber) => {\n  const nextProps = fiber.memoizedProps;\n  const prevProps = fiber.alternate?.memoizedProps || {};\n  const flags = fiber.flags ?? fiber.effectTag ?? 0;\n  switch (fiber.tag) {\n    case ClassComponentTag:\n    case FunctionComponentTag:\n    case ContextConsumerTag:\n    case ForwardRefTag:\n    case MemoComponentTag:\n    case SimpleMemoComponentTag: {\n      return (flags & PerformedWork) === PerformedWork;\n    }\n    default:\n      if (!fiber.alternate) return true;\n      return prevProps !== nextProps || fiber.alternate.memoizedState !== fiber.memoizedState || fiber.alternate.ref !== fiber.ref;\n  }\n};\nvar didFiberCommit = (fiber) => {\n  return Boolean(\n    (fiber.flags & (MutationMask | Cloned)) !== 0 || (fiber.subtreeFlags & (MutationMask | Cloned)) !== 0\n  );\n};\nvar getMutatedHostFibers = (fiber) => {\n  const mutations = [];\n  const stack = [fiber];\n  while (stack.length) {\n    const node = stack.pop();\n    if (!node) continue;\n    if (isHostFiber(node) && didFiberCommit(node) && didFiberRender(node)) {\n      mutations.push(node);\n    }\n    if (node.child) stack.push(node.child);\n    if (node.sibling) stack.push(node.sibling);\n  }\n  return mutations;\n};\nvar getFiberStack = (fiber) => {\n  const stack = [];\n  let currentFiber = fiber;\n  while (currentFiber.return) {\n    stack.push(currentFiber);\n    currentFiber = currentFiber.return;\n  }\n  const newStack = new Array(stack.length);\n  for (let i = 0; i < stack.length; i++) {\n    newStack[i] = stack[stack.length - i - 1];\n  }\n  return newStack;\n};\nvar shouldFilterFiber = (fiber) => {\n  switch (fiber.tag) {\n    case DehydratedSuspenseComponentTag:\n      return true;\n    case HostTextTag:\n    case FragmentTag:\n    case LegacyHiddenComponentTag:\n    case OffscreenComponentTag:\n      return true;\n    case HostRootTag:\n      return false;\n    default: {\n      const symbolOrNumber = typeof fiber.type === \"object\" && fiber.type !== null ? fiber.type.$$typeof : fiber.type;\n      const typeSymbol = typeof symbolOrNumber === \"symbol\" ? symbolOrNumber.toString() : symbolOrNumber;\n      switch (typeSymbol) {\n        case CONCURRENT_MODE_NUMBER:\n        case CONCURRENT_MODE_SYMBOL_STRING:\n        case DEPRECATED_ASYNC_MODE_SYMBOL_STRING:\n          return true;\n        default:\n          return false;\n      }\n    }\n  }\n};\nvar getNearestHostFiber = (fiber, ascending = false) => {\n  let hostFiber = traverseFiber(fiber, isHostFiber, ascending);\n  if (!hostFiber) {\n    hostFiber = traverseFiber(fiber, isHostFiber, !ascending);\n  }\n  return hostFiber;\n};\nvar getNearestHostFibers = (fiber) => {\n  const hostFibers = [];\n  const stack = [];\n  if (isHostFiber(fiber)) {\n    hostFibers.push(fiber);\n  } else if (fiber.child) {\n    stack.push(fiber.child);\n  }\n  while (stack.length) {\n    const currentNode = stack.pop();\n    if (!currentNode) break;\n    if (isHostFiber(currentNode)) {\n      hostFibers.push(currentNode);\n    } else if (currentNode.child) {\n      stack.push(currentNode.child);\n    }\n    if (currentNode.sibling) {\n      stack.push(currentNode.sibling);\n    }\n  }\n  return hostFibers;\n};\nvar traverseFiber = (fiber, selector, ascending = false) => {\n  if (!fiber) return null;\n  if (selector(fiber) === true) return fiber;\n  let child = ascending ? fiber.return : fiber.child;\n  while (child) {\n    const match = traverseFiber(child, selector, ascending);\n    if (match) return match;\n    child = ascending ? null : child.sibling;\n  }\n  return null;\n};\nvar getTimings = (fiber) => {\n  const totalTime = fiber?.actualDuration ?? 0;\n  let selfTime = totalTime;\n  let child = fiber?.child ?? null;\n  while (totalTime > 0 && child != null) {\n    selfTime -= child.actualDuration ?? 0;\n    child = child.sibling;\n  }\n  return { selfTime, totalTime };\n};\nvar hasMemoCache = (fiber) => {\n  return Boolean(\n    fiber.updateQueue?.memoCache\n  );\n};\nvar getType = (type) => {\n  const currentType = type;\n  if (typeof currentType === \"function\") {\n    return currentType;\n  }\n  if (typeof currentType === \"object\" && currentType) {\n    return getType(\n      currentType.type || currentType.render\n    );\n  }\n  return null;\n};\nvar getDisplayName = (type) => {\n  const currentType = type;\n  if (typeof currentType !== \"function\" && !(typeof currentType === \"object\" && currentType)) {\n    return null;\n  }\n  const name = currentType.displayName || currentType.name || null;\n  if (name) return name;\n  const unwrappedType = getType(currentType);\n  if (!unwrappedType) return null;\n  return unwrappedType.displayName || unwrappedType.name || null;\n};\nvar detectReactBuildType = (renderer) => {\n  try {\n    if (typeof renderer.version === \"string\" && renderer.bundleType > 0) {\n      return \"development\";\n    }\n  } catch {\n  }\n  return \"production\";\n};\nvar isInstrumentationActive = () => {\n  const rdtHook = getRDTHook();\n  return Boolean(rdtHook._instrumentationIsActive) || isRealReactDevtools() || isReactRefresh();\n};\nvar fiberId = 0;\nvar fiberIdMap = /* @__PURE__ */ new WeakMap();\nvar setFiberId = (fiber, id = fiberId++) => {\n  fiberIdMap.set(fiber, id);\n};\nvar getFiberId = (fiber) => {\n  let id = fiberIdMap.get(fiber);\n  if (!id && fiber.alternate) {\n    id = fiberIdMap.get(fiber.alternate);\n  }\n  if (!id) {\n    id = fiberId++;\n    setFiberId(fiber, id);\n  }\n  return id;\n};\nvar mountFiberRecursively = (onRender, firstChild, traverseSiblings) => {\n  let fiber = firstChild;\n  while (fiber != null) {\n    if (!fiberIdMap.has(fiber)) {\n      getFiberId(fiber);\n    }\n    const shouldIncludeInTree = !shouldFilterFiber(fiber);\n    if (shouldIncludeInTree && didFiberRender(fiber)) {\n      onRender(fiber, \"mount\");\n    }\n    if (fiber.tag === SuspenseComponentTag) {\n      const isTimedOut = fiber.memoizedState !== null;\n      if (isTimedOut) {\n        const primaryChildFragment = fiber.child;\n        const fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;\n        if (fallbackChildFragment) {\n          const fallbackChild = fallbackChildFragment.child;\n          if (fallbackChild !== null) {\n            mountFiberRecursively(onRender, fallbackChild, false);\n          }\n        }\n      } else {\n        let primaryChild = null;\n        if (fiber.child !== null) {\n          primaryChild = fiber.child.child;\n        }\n        if (primaryChild !== null) {\n          mountFiberRecursively(onRender, primaryChild, false);\n        }\n      }\n    } else if (fiber.child != null) {\n      mountFiberRecursively(onRender, fiber.child, true);\n    }\n    fiber = traverseSiblings ? fiber.sibling : null;\n  }\n};\nvar updateFiberRecursively = (onRender, nextFiber, prevFiber, parentFiber) => {\n  if (!fiberIdMap.has(nextFiber)) {\n    getFiberId(nextFiber);\n  }\n  if (!prevFiber) return;\n  if (!fiberIdMap.has(prevFiber)) {\n    getFiberId(prevFiber);\n  }\n  const isSuspense = nextFiber.tag === SuspenseComponentTag;\n  const shouldIncludeInTree = !shouldFilterFiber(nextFiber);\n  if (shouldIncludeInTree && didFiberRender(nextFiber)) {\n    onRender(nextFiber, \"update\");\n  }\n  const prevDidTimeout = isSuspense && prevFiber.memoizedState !== null;\n  const nextDidTimeOut = isSuspense && nextFiber.memoizedState !== null;\n  if (prevDidTimeout && nextDidTimeOut) {\n    const nextFallbackChildSet = nextFiber.child?.sibling ?? null;\n    const prevFallbackChildSet = prevFiber.child?.sibling ?? null;\n    if (nextFallbackChildSet !== null && prevFallbackChildSet !== null) {\n      updateFiberRecursively(\n        onRender,\n        nextFallbackChildSet,\n        prevFallbackChildSet);\n    }\n  } else if (prevDidTimeout && !nextDidTimeOut) {\n    const nextPrimaryChildSet = nextFiber.child;\n    if (nextPrimaryChildSet !== null) {\n      mountFiberRecursively(onRender, nextPrimaryChildSet, true);\n    }\n  } else if (!prevDidTimeout && nextDidTimeOut) {\n    unmountFiberChildrenRecursively(onRender, prevFiber);\n    const nextFallbackChildSet = nextFiber.child?.sibling ?? null;\n    if (nextFallbackChildSet !== null) {\n      mountFiberRecursively(onRender, nextFallbackChildSet, true);\n    }\n  } else if (nextFiber.child !== prevFiber.child) {\n    let nextChild = nextFiber.child;\n    while (nextChild) {\n      if (nextChild.alternate) {\n        const prevChild = nextChild.alternate;\n        updateFiberRecursively(\n          onRender,\n          nextChild,\n          prevChild);\n      } else {\n        mountFiberRecursively(onRender, nextChild, false);\n      }\n      nextChild = nextChild.sibling;\n    }\n  }\n};\nvar unmountFiber = (onRender, fiber) => {\n  const isRoot = fiber.tag === HostRootTag;\n  if (isRoot || !shouldFilterFiber(fiber)) {\n    onRender(fiber, \"unmount\");\n  }\n};\nvar unmountFiberChildrenRecursively = (onRender, fiber) => {\n  const isTimedOutSuspense = fiber.tag === SuspenseComponentTag && fiber.memoizedState !== null;\n  let child = fiber.child;\n  if (isTimedOutSuspense) {\n    const primaryChildFragment = fiber.child;\n    const fallbackChildFragment = primaryChildFragment?.sibling ?? null;\n    child = fallbackChildFragment?.child ?? null;\n  }\n  while (child !== null) {\n    if (child.return !== null) {\n      unmountFiber(onRender, child);\n      unmountFiberChildrenRecursively(onRender, child);\n    }\n    child = child.sibling;\n  }\n};\nvar commitId = 0;\nvar rootInstanceMap = /* @__PURE__ */ new WeakMap();\nvar traverseRenderedFibers = (root, onRender) => {\n  const fiber = \"current\" in root ? root.current : root;\n  let rootInstance = rootInstanceMap.get(root);\n  if (!rootInstance) {\n    rootInstance = { prevFiber: null, id: commitId++ };\n    rootInstanceMap.set(root, rootInstance);\n  }\n  const { prevFiber } = rootInstance;\n  if (!fiber) {\n    unmountFiber(onRender, fiber);\n  } else if (prevFiber !== null) {\n    const wasMounted = prevFiber && prevFiber.memoizedState != null && prevFiber.memoizedState.element != null && // A dehydrated root is not considered mounted\n    prevFiber.memoizedState.isDehydrated !== true;\n    const isMounted = fiber.memoizedState != null && fiber.memoizedState.element != null && // A dehydrated root is not considered mounted\n    fiber.memoizedState.isDehydrated !== true;\n    if (!wasMounted && isMounted) {\n      mountFiberRecursively(onRender, fiber, false);\n    } else if (wasMounted && isMounted) {\n      updateFiberRecursively(onRender, fiber, fiber.alternate);\n    } else if (wasMounted && !isMounted) {\n      unmountFiber(onRender, fiber);\n    }\n  } else {\n    mountFiberRecursively(onRender, fiber, true);\n  }\n  rootInstance.prevFiber = fiber;\n};\nvar createFiberVisitor = ({\n  onRender\n}) => {\n  return (_rendererID, root, _state) => {\n    traverseRenderedFibers(root, onRender);\n  };\n};\nvar instrument = (options) => {\n  return getRDTHook(() => {\n    const rdtHook = getRDTHook();\n    options.onActive?.();\n    rdtHook._instrumentationSource = options.name ?? BIPPY_INSTRUMENTATION_STRING;\n    const prevOnCommitFiberRoot = rdtHook.onCommitFiberRoot;\n    if (options.onCommitFiberRoot) {\n      rdtHook.onCommitFiberRoot = (rendererID, root, priority) => {\n        if (prevOnCommitFiberRoot)\n          prevOnCommitFiberRoot(rendererID, root, priority);\n        options.onCommitFiberRoot?.(rendererID, root, priority);\n      };\n    }\n    const prevOnCommitFiberUnmount = rdtHook.onCommitFiberUnmount;\n    if (options.onCommitFiberUnmount) {\n      rdtHook.onCommitFiberUnmount = (rendererID, root) => {\n        if (prevOnCommitFiberUnmount)\n          prevOnCommitFiberUnmount(rendererID, root);\n        options.onCommitFiberUnmount?.(rendererID, root);\n      };\n    }\n    const prevOnPostCommitFiberRoot = rdtHook.onPostCommitFiberRoot;\n    if (options.onPostCommitFiberRoot) {\n      rdtHook.onPostCommitFiberRoot = (rendererID, root) => {\n        if (prevOnPostCommitFiberRoot)\n          prevOnPostCommitFiberRoot(rendererID, root);\n        options.onPostCommitFiberRoot?.(rendererID, root);\n      };\n    }\n  });\n};\nvar getFiberFromHostInstance = (hostInstance) => {\n  const rdtHook = getRDTHook();\n  for (const renderer of rdtHook.renderers.values()) {\n    try {\n      const fiber = renderer.findFiberByHostInstance?.(hostInstance);\n      if (fiber) return fiber;\n    } catch {\n    }\n  }\n  if (typeof hostInstance === \"object\" && hostInstance != null) {\n    if (\"_reactRootContainer\" in hostInstance) {\n      return hostInstance._reactRootContainer?._internalRoot?.current?.child;\n    }\n    for (const key in hostInstance) {\n      if (key.startsWith(\"__reactInternalInstance$\") || key.startsWith(\"__reactFiber\")) {\n        return hostInstance[key] || null;\n      }\n    }\n  }\n  return null;\n};\nvar secure = (options, secureOptions = {}) => {\n  const onActive = options.onActive;\n  const isRDTHookInstalled = hasRDTHook();\n  const isUsingRealReactDevtools = isRealReactDevtools();\n  const isUsingReactRefresh = isReactRefresh();\n  let timeout;\n  let isProduction = false;\n  options.onActive = () => {\n    clearTimeout(timeout);\n    let isSecure = true;\n    try {\n      onActive?.();\n      const rdtHook = getRDTHook();\n      for (const renderer of rdtHook.renderers.values()) {\n        const [majorVersion] = renderer.version.split(\".\");\n        if (Number(majorVersion) < (secureOptions.minReactMajorVersion ?? 17)) {\n          isSecure = false;\n        }\n        const buildType = detectReactBuildType(renderer);\n        if (buildType !== \"development\") {\n          isProduction = true;\n          if (!secureOptions.dangerouslyRunInProduction) {\n            isSecure = false;\n          }\n        }\n      }\n    } catch (err) {\n      secureOptions.onError?.(err);\n    }\n    if (!isSecure) {\n      options.onCommitFiberRoot = void 0;\n      options.onCommitFiberUnmount = void 0;\n      options.onPostCommitFiberRoot = void 0;\n      options.onActive = void 0;\n      return;\n    }\n    try {\n      const onCommitFiberRoot2 = options.onCommitFiberRoot;\n      if (onCommitFiberRoot2) {\n        options.onCommitFiberRoot = (rendererID, root, priority) => {\n          try {\n            onCommitFiberRoot2(rendererID, root, priority);\n          } catch (err) {\n            secureOptions.onError?.(err);\n          }\n        };\n      }\n      const onCommitFiberUnmount = options.onCommitFiberUnmount;\n      if (onCommitFiberUnmount) {\n        options.onCommitFiberUnmount = (rendererID, root) => {\n          try {\n            onCommitFiberUnmount(rendererID, root);\n          } catch (err) {\n            secureOptions.onError?.(err);\n          }\n        };\n      }\n      const onPostCommitFiberRoot = options.onPostCommitFiberRoot;\n      if (onPostCommitFiberRoot) {\n        options.onPostCommitFiberRoot = (rendererID, root) => {\n          try {\n            onPostCommitFiberRoot(rendererID, root);\n          } catch (err) {\n            secureOptions.onError?.(err);\n          }\n        };\n      }\n    } catch (err) {\n      secureOptions.onError?.(err);\n    }\n  };\n  if (!isRDTHookInstalled && !isUsingRealReactDevtools && !isUsingReactRefresh) {\n    timeout = setTimeout(() => {\n      if (!isProduction) {\n        secureOptions.onError?.();\n      }\n      stop();\n    }, secureOptions.installCheckTimeout ?? 100);\n  }\n  return options;\n};\nvar onCommitFiberRoot = (handler) => {\n  return instrument(\n    secure({\n      onCommitFiberRoot: (_, root) => {\n        handler(root);\n      }\n    })\n  );\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9iaXBweS9kaXN0L2NodW5rLVpGMzJVS0ZDLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLCtCQUFRLDRJQUEwQixDQUFDO0FBQzFFO0FBQ0EsT0FBTztBQUNQLE9BQU87QUFDUDtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0Esd0NBQXdDLElBQUksYUFBYSxnQkFBZ0IsUUFBUSwyQ0FBMkMseUtBQXlLLFVBQVUsMEZBQTBGLDhCQUE4QixRQUFROztBQUUvYTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRSt2QyIsInNvdXJjZXMiOlsiQzpcXGxhcnNfd29ya1xcZWtzYW1lblxcYmlibGlvLWNhc2VcXGJpYmxpb1xcbm9kZV9tb2R1bGVzXFxiaXBweVxcZGlzdFxcY2h1bmstWkYzMlVLRkMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBiaXBweVxuICpcbiAqIENvcHlyaWdodCAoYykgQWlkZW4gQmFpLCBNaWxsaW9uIFNvZnR3YXJlLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gc3JjL3JkdC1ob29rLnRzXG52YXIgdmVyc2lvbiA9IFwiMC4yLjdcIjtcbnZhciBCSVBQWV9JTlNUUlVNRU5UQVRJT05fU1RSSU5HID0gYGJpcHB5LSR7dmVyc2lvbn1gO1xudmFyIE5PX09QID0gKCkgPT4ge1xufTtcbnZhciBjaGVja0RDRSA9IChmbikgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGNvZGUgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChmbik7XG4gICAgaWYgKGNvZGUuaW5kZXhPZihcIl5fXlwiKSA+IC0xKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiUmVhY3QgaXMgcnVubmluZyBpbiBwcm9kdWN0aW9uIG1vZGUsIGJ1dCBkZWFkIGNvZGUgZWxpbWluYXRpb24gaGFzIG5vdCBiZWVuIGFwcGxpZWQuIFJlYWQgaG93IHRvIGNvcnJlY3RseSBjb25maWd1cmUgUmVhY3QgZm9yIHByb2R1Y3Rpb246IGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9wZXJmLXVzZS1wcm9kdWN0aW9uLWJ1aWxkXCJcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBjYXRjaCB7XG4gIH1cbn07XG52YXIgaXNSZWFsUmVhY3REZXZ0b29scyA9IChyZHRIb29rID0gZ2V0UkRUSG9vaygpKSA9PiB7XG4gIHJldHVybiBcImdldEZpYmVyUm9vdHNcIiBpbiByZHRIb29rO1xufTtcbnZhciBpc1JlYWN0UmVmcmVzaE92ZXJyaWRlID0gZmFsc2U7XG52YXIgaXNSZWFjdFJlZnJlc2ggPSAocmR0SG9vayA9IGdldFJEVEhvb2soKSkgPT4ge1xuICBpZiAoaXNSZWFjdFJlZnJlc2hPdmVycmlkZSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiAhKFwiY2hlY2tEQ0VcIiBpbiByZHRIb29rKTtcbn07XG52YXIgaW5zdGFsbFJEVEhvb2sgPSAob25BY3RpdmUpID0+IHtcbiAgY29uc3QgcmVuZGVyZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgbGV0IGkgPSAwO1xuICBjb25zdCByZHRIb29rID0ge1xuICAgIGNoZWNrRENFLFxuICAgIHN1cHBvcnRzRmliZXI6IHRydWUsXG4gICAgc3VwcG9ydHNGbGlnaHQ6IHRydWUsXG4gICAgaGFzVW5zdXBwb3J0ZWRSZW5kZXJlckF0dGFjaGVkOiBmYWxzZSxcbiAgICByZW5kZXJlcnMsXG4gICAgb25Db21taXRGaWJlclJvb3Q6IE5PX09QLFxuICAgIG9uQ29tbWl0RmliZXJVbm1vdW50OiBOT19PUCxcbiAgICBvblBvc3RDb21taXRGaWJlclJvb3Q6IE5PX09QLFxuICAgIGluamVjdChyZW5kZXJlcikge1xuICAgICAgY29uc3QgbmV4dElEID0gKytpO1xuICAgICAgcmVuZGVyZXJzLnNldChuZXh0SUQsIHJlbmRlcmVyKTtcbiAgICAgIGlmICghcmR0SG9vay5faW5zdHJ1bWVudGF0aW9uSXNBY3RpdmUpIHtcbiAgICAgICAgcmR0SG9vay5faW5zdHJ1bWVudGF0aW9uSXNBY3RpdmUgPSB0cnVlO1xuICAgICAgICBvbkFjdGl2ZT8uKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV4dElEO1xuICAgIH0sXG4gICAgX2luc3RydW1lbnRhdGlvblNvdXJjZTogQklQUFlfSU5TVFJVTUVOVEFUSU9OX1NUUklORyxcbiAgICBfaW5zdHJ1bWVudGF0aW9uSXNBY3RpdmU6IGZhbHNlXG4gIH07XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbFRoaXMsIFwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fXCIsIHtcbiAgICAgIHZhbHVlOiByZHRIb29rXG4gICAgfSk7XG4gIH0gY2F0Y2gge1xuICAgIHBhdGNoUkRUSG9vayhvbkFjdGl2ZSk7XG4gIH1cbiAgcmV0dXJuIHJkdEhvb2s7XG59O1xudmFyIHBhdGNoUkRUSG9vayA9IChvbkFjdGl2ZSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJkdEhvb2sgPSBnbG9iYWxUaGlzLl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcbiAgICBpZiAoIXJkdEhvb2suX2luc3RydW1lbnRhdGlvblNvdXJjZSkge1xuICAgICAgaXNSZWFjdFJlZnJlc2hPdmVycmlkZSA9IGlzUmVhY3RSZWZyZXNoKHJkdEhvb2spO1xuICAgICAgcmR0SG9vay5jaGVja0RDRSA9IGNoZWNrRENFO1xuICAgICAgcmR0SG9vay5zdXBwb3J0c0ZpYmVyID0gdHJ1ZTtcbiAgICAgIHJkdEhvb2suc3VwcG9ydHNGbGlnaHQgPSB0cnVlO1xuICAgICAgcmR0SG9vay5oYXNVbnN1cHBvcnRlZFJlbmRlcmVyQXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgIHJkdEhvb2suX2luc3RydW1lbnRhdGlvblNvdXJjZSA9IEJJUFBZX0lOU1RSVU1FTlRBVElPTl9TVFJJTkc7XG4gICAgICByZHRIb29rLl9pbnN0cnVtZW50YXRpb25Jc0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgfVxuICBvbkFjdGl2ZT8uKCk7XG59O1xudmFyIGhhc1JEVEhvb2sgPSAoKSA9PiB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gICAgZ2xvYmFsVGhpcyxcbiAgICBcIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfX1wiXG4gICk7XG59O1xudmFyIGdldFJEVEhvb2sgPSAob25BY3RpdmUpID0+IHtcbiAgaWYgKCFoYXNSRFRIb29rKCkpIHtcbiAgICByZXR1cm4gaW5zdGFsbFJEVEhvb2sob25BY3RpdmUpO1xuICB9XG4gIHBhdGNoUkRUSG9vayhvbkFjdGl2ZSk7XG4gIHJldHVybiBnbG9iYWxUaGlzLl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcbn07XG52YXIgaXNSZWdpc3RlcmVkID0gZmFsc2U7XG52YXIgaXNTZXJ2aWNlV29ya2VyUmVnaXN0ZXJlZCA9ICgpID0+IHtcbiAgcmV0dXJuIGlzUmVnaXN0ZXJlZDtcbn07XG50cnkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAvLyBAdHMtZXhwZWN0LWVycm9yIGBkb2N1bWVudGAgbWF5IG5vdCBiZSBkZWZpbmVkIGluIHNvbWUgZW52aXJvbWVudHNcbiAgKHdpbmRvdy5kb2N1bWVudD8uY3JlYXRlRWxlbWVudCB8fCB3aW5kb3cubmF2aWdhdG9yPy5wcm9kdWN0ID09PSBcIlJlYWN0TmF0aXZlXCIpKSB7XG4gICAgaW5zdGFsbFJEVEhvb2soKTtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKG5ldyBVUkwoXCIuL3N3LmpzXCIsIGltcG9ydC5tZXRhLnVybCkpLnRoZW4oKCkgPT4ge1xuICAgICAgICBpc1JlZ2lzdGVyZWQgPSB0cnVlO1xuICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59IGNhdGNoIHtcbn1cbnZhciBJTlNUQUxMX0hPT0tfU0NSSVBUX1NUUklORyA9IFwiKCgpPT57dHJ5e3ZhciB0PSgpPT57fTtjb25zdCBuPW5ldyBNYXA7bGV0IG89MDtnbG9iYWxUaGlzLl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXz17Y2hlY2tEQ0U6dCxzdXBwb3J0c0ZpYmVyOiEwLHN1cHBvcnRzRmxpZ2h0OiEwLGhhc1Vuc3VwcG9ydGVkUmVuZGVyZXJBdHRhY2hlZDohMSxyZW5kZXJlcnM6bixvbkNvbW1pdEZpYmVyUm9vdDp0LG9uQ29tbWl0RmliZXJVbm1vdW50OnQsb25Qb3N0Q29tbWl0RmliZXJSb290OnQsaW5qZWN0KHQpe3ZhciBlPSsrbztyZXR1cm4gbi5zZXQoZSx0KSxnbG9iYWxUaGlzLl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5faW5zdHJ1bWVudGF0aW9uSXNBY3RpdmU9ITAsZX0sX2luc3RydW1lbnRhdGlvbklzQWN0aXZlOiExfX1jYXRjaHt9fSkoKVwiO1xuXG4vLyBzcmMvY29yZS50c1xudmFyIEZ1bmN0aW9uQ29tcG9uZW50VGFnID0gMDtcbnZhciBDbGFzc0NvbXBvbmVudFRhZyA9IDE7XG52YXIgSG9zdFJvb3RUYWcgPSAzO1xudmFyIEhvc3RDb21wb25lbnRUYWcgPSA1O1xudmFyIEhvc3RUZXh0VGFnID0gNjtcbnZhciBGcmFnbWVudFRhZyA9IDc7XG52YXIgQ29udGV4dENvbnN1bWVyVGFnID0gOTtcbnZhciBGb3J3YXJkUmVmVGFnID0gMTE7XG52YXIgU3VzcGVuc2VDb21wb25lbnRUYWcgPSAxMztcbnZhciBNZW1vQ29tcG9uZW50VGFnID0gMTQ7XG52YXIgU2ltcGxlTWVtb0NvbXBvbmVudFRhZyA9IDE1O1xudmFyIERlaHlkcmF0ZWRTdXNwZW5zZUNvbXBvbmVudFRhZyA9IDE4O1xudmFyIE9mZnNjcmVlbkNvbXBvbmVudFRhZyA9IDIyO1xudmFyIExlZ2FjeUhpZGRlbkNvbXBvbmVudFRhZyA9IDIzO1xudmFyIEhvc3RIb2lzdGFibGVUYWcgPSAyNjtcbnZhciBIb3N0U2luZ2xldG9uVGFnID0gMjc7XG52YXIgQ09OQ1VSUkVOVF9NT0RFX05VTUJFUiA9IDYwMTExO1xudmFyIEVMRU1FTlRfVFlQRV9TWU1CT0xfU1RSSU5HID0gXCJTeW1ib2wocmVhY3QuZWxlbWVudClcIjtcbnZhciBUUkFOU0lUSU9OQUxfRUxFTUVOVF9UWVBFX1NZTUJPTF9TVFJJTkcgPSBcIlN5bWJvbChyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudClcIjtcbnZhciBDT05DVVJSRU5UX01PREVfU1lNQk9MX1NUUklORyA9IFwiU3ltYm9sKHJlYWN0LmNvbmN1cnJlbnRfbW9kZSlcIjtcbnZhciBERVBSRUNBVEVEX0FTWU5DX01PREVfU1lNQk9MX1NUUklORyA9IFwiU3ltYm9sKHJlYWN0LmFzeW5jX21vZGUpXCI7XG52YXIgUGVyZm9ybWVkV29yayA9IDE7XG52YXIgUGxhY2VtZW50ID0gMjtcbnZhciBIeWRyYXRpbmcgPSA0MDk2O1xudmFyIFVwZGF0ZSA9IDQ7XG52YXIgQ2xvbmVkID0gODtcbnZhciBDaGlsZERlbGV0aW9uID0gMTY7XG52YXIgQ29udGVudFJlc2V0ID0gMzI7XG52YXIgU25hcHNob3QgPSAxMDI0O1xudmFyIFZpc2liaWxpdHkgPSA4MTkyO1xudmFyIE11dGF0aW9uTWFzayA9IFBsYWNlbWVudCB8IFVwZGF0ZSB8IENoaWxkRGVsZXRpb24gfCBDb250ZW50UmVzZXQgfCBIeWRyYXRpbmcgfCBWaXNpYmlsaXR5IHwgU25hcHNob3Q7XG52YXIgaXNWYWxpZEVsZW1lbnQgPSAoZWxlbWVudCkgPT4gdHlwZW9mIGVsZW1lbnQgPT09IFwib2JqZWN0XCIgJiYgZWxlbWVudCAhPSBudWxsICYmIFwiJCR0eXBlb2ZcIiBpbiBlbGVtZW50ICYmIC8vIHJlYWN0IDE4IHVzZXMgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpLCByZWFjdCAxOSB1c2VzIFN5bWJvbC5mb3IoJ3JlYWN0LnRyYW5zaXRpb25hbC5lbGVtZW50JylcbltcbiAgRUxFTUVOVF9UWVBFX1NZTUJPTF9TVFJJTkcsXG4gIFRSQU5TSVRJT05BTF9FTEVNRU5UX1RZUEVfU1lNQk9MX1NUUklOR1xuXS5pbmNsdWRlcyhTdHJpbmcoZWxlbWVudC4kJHR5cGVvZikpO1xudmFyIGlzVmFsaWRGaWJlciA9IChmaWJlcikgPT4gdHlwZW9mIGZpYmVyID09PSBcIm9iamVjdFwiICYmIGZpYmVyICE9IG51bGwgJiYgXCJ0YWdcIiBpbiBmaWJlciAmJiBcInN0YXRlTm9kZVwiIGluIGZpYmVyICYmIFwicmV0dXJuXCIgaW4gZmliZXIgJiYgXCJjaGlsZFwiIGluIGZpYmVyICYmIFwic2libGluZ1wiIGluIGZpYmVyICYmIFwiZmxhZ3NcIiBpbiBmaWJlcjtcbnZhciBpc0hvc3RGaWJlciA9IChmaWJlcikgPT4ge1xuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgSG9zdENvbXBvbmVudFRhZzpcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBpdCBleGlzdHNcbiAgICBjYXNlIEhvc3RIb2lzdGFibGVUYWc6XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogaXQgZXhpc3RzXG4gICAgY2FzZSBIb3N0U2luZ2xldG9uVGFnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0eXBlb2YgZmliZXIudHlwZSA9PT0gXCJzdHJpbmdcIjtcbiAgfVxufTtcbnZhciBpc0NvbXBvc2l0ZUZpYmVyID0gKGZpYmVyKSA9PiB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSBGdW5jdGlvbkNvbXBvbmVudFRhZzpcbiAgICBjYXNlIENsYXNzQ29tcG9uZW50VGFnOlxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudFRhZzpcbiAgICBjYXNlIE1lbW9Db21wb25lbnRUYWc6XG4gICAgY2FzZSBGb3J3YXJkUmVmVGFnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbnZhciB0cmF2ZXJzZUNvbnRleHRzID0gKGZpYmVyLCBzZWxlY3RvcikgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IG5leHREZXBlbmRlbmNpZXMgPSBmaWJlci5kZXBlbmRlbmNpZXM7XG4gICAgY29uc3QgcHJldkRlcGVuZGVuY2llcyA9IGZpYmVyLmFsdGVybmF0ZT8uZGVwZW5kZW5jaWVzO1xuICAgIGlmICghbmV4dERlcGVuZGVuY2llcyB8fCAhcHJldkRlcGVuZGVuY2llcykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgbmV4dERlcGVuZGVuY2llcyAhPT0gXCJvYmplY3RcIiB8fCAhKFwiZmlyc3RDb250ZXh0XCIgaW4gbmV4dERlcGVuZGVuY2llcykgfHwgdHlwZW9mIHByZXZEZXBlbmRlbmNpZXMgIT09IFwib2JqZWN0XCIgfHwgIShcImZpcnN0Q29udGV4dFwiIGluIHByZXZEZXBlbmRlbmNpZXMpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBuZXh0Q29udGV4dCA9IG5leHREZXBlbmRlbmNpZXMuZmlyc3RDb250ZXh0O1xuICAgIGxldCBwcmV2Q29udGV4dCA9IHByZXZEZXBlbmRlbmNpZXMuZmlyc3RDb250ZXh0O1xuICAgIHdoaWxlIChuZXh0Q29udGV4dCAmJiB0eXBlb2YgbmV4dENvbnRleHQgPT09IFwib2JqZWN0XCIgJiYgXCJtZW1vaXplZFZhbHVlXCIgaW4gbmV4dENvbnRleHQgfHwgcHJldkNvbnRleHQgJiYgdHlwZW9mIHByZXZDb250ZXh0ID09PSBcIm9iamVjdFwiICYmIFwibWVtb2l6ZWRWYWx1ZVwiIGluIHByZXZDb250ZXh0KSB7XG4gICAgICBpZiAoc2VsZWN0b3IobmV4dENvbnRleHQsIHByZXZDb250ZXh0KSA9PT0gdHJ1ZSkgcmV0dXJuIHRydWU7XG4gICAgICBuZXh0Q29udGV4dCA9IG5leHRDb250ZXh0Py5uZXh0O1xuICAgICAgcHJldkNvbnRleHQgPSBwcmV2Q29udGV4dD8ubmV4dDtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgdHJhdmVyc2VTdGF0ZSA9IChmaWJlciwgc2VsZWN0b3IpID0+IHtcbiAgdHJ5IHtcbiAgICBsZXQgbmV4dFN0YXRlID0gZmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICBsZXQgcHJldlN0YXRlID0gZmliZXIuYWx0ZXJuYXRlPy5tZW1vaXplZFN0YXRlO1xuICAgIHdoaWxlIChuZXh0U3RhdGUgfHwgcHJldlN0YXRlKSB7XG4gICAgICBpZiAoc2VsZWN0b3IobmV4dFN0YXRlLCBwcmV2U3RhdGUpID09PSB0cnVlKSByZXR1cm4gdHJ1ZTtcbiAgICAgIG5leHRTdGF0ZSA9IG5leHRTdGF0ZT8ubmV4dDtcbiAgICAgIHByZXZTdGF0ZSA9IHByZXZTdGF0ZT8ubmV4dDtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgdHJhdmVyc2VFZmZlY3RzID0gKGZpYmVyLCBzZWxlY3RvcikgPT4ge1xuICB0cnkge1xuICAgIGxldCBuZXh0U3RhdGUgPSAoXG4gICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdXNwaWNpb3VzL25vRXhwbGljaXRBbnk6IHVuZGVybHlpbmcgdHlwZSBpcyB1bmtub3duXG4gICAgICBmaWJlci51cGRhdGVRdWV1ZT8ubGFzdEVmZmVjdFxuICAgICk7XG4gICAgbGV0IHByZXZTdGF0ZSA9IChcbiAgICAgIC8vIGJpb21lLWlnbm9yZSBsaW50L3N1c3BpY2lvdXMvbm9FeHBsaWNpdEFueTogdW5kZXJseWluZyB0eXBlIGlzIHVua25vd25cbiAgICAgIGZpYmVyLmFsdGVybmF0ZT8udXBkYXRlUXVldWU/Lmxhc3RFZmZlY3RcbiAgICApO1xuICAgIHdoaWxlIChuZXh0U3RhdGUgfHwgcHJldlN0YXRlKSB7XG4gICAgICBpZiAoc2VsZWN0b3IobmV4dFN0YXRlLCBwcmV2U3RhdGUpID09PSB0cnVlKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChuZXh0U3RhdGU/Lm5leHQgPT09IG5leHRTdGF0ZSB8fCBwcmV2U3RhdGU/Lm5leHQgPT09IHByZXZTdGF0ZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG5leHRTdGF0ZSA9IG5leHRTdGF0ZT8ubmV4dDtcbiAgICAgIHByZXZTdGF0ZSA9IHByZXZTdGF0ZT8ubmV4dDtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgdHJhdmVyc2VQcm9wcyA9IChmaWJlciwgc2VsZWN0b3IpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBuZXh0UHJvcHMgPSBmaWJlci5tZW1vaXplZFByb3BzO1xuICAgIGNvbnN0IHByZXZQcm9wcyA9IGZpYmVyLmFsdGVybmF0ZT8ubWVtb2l6ZWRQcm9wcyB8fCB7fTtcbiAgICBjb25zdCBhbGxLZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgICAgLi4uT2JqZWN0LmtleXMocHJldlByb3BzKSxcbiAgICAgIC4uLk9iamVjdC5rZXlzKG5leHRQcm9wcylcbiAgICBdKTtcbiAgICBmb3IgKGNvbnN0IHByb3BOYW1lIG9mIGFsbEtleXMpIHtcbiAgICAgIGNvbnN0IHByZXZWYWx1ZSA9IHByZXZQcm9wcz8uW3Byb3BOYW1lXTtcbiAgICAgIGNvbnN0IG5leHRWYWx1ZSA9IG5leHRQcm9wcz8uW3Byb3BOYW1lXTtcbiAgICAgIGlmIChzZWxlY3Rvcihwcm9wTmFtZSwgbmV4dFZhbHVlLCBwcmV2VmFsdWUpID09PSB0cnVlKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgZGlkRmliZXJSZW5kZXIgPSAoZmliZXIpID0+IHtcbiAgY29uc3QgbmV4dFByb3BzID0gZmliZXIubWVtb2l6ZWRQcm9wcztcbiAgY29uc3QgcHJldlByb3BzID0gZmliZXIuYWx0ZXJuYXRlPy5tZW1vaXplZFByb3BzIHx8IHt9O1xuICBjb25zdCBmbGFncyA9IGZpYmVyLmZsYWdzID8/IGZpYmVyLmVmZmVjdFRhZyA/PyAwO1xuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgQ2xhc3NDb21wb25lbnRUYWc6XG4gICAgY2FzZSBGdW5jdGlvbkNvbXBvbmVudFRhZzpcbiAgICBjYXNlIENvbnRleHRDb25zdW1lclRhZzpcbiAgICBjYXNlIEZvcndhcmRSZWZUYWc6XG4gICAgY2FzZSBNZW1vQ29tcG9uZW50VGFnOlxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudFRhZzoge1xuICAgICAgcmV0dXJuIChmbGFncyAmIFBlcmZvcm1lZFdvcmspID09PSBQZXJmb3JtZWRXb3JrO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKCFmaWJlci5hbHRlcm5hdGUpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIHByZXZQcm9wcyAhPT0gbmV4dFByb3BzIHx8IGZpYmVyLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlICE9PSBmaWJlci5tZW1vaXplZFN0YXRlIHx8IGZpYmVyLmFsdGVybmF0ZS5yZWYgIT09IGZpYmVyLnJlZjtcbiAgfVxufTtcbnZhciBkaWRGaWJlckNvbW1pdCA9IChmaWJlcikgPT4ge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICAoZmliZXIuZmxhZ3MgJiAoTXV0YXRpb25NYXNrIHwgQ2xvbmVkKSkgIT09IDAgfHwgKGZpYmVyLnN1YnRyZWVGbGFncyAmIChNdXRhdGlvbk1hc2sgfCBDbG9uZWQpKSAhPT0gMFxuICApO1xufTtcbnZhciBnZXRNdXRhdGVkSG9zdEZpYmVycyA9IChmaWJlcikgPT4ge1xuICBjb25zdCBtdXRhdGlvbnMgPSBbXTtcbiAgY29uc3Qgc3RhY2sgPSBbZmliZXJdO1xuICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XG4gICAgY29uc3Qgbm9kZSA9IHN0YWNrLnBvcCgpO1xuICAgIGlmICghbm9kZSkgY29udGludWU7XG4gICAgaWYgKGlzSG9zdEZpYmVyKG5vZGUpICYmIGRpZEZpYmVyQ29tbWl0KG5vZGUpICYmIGRpZEZpYmVyUmVuZGVyKG5vZGUpKSB7XG4gICAgICBtdXRhdGlvbnMucHVzaChub2RlKTtcbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGQpIHN0YWNrLnB1c2gobm9kZS5jaGlsZCk7XG4gICAgaWYgKG5vZGUuc2libGluZykgc3RhY2sucHVzaChub2RlLnNpYmxpbmcpO1xuICB9XG4gIHJldHVybiBtdXRhdGlvbnM7XG59O1xudmFyIGdldEZpYmVyU3RhY2sgPSAoZmliZXIpID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgbGV0IGN1cnJlbnRGaWJlciA9IGZpYmVyO1xuICB3aGlsZSAoY3VycmVudEZpYmVyLnJldHVybikge1xuICAgIHN0YWNrLnB1c2goY3VycmVudEZpYmVyKTtcbiAgICBjdXJyZW50RmliZXIgPSBjdXJyZW50RmliZXIucmV0dXJuO1xuICB9XG4gIGNvbnN0IG5ld1N0YWNrID0gbmV3IEFycmF5KHN0YWNrLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICBuZXdTdGFja1tpXSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIGkgLSAxXTtcbiAgfVxuICByZXR1cm4gbmV3U3RhY2s7XG59O1xudmFyIHNob3VsZEZpbHRlckZpYmVyID0gKGZpYmVyKSA9PiB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSBEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnRUYWc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlIEhvc3RUZXh0VGFnOlxuICAgIGNhc2UgRnJhZ21lbnRUYWc6XG4gICAgY2FzZSBMZWdhY3lIaWRkZW5Db21wb25lbnRUYWc6XG4gICAgY2FzZSBPZmZzY3JlZW5Db21wb25lbnRUYWc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlIEhvc3RSb290VGFnOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGNvbnN0IHN5bWJvbE9yTnVtYmVyID0gdHlwZW9mIGZpYmVyLnR5cGUgPT09IFwib2JqZWN0XCIgJiYgZmliZXIudHlwZSAhPT0gbnVsbCA/IGZpYmVyLnR5cGUuJCR0eXBlb2YgOiBmaWJlci50eXBlO1xuICAgICAgY29uc3QgdHlwZVN5bWJvbCA9IHR5cGVvZiBzeW1ib2xPck51bWJlciA9PT0gXCJzeW1ib2xcIiA/IHN5bWJvbE9yTnVtYmVyLnRvU3RyaW5nKCkgOiBzeW1ib2xPck51bWJlcjtcbiAgICAgIHN3aXRjaCAodHlwZVN5bWJvbCkge1xuICAgICAgICBjYXNlIENPTkNVUlJFTlRfTU9ERV9OVU1CRVI6XG4gICAgICAgIGNhc2UgQ09OQ1VSUkVOVF9NT0RFX1NZTUJPTF9TVFJJTkc6XG4gICAgICAgIGNhc2UgREVQUkVDQVRFRF9BU1lOQ19NT0RFX1NZTUJPTF9TVFJJTkc6XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbnZhciBnZXROZWFyZXN0SG9zdEZpYmVyID0gKGZpYmVyLCBhc2NlbmRpbmcgPSBmYWxzZSkgPT4ge1xuICBsZXQgaG9zdEZpYmVyID0gdHJhdmVyc2VGaWJlcihmaWJlciwgaXNIb3N0RmliZXIsIGFzY2VuZGluZyk7XG4gIGlmICghaG9zdEZpYmVyKSB7XG4gICAgaG9zdEZpYmVyID0gdHJhdmVyc2VGaWJlcihmaWJlciwgaXNIb3N0RmliZXIsICFhc2NlbmRpbmcpO1xuICB9XG4gIHJldHVybiBob3N0RmliZXI7XG59O1xudmFyIGdldE5lYXJlc3RIb3N0RmliZXJzID0gKGZpYmVyKSA9PiB7XG4gIGNvbnN0IGhvc3RGaWJlcnMgPSBbXTtcbiAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgaWYgKGlzSG9zdEZpYmVyKGZpYmVyKSkge1xuICAgIGhvc3RGaWJlcnMucHVzaChmaWJlcik7XG4gIH0gZWxzZSBpZiAoZmliZXIuY2hpbGQpIHtcbiAgICBzdGFjay5wdXNoKGZpYmVyLmNoaWxkKTtcbiAgfVxuICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XG4gICAgY29uc3QgY3VycmVudE5vZGUgPSBzdGFjay5wb3AoKTtcbiAgICBpZiAoIWN1cnJlbnROb2RlKSBicmVhaztcbiAgICBpZiAoaXNIb3N0RmliZXIoY3VycmVudE5vZGUpKSB7XG4gICAgICBob3N0RmliZXJzLnB1c2goY3VycmVudE5vZGUpO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudE5vZGUuY2hpbGQpIHtcbiAgICAgIHN0YWNrLnB1c2goY3VycmVudE5vZGUuY2hpbGQpO1xuICAgIH1cbiAgICBpZiAoY3VycmVudE5vZGUuc2libGluZykge1xuICAgICAgc3RhY2sucHVzaChjdXJyZW50Tm9kZS5zaWJsaW5nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGhvc3RGaWJlcnM7XG59O1xudmFyIHRyYXZlcnNlRmliZXIgPSAoZmliZXIsIHNlbGVjdG9yLCBhc2NlbmRpbmcgPSBmYWxzZSkgPT4ge1xuICBpZiAoIWZpYmVyKSByZXR1cm4gbnVsbDtcbiAgaWYgKHNlbGVjdG9yKGZpYmVyKSA9PT0gdHJ1ZSkgcmV0dXJuIGZpYmVyO1xuICBsZXQgY2hpbGQgPSBhc2NlbmRpbmcgPyBmaWJlci5yZXR1cm4gOiBmaWJlci5jaGlsZDtcbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgY29uc3QgbWF0Y2ggPSB0cmF2ZXJzZUZpYmVyKGNoaWxkLCBzZWxlY3RvciwgYXNjZW5kaW5nKTtcbiAgICBpZiAobWF0Y2gpIHJldHVybiBtYXRjaDtcbiAgICBjaGlsZCA9IGFzY2VuZGluZyA/IG51bGwgOiBjaGlsZC5zaWJsaW5nO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbnZhciBnZXRUaW1pbmdzID0gKGZpYmVyKSA9PiB7XG4gIGNvbnN0IHRvdGFsVGltZSA9IGZpYmVyPy5hY3R1YWxEdXJhdGlvbiA/PyAwO1xuICBsZXQgc2VsZlRpbWUgPSB0b3RhbFRpbWU7XG4gIGxldCBjaGlsZCA9IGZpYmVyPy5jaGlsZCA/PyBudWxsO1xuICB3aGlsZSAodG90YWxUaW1lID4gMCAmJiBjaGlsZCAhPSBudWxsKSB7XG4gICAgc2VsZlRpbWUgLT0gY2hpbGQuYWN0dWFsRHVyYXRpb24gPz8gMDtcbiAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIHsgc2VsZlRpbWUsIHRvdGFsVGltZSB9O1xufTtcbnZhciBoYXNNZW1vQ2FjaGUgPSAoZmliZXIpID0+IHtcbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgZmliZXIudXBkYXRlUXVldWU/Lm1lbW9DYWNoZVxuICApO1xufTtcbnZhciBnZXRUeXBlID0gKHR5cGUpID0+IHtcbiAgY29uc3QgY3VycmVudFR5cGUgPSB0eXBlO1xuICBpZiAodHlwZW9mIGN1cnJlbnRUeXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gY3VycmVudFR5cGU7XG4gIH1cbiAgaWYgKHR5cGVvZiBjdXJyZW50VHlwZSA9PT0gXCJvYmplY3RcIiAmJiBjdXJyZW50VHlwZSkge1xuICAgIHJldHVybiBnZXRUeXBlKFxuICAgICAgY3VycmVudFR5cGUudHlwZSB8fCBjdXJyZW50VHlwZS5yZW5kZXJcbiAgICApO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbnZhciBnZXREaXNwbGF5TmFtZSA9ICh0eXBlKSA9PiB7XG4gIGNvbnN0IGN1cnJlbnRUeXBlID0gdHlwZTtcbiAgaWYgKHR5cGVvZiBjdXJyZW50VHlwZSAhPT0gXCJmdW5jdGlvblwiICYmICEodHlwZW9mIGN1cnJlbnRUeXBlID09PSBcIm9iamVjdFwiICYmIGN1cnJlbnRUeXBlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IG5hbWUgPSBjdXJyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBjdXJyZW50VHlwZS5uYW1lIHx8IG51bGw7XG4gIGlmIChuYW1lKSByZXR1cm4gbmFtZTtcbiAgY29uc3QgdW53cmFwcGVkVHlwZSA9IGdldFR5cGUoY3VycmVudFR5cGUpO1xuICBpZiAoIXVud3JhcHBlZFR5cGUpIHJldHVybiBudWxsO1xuICByZXR1cm4gdW53cmFwcGVkVHlwZS5kaXNwbGF5TmFtZSB8fCB1bndyYXBwZWRUeXBlLm5hbWUgfHwgbnVsbDtcbn07XG52YXIgZGV0ZWN0UmVhY3RCdWlsZFR5cGUgPSAocmVuZGVyZXIpID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHJlbmRlcmVyLnZlcnNpb24gPT09IFwic3RyaW5nXCIgJiYgcmVuZGVyZXIuYnVuZGxlVHlwZSA+IDApIHtcbiAgICAgIHJldHVybiBcImRldmVsb3BtZW50XCI7XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgfVxuICByZXR1cm4gXCJwcm9kdWN0aW9uXCI7XG59O1xudmFyIGlzSW5zdHJ1bWVudGF0aW9uQWN0aXZlID0gKCkgPT4ge1xuICBjb25zdCByZHRIb29rID0gZ2V0UkRUSG9vaygpO1xuICByZXR1cm4gQm9vbGVhbihyZHRIb29rLl9pbnN0cnVtZW50YXRpb25Jc0FjdGl2ZSkgfHwgaXNSZWFsUmVhY3REZXZ0b29scygpIHx8IGlzUmVhY3RSZWZyZXNoKCk7XG59O1xudmFyIGZpYmVySWQgPSAwO1xudmFyIGZpYmVySWRNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBzZXRGaWJlcklkID0gKGZpYmVyLCBpZCA9IGZpYmVySWQrKykgPT4ge1xuICBmaWJlcklkTWFwLnNldChmaWJlciwgaWQpO1xufTtcbnZhciBnZXRGaWJlcklkID0gKGZpYmVyKSA9PiB7XG4gIGxldCBpZCA9IGZpYmVySWRNYXAuZ2V0KGZpYmVyKTtcbiAgaWYgKCFpZCAmJiBmaWJlci5hbHRlcm5hdGUpIHtcbiAgICBpZCA9IGZpYmVySWRNYXAuZ2V0KGZpYmVyLmFsdGVybmF0ZSk7XG4gIH1cbiAgaWYgKCFpZCkge1xuICAgIGlkID0gZmliZXJJZCsrO1xuICAgIHNldEZpYmVySWQoZmliZXIsIGlkKTtcbiAgfVxuICByZXR1cm4gaWQ7XG59O1xudmFyIG1vdW50RmliZXJSZWN1cnNpdmVseSA9IChvblJlbmRlciwgZmlyc3RDaGlsZCwgdHJhdmVyc2VTaWJsaW5ncykgPT4ge1xuICBsZXQgZmliZXIgPSBmaXJzdENoaWxkO1xuICB3aGlsZSAoZmliZXIgIT0gbnVsbCkge1xuICAgIGlmICghZmliZXJJZE1hcC5oYXMoZmliZXIpKSB7XG4gICAgICBnZXRGaWJlcklkKGZpYmVyKTtcbiAgICB9XG4gICAgY29uc3Qgc2hvdWxkSW5jbHVkZUluVHJlZSA9ICFzaG91bGRGaWx0ZXJGaWJlcihmaWJlcik7XG4gICAgaWYgKHNob3VsZEluY2x1ZGVJblRyZWUgJiYgZGlkRmliZXJSZW5kZXIoZmliZXIpKSB7XG4gICAgICBvblJlbmRlcihmaWJlciwgXCJtb3VudFwiKTtcbiAgICB9XG4gICAgaWYgKGZpYmVyLnRhZyA9PT0gU3VzcGVuc2VDb21wb25lbnRUYWcpIHtcbiAgICAgIGNvbnN0IGlzVGltZWRPdXQgPSBmaWJlci5tZW1vaXplZFN0YXRlICE9PSBudWxsO1xuICAgICAgaWYgKGlzVGltZWRPdXQpIHtcbiAgICAgICAgY29uc3QgcHJpbWFyeUNoaWxkRnJhZ21lbnQgPSBmaWJlci5jaGlsZDtcbiAgICAgICAgY29uc3QgZmFsbGJhY2tDaGlsZEZyYWdtZW50ID0gcHJpbWFyeUNoaWxkRnJhZ21lbnQgPyBwcmltYXJ5Q2hpbGRGcmFnbWVudC5zaWJsaW5nIDogbnVsbDtcbiAgICAgICAgaWYgKGZhbGxiYWNrQ2hpbGRGcmFnbWVudCkge1xuICAgICAgICAgIGNvbnN0IGZhbGxiYWNrQ2hpbGQgPSBmYWxsYmFja0NoaWxkRnJhZ21lbnQuY2hpbGQ7XG4gICAgICAgICAgaWYgKGZhbGxiYWNrQ2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG1vdW50RmliZXJSZWN1cnNpdmVseShvblJlbmRlciwgZmFsbGJhY2tDaGlsZCwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByaW1hcnlDaGlsZCA9IG51bGw7XG4gICAgICAgIGlmIChmaWJlci5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHByaW1hcnlDaGlsZCA9IGZpYmVyLmNoaWxkLmNoaWxkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmltYXJ5Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICBtb3VudEZpYmVyUmVjdXJzaXZlbHkob25SZW5kZXIsIHByaW1hcnlDaGlsZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWJlci5jaGlsZCAhPSBudWxsKSB7XG4gICAgICBtb3VudEZpYmVyUmVjdXJzaXZlbHkob25SZW5kZXIsIGZpYmVyLmNoaWxkLCB0cnVlKTtcbiAgICB9XG4gICAgZmliZXIgPSB0cmF2ZXJzZVNpYmxpbmdzID8gZmliZXIuc2libGluZyA6IG51bGw7XG4gIH1cbn07XG52YXIgdXBkYXRlRmliZXJSZWN1cnNpdmVseSA9IChvblJlbmRlciwgbmV4dEZpYmVyLCBwcmV2RmliZXIsIHBhcmVudEZpYmVyKSA9PiB7XG4gIGlmICghZmliZXJJZE1hcC5oYXMobmV4dEZpYmVyKSkge1xuICAgIGdldEZpYmVySWQobmV4dEZpYmVyKTtcbiAgfVxuICBpZiAoIXByZXZGaWJlcikgcmV0dXJuO1xuICBpZiAoIWZpYmVySWRNYXAuaGFzKHByZXZGaWJlcikpIHtcbiAgICBnZXRGaWJlcklkKHByZXZGaWJlcik7XG4gIH1cbiAgY29uc3QgaXNTdXNwZW5zZSA9IG5leHRGaWJlci50YWcgPT09IFN1c3BlbnNlQ29tcG9uZW50VGFnO1xuICBjb25zdCBzaG91bGRJbmNsdWRlSW5UcmVlID0gIXNob3VsZEZpbHRlckZpYmVyKG5leHRGaWJlcik7XG4gIGlmIChzaG91bGRJbmNsdWRlSW5UcmVlICYmIGRpZEZpYmVyUmVuZGVyKG5leHRGaWJlcikpIHtcbiAgICBvblJlbmRlcihuZXh0RmliZXIsIFwidXBkYXRlXCIpO1xuICB9XG4gIGNvbnN0IHByZXZEaWRUaW1lb3V0ID0gaXNTdXNwZW5zZSAmJiBwcmV2RmliZXIubWVtb2l6ZWRTdGF0ZSAhPT0gbnVsbDtcbiAgY29uc3QgbmV4dERpZFRpbWVPdXQgPSBpc1N1c3BlbnNlICYmIG5leHRGaWJlci5tZW1vaXplZFN0YXRlICE9PSBudWxsO1xuICBpZiAocHJldkRpZFRpbWVvdXQgJiYgbmV4dERpZFRpbWVPdXQpIHtcbiAgICBjb25zdCBuZXh0RmFsbGJhY2tDaGlsZFNldCA9IG5leHRGaWJlci5jaGlsZD8uc2libGluZyA/PyBudWxsO1xuICAgIGNvbnN0IHByZXZGYWxsYmFja0NoaWxkU2V0ID0gcHJldkZpYmVyLmNoaWxkPy5zaWJsaW5nID8/IG51bGw7XG4gICAgaWYgKG5leHRGYWxsYmFja0NoaWxkU2V0ICE9PSBudWxsICYmIHByZXZGYWxsYmFja0NoaWxkU2V0ICE9PSBudWxsKSB7XG4gICAgICB1cGRhdGVGaWJlclJlY3Vyc2l2ZWx5KFxuICAgICAgICBvblJlbmRlcixcbiAgICAgICAgbmV4dEZhbGxiYWNrQ2hpbGRTZXQsXG4gICAgICAgIHByZXZGYWxsYmFja0NoaWxkU2V0KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJldkRpZFRpbWVvdXQgJiYgIW5leHREaWRUaW1lT3V0KSB7XG4gICAgY29uc3QgbmV4dFByaW1hcnlDaGlsZFNldCA9IG5leHRGaWJlci5jaGlsZDtcbiAgICBpZiAobmV4dFByaW1hcnlDaGlsZFNldCAhPT0gbnVsbCkge1xuICAgICAgbW91bnRGaWJlclJlY3Vyc2l2ZWx5KG9uUmVuZGVyLCBuZXh0UHJpbWFyeUNoaWxkU2V0LCB0cnVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIXByZXZEaWRUaW1lb3V0ICYmIG5leHREaWRUaW1lT3V0KSB7XG4gICAgdW5tb3VudEZpYmVyQ2hpbGRyZW5SZWN1cnNpdmVseShvblJlbmRlciwgcHJldkZpYmVyKTtcbiAgICBjb25zdCBuZXh0RmFsbGJhY2tDaGlsZFNldCA9IG5leHRGaWJlci5jaGlsZD8uc2libGluZyA/PyBudWxsO1xuICAgIGlmIChuZXh0RmFsbGJhY2tDaGlsZFNldCAhPT0gbnVsbCkge1xuICAgICAgbW91bnRGaWJlclJlY3Vyc2l2ZWx5KG9uUmVuZGVyLCBuZXh0RmFsbGJhY2tDaGlsZFNldCwgdHJ1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG5leHRGaWJlci5jaGlsZCAhPT0gcHJldkZpYmVyLmNoaWxkKSB7XG4gICAgbGV0IG5leHRDaGlsZCA9IG5leHRGaWJlci5jaGlsZDtcbiAgICB3aGlsZSAobmV4dENoaWxkKSB7XG4gICAgICBpZiAobmV4dENoaWxkLmFsdGVybmF0ZSkge1xuICAgICAgICBjb25zdCBwcmV2Q2hpbGQgPSBuZXh0Q2hpbGQuYWx0ZXJuYXRlO1xuICAgICAgICB1cGRhdGVGaWJlclJlY3Vyc2l2ZWx5KFxuICAgICAgICAgIG9uUmVuZGVyLFxuICAgICAgICAgIG5leHRDaGlsZCxcbiAgICAgICAgICBwcmV2Q2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW91bnRGaWJlclJlY3Vyc2l2ZWx5KG9uUmVuZGVyLCBuZXh0Q2hpbGQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIG5leHRDaGlsZCA9IG5leHRDaGlsZC5zaWJsaW5nO1xuICAgIH1cbiAgfVxufTtcbnZhciB1bm1vdW50RmliZXIgPSAob25SZW5kZXIsIGZpYmVyKSA9PiB7XG4gIGNvbnN0IGlzUm9vdCA9IGZpYmVyLnRhZyA9PT0gSG9zdFJvb3RUYWc7XG4gIGlmIChpc1Jvb3QgfHwgIXNob3VsZEZpbHRlckZpYmVyKGZpYmVyKSkge1xuICAgIG9uUmVuZGVyKGZpYmVyLCBcInVubW91bnRcIik7XG4gIH1cbn07XG52YXIgdW5tb3VudEZpYmVyQ2hpbGRyZW5SZWN1cnNpdmVseSA9IChvblJlbmRlciwgZmliZXIpID0+IHtcbiAgY29uc3QgaXNUaW1lZE91dFN1c3BlbnNlID0gZmliZXIudGFnID09PSBTdXNwZW5zZUNvbXBvbmVudFRhZyAmJiBmaWJlci5tZW1vaXplZFN0YXRlICE9PSBudWxsO1xuICBsZXQgY2hpbGQgPSBmaWJlci5jaGlsZDtcbiAgaWYgKGlzVGltZWRPdXRTdXNwZW5zZSkge1xuICAgIGNvbnN0IHByaW1hcnlDaGlsZEZyYWdtZW50ID0gZmliZXIuY2hpbGQ7XG4gICAgY29uc3QgZmFsbGJhY2tDaGlsZEZyYWdtZW50ID0gcHJpbWFyeUNoaWxkRnJhZ21lbnQ/LnNpYmxpbmcgPz8gbnVsbDtcbiAgICBjaGlsZCA9IGZhbGxiYWNrQ2hpbGRGcmFnbWVudD8uY2hpbGQgPz8gbnVsbDtcbiAgfVxuICB3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcbiAgICBpZiAoY2hpbGQucmV0dXJuICE9PSBudWxsKSB7XG4gICAgICB1bm1vdW50RmliZXIob25SZW5kZXIsIGNoaWxkKTtcbiAgICAgIHVubW91bnRGaWJlckNoaWxkcmVuUmVjdXJzaXZlbHkob25SZW5kZXIsIGNoaWxkKTtcbiAgICB9XG4gICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xuICB9XG59O1xudmFyIGNvbW1pdElkID0gMDtcbnZhciByb290SW5zdGFuY2VNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciB0cmF2ZXJzZVJlbmRlcmVkRmliZXJzID0gKHJvb3QsIG9uUmVuZGVyKSA9PiB7XG4gIGNvbnN0IGZpYmVyID0gXCJjdXJyZW50XCIgaW4gcm9vdCA/IHJvb3QuY3VycmVudCA6IHJvb3Q7XG4gIGxldCByb290SW5zdGFuY2UgPSByb290SW5zdGFuY2VNYXAuZ2V0KHJvb3QpO1xuICBpZiAoIXJvb3RJbnN0YW5jZSkge1xuICAgIHJvb3RJbnN0YW5jZSA9IHsgcHJldkZpYmVyOiBudWxsLCBpZDogY29tbWl0SWQrKyB9O1xuICAgIHJvb3RJbnN0YW5jZU1hcC5zZXQocm9vdCwgcm9vdEluc3RhbmNlKTtcbiAgfVxuICBjb25zdCB7IHByZXZGaWJlciB9ID0gcm9vdEluc3RhbmNlO1xuICBpZiAoIWZpYmVyKSB7XG4gICAgdW5tb3VudEZpYmVyKG9uUmVuZGVyLCBmaWJlcik7XG4gIH0gZWxzZSBpZiAocHJldkZpYmVyICE9PSBudWxsKSB7XG4gICAgY29uc3Qgd2FzTW91bnRlZCA9IHByZXZGaWJlciAmJiBwcmV2RmliZXIubWVtb2l6ZWRTdGF0ZSAhPSBudWxsICYmIHByZXZGaWJlci5tZW1vaXplZFN0YXRlLmVsZW1lbnQgIT0gbnVsbCAmJiAvLyBBIGRlaHlkcmF0ZWQgcm9vdCBpcyBub3QgY29uc2lkZXJlZCBtb3VudGVkXG4gICAgcHJldkZpYmVyLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkICE9PSB0cnVlO1xuICAgIGNvbnN0IGlzTW91bnRlZCA9IGZpYmVyLm1lbW9pemVkU3RhdGUgIT0gbnVsbCAmJiBmaWJlci5tZW1vaXplZFN0YXRlLmVsZW1lbnQgIT0gbnVsbCAmJiAvLyBBIGRlaHlkcmF0ZWQgcm9vdCBpcyBub3QgY29uc2lkZXJlZCBtb3VudGVkXG4gICAgZmliZXIubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQgIT09IHRydWU7XG4gICAgaWYgKCF3YXNNb3VudGVkICYmIGlzTW91bnRlZCkge1xuICAgICAgbW91bnRGaWJlclJlY3Vyc2l2ZWx5KG9uUmVuZGVyLCBmaWJlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAod2FzTW91bnRlZCAmJiBpc01vdW50ZWQpIHtcbiAgICAgIHVwZGF0ZUZpYmVyUmVjdXJzaXZlbHkob25SZW5kZXIsIGZpYmVyLCBmaWJlci5hbHRlcm5hdGUpO1xuICAgIH0gZWxzZSBpZiAod2FzTW91bnRlZCAmJiAhaXNNb3VudGVkKSB7XG4gICAgICB1bm1vdW50RmliZXIob25SZW5kZXIsIGZpYmVyKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbW91bnRGaWJlclJlY3Vyc2l2ZWx5KG9uUmVuZGVyLCBmaWJlciwgdHJ1ZSk7XG4gIH1cbiAgcm9vdEluc3RhbmNlLnByZXZGaWJlciA9IGZpYmVyO1xufTtcbnZhciBjcmVhdGVGaWJlclZpc2l0b3IgPSAoe1xuICBvblJlbmRlclxufSkgPT4ge1xuICByZXR1cm4gKF9yZW5kZXJlcklELCByb290LCBfc3RhdGUpID0+IHtcbiAgICB0cmF2ZXJzZVJlbmRlcmVkRmliZXJzKHJvb3QsIG9uUmVuZGVyKTtcbiAgfTtcbn07XG52YXIgaW5zdHJ1bWVudCA9IChvcHRpb25zKSA9PiB7XG4gIHJldHVybiBnZXRSRFRIb29rKCgpID0+IHtcbiAgICBjb25zdCByZHRIb29rID0gZ2V0UkRUSG9vaygpO1xuICAgIG9wdGlvbnMub25BY3RpdmU/LigpO1xuICAgIHJkdEhvb2suX2luc3RydW1lbnRhdGlvblNvdXJjZSA9IG9wdGlvbnMubmFtZSA/PyBCSVBQWV9JTlNUUlVNRU5UQVRJT05fU1RSSU5HO1xuICAgIGNvbnN0IHByZXZPbkNvbW1pdEZpYmVyUm9vdCA9IHJkdEhvb2sub25Db21taXRGaWJlclJvb3Q7XG4gICAgaWYgKG9wdGlvbnMub25Db21taXRGaWJlclJvb3QpIHtcbiAgICAgIHJkdEhvb2sub25Db21taXRGaWJlclJvb3QgPSAocmVuZGVyZXJJRCwgcm9vdCwgcHJpb3JpdHkpID0+IHtcbiAgICAgICAgaWYgKHByZXZPbkNvbW1pdEZpYmVyUm9vdClcbiAgICAgICAgICBwcmV2T25Db21taXRGaWJlclJvb3QocmVuZGVyZXJJRCwgcm9vdCwgcHJpb3JpdHkpO1xuICAgICAgICBvcHRpb25zLm9uQ29tbWl0RmliZXJSb290Py4ocmVuZGVyZXJJRCwgcm9vdCwgcHJpb3JpdHkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcHJldk9uQ29tbWl0RmliZXJVbm1vdW50ID0gcmR0SG9vay5vbkNvbW1pdEZpYmVyVW5tb3VudDtcbiAgICBpZiAob3B0aW9ucy5vbkNvbW1pdEZpYmVyVW5tb3VudCkge1xuICAgICAgcmR0SG9vay5vbkNvbW1pdEZpYmVyVW5tb3VudCA9IChyZW5kZXJlcklELCByb290KSA9PiB7XG4gICAgICAgIGlmIChwcmV2T25Db21taXRGaWJlclVubW91bnQpXG4gICAgICAgICAgcHJldk9uQ29tbWl0RmliZXJVbm1vdW50KHJlbmRlcmVySUQsIHJvb3QpO1xuICAgICAgICBvcHRpb25zLm9uQ29tbWl0RmliZXJVbm1vdW50Py4ocmVuZGVyZXJJRCwgcm9vdCk7XG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBwcmV2T25Qb3N0Q29tbWl0RmliZXJSb290ID0gcmR0SG9vay5vblBvc3RDb21taXRGaWJlclJvb3Q7XG4gICAgaWYgKG9wdGlvbnMub25Qb3N0Q29tbWl0RmliZXJSb290KSB7XG4gICAgICByZHRIb29rLm9uUG9zdENvbW1pdEZpYmVyUm9vdCA9IChyZW5kZXJlcklELCByb290KSA9PiB7XG4gICAgICAgIGlmIChwcmV2T25Qb3N0Q29tbWl0RmliZXJSb290KVxuICAgICAgICAgIHByZXZPblBvc3RDb21taXRGaWJlclJvb3QocmVuZGVyZXJJRCwgcm9vdCk7XG4gICAgICAgIG9wdGlvbnMub25Qb3N0Q29tbWl0RmliZXJSb290Py4ocmVuZGVyZXJJRCwgcm9vdCk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59O1xudmFyIGdldEZpYmVyRnJvbUhvc3RJbnN0YW5jZSA9IChob3N0SW5zdGFuY2UpID0+IHtcbiAgY29uc3QgcmR0SG9vayA9IGdldFJEVEhvb2soKTtcbiAgZm9yIChjb25zdCByZW5kZXJlciBvZiByZHRIb29rLnJlbmRlcmVycy52YWx1ZXMoKSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBmaWJlciA9IHJlbmRlcmVyLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlPy4oaG9zdEluc3RhbmNlKTtcbiAgICAgIGlmIChmaWJlcikgcmV0dXJuIGZpYmVyO1xuICAgIH0gY2F0Y2gge1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIGhvc3RJbnN0YW5jZSA9PT0gXCJvYmplY3RcIiAmJiBob3N0SW5zdGFuY2UgIT0gbnVsbCkge1xuICAgIGlmIChcIl9yZWFjdFJvb3RDb250YWluZXJcIiBpbiBob3N0SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBob3N0SW5zdGFuY2UuX3JlYWN0Um9vdENvbnRhaW5lcj8uX2ludGVybmFsUm9vdD8uY3VycmVudD8uY2hpbGQ7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIGhvc3RJbnN0YW5jZSkge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKFwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIpIHx8IGtleS5zdGFydHNXaXRoKFwiX19yZWFjdEZpYmVyXCIpKSB7XG4gICAgICAgIHJldHVybiBob3N0SW5zdGFuY2Vba2V5XSB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG52YXIgc2VjdXJlID0gKG9wdGlvbnMsIHNlY3VyZU9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBvbkFjdGl2ZSA9IG9wdGlvbnMub25BY3RpdmU7XG4gIGNvbnN0IGlzUkRUSG9va0luc3RhbGxlZCA9IGhhc1JEVEhvb2soKTtcbiAgY29uc3QgaXNVc2luZ1JlYWxSZWFjdERldnRvb2xzID0gaXNSZWFsUmVhY3REZXZ0b29scygpO1xuICBjb25zdCBpc1VzaW5nUmVhY3RSZWZyZXNoID0gaXNSZWFjdFJlZnJlc2goKTtcbiAgbGV0IHRpbWVvdXQ7XG4gIGxldCBpc1Byb2R1Y3Rpb24gPSBmYWxzZTtcbiAgb3B0aW9ucy5vbkFjdGl2ZSA9ICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgbGV0IGlzU2VjdXJlID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgb25BY3RpdmU/LigpO1xuICAgICAgY29uc3QgcmR0SG9vayA9IGdldFJEVEhvb2soKTtcbiAgICAgIGZvciAoY29uc3QgcmVuZGVyZXIgb2YgcmR0SG9vay5yZW5kZXJlcnMudmFsdWVzKCkpIHtcbiAgICAgICAgY29uc3QgW21ham9yVmVyc2lvbl0gPSByZW5kZXJlci52ZXJzaW9uLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgaWYgKE51bWJlcihtYWpvclZlcnNpb24pIDwgKHNlY3VyZU9wdGlvbnMubWluUmVhY3RNYWpvclZlcnNpb24gPz8gMTcpKSB7XG4gICAgICAgICAgaXNTZWN1cmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWlsZFR5cGUgPSBkZXRlY3RSZWFjdEJ1aWxkVHlwZShyZW5kZXJlcik7XG4gICAgICAgIGlmIChidWlsZFR5cGUgIT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgIGlzUHJvZHVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgaWYgKCFzZWN1cmVPcHRpb25zLmRhbmdlcm91c2x5UnVuSW5Qcm9kdWN0aW9uKSB7XG4gICAgICAgICAgICBpc1NlY3VyZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgc2VjdXJlT3B0aW9ucy5vbkVycm9yPy4oZXJyKTtcbiAgICB9XG4gICAgaWYgKCFpc1NlY3VyZSkge1xuICAgICAgb3B0aW9ucy5vbkNvbW1pdEZpYmVyUm9vdCA9IHZvaWQgMDtcbiAgICAgIG9wdGlvbnMub25Db21taXRGaWJlclVubW91bnQgPSB2b2lkIDA7XG4gICAgICBvcHRpb25zLm9uUG9zdENvbW1pdEZpYmVyUm9vdCA9IHZvaWQgMDtcbiAgICAgIG9wdGlvbnMub25BY3RpdmUgPSB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBvbkNvbW1pdEZpYmVyUm9vdDIgPSBvcHRpb25zLm9uQ29tbWl0RmliZXJSb290O1xuICAgICAgaWYgKG9uQ29tbWl0RmliZXJSb290Mikge1xuICAgICAgICBvcHRpb25zLm9uQ29tbWl0RmliZXJSb290ID0gKHJlbmRlcmVySUQsIHJvb3QsIHByaW9yaXR5KSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9uQ29tbWl0RmliZXJSb290MihyZW5kZXJlcklELCByb290LCBwcmlvcml0eSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzZWN1cmVPcHRpb25zLm9uRXJyb3I/LihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9uQ29tbWl0RmliZXJVbm1vdW50ID0gb3B0aW9ucy5vbkNvbW1pdEZpYmVyVW5tb3VudDtcbiAgICAgIGlmIChvbkNvbW1pdEZpYmVyVW5tb3VudCkge1xuICAgICAgICBvcHRpb25zLm9uQ29tbWl0RmliZXJVbm1vdW50ID0gKHJlbmRlcmVySUQsIHJvb3QpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb25Db21taXRGaWJlclVubW91bnQocmVuZGVyZXJJRCwgcm9vdCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzZWN1cmVPcHRpb25zLm9uRXJyb3I/LihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9uUG9zdENvbW1pdEZpYmVyUm9vdCA9IG9wdGlvbnMub25Qb3N0Q29tbWl0RmliZXJSb290O1xuICAgICAgaWYgKG9uUG9zdENvbW1pdEZpYmVyUm9vdCkge1xuICAgICAgICBvcHRpb25zLm9uUG9zdENvbW1pdEZpYmVyUm9vdCA9IChyZW5kZXJlcklELCByb290KSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9uUG9zdENvbW1pdEZpYmVyUm9vdChyZW5kZXJlcklELCByb290KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNlY3VyZU9wdGlvbnMub25FcnJvcj8uKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgc2VjdXJlT3B0aW9ucy5vbkVycm9yPy4oZXJyKTtcbiAgICB9XG4gIH07XG4gIGlmICghaXNSRFRIb29rSW5zdGFsbGVkICYmICFpc1VzaW5nUmVhbFJlYWN0RGV2dG9vbHMgJiYgIWlzVXNpbmdSZWFjdFJlZnJlc2gpIHtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIWlzUHJvZHVjdGlvbikge1xuICAgICAgICBzZWN1cmVPcHRpb25zLm9uRXJyb3I/LigpO1xuICAgICAgfVxuICAgICAgc3RvcCgpO1xuICAgIH0sIHNlY3VyZU9wdGlvbnMuaW5zdGFsbENoZWNrVGltZW91dCA/PyAxMDApO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufTtcbnZhciBvbkNvbW1pdEZpYmVyUm9vdCA9IChoYW5kbGVyKSA9PiB7XG4gIHJldHVybiBpbnN0cnVtZW50KFxuICAgIHNlY3VyZSh7XG4gICAgICBvbkNvbW1pdEZpYmVyUm9vdDogKF8sIHJvb3QpID0+IHtcbiAgICAgICAgaGFuZGxlcihyb290KTtcbiAgICAgIH1cbiAgICB9KVxuICApO1xufTtcblxuZXhwb3J0IHsgQklQUFlfSU5TVFJVTUVOVEFUSU9OX1NUUklORywgQ09OQ1VSUkVOVF9NT0RFX05VTUJFUiwgQ09OQ1VSUkVOVF9NT0RFX1NZTUJPTF9TVFJJTkcsIENsYXNzQ29tcG9uZW50VGFnLCBDb250ZXh0Q29uc3VtZXJUYWcsIERFUFJFQ0FURURfQVNZTkNfTU9ERV9TWU1CT0xfU1RSSU5HLCBEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnRUYWcsIEVMRU1FTlRfVFlQRV9TWU1CT0xfU1RSSU5HLCBGb3J3YXJkUmVmVGFnLCBGcmFnbWVudFRhZywgRnVuY3Rpb25Db21wb25lbnRUYWcsIEhvc3RDb21wb25lbnRUYWcsIEhvc3RIb2lzdGFibGVUYWcsIEhvc3RSb290VGFnLCBIb3N0U2luZ2xldG9uVGFnLCBIb3N0VGV4dFRhZywgSU5TVEFMTF9IT09LX1NDUklQVF9TVFJJTkcsIExlZ2FjeUhpZGRlbkNvbXBvbmVudFRhZywgTWVtb0NvbXBvbmVudFRhZywgT2Zmc2NyZWVuQ29tcG9uZW50VGFnLCBTaW1wbGVNZW1vQ29tcG9uZW50VGFnLCBTdXNwZW5zZUNvbXBvbmVudFRhZywgVFJBTlNJVElPTkFMX0VMRU1FTlRfVFlQRV9TWU1CT0xfU1RSSU5HLCBjcmVhdGVGaWJlclZpc2l0b3IsIGRldGVjdFJlYWN0QnVpbGRUeXBlLCBkaWRGaWJlckNvbW1pdCwgZGlkRmliZXJSZW5kZXIsIGZpYmVySWRNYXAsIGdldERpc3BsYXlOYW1lLCBnZXRGaWJlckZyb21Ib3N0SW5zdGFuY2UsIGdldEZpYmVySWQsIGdldEZpYmVyU3RhY2ssIGdldE11dGF0ZWRIb3N0RmliZXJzLCBnZXROZWFyZXN0SG9zdEZpYmVyLCBnZXROZWFyZXN0SG9zdEZpYmVycywgZ2V0UkRUSG9vaywgZ2V0VGltaW5ncywgZ2V0VHlwZSwgaGFzTWVtb0NhY2hlLCBoYXNSRFRIb29rLCBpbnN0YWxsUkRUSG9vaywgaW5zdHJ1bWVudCwgaXNDb21wb3NpdGVGaWJlciwgaXNIb3N0RmliZXIsIGlzSW5zdHJ1bWVudGF0aW9uQWN0aXZlLCBpc1JlYWN0UmVmcmVzaCwgaXNSZWFsUmVhY3REZXZ0b29scywgaXNTZXJ2aWNlV29ya2VyUmVnaXN0ZXJlZCwgaXNWYWxpZEVsZW1lbnQsIGlzVmFsaWRGaWJlciwgbW91bnRGaWJlclJlY3Vyc2l2ZWx5LCBvbkNvbW1pdEZpYmVyUm9vdCwgcGF0Y2hSRFRIb29rLCBzZWN1cmUsIHNldEZpYmVySWQsIHNob3VsZEZpbHRlckZpYmVyLCB0cmF2ZXJzZUNvbnRleHRzLCB0cmF2ZXJzZUVmZmVjdHMsIHRyYXZlcnNlRmliZXIsIHRyYXZlcnNlUHJvcHMsIHRyYXZlcnNlUmVuZGVyZWRGaWJlcnMsIHRyYXZlcnNlU3RhdGUsIHVubW91bnRGaWJlciwgdW5tb3VudEZpYmVyQ2hpbGRyZW5SZWN1cnNpdmVseSwgdXBkYXRlRmliZXJSZWN1cnNpdmVseSwgdmVyc2lvbiB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bippy/dist/chunk-ZF32UKFC.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-scan/dist/index.mjs":
/*!************************************************!*\
  !*** ./node_modules/react-scan/dist/index.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactScanInternals: () => (/* binding */ ReactScanInternals),\n/* harmony export */   Store: () => (/* binding */ Store),\n/* harmony export */   getIsProduction: () => (/* binding */ getIsProduction),\n/* harmony export */   getOptions: () => (/* binding */ getOptions),\n/* harmony export */   getReport: () => (/* binding */ getReport),\n/* harmony export */   ignoreScan: () => (/* binding */ ignoreScan),\n/* harmony export */   ignoredProps: () => (/* binding */ ignoredProps),\n/* harmony export */   onRender: () => (/* binding */ onRender),\n/* harmony export */   scan: () => (/* binding */ scan),\n/* harmony export */   setOptions: () => (/* binding */ setOptions),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   useScan: () => (/* binding */ useScan)\n/* harmony export */ });\n/* harmony import */ var bippy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bippy */ \"(app-pages-browser)/./node_modules/bippy/dist/chunk-ZF32UKFC.js\");\n/* harmony import */ var _preact_signals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @preact/signals */ \"(app-pages-browser)/./node_modules/@preact/signals/dist/signals.module.js\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! preact */ \"(app-pages-browser)/./node_modules/preact/dist/preact.module.js\");\n/* harmony import */ var preact_hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! preact/hooks */ \"(app-pages-browser)/./node_modules/preact/hooks/dist/hooks.module.js\");\n/* harmony import */ var preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! preact/jsx-runtime */ \"(app-pages-browser)/./node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js\");\n/* harmony import */ var preact_compat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! preact/compat */ \"(app-pages-browser)/./node_modules/preact/compat/dist/compat.module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ ReactScanInternals,Store,getIsProduction,getOptions,getReport,ignoreScan,ignoredProps,onRender,scan,setOptions,start,useScan auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$(), _s25 = $RefreshSig$(), _s26 = $RefreshSig$(), _s27 = $RefreshSig$(), _s28 = $RefreshSig$(), _s29 = $RefreshSig$(), _s30 = $RefreshSig$(), _s31 = $RefreshSig$(), _s32 = $RefreshSig$(), _s33 = $RefreshSig$(), _s34 = $RefreshSig$(), _s35 = $RefreshSig$(), _s36 = $RefreshSig$(), _s37 = $RefreshSig$(), _s38 = $RefreshSig$(), _s39 = $RefreshSig$(), _s40 = $RefreshSig$(), _s41 = $RefreshSig$(), _s42 = $RefreshSig$(), _s43 = $RefreshSig$(), _s44 = $RefreshSig$(), _s45 = $RefreshSig$(), _s46 = $RefreshSig$(), _s47 = $RefreshSig$(), _s48 = $RefreshSig$(), _s49 = $RefreshSig$(), _s50 = $RefreshSig$();\n/**\n * Copyright 2024 Aiden Bai, Million Software, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n * and associated documentation files (the “Software”), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or\n * substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ // src/install-hook.ts\n\nvar init = ()=>{\n    (0,bippy__WEBPACK_IMPORTED_MODULE_0__.installRDTHook)();\n};\ninit();\n// src/core/index.ts\n\n\n// src/new-outlines/index.ts\n\n// src/core/instrumentation.ts\n\n\n\n// src/core/utils.ts\n\nfunction descending(a, b) {\n    return b - a;\n}\nfunction getComponentGroupNames(group) {\n    let result = group[0].name;\n    const len = group.length;\n    const max = Math.min(4, len);\n    for(let i = 1; i < max; i++){\n        result += \", \".concat(group[i].name);\n    }\n    return result;\n}\nfunction getComponentGroupTotalTime(group) {\n    let result = group[0].time;\n    for(let i = 1, len = group.length; i < len; i++){\n        result += group[i].time;\n    }\n    return result;\n}\nfunction componentGroupHasForget(group) {\n    for(let i = 0, len = group.length; i < len; i++){\n        if (group[i].forget) {\n            return true;\n        }\n    }\n    return false;\n}\nvar getLabelText = (groupedAggregatedRenders)=>{\n    let labelText = \"\";\n    const componentsByCount = /* @__PURE__ */ new Map();\n    for (const aggregatedRender of groupedAggregatedRenders){\n        const { forget, time, aggregatedCount, name } = aggregatedRender;\n        if (!componentsByCount.has(aggregatedCount)) {\n            componentsByCount.set(aggregatedCount, []);\n        }\n        const components = componentsByCount.get(aggregatedCount);\n        if (components) {\n            components.push({\n                name,\n                forget,\n                time: time !== null && time !== void 0 ? time : 0\n            });\n        }\n    }\n    const sortedCounts = Array.from(componentsByCount.keys()).sort(descending);\n    const parts = [];\n    let cumulativeTime = 0;\n    for (const count of sortedCounts){\n        const componentGroup = componentsByCount.get(count);\n        if (!componentGroup) continue;\n        let text = getComponentGroupNames(componentGroup);\n        const totalTime = getComponentGroupTotalTime(componentGroup);\n        const hasForget = componentGroupHasForget(componentGroup);\n        cumulativeTime += totalTime;\n        if (componentGroup.length > 4) {\n            text += \"\\u2026\";\n        }\n        if (count > 1) {\n            text += \" \\xd7 \".concat(count);\n        }\n        if (hasForget) {\n            text = \"✨\".concat(text);\n        }\n        parts.push(text);\n    }\n    labelText = parts.join(\", \");\n    if (!labelText.length) return null;\n    if (labelText.length > 40) {\n        labelText = \"\".concat(labelText.slice(0, 40), \"…\");\n    }\n    if (cumulativeTime >= 0.01) {\n        labelText += \" (\".concat(Number(cumulativeTime.toFixed(2)), \"ms)\");\n    }\n    return labelText;\n};\nfunction isEqual(a, b) {\n    return a === b || a !== a && b !== b;\n}\nvar playNotificationSound = (audioContext)=>{\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n    const options = {\n        type: \"sine\",\n        freq: [\n            392,\n            //  523.25,\n            600\n        ],\n        duration: 0.3,\n        gain: 0.12\n    };\n    const frequencies = options.freq;\n    const timePerNote = options.duration / frequencies.length;\n    frequencies.forEach((freq, i)=>{\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime + i * timePerNote);\n    });\n    oscillator.type = options.type;\n    gainNode.gain.setValueAtTime(options.gain, audioContext.currentTime);\n    gainNode.gain.setTargetAtTime(0, audioContext.currentTime + options.duration * 0.7, 0.05);\n    oscillator.start();\n    oscillator.stop(audioContext.currentTime + options.duration);\n};\n// src/web/utils/lerp.ts\nvar lerp = (start2, end, t)=>{\n    return start2 + (end - start2) * t;\n};\n// src/web/utils/helpers.ts\n\n// ../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs\nfunction r(e) {\n    var t, f, n = \"\";\n    if (\"string\" == typeof e || \"number\" == typeof e) n += e;\n    else if (\"object\" == typeof e) if (Array.isArray(e)) {\n        var o = e.length;\n        for(t = 0; t < o; t++)e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n    } else for(f in e)e[f] && (n && (n += \" \"), n += f);\n    return n;\n}\nfunction clsx() {\n    for(var e, t, f = 0, n = \"\", o = arguments.length; f < o; f++)(e = arguments[f]) && (t = r(e)) && (n && (n += \" \"), n += t);\n    return n;\n}\n// ../../node_modules/.pnpm/tailwind-merge@2.5.5/node_modules/tailwind-merge/dist/bundle-mjs.mjs\nvar CLASS_PART_SEPARATOR = \"-\";\nvar createClassGroupUtils = (config)=>{\n    const classMap = createClassMap(config);\n    const { conflictingClassGroups, conflictingClassGroupModifiers } = config;\n    const getClassGroupId = (className)=>{\n        const classParts = className.split(CLASS_PART_SEPARATOR);\n        if (classParts[0] === \"\" && classParts.length !== 1) {\n            classParts.shift();\n        }\n        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n    };\n    const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier)=>{\n        const conflicts = conflictingClassGroups[classGroupId] || [];\n        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n            return [\n                ...conflicts,\n                ...conflictingClassGroupModifiers[classGroupId]\n            ];\n        }\n        return conflicts;\n    };\n    return {\n        getClassGroupId,\n        getConflictingClassGroupIds\n    };\n};\nvar getGroupRecursive = (classParts, classPartObject)=>{\n    var _classPartObject_validators_find;\n    if (classParts.length === 0) {\n        return classPartObject.classGroupId;\n    }\n    const currentClassPart = classParts[0];\n    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;\n    if (classGroupFromNextClassPart) {\n        return classGroupFromNextClassPart;\n    }\n    if (classPartObject.validators.length === 0) {\n        return void 0;\n    }\n    const classRest = classParts.join(CLASS_PART_SEPARATOR);\n    return (_classPartObject_validators_find = classPartObject.validators.find((param)=>{\n        let { validator } = param;\n        return validator(classRest);\n    })) === null || _classPartObject_validators_find === void 0 ? void 0 : _classPartObject_validators_find.classGroupId;\n};\nvar arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nvar getGroupIdForArbitraryProperty = (className)=>{\n    if (arbitraryPropertyRegex.test(className)) {\n        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n        const property = arbitraryPropertyClassName === null || arbitraryPropertyClassName === void 0 ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(\":\"));\n        if (property) {\n            return \"arbitrary..\" + property;\n        }\n    }\n};\nvar createClassMap = (config)=>{\n    const { theme, prefix } = config;\n    const classMap = {\n        nextPart: /* @__PURE__ */ new Map(),\n        validators: []\n    };\n    const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n    prefixedClassGroupEntries.forEach((param)=>{\n        let [classGroupId, classGroup] = param;\n        processClassesRecursively(classGroup, classMap, classGroupId, theme);\n    });\n    return classMap;\n};\nvar processClassesRecursively = (classGroup, classPartObject, classGroupId, theme)=>{\n    classGroup.forEach((classDefinition)=>{\n        if (typeof classDefinition === \"string\") {\n            const classPartObjectToEdit = classDefinition === \"\" ? classPartObject : getPart(classPartObject, classDefinition);\n            classPartObjectToEdit.classGroupId = classGroupId;\n            return;\n        }\n        if (typeof classDefinition === \"function\") {\n            if (isThemeGetter(classDefinition)) {\n                processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n                return;\n            }\n            classPartObject.validators.push({\n                validator: classDefinition,\n                classGroupId\n            });\n            return;\n        }\n        Object.entries(classDefinition).forEach((param)=>{\n            let [key, classGroup2] = param;\n            processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);\n        });\n    });\n};\nvar getPart = (classPartObject, path)=>{\n    let currentClassPartObject = classPartObject;\n    path.split(CLASS_PART_SEPARATOR).forEach((pathPart)=>{\n        if (!currentClassPartObject.nextPart.has(pathPart)) {\n            currentClassPartObject.nextPart.set(pathPart, {\n                nextPart: /* @__PURE__ */ new Map(),\n                validators: []\n            });\n        }\n        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n    });\n    return currentClassPartObject;\n};\nvar isThemeGetter = (func)=>func.isThemeGetter;\nvar getPrefixedClassGroupEntries = (classGroupEntries, prefix)=>{\n    if (!prefix) {\n        return classGroupEntries;\n    }\n    return classGroupEntries.map((param)=>{\n        let [classGroupId, classGroup] = param;\n        const prefixedClassGroup = classGroup.map((classDefinition)=>{\n            if (typeof classDefinition === \"string\") {\n                return prefix + classDefinition;\n            }\n            if (typeof classDefinition === \"object\") {\n                return Object.fromEntries(Object.entries(classDefinition).map((param)=>{\n                    let [key, value] = param;\n                    return [\n                        prefix + key,\n                        value\n                    ];\n                }));\n            }\n            return classDefinition;\n        });\n        return [\n            classGroupId,\n            prefixedClassGroup\n        ];\n    });\n};\nvar createLruCache = (maxCacheSize)=>{\n    if (maxCacheSize < 1) {\n        return {\n            get: ()=>void 0,\n            set: ()=>{}\n        };\n    }\n    let cacheSize = 0;\n    let cache2 = /* @__PURE__ */ new Map();\n    let previousCache = /* @__PURE__ */ new Map();\n    const update = (key, value)=>{\n        cache2.set(key, value);\n        cacheSize++;\n        if (cacheSize > maxCacheSize) {\n            cacheSize = 0;\n            previousCache = cache2;\n            cache2 = /* @__PURE__ */ new Map();\n        }\n    };\n    return {\n        get (key) {\n            let value = cache2.get(key);\n            if (value !== void 0) {\n                return value;\n            }\n            if ((value = previousCache.get(key)) !== void 0) {\n                update(key, value);\n                return value;\n            }\n        },\n        set (key, value) {\n            if (cache2.has(key)) {\n                cache2.set(key, value);\n            } else {\n                update(key, value);\n            }\n        }\n    };\n};\nvar IMPORTANT_MODIFIER = \"!\";\nvar createParseClassName = (config)=>{\n    const { separator, experimentalParseClassName } = config;\n    const isSeparatorSingleCharacter = separator.length === 1;\n    const firstSeparatorCharacter = separator[0];\n    const separatorLength = separator.length;\n    const parseClassName = (className)=>{\n        const modifiers = [];\n        let bracketDepth = 0;\n        let modifierStart = 0;\n        let postfixModifierPosition;\n        for(let index = 0; index < className.length; index++){\n            let currentCharacter = className[index];\n            if (bracketDepth === 0) {\n                if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {\n                    modifiers.push(className.slice(modifierStart, index));\n                    modifierStart = index + separatorLength;\n                    continue;\n                }\n                if (currentCharacter === \"/\") {\n                    postfixModifierPosition = index;\n                    continue;\n                }\n            }\n            if (currentCharacter === \"[\") {\n                bracketDepth++;\n            } else if (currentCharacter === \"]\") {\n                bracketDepth--;\n            }\n        }\n        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n        const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);\n        const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;\n        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;\n        return {\n            modifiers,\n            hasImportantModifier,\n            baseClassName,\n            maybePostfixModifierPosition\n        };\n    };\n    if (experimentalParseClassName) {\n        return (className)=>experimentalParseClassName({\n                className,\n                parseClassName\n            });\n    }\n    return parseClassName;\n};\nvar sortModifiers = (modifiers)=>{\n    if (modifiers.length <= 1) {\n        return modifiers;\n    }\n    const sortedModifiers = [];\n    let unsortedModifiers = [];\n    modifiers.forEach((modifier)=>{\n        const isArbitraryVariant = modifier[0] === \"[\";\n        if (isArbitraryVariant) {\n            sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n            unsortedModifiers = [];\n        } else {\n            unsortedModifiers.push(modifier);\n        }\n    });\n    sortedModifiers.push(...unsortedModifiers.sort());\n    return sortedModifiers;\n};\nvar createConfigUtils = (config)=>({\n        cache: createLruCache(config.cacheSize),\n        parseClassName: createParseClassName(config),\n        ...createClassGroupUtils(config)\n    });\nvar SPLIT_CLASSES_REGEX = /\\s+/;\nvar mergeClassList = (classList, configUtils)=>{\n    const { parseClassName, getClassGroupId, getConflictingClassGroupIds } = configUtils;\n    const classGroupsInConflict = [];\n    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n    let result = \"\";\n    for(let index = classNames.length - 1; index >= 0; index -= 1){\n        const originalClassName = classNames[index];\n        const { modifiers, hasImportantModifier, baseClassName, maybePostfixModifierPosition } = parseClassName(originalClassName);\n        let hasPostfixModifier = Boolean(maybePostfixModifierPosition);\n        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n        if (!classGroupId) {\n            if (!hasPostfixModifier) {\n                result = originalClassName + (result.length > 0 ? \" \" + result : result);\n                continue;\n            }\n            classGroupId = getClassGroupId(baseClassName);\n            if (!classGroupId) {\n                result = originalClassName + (result.length > 0 ? \" \" + result : result);\n                continue;\n            }\n            hasPostfixModifier = false;\n        }\n        const variantModifier = sortModifiers(modifiers).join(\":\");\n        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n        const classId = modifierId + classGroupId;\n        if (classGroupsInConflict.includes(classId)) {\n            continue;\n        }\n        classGroupsInConflict.push(classId);\n        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n        for(let i = 0; i < conflictGroups.length; ++i){\n            const group = conflictGroups[i];\n            classGroupsInConflict.push(modifierId + group);\n        }\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n    }\n    return result;\n};\nfunction twJoin() {\n    let index = 0;\n    let argument;\n    let resolvedValue;\n    let string = \"\";\n    while(index < arguments.length){\n        if (argument = arguments[index++]) {\n            if (resolvedValue = toValue(argument)) {\n                string && (string += \" \");\n                string += resolvedValue;\n            }\n        }\n    }\n    return string;\n}\nvar toValue = (mix)=>{\n    if (typeof mix === \"string\") {\n        return mix;\n    }\n    let resolvedValue;\n    let string = \"\";\n    for(let k = 0; k < mix.length; k++){\n        if (mix[k]) {\n            if (resolvedValue = toValue(mix[k])) {\n                string && (string += \" \");\n                string += resolvedValue;\n            }\n        }\n    }\n    return string;\n};\nfunction createTailwindMerge(createConfigFirst) {\n    for(var _len = arguments.length, createConfigRest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        createConfigRest[_key - 1] = arguments[_key];\n    }\n    let configUtils;\n    let cacheGet;\n    let cacheSet;\n    let functionToCall = initTailwindMerge;\n    function initTailwindMerge(classList) {\n        const config = createConfigRest.reduce((previousConfig, createConfigCurrent)=>createConfigCurrent(previousConfig), createConfigFirst());\n        configUtils = createConfigUtils(config);\n        cacheGet = configUtils.cache.get;\n        cacheSet = configUtils.cache.set;\n        functionToCall = tailwindMerge;\n        return tailwindMerge(classList);\n    }\n    function tailwindMerge(classList) {\n        const cachedResult = cacheGet(classList);\n        if (cachedResult) {\n            return cachedResult;\n        }\n        const result = mergeClassList(classList, configUtils);\n        cacheSet(classList, result);\n        return result;\n    }\n    return function callTailwindMerge() {\n        return functionToCall(twJoin.apply(null, arguments));\n    };\n}\nvar fromTheme = (key)=>{\n    const themeGetter = (theme)=>theme[key] || [];\n    themeGetter.isThemeGetter = true;\n    return themeGetter;\n};\nvar arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /* @__PURE__ */ new Set([\n    \"px\",\n    \"full\",\n    \"screen\"\n]);\nvar tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nvar colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\nvar shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nvar imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nvar isLength = (value)=>isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);\nvar isArbitraryLength = (value)=>getIsArbitraryValue(value, \"length\", isLengthOnly);\nvar isNumber = (value)=>Boolean(value) && !Number.isNaN(Number(value));\nvar isArbitraryNumber = (value)=>getIsArbitraryValue(value, \"number\", isNumber);\nvar isInteger = (value)=>Boolean(value) && Number.isInteger(Number(value));\nvar isPercent = (value)=>value.endsWith(\"%\") && isNumber(value.slice(0, -1));\nvar isArbitraryValue = (value)=>arbitraryValueRegex.test(value);\nvar isTshirtSize = (value)=>tshirtUnitRegex.test(value);\nvar sizeLabels = /* @__PURE__ */ new Set([\n    \"length\",\n    \"size\",\n    \"percentage\"\n]);\nvar isArbitrarySize = (value)=>getIsArbitraryValue(value, sizeLabels, isNever);\nvar isArbitraryPosition = (value)=>getIsArbitraryValue(value, \"position\", isNever);\nvar imageLabels = /* @__PURE__ */ new Set([\n    \"image\",\n    \"url\"\n]);\nvar isArbitraryImage = (value)=>getIsArbitraryValue(value, imageLabels, isImage);\nvar isArbitraryShadow = (value)=>getIsArbitraryValue(value, \"\", isShadow);\nvar isAny = ()=>true;\nvar getIsArbitraryValue = (value, label, testValue)=>{\n    const result = arbitraryValueRegex.exec(value);\n    if (result) {\n        if (result[1]) {\n            return typeof label === \"string\" ? result[1] === label : label.has(result[1]);\n        }\n        return testValue(result[2]);\n    }\n    return false;\n};\nvar isLengthOnly = (value)=>// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);\nvar isNever = ()=>false;\nvar isShadow = (value)=>shadowRegex.test(value);\nvar isImage = (value)=>imageRegex.test(value);\nvar getDefaultConfig = ()=>{\n    const colors = fromTheme(\"colors\");\n    const spacing = fromTheme(\"spacing\");\n    const blur = fromTheme(\"blur\");\n    const brightness = fromTheme(\"brightness\");\n    const borderColor = fromTheme(\"borderColor\");\n    const borderRadius = fromTheme(\"borderRadius\");\n    const borderSpacing = fromTheme(\"borderSpacing\");\n    const borderWidth = fromTheme(\"borderWidth\");\n    const contrast = fromTheme(\"contrast\");\n    const grayscale = fromTheme(\"grayscale\");\n    const hueRotate = fromTheme(\"hueRotate\");\n    const invert = fromTheme(\"invert\");\n    const gap = fromTheme(\"gap\");\n    const gradientColorStops = fromTheme(\"gradientColorStops\");\n    const gradientColorStopPositions = fromTheme(\"gradientColorStopPositions\");\n    const inset = fromTheme(\"inset\");\n    const margin = fromTheme(\"margin\");\n    const opacity = fromTheme(\"opacity\");\n    const padding = fromTheme(\"padding\");\n    const saturate = fromTheme(\"saturate\");\n    const scale = fromTheme(\"scale\");\n    const sepia = fromTheme(\"sepia\");\n    const skew = fromTheme(\"skew\");\n    const space = fromTheme(\"space\");\n    const translate = fromTheme(\"translate\");\n    const getOverscroll = ()=>[\n            \"auto\",\n            \"contain\",\n            \"none\"\n        ];\n    const getOverflow = ()=>[\n            \"auto\",\n            \"hidden\",\n            \"clip\",\n            \"visible\",\n            \"scroll\"\n        ];\n    const getSpacingWithAutoAndArbitrary = ()=>[\n            \"auto\",\n            isArbitraryValue,\n            spacing\n        ];\n    const getSpacingWithArbitrary = ()=>[\n            isArbitraryValue,\n            spacing\n        ];\n    const getLengthWithEmptyAndArbitrary = ()=>[\n            \"\",\n            isLength,\n            isArbitraryLength\n        ];\n    const getNumberWithAutoAndArbitrary = ()=>[\n            \"auto\",\n            isNumber,\n            isArbitraryValue\n        ];\n    const getPositions = ()=>[\n            \"bottom\",\n            \"center\",\n            \"left\",\n            \"left-bottom\",\n            \"left-top\",\n            \"right\",\n            \"right-bottom\",\n            \"right-top\",\n            \"top\"\n        ];\n    const getLineStyles = ()=>[\n            \"solid\",\n            \"dashed\",\n            \"dotted\",\n            \"double\",\n            \"none\"\n        ];\n    const getBlendModes = ()=>[\n            \"normal\",\n            \"multiply\",\n            \"screen\",\n            \"overlay\",\n            \"darken\",\n            \"lighten\",\n            \"color-dodge\",\n            \"color-burn\",\n            \"hard-light\",\n            \"soft-light\",\n            \"difference\",\n            \"exclusion\",\n            \"hue\",\n            \"saturation\",\n            \"color\",\n            \"luminosity\"\n        ];\n    const getAlign = ()=>[\n            \"start\",\n            \"end\",\n            \"center\",\n            \"between\",\n            \"around\",\n            \"evenly\",\n            \"stretch\"\n        ];\n    const getZeroAndEmpty = ()=>[\n            \"\",\n            \"0\",\n            isArbitraryValue\n        ];\n    const getBreaks = ()=>[\n            \"auto\",\n            \"avoid\",\n            \"all\",\n            \"avoid-page\",\n            \"page\",\n            \"left\",\n            \"right\",\n            \"column\"\n        ];\n    const getNumberAndArbitrary = ()=>[\n            isNumber,\n            isArbitraryValue\n        ];\n    return {\n        cacheSize: 500,\n        separator: \":\",\n        theme: {\n            colors: [\n                isAny\n            ],\n            spacing: [\n                isLength,\n                isArbitraryLength\n            ],\n            blur: [\n                \"none\",\n                \"\",\n                isTshirtSize,\n                isArbitraryValue\n            ],\n            brightness: getNumberAndArbitrary(),\n            borderColor: [\n                colors\n            ],\n            borderRadius: [\n                \"none\",\n                \"\",\n                \"full\",\n                isTshirtSize,\n                isArbitraryValue\n            ],\n            borderSpacing: getSpacingWithArbitrary(),\n            borderWidth: getLengthWithEmptyAndArbitrary(),\n            contrast: getNumberAndArbitrary(),\n            grayscale: getZeroAndEmpty(),\n            hueRotate: getNumberAndArbitrary(),\n            invert: getZeroAndEmpty(),\n            gap: getSpacingWithArbitrary(),\n            gradientColorStops: [\n                colors\n            ],\n            gradientColorStopPositions: [\n                isPercent,\n                isArbitraryLength\n            ],\n            inset: getSpacingWithAutoAndArbitrary(),\n            margin: getSpacingWithAutoAndArbitrary(),\n            opacity: getNumberAndArbitrary(),\n            padding: getSpacingWithArbitrary(),\n            saturate: getNumberAndArbitrary(),\n            scale: getNumberAndArbitrary(),\n            sepia: getZeroAndEmpty(),\n            skew: getNumberAndArbitrary(),\n            space: getSpacingWithArbitrary(),\n            translate: getSpacingWithArbitrary()\n        },\n        classGroups: {\n            // Layout\n            /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */ aspect: [\n                {\n                    aspect: [\n                        \"auto\",\n                        \"square\",\n                        \"video\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       */ container: [\n                \"container\"\n            ],\n            /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */ columns: [\n                {\n                    columns: [\n                        isTshirtSize\n                    ]\n                }\n            ],\n            /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */ \"break-after\": [\n                {\n                    \"break-after\": getBreaks()\n                }\n            ],\n            /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */ \"break-before\": [\n                {\n                    \"break-before\": getBreaks()\n                }\n            ],\n            /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */ \"break-inside\": [\n                {\n                    \"break-inside\": [\n                        \"auto\",\n                        \"avoid\",\n                        \"avoid-page\",\n                        \"avoid-column\"\n                    ]\n                }\n            ],\n            /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */ \"box-decoration\": [\n                {\n                    \"box-decoration\": [\n                        \"slice\",\n                        \"clone\"\n                    ]\n                }\n            ],\n            /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */ box: [\n                {\n                    box: [\n                        \"border\",\n                        \"content\"\n                    ]\n                }\n            ],\n            /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */ display: [\n                \"block\",\n                \"inline-block\",\n                \"inline\",\n                \"flex\",\n                \"inline-flex\",\n                \"table\",\n                \"inline-table\",\n                \"table-caption\",\n                \"table-cell\",\n                \"table-column\",\n                \"table-column-group\",\n                \"table-footer-group\",\n                \"table-header-group\",\n                \"table-row-group\",\n                \"table-row\",\n                \"flow-root\",\n                \"grid\",\n                \"inline-grid\",\n                \"contents\",\n                \"list-item\",\n                \"hidden\"\n            ],\n            /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */ float: [\n                {\n                    float: [\n                        \"right\",\n                        \"left\",\n                        \"none\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */ clear: [\n                {\n                    clear: [\n                        \"left\",\n                        \"right\",\n                        \"both\",\n                        \"none\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */ isolation: [\n                \"isolate\",\n                \"isolation-auto\"\n            ],\n            /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */ \"object-fit\": [\n                {\n                    object: [\n                        \"contain\",\n                        \"cover\",\n                        \"fill\",\n                        \"none\",\n                        \"scale-down\"\n                    ]\n                }\n            ],\n            /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */ \"object-position\": [\n                {\n                    object: [\n                        ...getPositions(),\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */ overflow: [\n                {\n                    overflow: getOverflow()\n                }\n            ],\n            /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */ \"overflow-x\": [\n                {\n                    \"overflow-x\": getOverflow()\n                }\n            ],\n            /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */ \"overflow-y\": [\n                {\n                    \"overflow-y\": getOverflow()\n                }\n            ],\n            /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ overscroll: [\n                {\n                    overscroll: getOverscroll()\n                }\n            ],\n            /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ \"overscroll-x\": [\n                {\n                    \"overscroll-x\": getOverscroll()\n                }\n            ],\n            /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ \"overscroll-y\": [\n                {\n                    \"overscroll-y\": getOverscroll()\n                }\n            ],\n            /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */ position: [\n                \"static\",\n                \"fixed\",\n                \"absolute\",\n                \"relative\",\n                \"sticky\"\n            ],\n            /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ inset: [\n                {\n                    inset: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ \"inset-x\": [\n                {\n                    \"inset-x\": [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ \"inset-y\": [\n                {\n                    \"inset-y\": [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ start: [\n                {\n                    start: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ end: [\n                {\n                    end: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ top: [\n                {\n                    top: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ right: [\n                {\n                    right: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ bottom: [\n                {\n                    bottom: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ left: [\n                {\n                    left: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */ visibility: [\n                \"visible\",\n                \"invisible\",\n                \"collapse\"\n            ],\n            /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */ z: [\n                {\n                    z: [\n                        \"auto\",\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Flexbox and Grid\n            /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */ basis: [\n                {\n                    basis: getSpacingWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */ \"flex-direction\": [\n                {\n                    flex: [\n                        \"row\",\n                        \"row-reverse\",\n                        \"col\",\n                        \"col-reverse\"\n                    ]\n                }\n            ],\n            /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */ \"flex-wrap\": [\n                {\n                    flex: [\n                        \"wrap\",\n                        \"wrap-reverse\",\n                        \"nowrap\"\n                    ]\n                }\n            ],\n            /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */ flex: [\n                {\n                    flex: [\n                        \"1\",\n                        \"auto\",\n                        \"initial\",\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */ grow: [\n                {\n                    grow: getZeroAndEmpty()\n                }\n            ],\n            /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */ shrink: [\n                {\n                    shrink: getZeroAndEmpty()\n                }\n            ],\n            /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */ order: [\n                {\n                    order: [\n                        \"first\",\n                        \"last\",\n                        \"none\",\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */ \"grid-cols\": [\n                {\n                    \"grid-cols\": [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-start-end\": [\n                {\n                    col: [\n                        \"auto\",\n                        {\n                            span: [\n                                \"full\",\n                                isInteger,\n                                isArbitraryValue\n                            ]\n                        },\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-start\": [\n                {\n                    \"col-start\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-end\": [\n                {\n                    \"col-end\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */ \"grid-rows\": [\n                {\n                    \"grid-rows\": [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-start-end\": [\n                {\n                    row: [\n                        \"auto\",\n                        {\n                            span: [\n                                isInteger,\n                                isArbitraryValue\n                            ]\n                        },\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-start\": [\n                {\n                    \"row-start\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-end\": [\n                {\n                    \"row-end\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */ \"grid-flow\": [\n                {\n                    \"grid-flow\": [\n                        \"row\",\n                        \"col\",\n                        \"dense\",\n                        \"row-dense\",\n                        \"col-dense\"\n                    ]\n                }\n            ],\n            /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */ \"auto-cols\": [\n                {\n                    \"auto-cols\": [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fr\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */ \"auto-rows\": [\n                {\n                    \"auto-rows\": [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fr\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */ gap: [\n                {\n                    gap: [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */ \"gap-x\": [\n                {\n                    \"gap-x\": [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */ \"gap-y\": [\n                {\n                    \"gap-y\": [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */ \"justify-content\": [\n                {\n                    justify: [\n                        \"normal\",\n                        ...getAlign()\n                    ]\n                }\n            ],\n            /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */ \"justify-items\": [\n                {\n                    \"justify-items\": [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */ \"justify-self\": [\n                {\n                    \"justify-self\": [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */ \"align-content\": [\n                {\n                    content: [\n                        \"normal\",\n                        ...getAlign(),\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */ \"align-items\": [\n                {\n                    items: [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"baseline\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */ \"align-self\": [\n                {\n                    self: [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\",\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */ \"place-content\": [\n                {\n                    \"place-content\": [\n                        ...getAlign(),\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */ \"place-items\": [\n                {\n                    \"place-items\": [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"baseline\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */ \"place-self\": [\n                {\n                    \"place-self\": [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            // Spacing\n            /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */ p: [\n                {\n                    p: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */ px: [\n                {\n                    px: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */ py: [\n                {\n                    py: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */ ps: [\n                {\n                    ps: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */ pe: [\n                {\n                    pe: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */ pt: [\n                {\n                    pt: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */ pr: [\n                {\n                    pr: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */ pb: [\n                {\n                    pb: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */ pl: [\n                {\n                    pl: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */ m: [\n                {\n                    m: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */ mx: [\n                {\n                    mx: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */ my: [\n                {\n                    my: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */ ms: [\n                {\n                    ms: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */ me: [\n                {\n                    me: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */ mt: [\n                {\n                    mt: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */ mr: [\n                {\n                    mr: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */ mb: [\n                {\n                    mb: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */ ml: [\n                {\n                    ml: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-x\": [\n                {\n                    \"space-x\": [\n                        space\n                    ]\n                }\n            ],\n            /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-x-reverse\": [\n                \"space-x-reverse\"\n            ],\n            /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-y\": [\n                {\n                    \"space-y\": [\n                        space\n                    ]\n                }\n            ],\n            /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-y-reverse\": [\n                \"space-y-reverse\"\n            ],\n            // Sizing\n            /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */ w: [\n                {\n                    w: [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svw\",\n                        \"lvw\",\n                        \"dvw\",\n                        isArbitraryValue,\n                        spacing\n                    ]\n                }\n            ],\n            /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */ \"min-w\": [\n                {\n                    \"min-w\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\"\n                    ]\n                }\n            ],\n            /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */ \"max-w\": [\n                {\n                    \"max-w\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"none\",\n                        \"full\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"prose\",\n                        {\n                            screen: [\n                                isTshirtSize\n                            ]\n                        },\n                        isTshirtSize\n                    ]\n                }\n            ],\n            /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */ h: [\n                {\n                    h: [\n                        isArbitraryValue,\n                        spacing,\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */ \"min-h\": [\n                {\n                    \"min-h\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */ \"max-h\": [\n                {\n                    \"max-h\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Size\n       * @see https://tailwindcss.com/docs/size\n       */ size: [\n                {\n                    size: [\n                        isArbitraryValue,\n                        spacing,\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\"\n                    ]\n                }\n            ],\n            // Typography\n            /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */ \"font-size\": [\n                {\n                    text: [\n                        \"base\",\n                        isTshirtSize,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */ \"font-smoothing\": [\n                \"antialiased\",\n                \"subpixel-antialiased\"\n            ],\n            /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */ \"font-style\": [\n                \"italic\",\n                \"not-italic\"\n            ],\n            /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */ \"font-weight\": [\n                {\n                    font: [\n                        \"thin\",\n                        \"extralight\",\n                        \"light\",\n                        \"normal\",\n                        \"medium\",\n                        \"semibold\",\n                        \"bold\",\n                        \"extrabold\",\n                        \"black\",\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */ \"font-family\": [\n                {\n                    font: [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-normal\": [\n                \"normal-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-ordinal\": [\n                \"ordinal\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-slashed-zero\": [\n                \"slashed-zero\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-figure\": [\n                \"lining-nums\",\n                \"oldstyle-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-spacing\": [\n                \"proportional-nums\",\n                \"tabular-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-fraction\": [\n                \"diagonal-fractions\",\n                \"stacked-fractions\"\n            ],\n            /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */ tracking: [\n                {\n                    tracking: [\n                        \"tighter\",\n                        \"tight\",\n                        \"normal\",\n                        \"wide\",\n                        \"wider\",\n                        \"widest\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */ \"line-clamp\": [\n                {\n                    \"line-clamp\": [\n                        \"none\",\n                        isNumber,\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */ leading: [\n                {\n                    leading: [\n                        \"none\",\n                        \"tight\",\n                        \"snug\",\n                        \"normal\",\n                        \"relaxed\",\n                        \"loose\",\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */ \"list-image\": [\n                {\n                    \"list-image\": [\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */ \"list-style-type\": [\n                {\n                    list: [\n                        \"none\",\n                        \"disc\",\n                        \"decimal\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */ \"list-style-position\": [\n                {\n                    list: [\n                        \"inside\",\n                        \"outside\"\n                    ]\n                }\n            ],\n            /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/placeholder-color\n       */ \"placeholder-color\": [\n                {\n                    placeholder: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Placeholder Opacity\n       * @see https://tailwindcss.com/docs/placeholder-opacity\n       */ \"placeholder-opacity\": [\n                {\n                    \"placeholder-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */ \"text-alignment\": [\n                {\n                    text: [\n                        \"left\",\n                        \"center\",\n                        \"right\",\n                        \"justify\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */ \"text-color\": [\n                {\n                    text: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Text Opacity\n       * @see https://tailwindcss.com/docs/text-opacity\n       */ \"text-opacity\": [\n                {\n                    \"text-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */ \"text-decoration\": [\n                \"underline\",\n                \"overline\",\n                \"line-through\",\n                \"no-underline\"\n            ],\n            /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */ \"text-decoration-style\": [\n                {\n                    decoration: [\n                        ...getLineStyles(),\n                        \"wavy\"\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */ \"text-decoration-thickness\": [\n                {\n                    decoration: [\n                        \"auto\",\n                        \"from-font\",\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */ \"underline-offset\": [\n                {\n                    \"underline-offset\": [\n                        \"auto\",\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */ \"text-decoration-color\": [\n                {\n                    decoration: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */ \"text-transform\": [\n                \"uppercase\",\n                \"lowercase\",\n                \"capitalize\",\n                \"normal-case\"\n            ],\n            /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */ \"text-overflow\": [\n                \"truncate\",\n                \"text-ellipsis\",\n                \"text-clip\"\n            ],\n            /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */ \"text-wrap\": [\n                {\n                    text: [\n                        \"wrap\",\n                        \"nowrap\",\n                        \"balance\",\n                        \"pretty\"\n                    ]\n                }\n            ],\n            /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */ indent: [\n                {\n                    indent: getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */ \"vertical-align\": [\n                {\n                    align: [\n                        \"baseline\",\n                        \"top\",\n                        \"middle\",\n                        \"bottom\",\n                        \"text-top\",\n                        \"text-bottom\",\n                        \"sub\",\n                        \"super\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */ whitespace: [\n                {\n                    whitespace: [\n                        \"normal\",\n                        \"nowrap\",\n                        \"pre\",\n                        \"pre-line\",\n                        \"pre-wrap\",\n                        \"break-spaces\"\n                    ]\n                }\n            ],\n            /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */ break: [\n                {\n                    break: [\n                        \"normal\",\n                        \"words\",\n                        \"all\",\n                        \"keep\"\n                    ]\n                }\n            ],\n            /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */ hyphens: [\n                {\n                    hyphens: [\n                        \"none\",\n                        \"manual\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */ content: [\n                {\n                    content: [\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Backgrounds\n            /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */ \"bg-attachment\": [\n                {\n                    bg: [\n                        \"fixed\",\n                        \"local\",\n                        \"scroll\"\n                    ]\n                }\n            ],\n            /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */ \"bg-clip\": [\n                {\n                    \"bg-clip\": [\n                        \"border\",\n                        \"padding\",\n                        \"content\",\n                        \"text\"\n                    ]\n                }\n            ],\n            /**\n       * Background Opacity\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/background-opacity\n       */ \"bg-opacity\": [\n                {\n                    \"bg-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */ \"bg-origin\": [\n                {\n                    \"bg-origin\": [\n                        \"border\",\n                        \"padding\",\n                        \"content\"\n                    ]\n                }\n            ],\n            /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */ \"bg-position\": [\n                {\n                    bg: [\n                        ...getPositions(),\n                        isArbitraryPosition\n                    ]\n                }\n            ],\n            /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */ \"bg-repeat\": [\n                {\n                    bg: [\n                        \"no-repeat\",\n                        {\n                            repeat: [\n                                \"\",\n                                \"x\",\n                                \"y\",\n                                \"round\",\n                                \"space\"\n                            ]\n                        }\n                    ]\n                }\n            ],\n            /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */ \"bg-size\": [\n                {\n                    bg: [\n                        \"auto\",\n                        \"cover\",\n                        \"contain\",\n                        isArbitrarySize\n                    ]\n                }\n            ],\n            /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */ \"bg-image\": [\n                {\n                    bg: [\n                        \"none\",\n                        {\n                            \"gradient-to\": [\n                                \"t\",\n                                \"tr\",\n                                \"r\",\n                                \"br\",\n                                \"b\",\n                                \"bl\",\n                                \"l\",\n                                \"tl\"\n                            ]\n                        },\n                        isArbitraryImage\n                    ]\n                }\n            ],\n            /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */ \"bg-color\": [\n                {\n                    bg: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-from-pos\": [\n                {\n                    from: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-via-pos\": [\n                {\n                    via: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-to-pos\": [\n                {\n                    to: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-from\": [\n                {\n                    from: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-via\": [\n                {\n                    via: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-to\": [\n                {\n                    to: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            // Borders\n            /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */ rounded: [\n                {\n                    rounded: [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-s\": [\n                {\n                    \"rounded-s\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-e\": [\n                {\n                    \"rounded-e\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-t\": [\n                {\n                    \"rounded-t\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-r\": [\n                {\n                    \"rounded-r\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-b\": [\n                {\n                    \"rounded-b\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-l\": [\n                {\n                    \"rounded-l\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-ss\": [\n                {\n                    \"rounded-ss\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-se\": [\n                {\n                    \"rounded-se\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-ee\": [\n                {\n                    \"rounded-ee\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-es\": [\n                {\n                    \"rounded-es\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-tl\": [\n                {\n                    \"rounded-tl\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-tr\": [\n                {\n                    \"rounded-tr\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-br\": [\n                {\n                    \"rounded-br\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-bl\": [\n                {\n                    \"rounded-bl\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w\": [\n                {\n                    border: [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-x\": [\n                {\n                    \"border-x\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-y\": [\n                {\n                    \"border-y\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-s\": [\n                {\n                    \"border-s\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-e\": [\n                {\n                    \"border-e\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-t\": [\n                {\n                    \"border-t\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-r\": [\n                {\n                    \"border-r\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-b\": [\n                {\n                    \"border-b\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-l\": [\n                {\n                    \"border-l\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Opacity\n       * @see https://tailwindcss.com/docs/border-opacity\n       */ \"border-opacity\": [\n                {\n                    \"border-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */ \"border-style\": [\n                {\n                    border: [\n                        ...getLineStyles(),\n                        \"hidden\"\n                    ]\n                }\n            ],\n            /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-x\": [\n                {\n                    \"divide-x\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-x-reverse\": [\n                \"divide-x-reverse\"\n            ],\n            /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-y\": [\n                {\n                    \"divide-y\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-y-reverse\": [\n                \"divide-y-reverse\"\n            ],\n            /**\n       * Divide Opacity\n       * @see https://tailwindcss.com/docs/divide-opacity\n       */ \"divide-opacity\": [\n                {\n                    \"divide-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/divide-style\n       */ \"divide-style\": [\n                {\n                    divide: getLineStyles()\n                }\n            ],\n            /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color\": [\n                {\n                    border: [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-x\": [\n                {\n                    \"border-x\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-y\": [\n                {\n                    \"border-y\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-s\": [\n                {\n                    \"border-s\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-e\": [\n                {\n                    \"border-e\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-t\": [\n                {\n                    \"border-t\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-r\": [\n                {\n                    \"border-r\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-b\": [\n                {\n                    \"border-b\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-l\": [\n                {\n                    \"border-l\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */ \"divide-color\": [\n                {\n                    divide: [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */ \"outline-style\": [\n                {\n                    outline: [\n                        \"\",\n                        ...getLineStyles()\n                    ]\n                }\n            ],\n            /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */ \"outline-offset\": [\n                {\n                    \"outline-offset\": [\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */ \"outline-w\": [\n                {\n                    outline: [\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */ \"outline-color\": [\n                {\n                    outline: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/ring-width\n       */ \"ring-w\": [\n                {\n                    ring: getLengthWithEmptyAndArbitrary()\n                }\n            ],\n            /**\n       * Ring Width Inset\n       * @see https://tailwindcss.com/docs/ring-width\n       */ \"ring-w-inset\": [\n                \"ring-inset\"\n            ],\n            /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/ring-color\n       */ \"ring-color\": [\n                {\n                    ring: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Ring Opacity\n       * @see https://tailwindcss.com/docs/ring-opacity\n       */ \"ring-opacity\": [\n                {\n                    \"ring-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Ring Offset Width\n       * @see https://tailwindcss.com/docs/ring-offset-width\n       */ \"ring-offset-w\": [\n                {\n                    \"ring-offset\": [\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Ring Offset Color\n       * @see https://tailwindcss.com/docs/ring-offset-color\n       */ \"ring-offset-color\": [\n                {\n                    \"ring-offset\": [\n                        colors\n                    ]\n                }\n            ],\n            // Effects\n            /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */ shadow: [\n                {\n                    shadow: [\n                        \"\",\n                        \"inner\",\n                        \"none\",\n                        isTshirtSize,\n                        isArbitraryShadow\n                    ]\n                }\n            ],\n            /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow-color\n       */ \"shadow-color\": [\n                {\n                    shadow: [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */ opacity: [\n                {\n                    opacity: [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */ \"mix-blend\": [\n                {\n                    \"mix-blend\": [\n                        ...getBlendModes(),\n                        \"plus-lighter\",\n                        \"plus-darker\"\n                    ]\n                }\n            ],\n            /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */ \"bg-blend\": [\n                {\n                    \"bg-blend\": getBlendModes()\n                }\n            ],\n            // Filters\n            /**\n       * Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/filter\n       */ filter: [\n                {\n                    filter: [\n                        \"\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */ blur: [\n                {\n                    blur: [\n                        blur\n                    ]\n                }\n            ],\n            /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */ brightness: [\n                {\n                    brightness: [\n                        brightness\n                    ]\n                }\n            ],\n            /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */ contrast: [\n                {\n                    contrast: [\n                        contrast\n                    ]\n                }\n            ],\n            /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */ \"drop-shadow\": [\n                {\n                    \"drop-shadow\": [\n                        \"\",\n                        \"none\",\n                        isTshirtSize,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */ grayscale: [\n                {\n                    grayscale: [\n                        grayscale\n                    ]\n                }\n            ],\n            /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */ \"hue-rotate\": [\n                {\n                    \"hue-rotate\": [\n                        hueRotate\n                    ]\n                }\n            ],\n            /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */ invert: [\n                {\n                    invert: [\n                        invert\n                    ]\n                }\n            ],\n            /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */ saturate: [\n                {\n                    saturate: [\n                        saturate\n                    ]\n                }\n            ],\n            /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */ sepia: [\n                {\n                    sepia: [\n                        sepia\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */ \"backdrop-filter\": [\n                {\n                    \"backdrop-filter\": [\n                        \"\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */ \"backdrop-blur\": [\n                {\n                    \"backdrop-blur\": [\n                        blur\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */ \"backdrop-brightness\": [\n                {\n                    \"backdrop-brightness\": [\n                        brightness\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */ \"backdrop-contrast\": [\n                {\n                    \"backdrop-contrast\": [\n                        contrast\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */ \"backdrop-grayscale\": [\n                {\n                    \"backdrop-grayscale\": [\n                        grayscale\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */ \"backdrop-hue-rotate\": [\n                {\n                    \"backdrop-hue-rotate\": [\n                        hueRotate\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */ \"backdrop-invert\": [\n                {\n                    \"backdrop-invert\": [\n                        invert\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */ \"backdrop-opacity\": [\n                {\n                    \"backdrop-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */ \"backdrop-saturate\": [\n                {\n                    \"backdrop-saturate\": [\n                        saturate\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */ \"backdrop-sepia\": [\n                {\n                    \"backdrop-sepia\": [\n                        sepia\n                    ]\n                }\n            ],\n            // Tables\n            /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */ \"border-collapse\": [\n                {\n                    border: [\n                        \"collapse\",\n                        \"separate\"\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing\": [\n                {\n                    \"border-spacing\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing-x\": [\n                {\n                    \"border-spacing-x\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing-y\": [\n                {\n                    \"border-spacing-y\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */ \"table-layout\": [\n                {\n                    table: [\n                        \"auto\",\n                        \"fixed\"\n                    ]\n                }\n            ],\n            /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */ caption: [\n                {\n                    caption: [\n                        \"top\",\n                        \"bottom\"\n                    ]\n                }\n            ],\n            // Transitions and Animation\n            /**\n       * Tranisition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */ transition: [\n                {\n                    transition: [\n                        \"none\",\n                        \"all\",\n                        \"\",\n                        \"colors\",\n                        \"opacity\",\n                        \"shadow\",\n                        \"transform\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */ duration: [\n                {\n                    duration: getNumberAndArbitrary()\n                }\n            ],\n            /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */ ease: [\n                {\n                    ease: [\n                        \"linear\",\n                        \"in\",\n                        \"out\",\n                        \"in-out\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */ delay: [\n                {\n                    delay: getNumberAndArbitrary()\n                }\n            ],\n            /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */ animate: [\n                {\n                    animate: [\n                        \"none\",\n                        \"spin\",\n                        \"ping\",\n                        \"pulse\",\n                        \"bounce\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Transforms\n            /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */ transform: [\n                {\n                    transform: [\n                        \"\",\n                        \"gpu\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */ scale: [\n                {\n                    scale: [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */ \"scale-x\": [\n                {\n                    \"scale-x\": [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */ \"scale-y\": [\n                {\n                    \"scale-y\": [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */ rotate: [\n                {\n                    rotate: [\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */ \"translate-x\": [\n                {\n                    \"translate-x\": [\n                        translate\n                    ]\n                }\n            ],\n            /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */ \"translate-y\": [\n                {\n                    \"translate-y\": [\n                        translate\n                    ]\n                }\n            ],\n            /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */ \"skew-x\": [\n                {\n                    \"skew-x\": [\n                        skew\n                    ]\n                }\n            ],\n            /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */ \"skew-y\": [\n                {\n                    \"skew-y\": [\n                        skew\n                    ]\n                }\n            ],\n            /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */ \"transform-origin\": [\n                {\n                    origin: [\n                        \"center\",\n                        \"top\",\n                        \"top-right\",\n                        \"right\",\n                        \"bottom-right\",\n                        \"bottom\",\n                        \"bottom-left\",\n                        \"left\",\n                        \"top-left\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Interactivity\n            /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */ accent: [\n                {\n                    accent: [\n                        \"auto\",\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */ appearance: [\n                {\n                    appearance: [\n                        \"none\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */ cursor: [\n                {\n                    cursor: [\n                        \"auto\",\n                        \"default\",\n                        \"pointer\",\n                        \"wait\",\n                        \"text\",\n                        \"move\",\n                        \"help\",\n                        \"not-allowed\",\n                        \"none\",\n                        \"context-menu\",\n                        \"progress\",\n                        \"cell\",\n                        \"crosshair\",\n                        \"vertical-text\",\n                        \"alias\",\n                        \"copy\",\n                        \"no-drop\",\n                        \"grab\",\n                        \"grabbing\",\n                        \"all-scroll\",\n                        \"col-resize\",\n                        \"row-resize\",\n                        \"n-resize\",\n                        \"e-resize\",\n                        \"s-resize\",\n                        \"w-resize\",\n                        \"ne-resize\",\n                        \"nw-resize\",\n                        \"se-resize\",\n                        \"sw-resize\",\n                        \"ew-resize\",\n                        \"ns-resize\",\n                        \"nesw-resize\",\n                        \"nwse-resize\",\n                        \"zoom-in\",\n                        \"zoom-out\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */ \"caret-color\": [\n                {\n                    caret: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */ \"pointer-events\": [\n                {\n                    \"pointer-events\": [\n                        \"none\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */ resize: [\n                {\n                    resize: [\n                        \"none\",\n                        \"y\",\n                        \"x\",\n                        \"\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */ \"scroll-behavior\": [\n                {\n                    scroll: [\n                        \"auto\",\n                        \"smooth\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-m\": [\n                {\n                    \"scroll-m\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mx\": [\n                {\n                    \"scroll-mx\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-my\": [\n                {\n                    \"scroll-my\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-ms\": [\n                {\n                    \"scroll-ms\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-me\": [\n                {\n                    \"scroll-me\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mt\": [\n                {\n                    \"scroll-mt\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mr\": [\n                {\n                    \"scroll-mr\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mb\": [\n                {\n                    \"scroll-mb\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-ml\": [\n                {\n                    \"scroll-ml\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-p\": [\n                {\n                    \"scroll-p\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-px\": [\n                {\n                    \"scroll-px\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-py\": [\n                {\n                    \"scroll-py\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-ps\": [\n                {\n                    \"scroll-ps\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pe\": [\n                {\n                    \"scroll-pe\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pt\": [\n                {\n                    \"scroll-pt\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pr\": [\n                {\n                    \"scroll-pr\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pb\": [\n                {\n                    \"scroll-pb\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pl\": [\n                {\n                    \"scroll-pl\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */ \"snap-align\": [\n                {\n                    snap: [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"align-none\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */ \"snap-stop\": [\n                {\n                    snap: [\n                        \"normal\",\n                        \"always\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */ \"snap-type\": [\n                {\n                    snap: [\n                        \"none\",\n                        \"x\",\n                        \"y\",\n                        \"both\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */ \"snap-strictness\": [\n                {\n                    snap: [\n                        \"mandatory\",\n                        \"proximity\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */ touch: [\n                {\n                    touch: [\n                        \"auto\",\n                        \"none\",\n                        \"manipulation\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-x\": [\n                {\n                    \"touch-pan\": [\n                        \"x\",\n                        \"left\",\n                        \"right\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-y\": [\n                {\n                    \"touch-pan\": [\n                        \"y\",\n                        \"up\",\n                        \"down\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-pz\": [\n                \"touch-pinch-zoom\"\n            ],\n            /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */ select: [\n                {\n                    select: [\n                        \"none\",\n                        \"text\",\n                        \"all\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */ \"will-change\": [\n                {\n                    \"will-change\": [\n                        \"auto\",\n                        \"scroll\",\n                        \"contents\",\n                        \"transform\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // SVG\n            /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */ fill: [\n                {\n                    fill: [\n                        colors,\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */ \"stroke-w\": [\n                {\n                    stroke: [\n                        isLength,\n                        isArbitraryLength,\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */ stroke: [\n                {\n                    stroke: [\n                        colors,\n                        \"none\"\n                    ]\n                }\n            ],\n            // Accessibility\n            /**\n       * Screen Readers\n       * @see https://tailwindcss.com/docs/screen-readers\n       */ sr: [\n                \"sr-only\",\n                \"not-sr-only\"\n            ],\n            /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */ \"forced-color-adjust\": [\n                {\n                    \"forced-color-adjust\": [\n                        \"auto\",\n                        \"none\"\n                    ]\n                }\n            ]\n        },\n        conflictingClassGroups: {\n            overflow: [\n                \"overflow-x\",\n                \"overflow-y\"\n            ],\n            overscroll: [\n                \"overscroll-x\",\n                \"overscroll-y\"\n            ],\n            inset: [\n                \"inset-x\",\n                \"inset-y\",\n                \"start\",\n                \"end\",\n                \"top\",\n                \"right\",\n                \"bottom\",\n                \"left\"\n            ],\n            \"inset-x\": [\n                \"right\",\n                \"left\"\n            ],\n            \"inset-y\": [\n                \"top\",\n                \"bottom\"\n            ],\n            flex: [\n                \"basis\",\n                \"grow\",\n                \"shrink\"\n            ],\n            gap: [\n                \"gap-x\",\n                \"gap-y\"\n            ],\n            p: [\n                \"px\",\n                \"py\",\n                \"ps\",\n                \"pe\",\n                \"pt\",\n                \"pr\",\n                \"pb\",\n                \"pl\"\n            ],\n            px: [\n                \"pr\",\n                \"pl\"\n            ],\n            py: [\n                \"pt\",\n                \"pb\"\n            ],\n            m: [\n                \"mx\",\n                \"my\",\n                \"ms\",\n                \"me\",\n                \"mt\",\n                \"mr\",\n                \"mb\",\n                \"ml\"\n            ],\n            mx: [\n                \"mr\",\n                \"ml\"\n            ],\n            my: [\n                \"mt\",\n                \"mb\"\n            ],\n            size: [\n                \"w\",\n                \"h\"\n            ],\n            \"font-size\": [\n                \"leading\"\n            ],\n            \"fvn-normal\": [\n                \"fvn-ordinal\",\n                \"fvn-slashed-zero\",\n                \"fvn-figure\",\n                \"fvn-spacing\",\n                \"fvn-fraction\"\n            ],\n            \"fvn-ordinal\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-slashed-zero\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-figure\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-spacing\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-fraction\": [\n                \"fvn-normal\"\n            ],\n            \"line-clamp\": [\n                \"display\",\n                \"overflow\"\n            ],\n            rounded: [\n                \"rounded-s\",\n                \"rounded-e\",\n                \"rounded-t\",\n                \"rounded-r\",\n                \"rounded-b\",\n                \"rounded-l\",\n                \"rounded-ss\",\n                \"rounded-se\",\n                \"rounded-ee\",\n                \"rounded-es\",\n                \"rounded-tl\",\n                \"rounded-tr\",\n                \"rounded-br\",\n                \"rounded-bl\"\n            ],\n            \"rounded-s\": [\n                \"rounded-ss\",\n                \"rounded-es\"\n            ],\n            \"rounded-e\": [\n                \"rounded-se\",\n                \"rounded-ee\"\n            ],\n            \"rounded-t\": [\n                \"rounded-tl\",\n                \"rounded-tr\"\n            ],\n            \"rounded-r\": [\n                \"rounded-tr\",\n                \"rounded-br\"\n            ],\n            \"rounded-b\": [\n                \"rounded-br\",\n                \"rounded-bl\"\n            ],\n            \"rounded-l\": [\n                \"rounded-tl\",\n                \"rounded-bl\"\n            ],\n            \"border-spacing\": [\n                \"border-spacing-x\",\n                \"border-spacing-y\"\n            ],\n            \"border-w\": [\n                \"border-w-s\",\n                \"border-w-e\",\n                \"border-w-t\",\n                \"border-w-r\",\n                \"border-w-b\",\n                \"border-w-l\"\n            ],\n            \"border-w-x\": [\n                \"border-w-r\",\n                \"border-w-l\"\n            ],\n            \"border-w-y\": [\n                \"border-w-t\",\n                \"border-w-b\"\n            ],\n            \"border-color\": [\n                \"border-color-s\",\n                \"border-color-e\",\n                \"border-color-t\",\n                \"border-color-r\",\n                \"border-color-b\",\n                \"border-color-l\"\n            ],\n            \"border-color-x\": [\n                \"border-color-r\",\n                \"border-color-l\"\n            ],\n            \"border-color-y\": [\n                \"border-color-t\",\n                \"border-color-b\"\n            ],\n            \"scroll-m\": [\n                \"scroll-mx\",\n                \"scroll-my\",\n                \"scroll-ms\",\n                \"scroll-me\",\n                \"scroll-mt\",\n                \"scroll-mr\",\n                \"scroll-mb\",\n                \"scroll-ml\"\n            ],\n            \"scroll-mx\": [\n                \"scroll-mr\",\n                \"scroll-ml\"\n            ],\n            \"scroll-my\": [\n                \"scroll-mt\",\n                \"scroll-mb\"\n            ],\n            \"scroll-p\": [\n                \"scroll-px\",\n                \"scroll-py\",\n                \"scroll-ps\",\n                \"scroll-pe\",\n                \"scroll-pt\",\n                \"scroll-pr\",\n                \"scroll-pb\",\n                \"scroll-pl\"\n            ],\n            \"scroll-px\": [\n                \"scroll-pr\",\n                \"scroll-pl\"\n            ],\n            \"scroll-py\": [\n                \"scroll-pt\",\n                \"scroll-pb\"\n            ],\n            touch: [\n                \"touch-x\",\n                \"touch-y\",\n                \"touch-pz\"\n            ],\n            \"touch-x\": [\n                \"touch\"\n            ],\n            \"touch-y\": [\n                \"touch\"\n            ],\n            \"touch-pz\": [\n                \"touch\"\n            ]\n        },\n        conflictingClassGroupModifiers: {\n            \"font-size\": [\n                \"leading\"\n            ]\n        }\n    };\n};\nvar twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);\n// src/web/utils/helpers.ts\nvar cn = function() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return twMerge(clsx(inputs));\n};\nvar isFirefox = typeof navigator !== \"undefined\" && navigator.userAgent.includes(\"Firefox\");\nvar throttle = (callback, delay)=>{\n    let lastCall = 0;\n    return (e)=>{\n        const now = Date.now();\n        if (now - lastCall >= delay) {\n            lastCall = now;\n            return callback(e);\n        }\n        return void 0;\n    };\n};\nvar tryOrElse = (fn, defaultValue)=>{\n    try {\n        return fn();\n    } catch (e) {\n        return defaultValue;\n    }\n};\nvar readLocalStorage = (storageKey)=>{\n    if (typeof window === \"undefined\") return null;\n    try {\n        const stored = localStorage.getItem(storageKey);\n        return stored ? JSON.parse(stored) : null;\n    } catch (e) {\n        return null;\n    }\n};\nvar saveLocalStorage = (storageKey, state2)=>{\n    if (typeof window === \"undefined\") return;\n    try {\n        window.localStorage.setItem(storageKey, JSON.stringify(state2));\n    } catch (e) {}\n};\nvar removeLocalStorage = (storageKey)=>{\n    if (typeof window === \"undefined\") return;\n    try {\n        window.localStorage.removeItem(storageKey);\n    } catch (e) {}\n};\nvar toggleMultipleClasses = (element, classes)=>{\n    for (const cls of classes){\n        element.classList.toggle(cls);\n    }\n};\nvar LazyComponentTag = 24;\nvar ProfilerTag = 12;\nvar getExtendedDisplayName = (fiber)=>{\n    if (!fiber) {\n        return {\n            name: \"Unknown\",\n            wrappers: [],\n            wrapperTypes: []\n        };\n    }\n    const { tag, type, elementType } = fiber;\n    let name = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(type);\n    const wrappers = [];\n    const wrapperTypes = [];\n    if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.hasMemoCache)(fiber) || tag === bippy__WEBPACK_IMPORTED_MODULE_0__.SimpleMemoComponentTag || tag === bippy__WEBPACK_IMPORTED_MODULE_0__.MemoComponentTag || (type === null || type === void 0 ? void 0 : type.$$typeof) === Symbol.for(\"react.memo\") || (elementType === null || elementType === void 0 ? void 0 : elementType.$$typeof) === Symbol.for(\"react.memo\")) {\n        const compiler = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.hasMemoCache)(fiber);\n        wrapperTypes.push({\n            type: \"memo\",\n            title: compiler ? \"This component has been auto-memoized by the React Compiler.\" : \"Memoized component that skips re-renders if props are the same\",\n            compiler\n        });\n    }\n    if (tag === LazyComponentTag) {\n        wrapperTypes.push({\n            type: \"lazy\",\n            title: \"Lazily loaded component that supports code splitting\"\n        });\n    }\n    if (tag === bippy__WEBPACK_IMPORTED_MODULE_0__.SuspenseComponentTag) {\n        wrapperTypes.push({\n            type: \"suspense\",\n            title: \"Component that can suspend while content is loading\"\n        });\n    }\n    if (tag === ProfilerTag) {\n        wrapperTypes.push({\n            type: \"profiler\",\n            title: \"Component that measures rendering performance\"\n        });\n    }\n    if (typeof name === \"string\") {\n        const wrapperRegex = /^(\\w+)\\((.*)\\)$/;\n        let currentName = name;\n        while(wrapperRegex.test(currentName)){\n            const match = currentName.match(wrapperRegex);\n            if ((match === null || match === void 0 ? void 0 : match[1]) && (match === null || match === void 0 ? void 0 : match[2])) {\n                wrappers.unshift(match[1]);\n                currentName = match[2];\n            } else {\n                break;\n            }\n        }\n        name = currentName;\n    }\n    return {\n        name: name || \"Unknown\",\n        wrappers,\n        wrapperTypes\n    };\n};\n// src/web/utils/lru.ts\nvar LRUNode = class {\n    constructor(key, value){\n        this.key = key;\n        this.value = value;\n    }\n};\nvar LRUMap = class {\n    has(key) {\n        return this.nodes.has(key);\n    }\n    get(key) {\n        const result = this.nodes.get(key);\n        if (result) {\n            this.bubble(result);\n            return result.value;\n        }\n        return void 0;\n    }\n    set(key, value) {\n        if (this.nodes.has(key)) {\n            const result = this.nodes.get(key);\n            if (result) {\n                this.bubble(result);\n            }\n            return;\n        }\n        const node = new LRUNode(key, value);\n        this.insertHead(node);\n        if (this.nodes.size === this.limit && this.tail) {\n            this.delete(this.tail.key);\n        }\n        this.nodes.set(key, node);\n    }\n    delete(key) {\n        const result = this.nodes.get(key);\n        if (result) {\n            this.removeNode(result);\n            this.nodes.delete(key);\n        }\n    }\n    insertHead(node) {\n        if (this.head) {\n            node.next = this.head;\n            this.head.prev = node;\n        } else {\n            this.tail = node;\n            node.next = void 0;\n        }\n        node.prev = void 0;\n        this.head = node;\n    }\n    removeNode(node) {\n        if (node.prev) {\n            node.prev.next = node.next;\n        }\n        if (node.next) {\n            node.next.prev = node.prev;\n        }\n        if (node === this.tail) {\n            this.tail = node.prev;\n            if (this.tail) {\n                this.tail.next = void 0;\n            }\n        }\n    }\n    insertBefore(node, newNode) {\n        newNode.next = node;\n        if (node.prev) {\n            newNode.prev = node.prev;\n            node.prev.next = newNode;\n        } else {\n            newNode.prev = void 0;\n            this.head = newNode;\n        }\n        node.prev = newNode;\n    }\n    bubble(node) {\n        if (node.prev) {\n            this.removeNode(node);\n            this.insertBefore(node.prev, node);\n        }\n    }\n    constructor(limit){\n        this.limit = limit;\n        this.nodes = /* @__PURE__ */ new Map();\n    }\n};\n// src/core/worker/deferred.ts\nfunction createDeferred() {\n    let resolve;\n    let reject;\n    return {\n        promise: new Promise((res, rej)=>{\n            resolve = res;\n            reject = rej;\n        }),\n        resolve (value) {\n            resolve(value);\n        },\n        reject (value) {\n            reject(value);\n        }\n    };\n}\n// src/core/worker/smol.ts\nfunction setupWorker(setup) {\n    const callback = setup();\n    function success(id, data) {\n        self.postMessage([\n            id,\n            true,\n            data\n        ]);\n    }\n    function failure(id, data) {\n        self.postMessage([\n            id,\n            false,\n            data\n        ]);\n    }\n    self.addEventListener(\"message\", (event)=>{\n        const [id, data] = event.data;\n        try {\n            Promise.resolve(callback(data)).then((res)=>success(id, res), (res)=>failure(id, res));\n        } catch (error) {\n            failure(id, error);\n        }\n    });\n}\nfunction createWorker(callback) {\n    const template = \"(\".concat(setupWorker.toString(), \")(\").concat(callback.toString(), \")\");\n    const url = URL.createObjectURL(new Blob([\n        template\n    ]));\n    const worker2 = new Worker(url);\n    return worker2;\n}\nvar SmolWorker = class {\n    setupWorker(worker2) {\n        worker2.addEventListener(\"message\", (event)=>{\n            const [id, flag, data] = event.data;\n            const deferred = this.deferredMap.get(id);\n            if (deferred) {\n                if (flag) {\n                    deferred.resolve(data);\n                } else {\n                    deferred.reject(data);\n                }\n                this.deferredMap.delete(id);\n            }\n        });\n    }\n    async call(data, options) {\n        if (this.sync) {\n            if (!this.setup) {\n                this.setup = this.callback();\n            }\n            return this.setup(data);\n        }\n        if (!this.worker) {\n            this.worker = createWorker(this.callback);\n            this.setupWorker(this.worker);\n        }\n        const deferred = createDeferred();\n        const id = this.count++;\n        this.deferredMap.set(id, deferred);\n        this.worker.postMessage([\n            id,\n            data\n        ], {\n            transfer: options === null || options === void 0 ? void 0 : options.transfer\n        });\n        return deferred.promise;\n    }\n    destroy() {\n        var _this_worker;\n        this.deferredMap.clear();\n        (_this_worker = this.worker) === null || _this_worker === void 0 ? void 0 : _this_worker.terminate();\n    }\n    constructor(callback){\n        this.callback = callback;\n        this.deferredMap = /* @__PURE__ */ new Map();\n        this.count = 0;\n        this.sync = false;\n    }\n};\n// src/core/worker/smol-extension.ts\nvar SmolWorkerExtension = class {\n    async call(data, _options) {\n        if (!this.setup) {\n            this.setup = this.callback();\n        }\n        return this.setup(data);\n    }\n    destroy() {}\n    constructor(callback){\n        this.callback = callback;\n        this.sync = true;\n    }\n};\n// src/web/utils/outline-worker.ts\nfunction setupOutlineWorker() {\n    const MONO_FONT2 = \"Menlo,Consolas,Monaco,Liberation Mono,Lucida Console,monospace\";\n    let ctx2;\n    let Reason;\n    ((Reason2)=>{\n        Reason2[Reason2[\"Commit\"] = 1] = \"Commit\";\n        Reason2[Reason2[\"Unstable\"] = 2] = \"Unstable\";\n        Reason2[Reason2[\"Unnecessary\"] = 4] = \"Unnecessary\";\n    })(Reason || (Reason = {}));\n    return async (action)=>{\n        switch(action.type){\n            case \"set-canvas\":\n                {\n                    const current = action.payload.getContext(\"2d\");\n                    if (current) {\n                        ctx2 = current;\n                    }\n                }\n                break;\n            case \"resize\":\n                if (ctx2) {\n                    const { dpi, width, height } = action.payload;\n                    ctx2.canvas.width = width;\n                    ctx2.canvas.height = height;\n                    ctx2.resetTransform();\n                    ctx2.scale(dpi, dpi);\n                }\n                break;\n            case \"fade-out-outline\":\n                if (ctx2) {\n                    const { dpi, drawingQueue, mergedLabels } = action.payload;\n                    ctx2.clearRect(0, 0, ctx2.canvas.width / dpi, ctx2.canvas.height / dpi);\n                    ctx2.save();\n                    for(let i = 0, len = drawingQueue.length; i < len; i++){\n                        const { rect, color, alpha, fillAlpha } = drawingQueue[i];\n                        const rgb = \"\".concat(color.r, \",\").concat(color.g, \",\").concat(color.b);\n                        ctx2.strokeStyle = \"rgba(\".concat(rgb, \",\").concat(alpha, \")\");\n                        ctx2.lineWidth = 1;\n                        ctx2.fillStyle = \"rgba(\".concat(rgb, \",\").concat(fillAlpha, \")\");\n                        ctx2.beginPath();\n                        ctx2.rect(rect.x, rect.y, rect.width, rect.height);\n                        ctx2.stroke();\n                        ctx2.fill();\n                    }\n                    ctx2.restore();\n                    for(let i = 0, len = mergedLabels.length; i < len; i++){\n                        const { alpha, rect, color, reasons, labelText } = mergedLabels[i];\n                        const conditionalText = reasons & 4 /* Unnecessary */  ? \"\".concat(labelText, \"⚠️\") : labelText;\n                        ctx2.save();\n                        ctx2.font = \"11px \".concat(MONO_FONT2);\n                        const textMetrics = ctx2.measureText(conditionalText);\n                        const textWidth = textMetrics.width;\n                        const textHeight = 11;\n                        const labelX = rect.x;\n                        const labelY = rect.y - textHeight - 4;\n                        ctx2.fillStyle = \"rgba(\".concat(color.r, \",\").concat(color.g, \",\").concat(color.b, \",\").concat(alpha, \")\");\n                        ctx2.fillRect(labelX, labelY, textWidth + 4, textHeight + 4);\n                        ctx2.fillStyle = \"rgba(255,255,255,\".concat(alpha, \")\");\n                        ctx2.fillText(conditionalText, labelX + 2, labelY + textHeight);\n                    }\n                }\n                break;\n        }\n    };\n}\nvar createWorker2 = ()=>{\n    const useExtensionWorker = readLocalStorage(\"use-extension-worker\");\n    removeLocalStorage(\"use-extension-worker\");\n    if (useExtensionWorker) {\n        return new SmolWorkerExtension(setupOutlineWorker);\n    }\n    return new SmolWorker(setupOutlineWorker);\n};\nvar outlineWorker = createWorker2();\n// src/web/utils/outline.ts\nvar DEFAULT_THROTTLE_TIME = 32;\nfunction incrementFrameId() {\n    requestAnimationFrame(incrementFrameId);\n}\nif (typeof window !== \"undefined\") {\n    incrementFrameId();\n}\nvar recalcOutlines = throttle(async ()=>{\n    const { activeOutlines: activeOutlines2 } = ReactScanInternals;\n    const domNodes = [];\n    for (const activeOutline of activeOutlines2.values()){\n        domNodes.push(activeOutline.domNode);\n    }\n    const rectMap = await batchGetBoundingRects(domNodes);\n    for (const activeOutline of activeOutlines2.values()){\n        const rect = rectMap.get(activeOutline.domNode);\n        if (!rect) {\n            continue;\n        }\n        activeOutline.target = rect;\n    }\n}, DEFAULT_THROTTLE_TIME);\nvar batchGetBoundingRects = (elements)=>{\n    return new Promise((resolve)=>{\n        const results = /* @__PURE__ */ new Map();\n        const observer = new IntersectionObserver((entries)=>{\n            for (const entry of entries){\n                const element = entry.target;\n                const bounds = entry.boundingClientRect;\n                results.set(element, bounds);\n            }\n            observer.disconnect();\n            resolve(results);\n        });\n        for (const element of elements){\n            observer.observe(element);\n        }\n    });\n};\nvar RENDER_PHASE_STRING_TO_ENUM = {\n    mount: 1 /* Mount */ ,\n    update: 2 /* Update */ ,\n    unmount: 4 /* Unmount */ \n};\nvar textMeasurementCache = new LRUMap(100);\n// src/web/views/inspector/timeline/utils.ts\n\n// src/web/views/inspector/utils.ts\n\n// src/web/views/inspector/index.tsx\n\n\n// src/web/state.ts\n\n// src/web/constants.ts\nvar SAFE_AREA = 24;\nvar MIN_SIZE = {\n    width: 550,\n    height: 350,\n    initialHeight: 400\n};\nvar MIN_CONTAINER_WIDTH = 240;\nvar LOCALSTORAGE_KEY = \"react-scan-widget-settings-v2\";\n// src/web/views/widget/index.tsx\n\n\n// src/web/views/inspector/overlay/index.tsx\n\n\n\nvar ANIMATION_CONFIG = {\n    frameInterval: 1e3 / 60,\n    speeds: {\n        fast: 0.51,\n        slow: 0.1,\n        off: 0\n    }\n};\nvar OVERLAY_DPR = typeof window !== \"undefined\" ? window.devicePixelRatio || 1 : 1;\nvar ScanOverlay = ()=>{\n    _s();\n    const refCanvas = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refEventCatcher = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refCurrentRect = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refCurrentLockIconRect = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refLastHoveredElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refRafId = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const refTimeout = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const refCleanupMap = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(/* @__PURE__ */ new Map());\n    const refIsFadingOut = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const refLastFrameTime = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const drawLockIcon = (ctx2, x, y, size)=>{\n        ctx2.save();\n        ctx2.strokeStyle = \"white\";\n        ctx2.fillStyle = \"white\";\n        ctx2.lineWidth = 1.5;\n        const shackleWidth = size * 0.6;\n        const shackleHeight = size * 0.5;\n        const shackleX = x + (size - shackleWidth) / 2;\n        const shackleY = y;\n        ctx2.beginPath();\n        ctx2.arc(shackleX + shackleWidth / 2, shackleY + shackleHeight / 2, shackleWidth / 2, Math.PI, 0, false);\n        ctx2.stroke();\n        const bodyWidth = size * 0.8;\n        const bodyHeight = size * 0.5;\n        const bodyX = x + (size - bodyWidth) / 2;\n        const bodyY = y + shackleHeight / 2;\n        ctx2.fillRect(bodyX, bodyY, bodyWidth, bodyHeight);\n        ctx2.restore();\n    };\n    const drawStatsPill = (ctx2, rect, kind, fiber)=>{\n        if (!fiber) return;\n        const pillHeight = 24;\n        const pillPadding = 8;\n        var _ref;\n        const componentName = (_ref = (fiber === null || fiber === void 0 ? void 0 : fiber.type) && (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type)) !== null && _ref !== void 0 ? _ref : \"Unknown\";\n        const text = componentName;\n        ctx2.save();\n        ctx2.font = \"12px system-ui, -apple-system, sans-serif\";\n        const textMetrics = ctx2.measureText(text);\n        const textWidth = textMetrics.width;\n        const lockIconSize = kind === \"locked\" ? 14 : 0;\n        const lockIconPadding = kind === \"locked\" ? 6 : 0;\n        const pillWidth = textWidth + pillPadding * 2 + lockIconSize + lockIconPadding;\n        const pillX = rect.left;\n        const pillY = rect.top - pillHeight - 4;\n        ctx2.fillStyle = \"rgb(37, 37, 38, .75)\";\n        ctx2.beginPath();\n        ctx2.roundRect(pillX, pillY, pillWidth, pillHeight, 3);\n        ctx2.fill();\n        if (kind === \"locked\") {\n            const lockX = pillX + pillPadding;\n            const lockY = pillY + (pillHeight - lockIconSize) / 2 + 2;\n            drawLockIcon(ctx2, lockX, lockY, lockIconSize);\n            refCurrentLockIconRect.current = {\n                x: lockX,\n                y: lockY,\n                width: lockIconSize,\n                height: lockIconSize\n            };\n        } else {\n            refCurrentLockIconRect.current = null;\n        }\n        ctx2.fillStyle = \"white\";\n        ctx2.textBaseline = \"middle\";\n        const textX = pillX + pillPadding + (kind === \"locked\" ? lockIconSize + lockIconPadding : 0);\n        ctx2.fillText(text, textX, pillY + pillHeight / 2);\n        ctx2.restore();\n    };\n    const drawRect = (canvas2, ctx2, kind, fiber)=>{\n        if (!refCurrentRect.current) return;\n        const rect = refCurrentRect.current;\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n        ctx2.strokeStyle = \"rgba(142, 97, 227, 0.5)\";\n        ctx2.fillStyle = \"rgba(173, 97, 230, 0.10)\";\n        if (kind === \"locked\") {\n            ctx2.setLineDash([]);\n        } else {\n            ctx2.setLineDash([\n                4\n            ]);\n        }\n        ctx2.lineWidth = 1;\n        ctx2.fillRect(rect.left, rect.top, rect.width, rect.height);\n        ctx2.strokeRect(rect.left, rect.top, rect.width, rect.height);\n        drawStatsPill(ctx2, rect, kind, fiber);\n    };\n    const animate = (canvas2, ctx2, targetRect, kind, parentCompositeFiber, onComplete)=>{\n        const speed = ReactScanInternals.options.value.animationSpeed;\n        var _ANIMATION_CONFIG_speeds_speed;\n        const t = (_ANIMATION_CONFIG_speeds_speed = ANIMATION_CONFIG.speeds[speed]) !== null && _ANIMATION_CONFIG_speeds_speed !== void 0 ? _ANIMATION_CONFIG_speeds_speed : ANIMATION_CONFIG.speeds.off;\n        const animationFrame = (timestamp)=>{\n            if (timestamp - refLastFrameTime.current < ANIMATION_CONFIG.frameInterval) {\n                refRafId.current = requestAnimationFrame(animationFrame);\n                return;\n            }\n            refLastFrameTime.current = timestamp;\n            if (!refCurrentRect.current) {\n                cancelAnimationFrame(refRafId.current);\n                return;\n            }\n            refCurrentRect.current = {\n                left: lerp(refCurrentRect.current.left, targetRect.left, t),\n                top: lerp(refCurrentRect.current.top, targetRect.top, t),\n                width: lerp(refCurrentRect.current.width, targetRect.width, t),\n                height: lerp(refCurrentRect.current.height, targetRect.height, t)\n            };\n            drawRect(canvas2, ctx2, kind, parentCompositeFiber);\n            const stillMoving = Math.abs(refCurrentRect.current.left - targetRect.left) > 0.1 || Math.abs(refCurrentRect.current.top - targetRect.top) > 0.1 || Math.abs(refCurrentRect.current.width - targetRect.width) > 0.1 || Math.abs(refCurrentRect.current.height - targetRect.height) > 0.1;\n            if (stillMoving) {\n                refRafId.current = requestAnimationFrame(animationFrame);\n            } else {\n                refCurrentRect.current = targetRect;\n                drawRect(canvas2, ctx2, kind, parentCompositeFiber);\n                cancelAnimationFrame(refRafId.current);\n                ctx2.restore();\n                onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n            }\n        };\n        cancelAnimationFrame(refRafId.current);\n        clearTimeout(refTimeout.current);\n        refRafId.current = requestAnimationFrame(animationFrame);\n        refTimeout.current = setTimeout(()=>{\n            cancelAnimationFrame(refRafId.current);\n            refCurrentRect.current = targetRect;\n            drawRect(canvas2, ctx2, kind, parentCompositeFiber);\n            ctx2.restore();\n            onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n        }, 1e3);\n    };\n    const setupOverlayAnimation = (canvas2, ctx2, targetRect, kind, parentCompositeFiber)=>{\n        ctx2.save();\n        if (!refCurrentRect.current) {\n            refCurrentRect.current = targetRect;\n            drawRect(canvas2, ctx2, kind, parentCompositeFiber);\n            ctx2.restore();\n            return;\n        }\n        animate(canvas2, ctx2, targetRect, kind, parentCompositeFiber);\n    };\n    const drawHoverOverlay = async (overlayElement, canvas2, ctx2, kind)=>{\n        if (!overlayElement || !canvas2 || !ctx2) return;\n        const { parentCompositeFiber } = getCompositeComponentFromElement(overlayElement);\n        const targetRect = await getAssociatedFiberRect(overlayElement);\n        if (!parentCompositeFiber || !targetRect) return;\n        setupOverlayAnimation(canvas2, ctx2, targetRect, kind, parentCompositeFiber);\n    };\n    const unsubscribeAll = ()=>{\n        for (const cleanup2 of refCleanupMap.current.values()){\n            cleanup2 === null || cleanup2 === void 0 ? void 0 : cleanup2();\n        }\n    };\n    const cleanupCanvas = (canvas2)=>{\n        const ctx2 = canvas2.getContext(\"2d\");\n        if (ctx2) {\n            ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n        }\n        refCurrentRect.current = null;\n        refCurrentLockIconRect.current = null;\n        refLastHoveredElement.current = null;\n        canvas2.classList.remove(\"fade-in\");\n        refIsFadingOut.current = false;\n    };\n    const startFadeOut = (onComplete)=>{\n        if (!refCanvas.current || refIsFadingOut.current) return;\n        const handleTransitionEnd = (e)=>{\n            if (!refCanvas.current || e.propertyName !== \"opacity\" || !refIsFadingOut.current) {\n                return;\n            }\n            refCanvas.current.removeEventListener(\"transitionend\", handleTransitionEnd);\n            cleanupCanvas(refCanvas.current);\n            onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n        };\n        const existingListener = refCleanupMap.current.get(\"fade-out\");\n        if (existingListener) {\n            existingListener();\n            refCleanupMap.current.delete(\"fade-out\");\n        }\n        refCanvas.current.addEventListener(\"transitionend\", handleTransitionEnd);\n        refCleanupMap.current.set(\"fade-out\", ()=>{\n            var _refCanvas_current;\n            (_refCanvas_current = refCanvas.current) === null || _refCanvas_current === void 0 ? void 0 : _refCanvas_current.removeEventListener(\"transitionend\", handleTransitionEnd);\n        });\n        refIsFadingOut.current = true;\n        refCanvas.current.classList.remove(\"fade-in\");\n        requestAnimationFrame(()=>{\n            var _refCanvas_current;\n            (_refCanvas_current = refCanvas.current) === null || _refCanvas_current === void 0 ? void 0 : _refCanvas_current.classList.add(\"fade-out\");\n        });\n    };\n    const startFadeIn = ()=>{\n        if (!refCanvas.current) return;\n        refIsFadingOut.current = false;\n        refCanvas.current.classList.remove(\"fade-out\");\n        requestAnimationFrame(()=>{\n            var _refCanvas_current;\n            (_refCanvas_current = refCanvas.current) === null || _refCanvas_current === void 0 ? void 0 : _refCanvas_current.classList.add(\"fade-in\");\n        });\n    };\n    const handleHoverableElement = (componentElement)=>{\n        if (componentElement === refLastHoveredElement.current) return;\n        refLastHoveredElement.current = componentElement;\n        if (nonVisualTags.has(componentElement.tagName)) {\n            startFadeOut();\n        } else {\n            startFadeIn();\n        }\n        Store.inspectState.value = {\n            kind: \"inspecting\",\n            hoveredDomElement: componentElement\n        };\n    };\n    const handleNonHoverableArea = ()=>{\n        if (!refCurrentRect.current || !refCanvas.current || refIsFadingOut.current) {\n            return;\n        }\n        startFadeOut();\n    };\n    const handleMouseMove = throttle((e)=>{\n        const state2 = Store.inspectState.peek();\n        if (state2.kind !== \"inspecting\" || !refEventCatcher.current) return;\n        refEventCatcher.current.style.pointerEvents = \"none\";\n        var _e_clientX, _e_clientY;\n        const element = document.elementFromPoint((_e_clientX = e === null || e === void 0 ? void 0 : e.clientX) !== null && _e_clientX !== void 0 ? _e_clientX : 0, (_e_clientY = e === null || e === void 0 ? void 0 : e.clientY) !== null && _e_clientY !== void 0 ? _e_clientY : 0);\n        refEventCatcher.current.style.removeProperty(\"pointer-events\");\n        clearTimeout(refTimeout.current);\n        if (element && element !== refCanvas.current) {\n            const { parentCompositeFiber } = getCompositeComponentFromElement(element);\n            if (parentCompositeFiber) {\n                const componentElement = findComponentDOMNode(parentCompositeFiber);\n                if (componentElement) {\n                    handleHoverableElement(componentElement);\n                    return;\n                }\n            }\n        }\n        handleNonHoverableArea();\n    }, 32);\n    const isClickInLockIcon = (e, canvas2)=>{\n        const currentRect = refCurrentLockIconRect.current;\n        if (!currentRect) return false;\n        const rect = canvas2.getBoundingClientRect();\n        const scaleX = canvas2.width / rect.width;\n        const scaleY = canvas2.height / rect.height;\n        const x = (e.clientX - rect.left) * scaleX;\n        const y = (e.clientY - rect.top) * scaleY;\n        const adjustedX = x / OVERLAY_DPR;\n        const adjustedY = y / OVERLAY_DPR;\n        return adjustedX >= currentRect.x && adjustedX <= currentRect.x + currentRect.width && adjustedY >= currentRect.y && adjustedY <= currentRect.y + currentRect.height;\n    };\n    const handleLockIconClick = (state2)=>{\n        if (state2.kind === \"focused\") {\n            Store.inspectState.value = {\n                kind: \"inspecting\",\n                hoveredDomElement: state2.focusedDomElement\n            };\n        }\n    };\n    const handleElementClick = (e)=>{\n        var _refLastHoveredElement_current;\n        const clickableElements = [\n            \"react-scan-inspect-element\",\n            \"react-scan-power\"\n        ];\n        if (e.target instanceof HTMLElement && clickableElements.includes(e.target.id)) {\n            return;\n        }\n        const tagName = (_refLastHoveredElement_current = refLastHoveredElement.current) === null || _refLastHoveredElement_current === void 0 ? void 0 : _refLastHoveredElement_current.tagName;\n        if (tagName && nonVisualTags.has(tagName)) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        var _refLastHoveredElement_current1;\n        const element = (_refLastHoveredElement_current1 = refLastHoveredElement.current) !== null && _refLastHoveredElement_current1 !== void 0 ? _refLastHoveredElement_current1 : document.elementFromPoint(e.clientX, e.clientY);\n        if (!element) return;\n        const clickedEl = e.composedPath().at(0);\n        if (clickedEl instanceof HTMLElement && clickableElements.includes(clickedEl.id)) {\n            const syntheticEvent = new MouseEvent(e.type, e);\n            syntheticEvent.__reactScanSyntheticEvent = true;\n            clickedEl.dispatchEvent(syntheticEvent);\n            return;\n        }\n        const { parentCompositeFiber } = getCompositeComponentFromElement(element);\n        if (!parentCompositeFiber) return;\n        const componentElement = findComponentDOMNode(parentCompositeFiber);\n        if (!componentElement) {\n            refLastHoveredElement.current = null;\n            Store.inspectState.value = {\n                kind: \"inspect-off\"\n            };\n            return;\n        }\n        Store.inspectState.value = {\n            kind: \"focused\",\n            focusedDomElement: componentElement,\n            fiber: parentCompositeFiber\n        };\n    };\n    const handleClick = (e)=>{\n        if (e.__reactScanSyntheticEvent) {\n            return;\n        }\n        const state2 = Store.inspectState.peek();\n        const canvas2 = refCanvas.current;\n        if (!canvas2 || !refEventCatcher.current) return;\n        if (isClickInLockIcon(e, canvas2)) {\n            e.preventDefault();\n            e.stopPropagation();\n            handleLockIconClick(state2);\n            return;\n        }\n        if (state2.kind === \"inspecting\") {\n            handleElementClick(e);\n        }\n    };\n    const handleKeyDown = (e)=>{\n        var _document_activeElement;\n        if (e.key !== \"Escape\") return;\n        const state2 = Store.inspectState.peek();\n        const canvas2 = refCanvas.current;\n        if (!canvas2) return;\n        if (((_document_activeElement = document.activeElement) === null || _document_activeElement === void 0 ? void 0 : _document_activeElement.id) === \"react-scan-root\") {\n            return;\n        }\n        if (state2.kind === \"focused\" || state2.kind === \"inspecting\") {\n            e.preventDefault();\n            e.stopPropagation();\n            switch(state2.kind){\n                case \"focused\":\n                    {\n                        startFadeIn();\n                        refCurrentRect.current = null;\n                        refLastHoveredElement.current = state2.focusedDomElement;\n                        Store.inspectState.value = {\n                            kind: \"inspecting\",\n                            hoveredDomElement: state2.focusedDomElement\n                        };\n                        break;\n                    }\n                case \"inspecting\":\n                    {\n                        startFadeOut(()=>{\n                            signalIsSettingsOpen.value = false;\n                            Store.inspectState.value = {\n                                kind: \"inspect-off\"\n                            };\n                        });\n                        break;\n                    }\n            }\n        }\n    };\n    const handleStateChange = (state2, canvas2, ctx2)=>{\n        var _refCleanupMap_current_get;\n        (_refCleanupMap_current_get = refCleanupMap.current.get(state2.kind)) === null || _refCleanupMap_current_get === void 0 ? void 0 : _refCleanupMap_current_get();\n        if (refEventCatcher.current) {\n            if (state2.kind !== \"inspecting\") {\n                refEventCatcher.current.style.pointerEvents = \"none\";\n            }\n        }\n        if (refRafId.current) {\n            cancelAnimationFrame(refRafId.current);\n        }\n        let unsubReport;\n        switch(state2.kind){\n            case \"inspect-off\":\n                startFadeOut();\n                return;\n            case \"inspecting\":\n                drawHoverOverlay(state2.hoveredDomElement, canvas2, ctx2, \"inspecting\");\n                break;\n            case \"focused\":\n                if (!state2.focusedDomElement) return;\n                if (refLastHoveredElement.current !== state2.focusedDomElement) {\n                    refLastHoveredElement.current = state2.focusedDomElement;\n                }\n                drawHoverOverlay(state2.focusedDomElement, canvas2, ctx2, \"locked\");\n                unsubReport = Store.lastReportTime.subscribe(()=>{\n                    if (refRafId.current && refCurrentRect.current) {\n                        const { parentCompositeFiber } = getCompositeComponentFromElement(state2.focusedDomElement);\n                        if (parentCompositeFiber) {\n                            drawHoverOverlay(state2.focusedDomElement, canvas2, ctx2, \"locked\");\n                        }\n                    }\n                });\n                if (unsubReport) {\n                    refCleanupMap.current.set(state2.kind, unsubReport);\n                }\n                break;\n        }\n    };\n    const updateCanvasSize = (canvas2, ctx2)=>{\n        const rect = canvas2.getBoundingClientRect();\n        canvas2.width = rect.width * OVERLAY_DPR;\n        canvas2.height = rect.height * OVERLAY_DPR;\n        ctx2.scale(OVERLAY_DPR, OVERLAY_DPR);\n        ctx2.save();\n    };\n    const handleResizeOrScroll = ()=>{\n        const state2 = Store.inspectState.peek();\n        const canvas2 = refCanvas.current;\n        if (!canvas2) return;\n        const ctx2 = canvas2 === null || canvas2 === void 0 ? void 0 : canvas2.getContext(\"2d\");\n        if (!ctx2) return;\n        cancelAnimationFrame(refRafId.current);\n        clearTimeout(refTimeout.current);\n        updateCanvasSize(canvas2, ctx2);\n        refCurrentRect.current = null;\n        if (state2.kind === \"focused\" && state2.focusedDomElement) {\n            drawHoverOverlay(state2.focusedDomElement, canvas2, ctx2, \"locked\");\n        } else if (state2.kind === \"inspecting\" && state2.hoveredDomElement) {\n            drawHoverOverlay(state2.hoveredDomElement, canvas2, ctx2, \"inspecting\");\n        }\n    };\n    const handlePointerDown = (e)=>{\n        const state2 = Store.inspectState.peek();\n        const canvas2 = refCanvas.current;\n        if (!canvas2) return;\n        if (state2.kind === \"inspecting\" || isClickInLockIcon(e, canvas2)) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    };\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ScanOverlay.useEffect\": ()=>{\n            const canvas2 = refCanvas.current;\n            if (!canvas2) return;\n            const ctx2 = canvas2 === null || canvas2 === void 0 ? void 0 : canvas2.getContext(\"2d\");\n            if (!ctx2) return;\n            updateCanvasSize(canvas2, ctx2);\n            const unSubState = Store.inspectState.subscribe({\n                \"ScanOverlay.useEffect.unSubState\": (state2)=>{\n                    handleStateChange(state2, canvas2, ctx2);\n                }\n            }[\"ScanOverlay.useEffect.unSubState\"]);\n            window.addEventListener(\"scroll\", handleResizeOrScroll, {\n                passive: true\n            });\n            window.addEventListener(\"resize\", handleResizeOrScroll, {\n                passive: true\n            });\n            document.addEventListener(\"mousemove\", handleMouseMove, {\n                passive: true,\n                capture: true\n            });\n            document.addEventListener(\"pointerdown\", handlePointerDown, {\n                capture: true\n            });\n            document.addEventListener(\"click\", handleClick, {\n                capture: true\n            });\n            document.addEventListener(\"keydown\", handleKeyDown, {\n                capture: true\n            });\n            return ({\n                \"ScanOverlay.useEffect\": ()=>{\n                    unsubscribeAll();\n                    unSubState();\n                    window.removeEventListener(\"scroll\", handleResizeOrScroll);\n                    window.removeEventListener(\"resize\", handleResizeOrScroll);\n                    document.removeEventListener(\"mousemove\", handleMouseMove, {\n                        capture: true\n                    });\n                    document.removeEventListener(\"click\", handleClick, {\n                        capture: true\n                    });\n                    document.removeEventListener(\"pointerdown\", handlePointerDown, {\n                        capture: true\n                    });\n                    document.removeEventListener(\"keydown\", handleKeyDown, {\n                        capture: true\n                    });\n                    if (refRafId.current) {\n                        cancelAnimationFrame(refRafId.current);\n                    }\n                    clearTimeout(refTimeout.current);\n                }\n            })[\"ScanOverlay.useEffect\"];\n        }\n    }[\"ScanOverlay.useEffect\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                ref: refEventCatcher,\n                className: cn(\"fixed inset-0 w-screen h-screen\", \"z-[214748365]\"),\n                style: {\n                    pointerEvents: \"none\"\n                }\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"canvas\", {\n                ref: refCanvas,\n                dir: \"ltr\",\n                className: cn(\"react-scan-inspector-overlay\", \"fixed inset-0 w-screen h-screen\", \"pointer-events-none\", \"z-[214748367]\")\n            })\n        ]\n    });\n};\n_s(ScanOverlay, \"alcCbWZUYu2UR3u3yHp7hmYD6ps=\");\n_c = ScanOverlay;\n// src/web/views/notifications/notifications.tsx\n\n\n// src/core/monitor/constants.ts\n\nvar isTest = typeof window !== \"undefined\" && /**\n * @see https://docs.cypress.io/faq/questions/using-cypress-faq#Is-there-any-way-to-detect-if-my-app-is-running-under-Cypress\n */ (window.Cypress || /**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver\n */ navigator.webdriver) || /**\n * @see https://stackoverflow.com/a/60491322\n */ // @ts-expect-error jest is a global in test\ntypeof jest !== \"undefined\";\n// src/core/monitor/utils.ts\nvar not_globally_unique_generateId = ()=>{\n    if (typeof window === \"undefined\") {\n        return \"0\";\n    }\n    if (window.reactScanIdCounter === void 0) {\n        window.reactScanIdCounter = 0;\n    }\n    return \"\".concat(++window.reactScanIdCounter);\n};\n// src/core/notifications/event-tracking.ts\n\n// src/core/create-store.ts\nvar createStoreImpl = (createState)=>{\n    let state2;\n    const listeners = /* @__PURE__ */ new Set();\n    const setState = (partial, replace)=>{\n        const nextState = typeof partial === \"function\" ? partial(state2) : partial;\n        if (!Object.is(nextState, state2)) {\n            const previousState = state2;\n            state2 = (replace !== null && replace !== void 0 ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state2, nextState);\n            listeners.forEach((listener)=>listener(state2, previousState));\n        }\n    };\n    const getState = ()=>state2;\n    const getInitialState = ()=>initialState2;\n    const subscribe = (selectorOrListener, listener)=>{\n        let selector;\n        let actualListener;\n        if (listener) {\n            selector = selectorOrListener;\n            actualListener = listener;\n        } else {\n            actualListener = selectorOrListener;\n        }\n        let currentSlice = selector ? selector(state2) : void 0;\n        const wrappedListener = (newState, previousState)=>{\n            if (selector) {\n                const nextSlice = selector(newState);\n                const prevSlice = selector(previousState);\n                if (!Object.is(currentSlice, nextSlice)) {\n                    currentSlice = nextSlice;\n                    actualListener(nextSlice, prevSlice);\n                }\n            } else {\n                actualListener(newState, previousState);\n            }\n        };\n        listeners.add(wrappedListener);\n        return ()=>listeners.delete(wrappedListener);\n    };\n    const api = {\n        setState,\n        getState,\n        getInitialState,\n        subscribe\n    };\n    const initialState2 = state2 = createState(setState, getState, api);\n    return api;\n};\nvar createStore = (createState)=>createState ? createStoreImpl(createState) : createStoreImpl;\n// src/core/notifications/performance-utils.ts\nvar THROW_INVARIANTS = false;\nvar invariantError = (message)=>{\n    if (THROW_INVARIANTS) {\n        throw new Error(message);\n    }\n};\nvar iife = (fn)=>fn();\nvar BoundedArray = class _BoundedArray extends Array {\n    push() {\n        for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++){\n            items[_key] = arguments[_key];\n        }\n        const result = super.push(...items);\n        while(this.length > this.capacity){\n            this.shift();\n        }\n        return result;\n    }\n    // do not couple capacity with a default param, it must be explicit\n    static fromArray(array, capacity) {\n        const arr = new _BoundedArray(capacity);\n        arr.push(...array);\n        return arr;\n    }\n    constructor(capacity = 25){\n        super();\n        this.capacity = capacity;\n    }\n};\n// src/core/notifications/interaction-store.ts\nvar Store2 = class {\n    subscribe(subscriber) {\n        this.subscribers.add(subscriber);\n        subscriber(this.currentValue);\n        return ()=>{\n            this.subscribers.delete(subscriber);\n        };\n    }\n    setState(data) {\n        this.currentValue = data;\n        this.subscribers.forEach((subscriber)=>subscriber(data));\n    }\n    getCurrentState() {\n        return this.currentValue;\n    }\n    constructor(initialValue){\n        this.subscribers = /* @__PURE__ */ new Set();\n        this.currentValue = initialValue;\n    }\n};\nvar MAX_INTERACTION_BATCH = 150;\nvar interactionStore = new Store2(new BoundedArray(MAX_INTERACTION_BATCH));\n// src/core/notifications/performance.ts\n\n// src/core/notifications/performance-store.ts\nvar MAX_CHANNEL_SIZE = 50;\nvar PerformanceEntryChannels = class {\n    publish(item, to) {\n        let createIfNoChannel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;\n        const existingChannel = this.channels[to];\n        if (!existingChannel) {\n            if (!createIfNoChannel) {\n                return;\n            }\n            this.channels[to] = {\n                callbacks: new BoundedArray(MAX_CHANNEL_SIZE),\n                state: new BoundedArray(MAX_CHANNEL_SIZE)\n            };\n            this.channels[to].state.push(item);\n            return;\n        }\n        existingChannel.state.push(item);\n        existingChannel.callbacks.forEach((cb)=>cb(item));\n    }\n    getAvailableChannels() {\n        return BoundedArray.fromArray(Object.keys(this.channels), MAX_CHANNEL_SIZE);\n    }\n    subscribe(to, cb) {\n        let dropFirst = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        const defer = ()=>{\n            if (!dropFirst) {\n                this.channels[to].state.forEach((item)=>{\n                    cb(item);\n                });\n            }\n            return ()=>{\n                const filtered = this.channels[to].callbacks.filter((subscribed)=>subscribed !== cb);\n                this.channels[to].callbacks = BoundedArray.fromArray(filtered, MAX_CHANNEL_SIZE);\n            };\n        };\n        const existing = this.channels[to];\n        if (!existing) {\n            this.channels[to] = {\n                callbacks: new BoundedArray(MAX_CHANNEL_SIZE),\n                state: new BoundedArray(MAX_CHANNEL_SIZE)\n            };\n            this.channels[to].callbacks.push(cb);\n            return defer();\n        }\n        existing.callbacks.push(cb);\n        return defer();\n    }\n    updateChannelState(channel, updater) {\n        let createIfNoChannel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;\n        const existingChannel = this.channels[channel];\n        if (!existingChannel) {\n            if (!createIfNoChannel) {\n                return;\n            }\n            const state2 = new BoundedArray(MAX_CHANNEL_SIZE);\n            const newChannel = {\n                callbacks: new BoundedArray(MAX_CHANNEL_SIZE),\n                state: state2\n            };\n            this.channels[channel] = newChannel;\n            newChannel.state = updater(state2);\n            return;\n        }\n        existingChannel.state = updater(existingChannel.state);\n    }\n    getChannelState(channel) {\n        var _this_channels_channel_state;\n        return (_this_channels_channel_state = this.channels[channel].state) !== null && _this_channels_channel_state !== void 0 ? _this_channels_channel_state : new BoundedArray(MAX_CHANNEL_SIZE);\n    }\n    constructor(){\n        this.channels = {};\n    }\n};\nvar performanceEntryChannels = new PerformanceEntryChannels();\n// src/core/notifications/performance.ts\nvar DEFAULT_FILTERS = {\n    skipProviders: true,\n    skipHocs: true,\n    skipContainers: true,\n    skipMinified: true,\n    skipUtilities: true,\n    skipBoundaries: true\n};\nvar FILTER_PATTERNS = {\n    providers: [\n        /Provider$/,\n        /^Provider$/,\n        /^Context$/\n    ],\n    hocs: [\n        /^with[A-Z]/,\n        /^forward(?:Ref)?$/i,\n        /^Forward(?:Ref)?\\(/\n    ],\n    containers: [\n        /^(?:App)?Container$/,\n        /^Root$/,\n        /^ReactDev/\n    ],\n    utilities: [\n        /^Fragment$/,\n        /^Suspense$/,\n        /^ErrorBoundary$/,\n        /^Portal$/,\n        /^Consumer$/,\n        /^Layout$/,\n        /^Router/,\n        /^Hydration/\n    ],\n    boundaries: [\n        /^Boundary$/,\n        /Boundary$/,\n        /^Provider$/,\n        /Provider$/\n    ]\n};\nvar shouldIncludeInPath = function(name) {\n    let filters = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_FILTERS;\n    const patternsToCheck = [];\n    if (filters.skipProviders) patternsToCheck.push(...FILTER_PATTERNS.providers);\n    if (filters.skipHocs) patternsToCheck.push(...FILTER_PATTERNS.hocs);\n    if (filters.skipContainers) patternsToCheck.push(...FILTER_PATTERNS.containers);\n    if (filters.skipUtilities) patternsToCheck.push(...FILTER_PATTERNS.utilities);\n    if (filters.skipBoundaries) patternsToCheck.push(...FILTER_PATTERNS.boundaries);\n    return !patternsToCheck.some((pattern)=>pattern.test(name));\n};\nvar minifiedPatterns = [\n    /^[a-z]$/,\n    // Single lowercase letter\n    /^[a-z][0-9]$/,\n    // Lowercase letter followed by number\n    /^_+$/,\n    // Just underscores\n    /^[A-Za-z][_$]$/,\n    // Letter followed by underscore or dollar\n    /^[a-z]{1,2}$/\n];\nvar isMinified = (name)=>{\n    var _name_match;\n    if (!name || typeof name !== \"string\") {\n        return true;\n    }\n    for(let i = 0; i < minifiedPatterns.length; i++){\n        if (minifiedPatterns[i].test(name)) return true;\n    }\n    const hasNoVowels = !/[aeiou]/i.test(name);\n    var _name_match_length;\n    const hasMostlyNumbers = ((_name_match_length = (_name_match = name.match(/\\d/g)) === null || _name_match === void 0 ? void 0 : _name_match.length) !== null && _name_match_length !== void 0 ? _name_match_length : 0) > name.length / 2;\n    const isSingleWordLowerCase = /^[a-z]+$/.test(name);\n    const hasRandomLookingChars = /[$_]{2,}/.test(name);\n    return Number(hasNoVowels) + Number(hasMostlyNumbers) + Number(isSingleWordLowerCase) + Number(hasRandomLookingChars) >= 2;\n};\nvar getInteractionPath = function(fiber) {\n    let filters = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_FILTERS;\n    if (!fiber) {\n        return [];\n    }\n    const stack = new Array();\n    let currentFiber = fiber;\n    while(currentFiber.return){\n        const name = getCleanComponentName(currentFiber.type);\n        if (name && !isMinified(name) && shouldIncludeInPath(name, filters)) {\n            stack.push(name);\n        }\n        currentFiber = currentFiber.return;\n    }\n    const fullPath = new Array(stack.length);\n    for(let i = 0; i < stack.length; i++){\n        fullPath[i] = stack[stack.length - i - 1];\n    }\n    return fullPath;\n};\nvar getCleanComponentName = (component)=>{\n    const name = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(component);\n    if (!name) return \"\";\n    return name.replace(RegExp(\"^(?:Memo|Forward(?:Ref)?|With.*?)\\\\((?<inner>.*?)\\\\)$\"), \"$<inner>\");\n};\nvar getFirstNameFromAncestor = function(fiber) {\n    let accept = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ()=>true;\n    let curr = fiber;\n    while(curr){\n        const currName = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(curr.type);\n        if (currName && accept(currName)) {\n            return currName;\n        }\n        curr = curr.return;\n    }\n    return null;\n};\nvar unsubscribeTrackVisibilityChange;\nvar lastVisibilityHiddenAt = \"never-hidden\";\nvar trackVisibilityChange = ()=>{\n    unsubscribeTrackVisibilityChange === null || unsubscribeTrackVisibilityChange === void 0 ? void 0 : unsubscribeTrackVisibilityChange();\n    const onVisibilityChange = ()=>{\n        if (document.hidden) {\n            lastVisibilityHiddenAt = Date.now();\n        }\n    };\n    document.addEventListener(\"visibilitychange\", onVisibilityChange);\n    unsubscribeTrackVisibilityChange = ()=>{\n        document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n};\nvar getInteractionType = (eventName)=>{\n    if ([\n        \"pointerup\",\n        \"click\"\n    ].includes(eventName)) {\n        return \"pointer\";\n    }\n    if (eventName.includes(\"key\")) {}\n    if ([\n        \"keydown\",\n        \"keyup\"\n    ].includes(eventName)) {\n        return \"keyboard\";\n    }\n    return null;\n};\nvar onEntryAnimationId = null;\nvar setupPerformanceListener = (onEntry)=>{\n    trackVisibilityChange();\n    const interactionMap = /* @__PURE__ */ new Map();\n    const interactionTargetMap = /* @__PURE__ */ new Map();\n    const processInteractionEntry = (entry)=>{\n        if (!entry.interactionId) return;\n        if (entry.interactionId && entry.target && !interactionTargetMap.has(entry.interactionId)) {\n            interactionTargetMap.set(entry.interactionId, entry.target);\n        }\n        if (entry.target) {\n            let current = entry.target;\n            while(current){\n                if (current.id === \"react-scan-toolbar-root\" || current.id === \"react-scan-root\") {\n                    return;\n                }\n                current = current.parentElement;\n            }\n        }\n        const existingInteraction = interactionMap.get(entry.interactionId);\n        if (existingInteraction) {\n            if (entry.duration > existingInteraction.latency) {\n                existingInteraction.entries = [\n                    entry\n                ];\n                existingInteraction.latency = entry.duration;\n            } else if (entry.duration === existingInteraction.latency && entry.startTime === existingInteraction.entries[0].startTime) {\n                existingInteraction.entries.push(entry);\n            }\n        } else {\n            const interactionType = getInteractionType(entry.name);\n            if (!interactionType) {\n                return;\n            }\n            const interaction = {\n                id: entry.interactionId,\n                latency: entry.duration,\n                entries: [\n                    entry\n                ],\n                target: entry.target,\n                type: interactionType,\n                startTime: entry.startTime,\n                endTime: Date.now(),\n                processingStart: entry.processingStart,\n                processingEnd: entry.processingEnd,\n                duration: entry.duration,\n                inputDelay: entry.processingStart - entry.startTime,\n                processingDuration: entry.processingEnd - entry.processingStart,\n                presentationDelay: entry.duration - (entry.processingEnd - entry.startTime),\n                // componentPath:\n                timestamp: Date.now(),\n                timeSinceTabInactive: lastVisibilityHiddenAt === \"never-hidden\" ? \"never-hidden\" : Date.now() - lastVisibilityHiddenAt,\n                visibilityState: document.visibilityState,\n                timeOrigin: performance.timeOrigin,\n                referrer: document.referrer\n            };\n            interactionMap.set(interaction.id, interaction);\n            if (!onEntryAnimationId) {\n                onEntryAnimationId = requestAnimationFrame(()=>{\n                    requestAnimationFrame(()=>{\n                        onEntry(interactionMap.get(interaction.id));\n                        onEntryAnimationId = null;\n                    });\n                });\n            }\n        }\n    };\n    const po = new PerformanceObserver((list)=>{\n        const entries = list.getEntries();\n        for(let i = 0, len = entries.length; i < len; i++){\n            const entry = entries[i];\n            processInteractionEntry(entry);\n        }\n    });\n    try {\n        po.observe({\n            type: \"event\",\n            buffered: true,\n            durationThreshold: 16\n        });\n        po.observe({\n            type: \"first-input\",\n            buffered: true\n        });\n    } catch (e) {}\n    return ()=>po.disconnect();\n};\nvar setupPerformancePublisher = ()=>{\n    return setupPerformanceListener((entry)=>{\n        performanceEntryChannels.publish({\n            kind: \"entry-received\",\n            entry\n        }, \"recording\");\n    });\n};\nvar MAX_INTERACTION_TASKS = 25;\nvar tasks = new BoundedArray(MAX_INTERACTION_TASKS);\nvar getAssociatedDetailedTimingInteraction = (entry, activeTasks)=>{\n    let closestTask = null;\n    for (const task of activeTasks){\n        if (task.type !== entry.type) {\n            continue;\n        }\n        if (closestTask === null) {\n            closestTask = task;\n            continue;\n        }\n        const getAbsoluteDiff = (task2, entry2)=>Math.abs(task2.startDateTime) - (entry2.startTime + entry2.timeOrigin);\n        if (getAbsoluteDiff(task, entry) < getAbsoluteDiff(closestTask, entry)) {\n            closestTask = task;\n        }\n    }\n    return closestTask;\n};\nvar listenForPerformanceEntryInteractions = (onComplete)=>{\n    const unsubscribe = performanceEntryChannels.subscribe(\"recording\", (event)=>{\n        const associatedDetailedInteraction = event.kind === \"auto-complete-race\" ? tasks.find((task)=>task.interactionUUID === event.interactionUUID) : getAssociatedDetailedTimingInteraction(event.entry, tasks);\n        if (!associatedDetailedInteraction) {\n            return;\n        }\n        const completedInteraction = associatedDetailedInteraction.completeInteraction(event);\n        onComplete(completedInteraction);\n    });\n    return unsubscribe;\n};\nvar trackDetailedTiming = (param)=>{\n    let { onMicroTask, onRAF, onTimeout, abort } = param;\n    queueMicrotask(()=>{\n        if ((abort === null || abort === void 0 ? void 0 : abort()) === true) {\n            return;\n        }\n        if (!onMicroTask()) {\n            return;\n        }\n        requestAnimationFrame(()=>{\n            if ((abort === null || abort === void 0 ? void 0 : abort()) === true) {\n                return;\n            }\n            if (!onRAF()) {\n                return;\n            }\n            setTimeout(()=>{\n                if ((abort === null || abort === void 0 ? void 0 : abort()) === true) {\n                    return;\n                }\n                onTimeout();\n            }, 0);\n        });\n    });\n};\nvar getTargetInteractionDetails = (target)=>{\n    const associatedFiber = getFiberFromElement(target);\n    if (!associatedFiber) {\n        return;\n    }\n    let componentName = associatedFiber ? (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(associatedFiber === null || associatedFiber === void 0 ? void 0 : associatedFiber.type) : \"N/A\";\n    if (!componentName) {\n        var _getFirstNameFromAncestor;\n        componentName = (_getFirstNameFromAncestor = getFirstNameFromAncestor(associatedFiber, (name)=>name.length > 2)) !== null && _getFirstNameFromAncestor !== void 0 ? _getFirstNameFromAncestor : \"N/A\";\n    }\n    if (!componentName) {\n        return;\n    }\n    const componentPath = getInteractionPath(associatedFiber);\n    return {\n        componentPath,\n        childrenTree: {},\n        componentName\n    };\n};\nvar setupDetailedPointerTimingListener = (kind, options)=>{\n    let instrumentationIdInControl = null;\n    const getEvent = (info)=>{\n        switch(kind){\n            case \"pointer\":\n                {\n                    if (info.phase === \"start\") {\n                        return \"pointerup\";\n                    }\n                    if (info.target instanceof HTMLInputElement || info.target instanceof HTMLSelectElement) {\n                        return \"change\";\n                    }\n                    return \"click\";\n                }\n            case \"keyboard\":\n                {\n                    if (info.phase === \"start\") {\n                        return \"keydown\";\n                    }\n                    return \"change\";\n                }\n        }\n    };\n    const lastInteractionRef = {\n        current: {\n            kind: \"uninitialized-stage\",\n            interactionUUID: crypto.randomUUID(),\n            // the first interaction uses this\n            stageStart: Date.now(),\n            interactionType: kind\n        }\n    };\n    const onInteractionStart = (e)=>{\n        var _options_onStart;\n        const path = e.composedPath();\n        if (path.some((el)=>el instanceof Element && el.id === \"react-scan-toolbar-root\")) {\n            return;\n        }\n        if (Date.now() - lastInteractionRef.current.stageStart > 2e3) {\n            lastInteractionRef.current = {\n                kind: \"uninitialized-stage\",\n                interactionUUID: crypto.randomUUID(),\n                stageStart: Date.now(),\n                interactionType: kind\n            };\n        }\n        if (lastInteractionRef.current.kind !== \"uninitialized-stage\") {\n            return;\n        }\n        const pointerUpStart = performance.now();\n        options === null || options === void 0 ? void 0 : (_options_onStart = options.onStart) === null || _options_onStart === void 0 ? void 0 : _options_onStart.call(options, lastInteractionRef.current.interactionUUID);\n        const details = getTargetInteractionDetails(e.target);\n        if (!details) {\n            var _options_onError;\n            options === null || options === void 0 ? void 0 : (_options_onError = options.onError) === null || _options_onError === void 0 ? void 0 : _options_onError.call(options, lastInteractionRef.current.interactionUUID);\n            return;\n        }\n        const fiberRenders = {};\n        const stopListeningForRenders = listenForRenders(fiberRenders);\n        lastInteractionRef.current = {\n            ...lastInteractionRef.current,\n            interactionType: kind,\n            blockingTimeStart: Date.now(),\n            childrenTree: details.childrenTree,\n            componentName: details.componentName,\n            componentPath: details.componentPath,\n            fiberRenders,\n            kind: \"interaction-start\",\n            interactionStartDetail: pointerUpStart,\n            stopListeningForRenders\n        };\n        const event = getEvent({\n            phase: \"end\",\n            target: e.target\n        });\n        document.addEventListener(event, onLastJS, {\n            once: true\n        });\n        requestAnimationFrame(()=>{\n            document.removeEventListener(event, onLastJS);\n        });\n    };\n    document.addEventListener(getEvent({\n        phase: \"start\"\n    }), onInteractionStart, {\n        capture: true\n    });\n    const onLastJS = (e, instrumentationId, abort)=>{\n        if (lastInteractionRef.current.kind !== \"interaction-start\" && instrumentationId === instrumentationIdInControl) {\n            var _options_onError;\n            if (kind === \"pointer\" && e.target instanceof HTMLSelectElement) {\n                lastInteractionRef.current = {\n                    kind: \"uninitialized-stage\",\n                    interactionUUID: crypto.randomUUID(),\n                    stageStart: Date.now(),\n                    interactionType: kind\n                };\n                return;\n            }\n            options === null || options === void 0 ? void 0 : (_options_onError = options.onError) === null || _options_onError === void 0 ? void 0 : _options_onError.call(options, lastInteractionRef.current.interactionUUID);\n            lastInteractionRef.current = {\n                kind: \"uninitialized-stage\",\n                interactionUUID: crypto.randomUUID(),\n                stageStart: Date.now(),\n                interactionType: kind\n            };\n            invariantError(\"pointer -> click\");\n            return;\n        }\n        instrumentationIdInControl = instrumentationId;\n        trackDetailedTiming({\n            abort,\n            onMicroTask: ()=>{\n                if (lastInteractionRef.current.kind === \"uninitialized-stage\") {\n                    return false;\n                }\n                lastInteractionRef.current = {\n                    ...lastInteractionRef.current,\n                    kind: \"js-end-stage\",\n                    jsEndDetail: performance.now()\n                };\n                return true;\n            },\n            onRAF: ()=>{\n                if (lastInteractionRef.current.kind !== \"js-end-stage\" && lastInteractionRef.current.kind !== \"raf-stage\") {\n                    var _options_onError;\n                    options === null || options === void 0 ? void 0 : (_options_onError = options.onError) === null || _options_onError === void 0 ? void 0 : _options_onError.call(options, lastInteractionRef.current.interactionUUID);\n                    invariantError(\"bad transition to raf\");\n                    lastInteractionRef.current = {\n                        kind: \"uninitialized-stage\",\n                        interactionUUID: crypto.randomUUID(),\n                        stageStart: Date.now(),\n                        interactionType: kind\n                    };\n                    return false;\n                }\n                lastInteractionRef.current = {\n                    ...lastInteractionRef.current,\n                    kind: \"raf-stage\",\n                    rafStart: performance.now()\n                };\n                return true;\n            },\n            onTimeout: ()=>{\n                if (lastInteractionRef.current.kind !== \"raf-stage\") {\n                    var _options_onError;\n                    options === null || options === void 0 ? void 0 : (_options_onError = options.onError) === null || _options_onError === void 0 ? void 0 : _options_onError.call(options, lastInteractionRef.current.interactionUUID);\n                    lastInteractionRef.current = {\n                        kind: \"uninitialized-stage\",\n                        interactionUUID: crypto.randomUUID(),\n                        stageStart: Date.now(),\n                        interactionType: kind\n                    };\n                    invariantError(\"raf->timeout\");\n                    return;\n                }\n                const now = Date.now();\n                const timeoutStage = Object.freeze({\n                    ...lastInteractionRef.current,\n                    kind: \"timeout-stage\",\n                    blockingTimeEnd: now,\n                    commitEnd: performance.now()\n                });\n                lastInteractionRef.current = {\n                    kind: \"uninitialized-stage\",\n                    interactionUUID: crypto.randomUUID(),\n                    stageStart: now,\n                    interactionType: kind\n                };\n                let completed = false;\n                const completeInteraction = (event)=>{\n                    var _options_onComplete;\n                    completed = true;\n                    const latency = event.kind === \"auto-complete-race\" ? event.detailedTiming.commitEnd - event.detailedTiming.interactionStartDetail : event.entry.latency;\n                    const finalInteraction = {\n                        detailedTiming: timeoutStage,\n                        latency,\n                        completedAt: Date.now(),\n                        flushNeeded: true\n                    };\n                    options === null || options === void 0 ? void 0 : (_options_onComplete = options.onComplete) === null || _options_onComplete === void 0 ? void 0 : _options_onComplete.call(options, timeoutStage.interactionUUID, finalInteraction, event);\n                    const newTasks = tasks.filter((task2)=>task2.interactionUUID !== timeoutStage.interactionUUID);\n                    tasks = BoundedArray.fromArray(newTasks, MAX_INTERACTION_TASKS);\n                    return finalInteraction;\n                };\n                const task = {\n                    completeInteraction,\n                    endDateTime: Date.now(),\n                    startDateTime: timeoutStage.blockingTimeStart,\n                    type: kind,\n                    interactionUUID: timeoutStage.interactionUUID\n                };\n                tasks.push(task);\n                if (!isPerformanceEventAvailable()) {\n                    const newTasks = tasks.filter((task2)=>task2.interactionUUID !== timeoutStage.interactionUUID);\n                    tasks = BoundedArray.fromArray(newTasks, MAX_INTERACTION_TASKS);\n                    completeInteraction({\n                        kind: \"auto-complete-race\",\n                        // redundant\n                        detailedTiming: timeoutStage,\n                        interactionUUID: timeoutStage.interactionUUID\n                    });\n                } else {\n                    setTimeout(()=>{\n                        if (completed) {\n                            return;\n                        }\n                        completeInteraction({\n                            kind: \"auto-complete-race\",\n                            // redundant\n                            detailedTiming: timeoutStage,\n                            interactionUUID: timeoutStage.interactionUUID\n                        });\n                        const newTasks = tasks.filter((task2)=>task2.interactionUUID !== timeoutStage.interactionUUID);\n                        tasks = BoundedArray.fromArray(newTasks, MAX_INTERACTION_TASKS);\n                    }, 1e3);\n                }\n            }\n        });\n    };\n    const onKeyPress = (e)=>{\n        const id = crypto.randomUUID();\n        onLastJS(e, id, ()=>id !== instrumentationIdInControl);\n    };\n    if (kind === \"keyboard\") {\n        document.addEventListener(\"keypress\", onKeyPress);\n    }\n    return ()=>{\n        document.removeEventListener(getEvent({\n            phase: \"start\"\n        }), onInteractionStart, {\n            capture: true\n        });\n        document.removeEventListener(\"keypress\", onKeyPress);\n    };\n};\nvar getHostFromFiber = (fiber)=>{\n    var _traverseFiber;\n    return (_traverseFiber = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.traverseFiber)(fiber, (node)=>{\n        if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isHostFiber)(node)) {\n            return true;\n        }\n    })) === null || _traverseFiber === void 0 ? void 0 : _traverseFiber.stateNode;\n};\nvar isPerformanceEventAvailable = ()=>{\n    return \"PerformanceEventTiming\" in globalThis;\n};\nvar listenForRenders = (fiberRenders)=>{\n    const listener = (fiber)=>{\n        var _getParentCompositeFiber_, _getParentCompositeFiber, _existing_changes, _existing_changes1, _existing_changes2;\n        const displayName = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type);\n        if (!displayName) {\n            return;\n        }\n        const existing = fiberRenders[displayName];\n        if (!existing) {\n            const parents = /* @__PURE__ */ new Set();\n            const parentCompositeName = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(getParentCompositeFiber(fiber));\n            if (parentCompositeName) {\n                parents.add(parentCompositeName);\n            }\n            const { selfTime: selfTime2, totalTime: totalTime2 } = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber);\n            const newChanges2 = collectInspectorDataWithoutCounts(fiber);\n            const emptySection2 = {\n                current: [],\n                changes: /* @__PURE__ */ new Set(),\n                changesCounts: /* @__PURE__ */ new Map()\n            };\n            const changes = {\n                fiberProps: newChanges2.fiberProps || emptySection2,\n                fiberState: newChanges2.fiberState || emptySection2,\n                fiberContext: newChanges2.fiberContext || emptySection2\n            };\n            var _getDisplayName3;\n            fiberRenders[displayName] = {\n                renderCount: 1,\n                parents,\n                selfTime: selfTime2,\n                totalTime: totalTime2,\n                nodeInfo: [\n                    {\n                        element: getHostFromFiber(fiber),\n                        name: (_getDisplayName3 = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type)) !== null && _getDisplayName3 !== void 0 ? _getDisplayName3 : \"Unknown\",\n                        selfTime: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber).selfTime\n                    }\n                ],\n                changes\n            };\n            return;\n        }\n        const parentType = (_getParentCompositeFiber = getParentCompositeFiber(fiber)) === null || _getParentCompositeFiber === void 0 ? void 0 : (_getParentCompositeFiber_ = _getParentCompositeFiber[0]) === null || _getParentCompositeFiber_ === void 0 ? void 0 : _getParentCompositeFiber_.type;\n        if (parentType) {\n            const parentCompositeName = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(parentType);\n            if (parentCompositeName) {\n                existing.parents.add(parentCompositeName);\n            }\n        }\n        const { selfTime, totalTime } = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber);\n        const newChanges = collectInspectorDataWithoutCounts(fiber);\n        if (!newChanges) return;\n        const emptySection = {\n            current: [],\n            changes: /* @__PURE__ */ new Set(),\n            changesCounts: /* @__PURE__ */ new Map()\n        };\n        existing.changes = {\n            fiberProps: mergeSectionData(((_existing_changes = existing.changes) === null || _existing_changes === void 0 ? void 0 : _existing_changes.fiberProps) || emptySection, newChanges.fiberProps || emptySection),\n            fiberState: mergeSectionData(((_existing_changes1 = existing.changes) === null || _existing_changes1 === void 0 ? void 0 : _existing_changes1.fiberState) || emptySection, newChanges.fiberState || emptySection),\n            fiberContext: mergeSectionData(((_existing_changes2 = existing.changes) === null || _existing_changes2 === void 0 ? void 0 : _existing_changes2.fiberContext) || emptySection, newChanges.fiberContext || emptySection)\n        };\n        existing.renderCount += 1;\n        existing.selfTime += selfTime;\n        existing.totalTime += totalTime;\n        var _getDisplayName31;\n        existing.nodeInfo.push({\n            element: getHostFromFiber(fiber),\n            name: (_getDisplayName31 = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type)) !== null && _getDisplayName31 !== void 0 ? _getDisplayName31 : \"Unknown\",\n            selfTime: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber).selfTime\n        });\n    };\n    Store.monitor.value.interactionListeningForRenders = listener;\n    return ()=>{\n        var _Store_monitor_value;\n        if (((_Store_monitor_value = Store.monitor.value) === null || _Store_monitor_value === void 0 ? void 0 : _Store_monitor_value.interactionListeningForRenders) === listener) {\n            Store.monitor.value.interactionListeningForRenders = null;\n        }\n    };\n};\nvar mergeSectionData = (existing, newData)=>{\n    const mergedSection = {\n        current: [\n            ...existing.current\n        ],\n        changes: /* @__PURE__ */ new Set(),\n        changesCounts: /* @__PURE__ */ new Map()\n    };\n    for (const value of newData.current){\n        if (!mergedSection.current.some((item)=>item.name === value.name)) {\n            mergedSection.current.push(value);\n        }\n    }\n    for (const change of newData.changes){\n        if (typeof change === \"string\" || typeof change === \"number\") {\n            mergedSection.changes.add(change);\n            const existingCount = existing.changesCounts.get(change) || 0;\n            const newCount = newData.changesCounts.get(change) || 0;\n            mergedSection.changesCounts.set(change, existingCount + newCount);\n        }\n    }\n    return mergedSection;\n};\n// src/core/notifications/event-tracking.ts\nvar accumulatedFiberRendersOverTask = null;\nvar debugEventStore = createStore()((set)=>({\n        state: {\n            events: []\n        },\n        actions: {\n            addEvent: (event)=>{\n                set((store)=>({\n                        state: {\n                            events: [\n                                ...store.state.events,\n                                event\n                            ]\n                        }\n                    }));\n            },\n            clear: ()=>{\n                set({\n                    state: {\n                        events: []\n                    }\n                });\n            }\n        }\n    }));\nvar toolbarEventStore = createStore()((set, get)=>{\n    const listeners = /* @__PURE__ */ new Set();\n    return {\n        state: {\n            events: []\n        },\n        actions: {\n            addEvent: (event)=>{\n                listeners.forEach((listener)=>listener(event));\n                const events = [\n                    ...get().state.events,\n                    event\n                ];\n                const applyOverlapCheckToLongRenderEvent = (longRenderEvent, onOverlap)=>{\n                    const overlapsWith = events.find((event2)=>{\n                        if (event2.kind === \"long-render\") {\n                            return;\n                        }\n                        if (event2.id === longRenderEvent.id) {\n                            return;\n                        }\n                        if (longRenderEvent.data.startAt <= event2.data.startAt && longRenderEvent.data.endAt <= event2.data.endAt && longRenderEvent.data.endAt >= event2.data.startAt) {\n                            return true;\n                        }\n                        if (event2.data.startAt <= longRenderEvent.data.startAt && event2.data.endAt >= longRenderEvent.data.startAt) {\n                            return true;\n                        }\n                        if (longRenderEvent.data.startAt <= event2.data.startAt && longRenderEvent.data.endAt >= event2.data.endAt) {\n                            return true;\n                        }\n                    });\n                    if (overlapsWith) {\n                        onOverlap(overlapsWith);\n                    }\n                };\n                const toRemove = /* @__PURE__ */ new Set();\n                events.forEach((event2)=>{\n                    if (event2.kind === \"interaction\") return;\n                    applyOverlapCheckToLongRenderEvent(event2, ()=>{\n                        toRemove.add(event2.id);\n                    });\n                });\n                const withRemovedEvents = events.filter((event2)=>!toRemove.has(event2.id));\n                set(()=>({\n                        state: {\n                            events: withRemovedEvents\n                        }\n                    }));\n            },\n            addListener: (listener)=>{\n                listeners.add(listener);\n                return ()=>{\n                    listeners.delete(listener);\n                };\n            },\n            clear: ()=>{\n                set({\n                    state: {\n                        events: []\n                    }\n                });\n            }\n        }\n    };\n});\nvar useToolbarEventLog = ()=>{\n    _s1();\n    return (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useSyncExternalStore)(toolbarEventStore.subscribe, toolbarEventStore.getState);\n};\n_s1(useToolbarEventLog, \"FpwL93IKMLJZuQQXefVtWynbBPQ=\", false, function() {\n    return [\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useSyncExternalStore\n    ];\n});\nvar isTaskDirty = false;\nvar startDirtyTaskTracking = ()=>{\n    document.addEventListener(\"visibilitychange\", ()=>{\n        if (document.visibilityState === \"visible\") {\n            return;\n        }\n        isTaskDirty = true;\n    });\n};\nvar framesDrawnInTheLastSecond = [];\nfunction startLongPipelineTracking() {\n    let rafHandle;\n    let timeoutHandle;\n    function measure() {\n        let unSub = null;\n        accumulatedFiberRendersOverTask = null;\n        accumulatedFiberRendersOverTask = {};\n        unSub = listenForRenders(accumulatedFiberRendersOverTask);\n        const startOrigin = performance.timeOrigin;\n        const startTime = performance.now();\n        rafHandle = requestAnimationFrame(()=>{\n            timeoutHandle = setTimeout(()=>{\n                const endNow = performance.now();\n                const duration = endNow - startTime;\n                const endOrigin = performance.timeOrigin;\n                framesDrawnInTheLastSecond.push(endNow);\n                const framesInTheLastSecond = framesDrawnInTheLastSecond.filter((frameAt)=>endNow - frameAt <= 1e3);\n                const fps2 = framesInTheLastSecond.length;\n                framesDrawnInTheLastSecond = framesInTheLastSecond;\n                if (duration > 200 && !isTaskDirty) {\n                    const endAt = endOrigin + endNow;\n                    const startAt = startTime + startOrigin;\n                    toolbarEventStore.getState().actions.addEvent({\n                        kind: \"long-render\",\n                        id: not_globally_unique_generateId(),\n                        data: {\n                            endAt,\n                            startAt,\n                            meta: {\n                                fiberRenders: accumulatedFiberRendersOverTask,\n                                latency: duration,\n                                fps: fps2\n                            }\n                        }\n                    });\n                }\n                isTaskDirty = false;\n                unSub === null || unSub === void 0 ? void 0 : unSub();\n                measure();\n            }, 0);\n        });\n    }\n    measure();\n    return ()=>{\n        cancelAnimationFrame(rafHandle);\n        clearTimeout(timeoutHandle);\n    };\n}\nvar startTimingTracking = ()=>{\n    const unSubPerformance = setupPerformancePublisher();\n    startDirtyTaskTracking();\n    startLongPipelineTracking();\n    const onComplete = async (_, finalInteraction, event)=>{\n        toolbarEventStore.getState().actions.addEvent({\n            kind: \"interaction\",\n            id: crypto.randomUUID(),\n            data: {\n                startAt: finalInteraction.detailedTiming.blockingTimeStart,\n                endAt: performance.now() + performance.timeOrigin,\n                meta: {\n                    ...finalInteraction,\n                    kind: event.kind\n                }\n            }\n        });\n        const existingCompletedInteractions = performanceEntryChannels.getChannelState(\"recording\");\n        finalInteraction.detailedTiming.stopListeningForRenders();\n        if (existingCompletedInteractions.length) {\n            performanceEntryChannels.updateChannelState(\"recording\", ()=>new BoundedArray(MAX_CHANNEL_SIZE));\n        }\n    };\n    const unSubDetailedPointerTiming = setupDetailedPointerTimingListener(\"pointer\", {\n        onComplete\n    });\n    const unSubDetailedKeyboardTiming = setupDetailedPointerTimingListener(\"keyboard\", {\n        onComplete\n    });\n    const unSubInteractions = listenForPerformanceEntryInteractions((completedInteraction)=>{\n        interactionStore.setState(BoundedArray.fromArray(interactionStore.getCurrentState().concat(completedInteraction), MAX_INTERACTION_BATCH));\n    });\n    return ()=>{\n        unSubPerformance();\n        unSubDetailedPointerTiming();\n        unSubInteractions();\n        unSubDetailedKeyboardTiming();\n    };\n};\n// src/web/views/notifications/data.ts\n\n\nvar getComponentName = (path)=>{\n    const filteredPath = path.filter((item)=>item.length > 2);\n    if (filteredPath.length === 0) {\n        var _path_at;\n        return (_path_at = path.at(-1)) !== null && _path_at !== void 0 ? _path_at : \"Unknown\";\n    }\n    return filteredPath.at(-1);\n};\nvar getTotalTime = (timing)=>{\n    switch(timing.kind){\n        case \"interaction\":\n            {\n                const { renderTime, otherJSTime, framePreparation, frameConstruction, frameDraw } = timing;\n                return renderTime + otherJSTime + framePreparation + frameConstruction + (frameDraw !== null && frameDraw !== void 0 ? frameDraw : 0);\n            }\n        case \"dropped-frames\":\n            {\n                return timing.otherTime + timing.renderTime;\n            }\n    }\n};\nvar isRenderMemoizable = (gropedFiberRender)=>{\n    return gropedFiberRender.changes.context.length === 0 && gropedFiberRender.changes.props.length === 0 && gropedFiberRender.changes.state.length === 0;\n};\nvar getEventSeverity = (event)=>{\n    const totalTime = getTotalTime(event.timing);\n    switch(event.kind){\n        case \"interaction\":\n            {\n                if (totalTime < 200) return \"low\";\n                if (totalTime < 500) return \"needs-improvement\";\n                return \"high\";\n            }\n        case \"dropped-frames\":\n            {\n                if (totalTime < 50) return \"low\";\n                if (totalTime < 200) return \"needs-improvement\";\n                return \"high\";\n            }\n    }\n};\nvar useNotificationsContext = ()=>{\n    _s2();\n    return (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useContext)(NotificationStateContext);\n};\n_s2(useNotificationsContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar NotificationStateContext = (0,preact__WEBPACK_IMPORTED_MODULE_2__.createContext)(null);\n// src/web/views/notifications/details-routes.tsx\n\n// src/web/views/notifications/icons.tsx\n\nvar ChevronRight = (param)=>{\n    let { size = 24, className } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className: cn([\n            \"lucide lucide-chevron-right\",\n            className\n        ]),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n            d: \"m9 18 6-6-6-6\"\n        })\n    });\n};\n_c1 = ChevronRight;\nvar SHOW_DOT = false;\nvar Notification = (param)=>{\n    let { className = \"\", size = 24, events = [] } = param;\n    const hasHighSeverity = events.includes(true);\n    const totalSevere = events.filter((e)=>e).length;\n    const displayCount = totalSevere > 99 ? \">99\" : totalSevere;\n    const badgeSize = hasHighSeverity ? Math.max(size * 0.6, 14) : Math.max(size * 0.4, 6);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"relative\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                width: size,\n                height: size,\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                \"stroke-width\": \"2\",\n                \"stroke-linecap\": \"round\",\n                \"stroke-linejoin\": \"round\",\n                className: \"lucide lucide-bell \".concat(className),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        d: \"M10.268 21a2 2 0 0 0 3.464 0\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        d: \"M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326\"\n                    })\n                ]\n            }),\n            events.length > 0 && (SHOW_DOT || totalSevere > 0) && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn([\n                    \"absolute\",\n                    hasHighSeverity ? \"-top-2.5 -right-2.5\" : \"-top-1 -right-1\",\n                    \"rounded-full\",\n                    \"flex items-center justify-center\",\n                    \"text-[8px] font-medium text-white\",\n                    \"aspect-square\",\n                    hasHighSeverity ? \"bg-red-500/90\" : \"bg-purple-500/90\"\n                ]),\n                style: {\n                    width: \"\".concat(badgeSize, \"px\"),\n                    height: \"\".concat(badgeSize, \"px\"),\n                    padding: hasHighSeverity ? \"0.5px\" : \"0\"\n                },\n                children: hasHighSeverity && displayCount\n            })\n        ]\n    });\n};\n_c2 = Notification;\nvar CloseIcon = (param)=>{\n    let { className = \"\", size = 24 } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M18 6 6 18\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m6 6 12 12\"\n            })\n        ]\n    });\n};\n_c3 = CloseIcon;\nvar VolumeOnIcon = (param)=>{\n    let { className = \"\", size = 24 } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M16 9a5 5 0 0 1 0 6\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M19.364 18.364a9 9 0 0 0 0-12.728\"\n            })\n        ]\n    });\n};\n_c4 = VolumeOnIcon;\nvar VolumeOffIcon = (param)=>{\n    let { className = \"\", size = 24 } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M16 9a5 5 0 0 1 .95 2.293\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M19.364 5.636a9 9 0 0 1 1.889 9.96\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m2 2 20 20\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M9.828 4.172A.686.686 0 0 1 11 4.657v.686\"\n            })\n        ]\n    });\n};\n_c5 = VolumeOffIcon;\nvar ArrowLeft = (param)=>{\n    let { size = 24, className } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className: cn([\n            \"lucide lucide-arrow-left\",\n            className\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m12 19-7-7 7-7\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M19 12H5\"\n            })\n        ]\n    });\n};\n_c6 = ArrowLeft;\nvar PointerIcon = (param)=>{\n    let { className = \"\", size = 24 } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M14 4.1 12 6\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m5.1 8-2.9-.8\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m6 12-1.9 2\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M7.2 2.2 8 5.1\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z\"\n            })\n        ]\n    });\n};\n_c7 = PointerIcon;\nvar KeyboardIcon = (param)=>{\n    let { className = \"\", size = 24 } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M10 8h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M12 12h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M14 8h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M16 12h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M18 8h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M6 8h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M7 16h10\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M8 12h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"rect\", {\n                width: \"20\",\n                height: \"16\",\n                x: \"2\",\n                y: \"4\",\n                rx: \"2\"\n            })\n        ]\n    });\n};\n_c8 = KeyboardIcon;\nvar ClearIcon = (param)=>{\n    let { className = \"\", size = 24 } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        style: {\n            transform: \"rotate(180deg)\"\n        },\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"circle\", {\n                cx: \"12\",\n                cy: \"12\",\n                r: \"10\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m4.9 4.9 14.2 14.2\"\n            })\n        ]\n    });\n};\n_c9 = ClearIcon;\nvar TrendingDownIcon = (param)=>{\n    let { className = \"\", size = 24 } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"polyline\", {\n                points: \"22 17 13.5 8.5 8.5 13.5 2 7\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"polyline\", {\n                points: \"16 17 22 17 22 11\"\n            })\n        ]\n    });\n};\n_c10 = TrendingDownIcon;\n// src/web/views/notifications/popover.tsx\n\n\nvar Popover = (param)=>{\n    let { children, triggerContent, wrapperProps } = param;\n    _s3();\n    const [popoverState, setPopoverState] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(\"closed\");\n    const [elBoundingRect, setElBoundingRect] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(null);\n    const [viewportSize, setViewportSize] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)({\n        width: window.innerWidth,\n        height: window.innerHeight\n    });\n    const triggerRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(null);\n    const popoverRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(null);\n    const portalEl = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useContext)(ToolbarElementContext);\n    const isHoveredRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(false);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"Popover.useEffect2\": ()=>{\n            const handleResize = {\n                \"Popover.useEffect2.handleResize\": ()=>{\n                    setViewportSize({\n                        width: window.innerWidth,\n                        height: window.innerHeight\n                    });\n                    updateRect();\n                }\n            }[\"Popover.useEffect2.handleResize\"];\n            window.addEventListener(\"resize\", handleResize);\n            return ({\n                \"Popover.useEffect2\": ()=>window.removeEventListener(\"resize\", handleResize)\n            })[\"Popover.useEffect2\"];\n        }\n    }[\"Popover.useEffect2\"], []);\n    const updateRect = ()=>{\n        if (triggerRef.current && portalEl) {\n            const triggerRect = triggerRef.current.getBoundingClientRect();\n            const portalRect = portalEl.getBoundingClientRect();\n            const centerX = triggerRect.left + triggerRect.width / 2;\n            const centerY = triggerRect.top;\n            const rect = new DOMRect(centerX - portalRect.left, centerY - portalRect.top, triggerRect.width, triggerRect.height);\n            setElBoundingRect(rect);\n        }\n    };\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"Popover.useEffect2\": ()=>{\n            updateRect();\n        }\n    }[\"Popover.useEffect2\"], [\n        triggerRef.current\n    ]);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"Popover.useEffect2\": ()=>{\n            if (popoverState === \"opening\") {\n                const timer = setTimeout({\n                    \"Popover.useEffect2.timer\": ()=>setPopoverState(\"open\")\n                }[\"Popover.useEffect2.timer\"], 120);\n                return ({\n                    \"Popover.useEffect2\": ()=>clearTimeout(timer)\n                })[\"Popover.useEffect2\"];\n            } else if (popoverState === \"closing\") {\n                const timer = setTimeout({\n                    \"Popover.useEffect2.timer\": ()=>setPopoverState(\"closed\")\n                }[\"Popover.useEffect2.timer\"], 120);\n                return ({\n                    \"Popover.useEffect2\": ()=>clearTimeout(timer)\n                })[\"Popover.useEffect2\"];\n            }\n        }\n    }[\"Popover.useEffect2\"], [\n        popoverState\n    ]);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"Popover.useEffect2\": ()=>{\n            const interval = setInterval({\n                \"Popover.useEffect2.interval\": ()=>{\n                    if (!isHoveredRef.current && popoverState !== \"closed\") {\n                        setPopoverState(\"closing\");\n                    }\n                }\n            }[\"Popover.useEffect2.interval\"], 1e3);\n            return ({\n                \"Popover.useEffect2\": ()=>clearInterval(interval)\n            })[\"Popover.useEffect2\"];\n        }\n    }[\"Popover.useEffect2\"], [\n        popoverState\n    ]);\n    const handleMouseEnter = ()=>{\n        isHoveredRef.current = true;\n        updateRect();\n        setPopoverState(\"opening\");\n    };\n    const handleMouseLeave = ()=>{\n        isHoveredRef.current = false;\n        updateRect();\n        setPopoverState(\"closing\");\n    };\n    const getPopoverPosition = ()=>{\n        var _popoverRef_current;\n        if (!elBoundingRect || !portalEl) return {\n            top: 0,\n            left: 0\n        };\n        const portalRect = portalEl.getBoundingClientRect();\n        const popoverWidth = 175;\n        const popoverHeight = ((_popoverRef_current = popoverRef.current) === null || _popoverRef_current === void 0 ? void 0 : _popoverRef_current.offsetHeight) || 40;\n        const safeArea = 5;\n        const viewportX = elBoundingRect.x + portalRect.left;\n        const viewportY = elBoundingRect.y + portalRect.top;\n        let left = viewportX;\n        let top = viewportY - 4;\n        if (left - popoverWidth / 2 < safeArea) {\n            left = safeArea + popoverWidth / 2;\n        } else if (left + popoverWidth / 2 > viewportSize.width - safeArea) {\n            left = viewportSize.width - safeArea - popoverWidth / 2;\n        }\n        if (top - popoverHeight < safeArea) {\n            top = viewportY + elBoundingRect.height + 4;\n        }\n        return {\n            top: top - portalRect.top,\n            left: left - portalRect.left\n        };\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            portalEl && elBoundingRect && popoverState !== \"closed\" && (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.createPortal)(/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                ref: popoverRef,\n                className: cn([\n                    \"absolute z-100 bg-white text-black rounded-lg px-3 py-2 shadow-lg\",\n                    \"transform transition-all duration-120 ease-[cubic-bezier(0.23,1,0.32,1)]\",\n                    'after:content-[\"\"] after:absolute after:top-[100%]',\n                    \"after:left-1/2 after:-translate-x-1/2\",\n                    \"after:w-[10px] after:h-[6px]\",\n                    \"after:border-l-[5px] after:border-l-transparent\",\n                    \"after:border-r-[5px] after:border-r-transparent\",\n                    \"after:border-t-[6px] after:border-t-white\",\n                    \"pointer-events-none\",\n                    popoverState === \"opening\" || popoverState === \"closing\" ? \"opacity-0 translate-y-1\" : \"opacity-100 translate-y-0\"\n                ]),\n                style: {\n                    top: getPopoverPosition().top + \"px\",\n                    left: getPopoverPosition().left + \"px\",\n                    transform: \"translate(-50%, -100%)\",\n                    minWidth: \"175px\"\n                },\n                children\n            }), portalEl),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                ref: triggerRef,\n                onMouseEnter: handleMouseEnter,\n                onMouseLeave: handleMouseLeave,\n                ...wrapperProps,\n                children: triggerContent\n            })\n        ]\n    });\n};\n_s3(Popover, \"ilcgWid+A97g4dhTzdi93RwQVgA=\", false, function() {\n    return [\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useContext,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect\n    ];\n});\n_c11 = Popover;\n// src/web/views/notifications/notification-tabs.tsx\n\nvar NotificationTabs = (param)=>{\n    let { selectedEvent: _ } = param;\n    _s4();\n    const { notificationState, setNotificationState, setRoute } = useNotificationsContext();\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            \"flex w-full justify-between items-center px-3 py-2 text-xs\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"bg-[#18181B] flex items-center gap-x-1 p-1 rounded-sm\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            setRoute({\n                                route: \"render-visualization\",\n                                routeMessage: null\n                            });\n                        },\n                        className: cn([\n                            \"w-1/2 flex items-center justify-center whitespace-nowrap py-[5px] px-1 gap-x-1\",\n                            notificationState.route === \"render-visualization\" || notificationState.route === \"render-explanation\" ? \"text-white bg-[#7521c8] rounded-sm\" : \"text-[#6E6E77] bg-[#18181B] rounded-sm\"\n                        ]),\n                        children: \"Ranked\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            setRoute({\n                                route: \"other-visualization\",\n                                routeMessage: null\n                            });\n                        },\n                        className: cn([\n                            \"w-1/2 flex items-center justify-center whitespace-nowrap py-[5px] px-1 gap-x-1\",\n                            notificationState.route === \"other-visualization\" ? \"text-white bg-[#7521c8] rounded-sm\" : \"text-[#6E6E77] bg-[#18181B] rounded-sm\"\n                        ]),\n                        children: \"Overview\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            setRoute({\n                                route: \"optimize\",\n                                routeMessage: null\n                            });\n                        },\n                        className: cn([\n                            \"w-1/2 flex items-center justify-center whitespace-nowrap py-[5px] px-1 gap-x-1\",\n                            notificationState.route === \"optimize\" ? \"text-white bg-[#7521c8] rounded-sm\" : \"text-[#6E6E77] bg-[#18181B] rounded-sm\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            children: \"Prompts\"\n                        })\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Popover, {\n                triggerContent: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                    onClick: ()=>{\n                        setNotificationState((prev)=>{\n                            if (prev.audioNotificationsOptions.enabled && prev.audioNotificationsOptions.audioContext.state !== \"closed\") {\n                                prev.audioNotificationsOptions.audioContext.close();\n                            }\n                            const audioContext = new AudioContext();\n                            if (!prev.audioNotificationsOptions.enabled) {\n                                playNotificationSound(audioContext);\n                            }\n                            return {\n                                ...prev,\n                                audioNotificationsOptions: prev.audioNotificationsOptions.enabled ? {\n                                    audioContext: null,\n                                    enabled: false\n                                } : {\n                                    audioContext,\n                                    enabled: true\n                                }\n                            };\n                        });\n                    },\n                    className: \"ml-auto\",\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex gap-x-2 justify-center items-center text-[#6E6E77]\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                children: \"Alerts\"\n                            }),\n                            notificationState.audioNotificationsOptions.enabled ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(VolumeOnIcon, {\n                                size: 16,\n                                className: \"text-[#6E6E77]\"\n                            }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(VolumeOffIcon, {\n                                size: 16,\n                                className: \"text-[#6E6E77]\"\n                            })\n                        ]\n                    })\n                }),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                    children: \"Play a chime when a slowdown is recorded\"\n                })\n            })\n        ]\n    });\n};\n_s4(NotificationTabs, \"ybIlE84mtsAw05GMMnqgS8ontpw=\", false, function() {\n    return [\n        useNotificationsContext\n    ];\n});\n_c12 = NotificationTabs;\n// src/web/views/notifications/optimize.tsx\n\n\nvar formatReactData = (groupedFiberRenders)=>{\n    let text = \"\";\n    const filteredFibers = groupedFiberRenders.toSorted((a, b)=>b.totalTime - a.totalTime).slice(0, 30).filter((fiber)=>fiber.totalTime > 5);\n    filteredFibers.forEach((fiberRender)=>{\n        let localText = \"\";\n        localText += \"Component Name:\";\n        localText += fiberRender.name;\n        localText += \"\\n\";\n        localText += \"Rendered: \".concat(fiberRender.count, \" times\\n\");\n        localText += \"Sum of self times for \".concat(fiberRender.name, \" is \").concat(fiberRender.totalTime.toFixed(0), \"ms\\n\");\n        if (fiberRender.changes.props.length > 0) {\n            localText += \"Changed props for all \".concat(fiberRender.name, ' instances (\"name:count\" pairs)\\n');\n            fiberRender.changes.props.forEach((change)=>{\n                localText += \"\".concat(change.name, \":\").concat(change.count, \"x\\n\");\n            });\n        }\n        if (fiberRender.changes.state.length > 0) {\n            localText += \"Changed state for all \".concat(fiberRender.name, ' instances (\"hook index:count\" pairs)\\n');\n            fiberRender.changes.state.forEach((change)=>{\n                localText += \"\".concat(change.index, \":\").concat(change.count, \"x\\n\");\n            });\n        }\n        if (fiberRender.changes.context.length > 0) {\n            localText += \"Changed context for all \".concat(fiberRender.name, ' instances (\"context display name (if exists):count\" pairs)\\n');\n            fiberRender.changes.context.forEach((change)=>{\n                localText += \"\".concat(change.name, \":\").concat(change.count, \"x\\n\");\n            });\n        }\n        text += localText;\n        text += \"\\n\";\n    });\n    return text;\n};\nvar generateInteractionDataPrompt = (param)=>{\n    let { renderTime, eHandlerTimeExcludingRenders, toRafTime, commitTime, framePresentTime, formattedReactData } = param;\n    return \"I will provide you with a set of high level, and low level performance data about an interaction in a React App:\\n### High level\\n- react component render time: \".concat(renderTime.toFixed(0), \"ms\\n- how long it took to run javascript event handlers (EXCLUDING REACT RENDERS): \").concat(eHandlerTimeExcludingRenders.toFixed(0), \"ms\\n- how long it took from the last event handler time, to the last request animation frame: \").concat(toRafTime.toFixed(0), \"ms\\n\t- things like prepaint, style recalculations, layerization, async web API's like observers may occur during this time\\n- how long it took from the last request animation frame to when the dom was committed: \").concat(commitTime.toFixed(0), \"ms\\n\t- during this period you will see paint, commit, potential style recalcs, and other misc browser activity. Frequently high times here imply css that makes the browser do a lot of work, or mutating expensive dom properties during the event handler stage. This can be many things, but it narrows the problem scope significantly when this is high\\n\").concat(framePresentTime && \"- how long it took from dom commit for the frame to be presented: \".concat(framePresentTime.toFixed(0), \"ms. This is when information about how to paint the next frame is sent to the compositor threads, and when the GPU does work. If this is high, look for issues that may be a bottleneck for operations occurring during this time\"), \"\\n\\n### Low level\\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\\n\").concat(formattedReactData);\n};\nvar generateInteractionOptimizationPrompt = (param)=>{\n    let { interactionType, name, componentPath, time, renderTime, eHandlerTimeExcludingRenders, toRafTime, commitTime, framePresentTime, formattedReactData } = param;\n    return \"You will attempt to implement a performance improvement to a user interaction in a React app. You will be provided with data about the interaction, and the slow down.\\n\\nYour should split your goals into 2 parts:\\n- identifying the problem\\n- fixing the problem\\n\t- it is okay to implement a fix even if you aren't 100% sure the fix solves the performance problem. When you aren't sure, you should tell the user to try repeating the interaction, and feeding the \\\"Formatted Data\\\" in the React Scan notifications optimize tab. This allows you to start a debugging flow with the user, where you attempt a fix, and observe the result. The user may make a mistake when they pass you the formatted data, so must make sure, given the data passed to you, that the associated data ties to the same interaction you were trying to debug.\\n\\n\\nMake sure to check if the user has the react compiler enabled (project dependent, configured through build tool), so you don't unnecessarily memoize components. If it is, you do not need to worry about memoizing user components\\n\\nOne challenge you may face is the performance problem lies in a node_module, not in user code. If you are confident the problem originates because of a node_module, there are multiple strategies, which are context dependent:\\n- you can try to work around the problem, knowing which module is slow\\n- you can determine if its possible to resolve the problem in the node_module by modifying non node_module code\\n- you can monkey patch the node_module to experiment and see if it's really the problem (you can modify a functions properties to hijack the call for example)\\n- you can determine if it's feasible to replace whatever node_module is causing the problem with a performant option (this is an extreme)\\n\\nThe interaction was a \".concat(interactionType, \" on the component named \").concat(name, \". This component has the following ancestors \").concat(componentPath, \". This is the path from the component, to the root. This should be enough information to figure out where this component is in the user's code base\\n\\nThis path is the component that was clicked, so it should tell you roughly where component had an event handler that triggered a state change.\\n\\nPlease note that the leaf node of this path might not be user code (if they use a UI library), and they may contain many wrapper components that just pass through children that aren't relevant to the actual click. So make you sure analyze the path and understand what the user code is doing\\n\\nWe have a set of high level, and low level data about the performance issue.\\n\\nThe click took \").concat(time.toFixed(0), \"ms from interaction start, to when a new frame was presented to a user.\\n\\nWe also provide you with a breakdown of what the browser spent time on during the period of interaction start to frame presentation.\\n\\n- react component render time: \").concat(renderTime.toFixed(0), \"ms\\n- how long it took to run javascript event handlers (EXCLUDING REACT RENDERS): \").concat(eHandlerTimeExcludingRenders.toFixed(0), \"ms\\n- how long it took from the last event handler time, to the last request animation frame: \").concat(toRafTime.toFixed(0), \"ms\\n\t- things like prepaint, style recalculations, layerization, async web API's like observers may occur during this time\\n- how long it took from the last request animation frame to when the dom was committed: \").concat(commitTime.toFixed(0), \"ms\\n\t- during this period you will see paint, commit, potential style recalcs, and other misc browser activity. Frequently high times here imply css that makes the browser do a lot of work, or mutating expensive dom properties during the event handler stage. This can be many things, but it narrows the problem scope significantly when this is high\\n\").concat(framePresentTime && \"- how long it took from dom commit for the frame to be presented: \".concat(framePresentTime.toFixed(0), \"ms. This is when information about how to paint the next frame is sent to the compositor threads, and when the GPU does work. If this is high, look for issues that may be a bottleneck for operations occurring during this time\"), \"\\n\\n\\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\\n\\n\").concat(formattedReactData, \"\\n\\nYou may notice components have many renders, but much fewer props/state/context changes. This normally implies most of the components could of been memoized to avoid computation\\n\\nIt's also important to remember if a component had no props/state/context change, and it was memoized, it would not render. So the flow should be:\\n- find the most expensive components\\n- see what's causing them to render\\n- determine how you can make those state/props/context not change for a large set of the renders\\n- once there are no more changes left, you can memoize the component so it no longer unnecessarily re-renders. \\n\\nAn important thing to note is that if you see a lot of react renders (some components with very high render counts), but javascript excluding renders is much higher than render time, it is possible that the components with lots of renders run hooks like useEffect/useLayoutEffect, which run during the JS event handler period.\\n\\nIt's also good to note that react profiles hook times in development, and if many hooks are called (lets say 5,000 components all called a useEffect), it will have to profile every single one. And it may also be the case the comparison of the hooks dependency can be expensive, and that would not be tracked in render time.\\n\\nIf a node_module is the component with high renders, you can experiment to see if that component is the root issue (because of hooks). You should use the same instructions for node_module debugging mentioned previously.\\n\\n\");\n};\nvar generateFrameDropOptimizationPrompt = (param)=>{\n    let { renderTime, otherTime, formattedReactData } = param;\n    return \"You will attempt to implement a performance improvement to a large slowdown in a react app\\n\\nYour should split your goals into 2 parts:\\n- identifying the problem\\n- fixing the problem\\n\t- it is okay to implement a fix even if you aren't 100% sure the fix solves the performance problem. When you aren't sure, you should tell the user to try repeating the interaction, and feeding the \\\"Formatted Data\\\" in the React Scan notifications optimize tab. This allows you to start a debugging flow with the user, where you attempt a fix, and observe the result. The user may make a mistake when they pass you the formatted data, so must make sure, given the data passed to you, that the associated data ties to the same interaction you were trying to debug.\\n\\nMake sure to check if the user has the react compiler enabled (project dependent, configured through build tool), so you don't unnecessarily memoize components. If it is, you do not need to worry about memoizing user components\\n\\nOne challenge you may face is the performance problem lies in a node_module, not in user code. If you are confident the problem originates because of a node_module, there are multiple strategies, which are context dependent:\\n- you can try to work around the problem, knowing which module is slow\\n- you can determine if its possible to resolve the problem in the node_module by modifying non node_module code\\n- you can monkey patch the node_module to experiment and see if it's really the problem (you can modify a functions properties to hijack the call for example)\\n- you can determine if it's feasible to replace whatever node_module is causing the problem with a performant option (this is an extreme)\\n\\n\\nWe have the high level time of how much react spent rendering, and what else the browser spent time on during this slowdown\\n\\n- react component render time: \".concat(renderTime.toFixed(0), \"ms\\n- other time: \").concat(otherTime, \"ms\\n\\n\\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\\n\\n\").concat(formattedReactData, \"\\n\\nYou may notice components have many renders, but much fewer props/state/context changes. This normally implies most of the components could of been memoized to avoid computation\\n\\nIt's also important to remember if a component had no props/state/context change, and it was memoized, it would not render. So the flow should be:\\n- find the most expensive components\\n- see what's causing them to render\\n- determine how you can make those state/props/context not change for a large set of the renders\\n- once there are no more changes left, you can memoize the component so it no longer unnecessarily re-renders. \\n\\nAn important thing to note is that if you see a lot of react renders (some components with very high render counts), but other time is much higher than render time, it is possible that the components with lots of renders run hooks like useEffect/useLayoutEffect, which run outside of what we profile (just react render time).\\n\\nIt's also good to note that react profiles hook times in development, and if many hooks are called (lets say 5,000 components all called a useEffect), it will have to profile every single one. And it may also be the case the comparison of the hooks dependency can be expensive, and that would not be tracked in render time.\\n\\nIf a node_module is the component with high renders, you can experiment to see if that component is the root issue (because of hooks). You should use the same instructions for node_module debugging mentioned previously.\\n\\nIf renders don't seem to be the problem, see if there are any expensive CSS properties being added/mutated, or any expensive DOM Element mutations/new elements being created that could cause this slowdown. \\n\");\n};\nvar generateFrameDropExplanationPrompt = (param)=>{\n    let { renderTime, otherTime, formattedReactData } = param;\n    return \"Your goal will be to help me find the source of a performance problem in a React App. I collected a large dataset about this specific performance problem.\\n\\nWe have the high level time of how much react spent rendering, and what else the browser spent time on during this slowdown\\n\\n- react component render time: \".concat(renderTime.toFixed(0), \"ms\\n- other time (other JavaScript, hooks like useEffect, style recalculations, layerization, paint & commit and everything else the browser might do to draw a new frame after javascript mutates the DOM): \").concat(otherTime, \"ms\\n\\n\\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\\n\\n\").concat(formattedReactData, \"\\n\\nYou may notice components have many renders, but much fewer props/state/context changes. This normally implies most of the components could of been memoized to avoid computation\\n\\nIt's also important to remember if a component had no props/state/context change, and it was memoized, it would not render. So a flow we can go through is:\\n- find the most expensive components\\n- see what's causing them to render\\n- determine how you can make those state/props/context not change for a large set of the renders\\n- once there are no more changes left, you can memoize the component so it no longer unnecessarily re-renders. \\n\\n\\nAn important thing to note is that if you see a lot of react renders (some components with very high render counts), but other time is much higher than render time, it is possible that the components with lots of renders run hooks like useEffect/useLayoutEffect, which run outside of what we profile (just react render time).\\n\\nIt's also good to note that react profiles hook times in development, and if many hooks are called (lets say 5,000 components all called a useEffect), it will have to profile every single one, and this can add significant overhead when thousands of effects ran.\\n\\nIf it's not possible to explain the root problem from this data, please ask me for more data explicitly, and what we would need to know to find the source of the performance problem.\\n\");\n};\nvar generateFrameDropDataPrompt = (param)=>{\n    let { renderTime, otherTime, formattedReactData } = param;\n    return \"I will provide you with a set of high level, and low level performance data about a large frame drop in a React App:\\n### High level\\n- react component render time: \".concat(renderTime.toFixed(0), \"ms\\n- how long it took to run everything else (other JavaScript, hooks like useEffect, style recalculations, layerization, paint & commit and everything else the browser might do to draw a new frame after javascript mutates the DOM): \").concat(otherTime, \"ms\\n\\n### Low level\\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\\n\").concat(formattedReactData);\n};\nvar generateInteractionExplanationPrompt = (param)=>{\n    let { interactionType, name, componentPath, time, renderTime, eHandlerTimeExcludingRenders, toRafTime, commitTime, framePresentTime, formattedReactData } = param;\n    return \"Your goal will be to help me find the source of a performance problem. I collected a large dataset about this specific performance problem.\\n\\nThere was a \".concat(interactionType, \" on a component named \").concat(name, \". This means, roughly, the component that handled the \").concat(interactionType, \" event was named \").concat(name, \".\\n\\nWe have a set of high level, and low level data about the performance issue.\\n\\nThe click took \").concat(time.toFixed(0), \"ms from interaction start, to when a new frame was presented to a user.\\n\\nWe also provide you with a breakdown of what the browser spent time on during the period of interaction start to frame presentation.\\n\\n- react component render time: \").concat(renderTime.toFixed(0), \"ms\\n- how long it took to run javascript event handlers (EXCLUDING REACT RENDERS): \").concat(eHandlerTimeExcludingRenders.toFixed(0), \"ms\\n- how long it took from the last event handler time, to the last request animation frame: \").concat(toRafTime.toFixed(0), \"ms\\n\t- things like prepaint, style recalculations, layerization, async web API's like observers may occur during this time\\n- how long it took from the last request animation frame to when the dom was committed: \").concat(commitTime.toFixed(0), \"ms\\n\t- during this period you will see paint, commit, potential style recalcs, and other misc browser activity. Frequently high times here imply css that makes the browser do a lot of work, or mutating expensive dom properties during the event handler stage. This can be many things, but it narrows the problem scope significantly when this is high\\n\").concat(framePresentTime && \"- how long it took from dom commit for the frame to be presented: \".concat(framePresentTime.toFixed(0), \"ms. This is when information about how to paint the next frame is sent to the compositor threads, and when the GPU does work. If this is high, look for issues that may be a bottleneck for operations occurring during this time\"), \"\\n\\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\\n\\n\").concat(formattedReactData, \"\\n\\n\\nYou may notice components have many renders, but much fewer props/state/context changes. This normally implies most of the components could of been memoized to avoid computation\\n\\nIt's also important to remember if a component had no props/state/context change, and it was memoized, it would not render. So a flow we can go through is:\\n- find the most expensive components\\n- see what's causing them to render\\n- determine how you can make those state/props/context not change for a large set of the renders\\n- once there are no more changes left, you can memoize the component so it no longer unnecessarily re-renders. \\n\\n\\nAn important thing to note is that if you see a lot of react renders (some components with very high render counts), but javascript excluding renders is much higher than render time, it is possible that the components with lots of renders run hooks like useEffect/useLayoutEffect, which run during the JS event handler period.\\n\\nIt's also good to note that react profiles hook times in development, and if many hooks are called (lets say 5,000 components all called a useEffect), it will have to profile every single one. And it may also be the case the comparison of the hooks dependency can be expensive, and that would not be tracked in render time.\\n\\nIf it's not possible to explain the root problem from this data, please ask me for more data explicitly, and what we would need to know to find the source of the performance problem.\\n\");\n};\nvar getLLMPrompt = (activeTab, selectedEvent)=>iife(()=>{\n        switch(activeTab){\n            case \"data\":\n                {\n                    switch(selectedEvent.kind){\n                        case \"dropped-frames\":\n                            {\n                                return generateFrameDropDataPrompt({\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    otherTime: selectedEvent.timing.otherTime\n                                });\n                            }\n                        case \"interaction\":\n                            {\n                                return generateInteractionDataPrompt({\n                                    commitTime: selectedEvent.timing.frameConstruction,\n                                    eHandlerTimeExcludingRenders: selectedEvent.timing.otherJSTime,\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    framePresentTime: selectedEvent.timing.frameDraw,\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    toRafTime: selectedEvent.timing.framePreparation\n                                });\n                            }\n                    }\n                }\n            case \"explanation\":\n                {\n                    switch(selectedEvent.kind){\n                        case \"dropped-frames\":\n                            {\n                                return generateFrameDropExplanationPrompt({\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    otherTime: selectedEvent.timing.otherTime\n                                });\n                            }\n                        case \"interaction\":\n                            {\n                                return generateInteractionExplanationPrompt({\n                                    commitTime: selectedEvent.timing.frameConstruction,\n                                    componentPath: selectedEvent.componentPath.join(\">\"),\n                                    eHandlerTimeExcludingRenders: selectedEvent.timing.otherJSTime,\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    framePresentTime: selectedEvent.timing.frameDraw,\n                                    interactionType: selectedEvent.type,\n                                    name: getComponentName(selectedEvent.componentPath),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    time: getTotalTime(selectedEvent.timing),\n                                    toRafTime: selectedEvent.timing.framePreparation\n                                });\n                            }\n                    }\n                }\n            case \"fix\":\n                {\n                    switch(selectedEvent.kind){\n                        case \"dropped-frames\":\n                            {\n                                return generateFrameDropOptimizationPrompt({\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    otherTime: selectedEvent.timing.otherTime\n                                });\n                            }\n                        case \"interaction\":\n                            {\n                                return generateInteractionOptimizationPrompt({\n                                    commitTime: selectedEvent.timing.frameConstruction,\n                                    componentPath: selectedEvent.componentPath.join(\">\"),\n                                    eHandlerTimeExcludingRenders: selectedEvent.timing.otherJSTime,\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    framePresentTime: selectedEvent.timing.frameDraw,\n                                    interactionType: selectedEvent.type,\n                                    name: getComponentName(selectedEvent.componentPath),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    time: getTotalTime(selectedEvent.timing),\n                                    toRafTime: selectedEvent.timing.framePreparation\n                                });\n                            }\n                    }\n                }\n        }\n    });\nvar Optimize = (param)=>{\n    let { selectedEvent } = param;\n    _s5();\n    const [activeTab, setActiveTab] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(\"fix\");\n    const [copying, setCopying] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            \"w-full h-full\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"border border-[#27272A] rounded-sm h-4/5 text-xs overflow-hidden\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"bg-[#18181B] p-1 rounded-t-sm\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"flex items-center gap-x-1\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    onClick: ()=>setActiveTab(\"fix\"),\n                                    className: cn([\n                                        \"flex items-center justify-center whitespace-nowrap py-1.5 px-3 rounded-sm\",\n                                        activeTab === \"fix\" ? \"text-white bg-[#7521c8]\" : \"text-[#6E6E77] hover:text-white\"\n                                    ]),\n                                    children: \"Fix\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    onClick: ()=>setActiveTab(\"explanation\"),\n                                    className: cn([\n                                        \"flex items-center justify-center whitespace-nowrap py-1.5 px-3 rounded-sm\",\n                                        activeTab === \"explanation\" ? \"text-white bg-[#7521c8]\" : \"text-[#6E6E77] hover:text-white\"\n                                    ]),\n                                    children: \"Explanation\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    onClick: ()=>setActiveTab(\"data\"),\n                                    className: cn([\n                                        \"flex items-center justify-center whitespace-nowrap py-1.5 px-3 rounded-sm\",\n                                        activeTab === \"data\" ? \"text-white bg-[#7521c8]\" : \"text-[#6E6E77] hover:text-white\"\n                                    ]),\n                                    children: \"Data\"\n                                })\n                            ]\n                        })\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"overflow-y-auto h-full\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"pre\", {\n                            className: cn([\n                                \"p-2 h-full\",\n                                \"whitespace-pre-wrap break-words\",\n                                \"text-gray-300 font-mono \"\n                            ]),\n                            children: getLLMPrompt(activeTab, selectedEvent)\n                        })\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                onClick: async ()=>{\n                    const text = getLLMPrompt(activeTab, selectedEvent);\n                    await navigator.clipboard.writeText(text);\n                    setCopying(true);\n                    setTimeout(()=>setCopying(false), 1e3);\n                },\n                className: cn([\n                    \"mt-4 px-4 py-2 bg-[#18181B] text-[#6E6E77] rounded-sm\",\n                    \"hover:text-white transition-colors duration-200\",\n                    \"flex items-center justify-center gap-x-2 text-xs\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        children: copying ? \"Copied!\" : \"Copy Prompt\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n                        xmlns: \"http://www.w3.org/2000/svg\",\n                        width: \"16\",\n                        height: \"16\",\n                        viewBox: \"0 0 24 24\",\n                        fill: \"none\",\n                        stroke: \"currentColor\",\n                        strokeWidth: \"2\",\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        className: cn([\n                            \"transition-transform duration-200\",\n                            copying && \"scale-110\"\n                        ]),\n                        children: copying ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                            d: \"M20 6L9 17l-5-5\"\n                        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"rect\", {\n                                    width: \"14\",\n                                    height: \"14\",\n                                    x: \"8\",\n                                    y: \"8\",\n                                    rx: \"2\",\n                                    ry: \"2\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                                    d: \"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n};\n_s5(Optimize, \"eizdD8EsA8QyYB6YdimMAF8bbD4=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState\n    ];\n});\n_c13 = Optimize;\n// src/web/views/notifications/other-visualization.tsx\n\n\nvar getTimeData = (selectedEvent, isProduction2)=>{\n    switch(selectedEvent.kind){\n        // todo: push instead of conditional spread\n        case \"dropped-frames\":\n            {\n                const timeData = [\n                    ...isProduction2 ? [\n                        {\n                            name: \"Total Processing Time\",\n                            time: getTotalTime(selectedEvent.timing),\n                            color: \"bg-red-500\",\n                            kind: \"total-processing-time\"\n                        }\n                    ] : [\n                        {\n                            name: \"Renders\",\n                            time: selectedEvent.timing.renderTime,\n                            color: \"bg-purple-500\",\n                            kind: \"render\"\n                        },\n                        {\n                            name: \"JavaScript, DOM updates, Draw Frame\",\n                            time: selectedEvent.timing.otherTime,\n                            color: \"bg-[#4b4b4b]\",\n                            kind: \"other-frame-drop\"\n                        }\n                    ]\n                ];\n                return timeData;\n            }\n        case \"interaction\":\n            {\n                const timeData = [\n                    ...!isProduction2 ? [\n                        {\n                            name: \"Renders\",\n                            time: selectedEvent.timing.renderTime,\n                            color: \"bg-purple-500\",\n                            kind: \"render\"\n                        }\n                    ] : [],\n                    {\n                        name: isProduction2 ? \"React Renders, Hooks, Other JavaScript\" : \"JavaScript/React Hooks \",\n                        time: selectedEvent.timing.otherJSTime,\n                        color: \"bg-[#EFD81A]\",\n                        kind: \"other-javascript\"\n                    },\n                    {\n                        name: \"Update DOM and Draw New Frame\",\n                        time: getTotalTime(selectedEvent.timing) - selectedEvent.timing.renderTime - selectedEvent.timing.otherJSTime,\n                        color: \"bg-[#1D3A66]\",\n                        kind: \"other-not-javascript\"\n                    }\n                ];\n                return timeData;\n            }\n    }\n};\nvar OtherVisualization = (param)=>{\n    let { selectedEvent } = param;\n    var _notificationState_routeMessage;\n    _s6();\n    var _getIsProduction;\n    const [isProduction2] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)((_getIsProduction = getIsProduction()) !== null && _getIsProduction !== void 0 ? _getIsProduction : false);\n    const { notificationState } = useNotificationsContext();\n    const [expandedItems, setExpandedItems] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(((_notificationState_routeMessage = notificationState.routeMessage) === null || _notificationState_routeMessage === void 0 ? void 0 : _notificationState_routeMessage.name) ? [\n        notificationState.routeMessage.name\n    ] : []);\n    const root = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useContext)(ToolbarElementContext);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"OtherVisualization.useEffect3\": ()=>{\n            var _notificationState_routeMessage;\n            if ((_notificationState_routeMessage = notificationState.routeMessage) === null || _notificationState_routeMessage === void 0 ? void 0 : _notificationState_routeMessage.name) {\n                const container = root === null || root === void 0 ? void 0 : root.querySelector(\"#overview-scroll-container\");\n                const element = root === null || root === void 0 ? void 0 : root.querySelector(\"#react-scan-overview-bar-\".concat(notificationState.routeMessage.name));\n                if (container && element) {\n                    const elementTop = element.getBoundingClientRect().top;\n                    const containerTop = container.getBoundingClientRect().top;\n                    const scrollOffset = elementTop - containerTop;\n                    container.scrollTop = container.scrollTop + scrollOffset;\n                }\n            }\n        }\n    }[\"OtherVisualization.useEffect3\"], [\n        notificationState.route\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"OtherVisualization.useEffect3\": ()=>{\n            if (notificationState.route === \"other-visualization\") {\n                setExpandedItems({\n                    \"OtherVisualization.useEffect3\": (prev)=>{\n                        var _notificationState_routeMessage;\n                        return ((_notificationState_routeMessage = notificationState.routeMessage) === null || _notificationState_routeMessage === void 0 ? void 0 : _notificationState_routeMessage.name) ? [\n                            notificationState.routeMessage.name\n                        ] : prev;\n                    }\n                }[\"OtherVisualization.useEffect3\"]);\n            }\n        }\n    }[\"OtherVisualization.useEffect3\"], [\n        notificationState.route\n    ]);\n    const timeData = getTimeData(selectedEvent, isProduction2);\n    const totalTime = timeData.reduce((acc, item)=>acc + item.time, 0);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"rounded-sm border border-zinc-800 text-xs\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"p-2 border-b border-zinc-800 bg-zinc-900/50\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"flex items-center justify-between\",\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h3\", {\n                            className: \"text-xs font-medium\",\n                            children: \"What was time spent on?\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                            className: \"text-xs text-zinc-400\",\n                            children: [\n                                \"Total: \",\n                                totalTime.toFixed(0),\n                                \"ms\"\n                            ]\n                        })\n                    ]\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"divide-y divide-zinc-800\",\n                children: timeData.map((entry)=>{\n                    const isExpanded = expandedItems.includes(entry.kind);\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        id: \"react-scan-overview-bar-\".concat(entry.kind),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                onClick: ()=>setExpandedItems((prev)=>prev.includes(entry.kind) ? prev.filter((item)=>item !== entry.kind) : [\n                                            ...prev,\n                                            entry.kind\n                                        ]),\n                                className: \"w-full px-3 py-2 flex items-center gap-4 hover:bg-zinc-800/50 transition-colors\",\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: \"flex-1\",\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: \"flex items-center justify-between mb-2\",\n                                            children: [\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                                    className: \"flex items-center gap-0.5\",\n                                                    children: [\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n                                                            className: \"h-4 w-4 text-zinc-400 transition-transform \".concat(isExpanded ? \"rotate-90\" : \"\"),\n                                                            fill: \"none\",\n                                                            stroke: \"currentColor\",\n                                                            viewBox: \"0 0 24 24\",\n                                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                                                                strokeLinecap: \"round\",\n                                                                strokeLinejoin: \"round\",\n                                                                strokeWidth: 2,\n                                                                d: \"M9 5l7 7-7 7\"\n                                                            })\n                                                        }),\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                            className: \"font-medium flex items-center text-left\",\n                                                            children: entry.name\n                                                        })\n                                                    ]\n                                                }),\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                                    className: \" text-zinc-400\",\n                                                    children: [\n                                                        entry.time.toFixed(0),\n                                                        \"ms\"\n                                                    ]\n                                                })\n                                            ]\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                            className: \"h-1 bg-zinc-800 rounded-full overflow-hidden\",\n                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                                className: \"h-full \".concat(entry.color, \" transition-all\"),\n                                                style: {\n                                                    width: \"\".concat(entry.time / totalTime * 100, \"%\")\n                                                }\n                                            })\n                                        })\n                                    ]\n                                })\n                            }),\n                            isExpanded && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"bg-zinc-900/30 border-t border-zinc-800 px-2.5 py-3\",\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                    className: \" text-zinc-400 mb-4 text-xs\",\n                                    children: iife(()=>{\n                                        switch(selectedEvent.kind){\n                                            case \"interaction\":\n                                                {\n                                                    switch(entry.kind){\n                                                        case \"render\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: getRenderInput(selectedEvent)\n                                                                });\n                                                            }\n                                                        case \"other-javascript\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: getJSInput(selectedEvent)\n                                                                });\n                                                            }\n                                                        case \"other-not-javascript\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: getDrawInput(selectedEvent)\n                                                                });\n                                                            }\n                                                    }\n                                                }\n                                            case \"dropped-frames\":\n                                                {\n                                                    switch(entry.kind){\n                                                        case \"total-processing-time\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: {\n                                                                        kind: \"total-processing\",\n                                                                        data: {\n                                                                            time: getTotalTime(selectedEvent.timing)\n                                                                        }\n                                                                    }\n                                                                });\n                                                            }\n                                                        case \"render\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                        input: {\n                                                                            kind: \"render\",\n                                                                            data: {\n                                                                                topByTime: selectedEvent.groupedFiberRenders.toSorted((a, b)=>b.totalTime - a.totalTime).slice(0, 3).map((render2)=>({\n                                                                                        name: render2.name,\n                                                                                        percentage: render2.totalTime / getTotalTime(selectedEvent.timing)\n                                                                                    }))\n                                                                            }\n                                                                        }\n                                                                    })\n                                                                });\n                                                            }\n                                                        case \"other-frame-drop\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: {\n                                                                        kind: \"other\"\n                                                                    }\n                                                                });\n                                                            }\n                                                    }\n                                                }\n                                        }\n                                    })\n                                })\n                            })\n                        ]\n                    }, entry.kind);\n                })\n            })\n        ]\n    });\n};\n_s6(OtherVisualization, \"P0KD/9BfA299/8Xs83ctQpiHlA8=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        useNotificationsContext,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useContext,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c14 = OtherVisualization;\nvar getDrawInput = (event)=>{\n    const renderCount = event.groupedFiberRenders.reduce((prev, curr)=>prev + curr.count, 0);\n    const renderTime = event.timing.renderTime;\n    const totalTime = getTotalTime(event.timing);\n    const renderPercentage = renderTime / totalTime * 100;\n    if (renderCount > 100) {\n        return {\n            kind: \"high-render-count-update-dom-draw-frame\",\n            data: {\n                count: renderCount,\n                percentageOfTotal: renderPercentage,\n                copyButton: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyPromptButton, {})\n            }\n        };\n    }\n    return {\n        kind: \"update-dom-draw-frame\",\n        data: {\n            copyButton: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyPromptButton, {})\n        }\n    };\n};\nvar CopyPromptButton = ()=>{\n    _s7();\n    const [copying, setCopying] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const { notificationState } = useNotificationsContext();\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        onClick: async ()=>{\n            if (!notificationState.selectedEvent) {\n                return;\n            }\n            await navigator.clipboard.writeText(getLLMPrompt(\"explanation\", notificationState.selectedEvent));\n            setCopying(true);\n            setTimeout(()=>setCopying(false), 1e3);\n        },\n        className: \"bg-zinc-800 flex hover:bg-zinc-700 text-zinc-200 px-2 py-1 rounded gap-x-3\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                children: copying ? \"Copied!\" : \"Copy Prompt\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                width: \"16\",\n                height: \"16\",\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                strokeWidth: \"2\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                className: cn([\n                    \"transition-transform duration-200\",\n                    copying && \"scale-110\"\n                ]),\n                children: copying ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                    d: \"M20 6L9 17l-5-5\"\n                }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"rect\", {\n                            width: \"14\",\n                            height: \"14\",\n                            x: \"8\",\n                            y: \"8\",\n                            rx: \"2\",\n                            ry: \"2\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                            d: \"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\n_s7(CopyPromptButton, \"QHuj3rZ+xY7WnmnRStZFlhg/rCQ=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        useNotificationsContext\n    ];\n});\n_c15 = CopyPromptButton;\nvar getRenderInput = (event)=>{\n    if (event.timing.renderTime / getTotalTime(event.timing) > 0.3) {\n        return {\n            kind: \"render\",\n            data: {\n                topByTime: event.groupedFiberRenders.toSorted((a, b)=>b.totalTime - a.totalTime).slice(0, 3).map((e)=>({\n                        percentage: e.totalTime / getTotalTime(event.timing),\n                        name: e.name\n                    }))\n            }\n        };\n    }\n    return {\n        kind: \"other\"\n    };\n};\nvar getJSInput = (event)=>{\n    const renderCount = event.groupedFiberRenders.reduce((prev, curr)=>prev + curr.count, 0);\n    if (event.timing.otherJSTime / getTotalTime(event.timing) < 0.2) {\n        return {\n            kind: \"js-explanation-base\"\n        };\n    }\n    if (event.groupedFiberRenders.find((render2)=>render2.count > 200) || event.groupedFiberRenders.reduce((prev, curr)=>prev + curr.count, 0) > 500) {\n        return {\n            kind: \"high-render-count-high-js\",\n            data: {\n                renderCount,\n                topByCount: event.groupedFiberRenders.filter((groupedRender)=>groupedRender.count > 100).toSorted((a, b)=>b.count - a.count).slice(0, 3)\n            }\n        };\n    }\n    if (event.timing.otherJSTime / getTotalTime(event.timing) > 0.3) {\n        if (event.timing.renderTime > 0.2) {\n            return {\n                kind: \"js-explanation-base\"\n            };\n        }\n        return {\n            kind: \"low-render-count-high-js\",\n            data: {\n                renderCount\n            }\n        };\n    }\n    return {\n        kind: \"js-explanation-base\"\n    };\n};\nvar Explanation = (param)=>{\n    let { input } = param;\n    switch(input.kind){\n        case \"total-processing\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"This is the time it took to draw the entire frame that was presented to the user. To be at 60FPS, this number needs to be \",\n                                \"<=16ms\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'To debug the issue, check the \"Ranked\" tab to see if there are significant component renders'\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"On a production React build, React Scan can't access the time it took for component to render. To get that information, run React Scan on a development build\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"To understand precisely what caused the slowdown while in production, use the \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: \"Chrome profiler\"\n                                }),\n                                \" and analyze the function call times.\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {})\n                    ]\n                });\n            }\n        case \"render\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This is the time it took React to run components, and internal logic to handle the output of your component.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"flex flex-col\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                    children: \"The slowest components for this time period were:\"\n                                }),\n                                input.data.topByTime.map((item)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                                children: item.name\n                                            }),\n                                            \":\",\n                                            \" \",\n                                            (item.percentage * 100).toFixed(0),\n                                            \"% of total\"\n                                        ]\n                                    }, item.name))\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'To view the render times of all your components, and what caused them to render, go to the \"Ranked\" tab'\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'The \"Ranked\" tab shows the render times of every component.'\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"The render times of the same components are grouped together into one bar.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"Clicking the component will show you what props, state, or context caused the component to re-render.\"\n                        })\n                    ]\n                });\n            }\n        case \"js-explanation-base\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This is the period when JavaScript hooks and other JavaScript outside of React Renders run.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"The most common culprit for high JS time is expensive hooks, like expensive callbacks inside of \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"useEffect\"\n                                }),\n                                \"'s or a large number of useEffect's called, but this can also be JavaScript event handlers (\",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"'onclick'\"\n                                }),\n                                \", \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"'onchange'\"\n                                }),\n                                \") that performed expensive computation.\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"If you have lots of components rendering that call hooks, like useEffect, it can add significant overhead even if the callbacks are not expensive. If this is the case, you can try optimizing the renders of those components to avoid the hook from having to run.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"You should profile your app using the\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: \"Chrome DevTools profiler\"\n                                }),\n                                \" to learn exactly which functions took the longest to execute.\"\n                            ]\n                        })\n                    ]\n                });\n            }\n        case \"high-render-count-high-js\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This is the period when JavaScript hooks and other JavaScript outside of React Renders run.\"\n                        }),\n                        input.data.renderCount === 0 ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                    children: \"There were no renders, which means nothing related to React caused this slowdown. The most likely cause of the slowdown is a slow JavaScript event handler, or code related to a Web API\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                                    children: [\n                                        \"You should try to reproduce the slowdown while profiling your website with the\",\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                            children: \"Chrome DevTools profiler\"\n                                        }),\n                                        \" to see exactly what functions took the longest to execute.\"\n                                    ]\n                                })\n                            ]\n                        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                            children: [\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                                    children: [\n                                        \"There were \",\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                            children: input.data.renderCount\n                                        }),\n                                        \" renders, which could have contributed to the high JavaScript/Hook time if they ran lots of hooks, like \",\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                            children: \"useEffects\"\n                                        }),\n                                        \".\"\n                                    ]\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"flex flex-col\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                            children: \"You should try optimizing the renders of:\"\n                                        }),\n                                        input.data.topByCount.map((item)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                                children: [\n                                                    \"- \",\n                                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                                        children: item.name\n                                                    }),\n                                                    \" (rendered \",\n                                                    item.count,\n                                                    \"x)\"\n                                                ]\n                                            }, item.name))\n                                    ]\n                                }),\n                                \"and then checking if the problem still exists.\",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                                    children: [\n                                        \"You can also try profiling your app using the\",\n                                        \" \",\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                            children: \"Chrome DevTools profiler\"\n                                        }),\n                                        \" to see exactly what functions took the longest to execute.\"\n                                    ]\n                                })\n                            ]\n                        })\n                    ]\n                });\n            }\n        case \"low-render-count-high-js\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This is the period when JavaScript hooks and other JavaScript outside of React Renders run.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"There were only \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: input.data.renderCount\n                                }),\n                                \" renders detected, which means either you had very expensive hooks like\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"useEffect\"\n                                }),\n                                \"/\",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"useLayoutEffect\"\n                                }),\n                                \", or there is other JavaScript running during this interaction that took up the majority of the time.\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"To understand precisely what caused the slowdown, use the\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: \"Chrome profiler\"\n                                }),\n                                \" and analyze the function call times.\"\n                            ]\n                        })\n                    ]\n                });\n            }\n        case \"high-render-count-update-dom-draw-frame\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"These are the calculations the browser is forced to do in response to the JavaScript that ran during the interaction.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This can be caused by CSS updates/CSS recalculations, or new DOM elements/DOM mutations.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"During this interaction, there were\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: input.data.count\n                                }),\n                                \" renders, which was\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"strong\", {\n                                    children: [\n                                        input.data.percentageOfTotal.toFixed(0),\n                                        \"%\"\n                                    ]\n                                }),\n                                \" of the time spent processing\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"The work performed as a result of the renders may have forced the browser to spend a lot of time to draw the next frame.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'You can try optimizing the renders to see if the performance problem still exists using the \"Ranked\" tab.'\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"If you use an AI-based code editor, you can export the performance data collected as a prompt.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: input.data.copyButton\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"Provide this formatted data to the model and ask it to find, or fix, what could be causing this performance problem.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'For a larger selection of prompts, try the \"Prompts\" tab'\n                        })\n                    ]\n                });\n            }\n        case \"update-dom-draw-frame\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"These are the calculations the browser is forced to do in response to the JavaScript that ran during the interaction.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This can be caused by CSS updates/CSS recalculations, or new DOM elements/DOM mutations.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"If you use an AI-based code editor, you can export the performance data collected as a prompt.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: input.data.copyButton\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"Provide this formatted data to the model and ask it to find, or fix, what could be causing this performance problem.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'For a larger selection of prompts, try the \"Prompts\" tab'\n                        })\n                    ]\n                });\n            }\n        case \"other\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"This is the time it took to run everything other than React renders. This can be hooks like \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"useEffect\"\n                                }),\n                                \", other JavaScript not part of React, or work the browser has to do to update the DOM and draw the next frame.\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"To get a better picture of what happened, profile your app using the\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: \"Chrome profiler\"\n                                }),\n                                \" when the performance problem arises.\"\n                            ]\n                        })\n                    ]\n                });\n            }\n    }\n};\n_c16 = Explanation;\n// src/web/views/notifications/render-bar-chart.tsx\n\n// src/core/heatmap-overlay.ts\n\nvar highlightCanvas = null;\nvar highlightCtx = null;\nvar initialState = {\n    rects: [],\n    highlightedName: null,\n    opacity: 0,\n    isAnimating: false,\n    phase: \"idle\",\n    pendingHighlight: null\n};\nvar state = {\n    ...initialState\n};\nvar HighlightStore = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)({\n    kind: \"idle\",\n    current: null\n});\nvar currFrame = null;\nvar drawHighlights = ()=>{\n    if (currFrame) {\n        cancelAnimationFrame(currFrame);\n    }\n    currFrame = requestAnimationFrame(()=>{\n        if (!highlightCanvas || !highlightCtx) {\n            return;\n        }\n        highlightCtx.clearRect(0, 0, highlightCanvas.width, highlightCanvas.height);\n        const color = \"hsl(271, 76%, 53%)\";\n        const state2 = HighlightStore.value;\n        const { alpha, current } = iife(()=>{\n            switch(state2.kind){\n                case \"transition\":\n                    {\n                        var _state2_current;\n                        const current2 = ((_state2_current = state2.current) === null || _state2_current === void 0 ? void 0 : _state2_current.alpha) && state2.current.alpha > 0 ? state2.current : state2.transitionTo;\n                        return {\n                            alpha: current2 ? current2.alpha : 0,\n                            current: current2\n                        };\n                    }\n                case \"move-out\":\n                    {\n                        var _state2_current1;\n                        var _state2_current_alpha;\n                        return {\n                            alpha: (_state2_current_alpha = (_state2_current1 = state2.current) === null || _state2_current1 === void 0 ? void 0 : _state2_current1.alpha) !== null && _state2_current_alpha !== void 0 ? _state2_current_alpha : 0,\n                            current: state2.current\n                        };\n                    }\n                case \"idle\":\n                    {\n                        return {\n                            alpha: 1,\n                            current: state2.current\n                        };\n                    }\n            }\n            state2;\n        });\n        current === null || current === void 0 ? void 0 : current.rects.forEach((rect)=>{\n            if (!highlightCtx) {\n                return;\n            }\n            highlightCtx.shadowColor = color;\n            highlightCtx.shadowBlur = 6;\n            highlightCtx.strokeStyle = color;\n            highlightCtx.lineWidth = 2;\n            highlightCtx.globalAlpha = alpha;\n            highlightCtx.beginPath();\n            highlightCtx.rect(rect.left, rect.top, rect.width, rect.height);\n            highlightCtx.stroke();\n            highlightCtx.shadowBlur = 0;\n            highlightCtx.beginPath();\n            highlightCtx.rect(rect.left, rect.top, rect.width, rect.height);\n            highlightCtx.stroke();\n        });\n        switch(state2.kind){\n            case \"move-out\":\n                {\n                    if (state2.current.alpha === 0) {\n                        HighlightStore.value = {\n                            kind: \"idle\",\n                            current: null\n                        };\n                        return;\n                    }\n                    if (state2.current.alpha <= 0.01) {\n                        state2.current.alpha = 0;\n                    }\n                    state2.current.alpha = Math.max(0, state2.current.alpha - 0.03);\n                    drawHighlights();\n                    return;\n                }\n            case \"transition\":\n                {\n                    if (state2.current && state2.current.alpha > 0) {\n                        state2.current.alpha = Math.max(0, state2.current.alpha - 0.03);\n                        drawHighlights();\n                        return;\n                    }\n                    if (state2.transitionTo.alpha === 1) {\n                        HighlightStore.value = {\n                            kind: \"idle\",\n                            current: state2.transitionTo\n                        };\n                        return;\n                    }\n                    state2.transitionTo.alpha = Math.min(state2.transitionTo.alpha + 0.03, 1);\n                    drawHighlights();\n                }\n            case \"idle\":\n                {\n                    return;\n                }\n        }\n    });\n};\nvar handleResizeListener = null;\nvar createHighlightCanvas = (root)=>{\n    highlightCanvas = document.createElement(\"canvas\");\n    highlightCtx = highlightCanvas.getContext(\"2d\", {\n        alpha: true\n    });\n    if (!highlightCtx) return null;\n    const dpr2 = window.devicePixelRatio || 1;\n    const { innerWidth, innerHeight } = window;\n    highlightCanvas.style.width = \"\".concat(innerWidth, \"px\");\n    highlightCanvas.style.height = \"\".concat(innerHeight, \"px\");\n    highlightCanvas.width = innerWidth * dpr2;\n    highlightCanvas.height = innerHeight * dpr2;\n    highlightCanvas.style.position = \"fixed\";\n    highlightCanvas.style.left = \"0\";\n    highlightCanvas.style.top = \"0\";\n    highlightCanvas.style.pointerEvents = \"none\";\n    highlightCanvas.style.zIndex = \"2147483600\";\n    highlightCtx.scale(dpr2, dpr2);\n    root.appendChild(highlightCanvas);\n    if (handleResizeListener) {\n        window.removeEventListener(\"resize\", handleResizeListener);\n    }\n    const handleResize = ()=>{\n        if (!highlightCanvas || !highlightCtx) return;\n        const dpr3 = window.devicePixelRatio || 1;\n        const { innerWidth: innerWidth2, innerHeight: innerHeight2 } = window;\n        highlightCanvas.style.width = \"\".concat(innerWidth2, \"px\");\n        highlightCanvas.style.height = \"\".concat(innerHeight2, \"px\");\n        highlightCanvas.width = innerWidth2 * dpr3;\n        highlightCanvas.height = innerHeight2 * dpr3;\n        highlightCtx.scale(dpr3, dpr3);\n        drawHighlights();\n    };\n    handleResizeListener = handleResize;\n    window.addEventListener(\"resize\", handleResize);\n    HighlightStore.subscribe(()=>{\n        requestAnimationFrame(()=>{\n            drawHighlights();\n        });\n    });\n};\n// src/web/views/notifications/render-bar-chart.tsx\n\nvar fadeOutHighlights = ()=>{\n    const curr = HighlightStore.value.current ? HighlightStore.value.current : HighlightStore.value.kind === \"transition\" ? HighlightStore.value.transitionTo : null;\n    if (!curr) {\n        return;\n    }\n    if (HighlightStore.value.kind === \"transition\") {\n        var _HighlightStore_value_current;\n        var // if current doesn't exist then transition must exist\n        _HighlightStore_value_current1;\n        HighlightStore.value = {\n            kind: \"move-out\",\n            // because we want to dynamically fade this value\n            current: ((_HighlightStore_value_current = HighlightStore.value.current) === null || _HighlightStore_value_current === void 0 ? void 0 : _HighlightStore_value_current.alpha) === 0 ? // we want to only start fading from transition if current is done animating out\n            HighlightStore.value.transitionTo : (_HighlightStore_value_current1 = HighlightStore.value.current) !== null && _HighlightStore_value_current1 !== void 0 ? _HighlightStore_value_current1 : HighlightStore.value.transitionTo\n        };\n        return;\n    }\n    HighlightStore.value = {\n        kind: \"move-out\",\n        current: {\n            alpha: 0,\n            ...curr\n        }\n    };\n};\nvar RenderBarChart = (param)=>{\n    let { selectedEvent } = param;\n    _s8();\n    const { setNotificationState, setRoute } = useNotificationsContext();\n    const totalInteractionTime = getTotalTime(selectedEvent.timing);\n    const nonRender = totalInteractionTime - selectedEvent.timing.renderTime;\n    const [isProduction2] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(getIsProduction());\n    const events = selectedEvent.groupedFiberRenders;\n    const bars = events.map((event)=>({\n            event,\n            kind: \"render\",\n            totalTime: isProduction2 ? event.count : event.totalTime\n        }));\n    const isShowingExtraInfo = iife(()=>{\n        switch(selectedEvent.kind){\n            case \"dropped-frames\":\n                {\n                    return selectedEvent.timing.renderTime / totalInteractionTime < 0.1;\n                }\n            case \"interaction\":\n                {\n                    return (selectedEvent.timing.otherJSTime + selectedEvent.timing.renderTime) / totalInteractionTime < 0.2;\n                }\n        }\n    });\n    if (selectedEvent.kind === \"interaction\" && !isProduction2) {\n        bars.push({\n            kind: \"other-javascript\",\n            totalTime: selectedEvent.timing.otherJSTime\n        });\n    }\n    if (isShowingExtraInfo && !isProduction2) {\n        if (selectedEvent.kind === \"interaction\") {\n            bars.push({\n                kind: \"other-not-javascript\",\n                totalTime: getTotalTime(selectedEvent.timing) - selectedEvent.timing.renderTime - selectedEvent.timing.otherJSTime\n            });\n        } else {\n            bars.push({\n                kind: \"other-frame-drop\",\n                totalTime: nonRender\n            });\n        }\n    }\n    const debouncedMouseEnter = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)({\n        lastCallAt: null,\n        timer: null\n    });\n    const totalBarTime = bars.reduce((prev, curr)=>prev + curr.totalTime, 0);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        onMouseLeave: ()=>{\n            fadeOutHighlights();\n        },\n        className: cn([\n            \"flex flex-col h-full w-full gap-y-1\"\n        ]),\n        children: [\n            iife(()=>{\n                if (isProduction2 && bars.length === 0) {\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"flex flex-col items-center justify-center h-full text-zinc-400\",\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: \"text-sm w-full text-left text-white mb-1.5\",\n                                children: \"No data available\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: \"text-x w-full text-lefts\",\n                                children: \"No data was collected during this period\"\n                            })\n                        ]\n                    });\n                }\n                if (bars.length === 0) {\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"flex flex-col items-center justify-center h-full text-zinc-400\",\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: \"text-sm w-full text-left text-white mb-1.5\",\n                                children: \"No renders collected\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: \"text-x w-full text-lefts\",\n                                children: \"There were no renders during this period\"\n                            })\n                        ]\n                    });\n                }\n            }),\n            bars.toSorted((a, b)=>b.totalTime - a.totalTime).map((bar, index)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onMouseLeave: ()=>{\n                        debouncedMouseEnter.current.timer && clearTimeout(debouncedMouseEnter.current.timer);\n                    },\n                    onMouseEnter: async ()=>{\n                        const highlightBars = async ()=>{\n                            debouncedMouseEnter.current.lastCallAt = Date.now();\n                            if (bar.kind !== \"render\") {\n                                const curr = HighlightStore.value.current ? HighlightStore.value.current : HighlightStore.value.kind === \"transition\" ? HighlightStore.value.transitionTo : null;\n                                if (!curr) {\n                                    HighlightStore.value = {\n                                        kind: \"idle\",\n                                        current: null\n                                    };\n                                    return;\n                                }\n                                HighlightStore.value = {\n                                    kind: \"move-out\",\n                                    current: {\n                                        alpha: 0,\n                                        ...curr\n                                    }\n                                };\n                                return;\n                            }\n                            const state2 = HighlightStore.value;\n                            const currentState = iife(()=>{\n                                switch(state2.kind){\n                                    case \"transition\":\n                                        {\n                                            return state2.transitionTo;\n                                        }\n                                    case \"idle\":\n                                    case \"move-out\":\n                                        {\n                                            return state2.current;\n                                        }\n                                }\n                            });\n                            const stateRects = [];\n                            if (state2.kind === \"transition\") {\n                                const transitionState = getTransitionState(state2);\n                                iife(()=>{\n                                    switch(transitionState){\n                                        case \"fading-in\":\n                                            {\n                                                HighlightStore.value = {\n                                                    kind: \"transition\",\n                                                    current: state2.transitionTo,\n                                                    transitionTo: {\n                                                        rects: stateRects,\n                                                        alpha: 0,\n                                                        name: bar.event.name\n                                                    }\n                                                };\n                                                return;\n                                            }\n                                        case \"fading-out\":\n                                            {\n                                                HighlightStore.value = {\n                                                    kind: \"transition\",\n                                                    current: HighlightStore.value.current ? {\n                                                        alpha: 0,\n                                                        ...HighlightStore.value.current\n                                                    } : null,\n                                                    transitionTo: {\n                                                        rects: stateRects,\n                                                        alpha: 0,\n                                                        name: bar.event.name\n                                                    }\n                                                };\n                                                return;\n                                            }\n                                    }\n                                });\n                            } else {\n                                HighlightStore.value = {\n                                    kind: \"transition\",\n                                    transitionTo: {\n                                        rects: stateRects,\n                                        alpha: 0,\n                                        name: bar.event.name\n                                    },\n                                    current: currentState ? {\n                                        alpha: 0,\n                                        ...currentState\n                                    } : null\n                                };\n                            }\n                            const trueElements = bar.event.elements.filter((element)=>element instanceof Element);\n                            for await (const entries of getBatchedRectMap(trueElements)){\n                                entries.forEach((param)=>{\n                                    let { boundingClientRect } = param;\n                                    stateRects.push(boundingClientRect);\n                                });\n                                drawHighlights();\n                            }\n                        };\n                        if (debouncedMouseEnter.current.lastCallAt && Date.now() - debouncedMouseEnter.current.lastCallAt < 200) {\n                            debouncedMouseEnter.current.timer && clearTimeout(debouncedMouseEnter.current.timer);\n                            debouncedMouseEnter.current.timer = setTimeout(()=>{\n                                highlightBars();\n                            }, 200);\n                            return;\n                        }\n                        highlightBars();\n                    },\n                    onClick: ()=>{\n                        if (bar.kind !== \"render\") {\n                            setRoute({\n                                route: \"other-visualization\",\n                                routeMessage: {\n                                    kind: \"auto-open-overview-accordion\",\n                                    name: bar.kind\n                                }\n                            });\n                            return;\n                        }\n                        setNotificationState((prev)=>({\n                                ...prev,\n                                selectedFiber: bar.event\n                            }));\n                        setRoute({\n                            route: \"render-explanation\",\n                            routeMessage: null\n                        });\n                    },\n                    className: cn([\n                        \"w-full flex items-center group hover:bg-[#0f0f0f] rounded-md relative transition-colors text-xs\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"h-full w-[90%]\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                style: {\n                                    minWidth: \"fit-content\",\n                                    width: \"\".concat(bar.totalTime / totalBarTime * 100, \"%\")\n                                },\n                                className: cn([\n                                    \"group-hover:bg-[#5b2d89]  flex items-center bg-[#412162] rounded-sm text-white text-xs relative h-[28px] transition-all\",\n                                    bar.kind === \"other-frame-drop\" && \"bg-[#18181B] group-hover:bg-[#272727]\",\n                                    bar.kind === \"other-javascript\" && \"bg-[#efd81a6b] group-hover:bg-[#efda1a2f]\",\n                                    bar.kind === \"other-not-javascript\" && \"bg-[#214379d4] group-hover:bg-[#21437982]\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"absolute left-2 top-1/2 -translate-y-1/2 flex gap-x-2\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: cn([\n                                                \"flex items-center whitespace-nowrap\"\n                                            ]),\n                                            children: iife(()=>{\n                                                switch(bar.kind){\n                                                    case \"other-frame-drop\":\n                                                        {\n                                                            return \"JavaScript, DOM updates, Draw Frame\";\n                                                        }\n                                                    case \"other-javascript\":\n                                                        {\n                                                            return \"JavaScript/React Hooks\";\n                                                        }\n                                                    case \"other-not-javascript\":\n                                                        {\n                                                            return \"Update DOM and Draw New Frame\";\n                                                        }\n                                                    case \"render\":\n                                                        {\n                                                            return bar.event.name;\n                                                        }\n                                                }\n                                            })\n                                        }),\n                                        bar.kind === \"render\" && isRenderMemoizable(bar.event) && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                            style: {\n                                                lineHeight: \"10px\"\n                                            },\n                                            className: cn([\n                                                \"px-1 py-0.5 bg-[#6a369e] flex items-center  rounded-sm font-semibold text-[8px] w-fit\"\n                                            ]),\n                                            children: \"Memoizable\"\n                                        })\n                                    ]\n                                })\n                            })\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"w-[5%] min-w-fit h-full flex items-center justify-end text-[10px] pr-1 gap-x-1\"\n                            ]),\n                            children: bar.kind === \"render\" && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                className: cn([\n                                    \"\"\n                                ]),\n                                children: [\n                                    \"x\",\n                                    bar.event.count\n                                ]\n                            })\n                        }),\n                        (bar.kind !== \"render\" || !isProduction2) && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"w-[5%] min-w-fit text-[#7346a0] h-full flex items-center justify-end text-[10px] pr-1 gap-x-1\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                children: [\n                                    bar.totalTime < 1 ? \"<1\" : bar.totalTime.toFixed(0),\n                                    \"ms\"\n                                ]\n                            })\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"absolute right-0 top-1/2 transition-none  -translate-y-1/2 bg-white text-black px-2 py-1 rounded text-xs opacity-0 group-hover:opacity-100 transition-opacity mr-16\",\n                                \"pointer-events-none\"\n                            ]),\n                            children: \"Click to learn more\"\n                        })\n                    ]\n                }, index))\n        ]\n    });\n};\n_s8(RenderBarChart, \"roR/pXS5GvopKCUdgT07aTkI39g=\", false, function() {\n    return [\n        useNotificationsContext,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef\n    ];\n});\n_c17 = RenderBarChart;\nvar getTransitionState = (state2)=>{\n    if (!state2.current) {\n        return \"fading-in\";\n    }\n    if (state2.current.alpha > 0) {\n        return \"fading-out\";\n    }\n    return \"fading-in\";\n};\n// src/web/views/notifications/render-explanation.tsx\n\n\nvar RenderExplanation = (param)=>{\n    let { selectedEvent: _, selectedFiber } = param;\n    _s9();\n    const { setRoute } = useNotificationsContext();\n    const [tipisShown, setTipIsShown] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const [isProduction2] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(getIsProduction());\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)({\n        \"RenderExplanation.useLayoutEffect\": ()=>{\n            const res = localStorage.getItem(\"react-scan-tip-shown\");\n            const asBool = res === \"true\" ? true : res === \"false\" ? false : null;\n            if (asBool === null) {\n                setTipIsShown(true);\n                localStorage.setItem(\"react-scan-tip-is-shown\", \"true\");\n                return;\n            }\n            if (!asBool) {\n                setTipIsShown(false);\n            }\n        }\n    }[\"RenderExplanation.useLayoutEffect\"], []);\n    const isMemoizable = selectedFiber.changes.context.length === 0 && selectedFiber.changes.props.length === 0 && selectedFiber.changes.state.length === 0;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            \"w-full min-h-fit h-full flex flex-col py-4 pt-0 rounded-sm\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"flex items-start gap-x-4 \"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                        onClick: ()=>{\n                            setRoute({\n                                route: \"render-visualization\",\n                                routeMessage: null\n                            });\n                        },\n                        className: cn([\n                            \"text-white hover:bg-[#34343b] flex gap-x-1 justify-center items-center mb-4 w-fit px-2.5 py-1.5 text-xs rounded-sm bg-[#18181B]\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ArrowLeft, {\n                                size: 14\n                            }),\n                            \" \",\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                children: \"Overview\"\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col gap-y-1\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"text-sm font-bold text-white overflow-x-hidden\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: \"flex items-center gap-x-2 truncate\",\n                                    children: selectedFiber.name\n                                })\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: cn([\n                                    \"flex gap-x-2\"\n                                ]),\n                                children: [\n                                    !isProduction2 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn([\n                                                \"text-xs text-gray-400\"\n                                            ]),\n                                            children: [\n                                                \"\\u2022 Render time: \",\n                                                selectedFiber.totalTime.toFixed(0),\n                                                \"ms\"\n                                            ]\n                                        })\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"text-xs text-gray-400 mb-4\"\n                                        ]),\n                                        children: [\n                                            \"\\u2022 Renders: \",\n                                            selectedFiber.count,\n                                            \"x\"\n                                        ]\n                                    })\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            tipisShown && !isMemoizable && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-full mb-4 bg-[#0A0A0A] border border-[#27272A] rounded-sm overflow-hidden flex relative\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            setTipIsShown(false);\n                            localStorage.setItem(\"react-scan-tip-shown\", \"false\");\n                        },\n                        className: cn([\n                            \"absolute right-2 top-2 rounded-sm p-1 hover:bg-[#18181B]\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CloseIcon, {\n                            size: 12\n                        })\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"w-1 bg-[#d36cff]\"\n                        ])\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex-1\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"px-3 py-2 text-gray-100 text-xs font-semibold\"\n                                ]),\n                                children: \"How to stop renders\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"px-3 pb-2 text-gray-400 text-[10px]\"\n                                ]),\n                                children: \"Stop the following props, state and context from changing between renders, and wrap the component in React.memo if not already\"\n                            })\n                        ]\n                    })\n                ]\n            }),\n            isMemoizable && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-full mb-4 bg-[#0A0A0A] border border-[#27272A] rounded-sm overflow-hidden flex\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"w-1 bg-[#d36cff]\"\n                        ])\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex-1\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"px-3 py-2 text-gray-100 text-sm font-semibold\"\n                                ]),\n                                children: \"No changes detected\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"px-3 pb-2 text-gray-400 text-xs\"\n                                ]),\n                                children: \"This component would not of rendered if it was memoized\"\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"flex w-full\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col border border-[#27272A] rounded-l-sm overflow-hidden w-1/3\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"text-[14px] font-semibold px-2 py-2 bg-[#18181B] text-white flex justify-center\"\n                                ]),\n                                children: \"Changed Props\"\n                            }),\n                            selectedFiber.changes.props.length > 0 ? selectedFiber.changes.props.toSorted((a, b)=>b.count - a.count).map((change)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"flex flex-col justify-between items-center border-t overflow-x-auto border-[#27272A] px-1 py-1 text-wrap bg-[#0A0A0A] text-[10px]\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: cn([\n                                                \"text-white \"\n                                            ]),\n                                            children: change.name\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn([\n                                                \" text-[8px]  text-[#d36cff] pl-1 py-1 \"\n                                            ]),\n                                            children: [\n                                                change.count,\n                                                \"/\",\n                                                selectedFiber.count,\n                                                \"x\"\n                                            ]\n                                        })\n                                    ]\n                                }, change.name)) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center justify-center h-full bg-[#0A0A0A] text-[#A1A1AA] border-t border-[#27272A]\"\n                                ]),\n                                children: \"No changes\"\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col border border-[#27272A] border-l-0 overflow-hidden w-1/3\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \" text-[14px] font-semibold px-2 py-2 bg-[#18181B] text-white flex justify-center\"\n                                ]),\n                                children: \"Changed State\"\n                            }),\n                            selectedFiber.changes.state.length > 0 ? selectedFiber.changes.state.toSorted((a, b)=>b.count - a.count).map((change)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"flex flex-col justify-between items-center border-t overflow-x-auto border-[#27272A] px-1 py-1 text-wrap bg-[#0A0A0A] text-[10px]\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                            className: cn([\n                                                \"text-white \"\n                                            ]),\n                                            children: [\n                                                \"index \",\n                                                change.index\n                                            ]\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn([\n                                                \"rounded-full  text-[#d36cff] pl-1 py-1 text-[8px]\"\n                                            ]),\n                                            children: [\n                                                change.count,\n                                                \"/\",\n                                                selectedFiber.count,\n                                                \"x\"\n                                            ]\n                                        })\n                                    ]\n                                }, change.index)) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center justify-center h-full bg-[#0A0A0A] text-[#A1A1AA] border-t border-[#27272A]\"\n                                ]),\n                                children: \"No changes\"\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col border border-[#27272A] border-l-0 rounded-r-sm overflow-hidden w-1/3\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \" text-[14px] font-semibold px-2 py-2 bg-[#18181B] text-white flex justify-center\"\n                                ]),\n                                children: \"Changed Context\"\n                            }),\n                            selectedFiber.changes.context.length > 0 ? selectedFiber.changes.context.toSorted((a, b)=>b.count - a.count).map((change)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"flex flex-col justify-between items-center border-t  border-[#27272A] px-1 py-1 bg-[#0A0A0A] text-[10px] overflow-x-auto\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: cn([\n                                                \"text-white \"\n                                            ]),\n                                            children: change.name\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn([\n                                                \"rounded-full text-[#d36cff] pl-1 py-1 text-[8px] text-wrap\"\n                                            ]),\n                                            children: [\n                                                change.count,\n                                                \"/\",\n                                                selectedFiber.count,\n                                                \"x\"\n                                            ]\n                                        })\n                                    ]\n                                }, change.name)) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center justify-center h-full bg-[#0A0A0A] text-[#A1A1AA] border-t border-[#27272A] py-2\"\n                                ]),\n                                children: \"No changes\"\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n};\n_s9(RenderExplanation, \"uIWEDxA4jMqd1y34XY4qjV03KMg=\", false, function() {\n    return [\n        useNotificationsContext,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState\n    ];\n});\n_c18 = RenderExplanation;\n// src/web/views/notifications/details-routes.tsx\n\nvar DetailsRoutes = ()=>{\n    _s10();\n    const { notificationState, setNotificationState } = useNotificationsContext();\n    const [dots, setDots] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(\"...\");\n    const containerRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(null);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"DetailsRoutes.useEffect4\": ()=>{\n            const interval = setInterval({\n                \"DetailsRoutes.useEffect4.interval\": ()=>{\n                    setDots({\n                        \"DetailsRoutes.useEffect4.interval\": (prev)=>{\n                            if (prev === \"...\") return \"\";\n                            return prev + \".\";\n                        }\n                    }[\"DetailsRoutes.useEffect4.interval\"]);\n                }\n            }[\"DetailsRoutes.useEffect4.interval\"], 500);\n            return ({\n                \"DetailsRoutes.useEffect4\": ()=>clearInterval(interval)\n            })[\"DetailsRoutes.useEffect4\"];\n        }\n    }[\"DetailsRoutes.useEffect4\"], []);\n    if (!notificationState.selectedEvent) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            ref: containerRef,\n            className: cn([\n                \"h-full w-full flex flex-col items-center justify-center relative py-2 px-4\"\n            ]),\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        \"p-2 flex justify-center items-center border-[#27272A] absolute top-0 right-0\"\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            signalSettingsOpen.value = false;\n                            signalNotificationsOpen.value = false;\n                        },\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CloseIcon, {\n                            size: 18,\n                            className: \"text-[#6F6F78]\"\n                        })\n                    })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        \"flex flex-col items-start pt-5 bg-[#0A0A0A] p-5 rounded-sm max-w-md\",\n                        \" shadow-lg\"\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col items-start gap-y-4\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                    className: cn([\n                                        \"text-zinc-400 font-medium text-[17px]\"\n                                    ]),\n                                    children: [\n                                        \"Scanning for slowdowns\",\n                                        dots\n                                    ]\n                                })\n                            }),\n                            notificationState.events.length !== 0 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                                className: cn([\n                                    \"text-xs\"\n                                ]),\n                                children: [\n                                    \"Click on an item in the\",\n                                    \" \",\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: cn([\n                                            \"text-purple-400\"\n                                        ]),\n                                        children: \"History\"\n                                    }),\n                                    \" list to get started\"\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: cn([\n                                    \"text-zinc-600 text-xs\"\n                                ]),\n                                children: \"You don't need to keep this panel open for React Scan to record slowdowns\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: cn([\n                                    \"text-zinc-600 text-xs\"\n                                ]),\n                                children: \"Enable audio alerts to hear a delightful ding every time a large slowdown is recorded\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                onClick: ()=>{\n                                    if (notificationState.audioNotificationsOptions.enabled) {\n                                        setNotificationState((prev)=>{\n                                            var _prev_audioNotificationsOptions_audioContext;\n                                            if (((_prev_audioNotificationsOptions_audioContext = prev.audioNotificationsOptions.audioContext) === null || _prev_audioNotificationsOptions_audioContext === void 0 ? void 0 : _prev_audioNotificationsOptions_audioContext.state) !== \"closed\") {\n                                                var _prev_audioNotificationsOptions_audioContext1;\n                                                (_prev_audioNotificationsOptions_audioContext1 = prev.audioNotificationsOptions.audioContext) === null || _prev_audioNotificationsOptions_audioContext1 === void 0 ? void 0 : _prev_audioNotificationsOptions_audioContext1.close();\n                                            }\n                                            return {\n                                                ...prev,\n                                                audioNotificationsOptions: {\n                                                    audioContext: null,\n                                                    enabled: false\n                                                }\n                                            };\n                                        });\n                                        return;\n                                    }\n                                    localStorage.setItem(\"react-scan-notifications-audio\", \"true\");\n                                    const audioContext = new AudioContext();\n                                    playNotificationSound(audioContext);\n                                    setNotificationState((prev)=>({\n                                            ...prev,\n                                            audioNotificationsOptions: {\n                                                enabled: true,\n                                                audioContext\n                                            }\n                                        }));\n                                },\n                                className: cn([\n                                    \"px-4 py-2 bg-zinc-800 hover:bg-zinc-700 rounded-sm w-full\",\n                                    \" text-sm flex items-center gap-x-2 justify-center\"\n                                ]),\n                                children: notificationState.audioNotificationsOptions.enabled ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"flex items-center gap-x-1\",\n                                        children: \"Disable audio alerts\"\n                                    })\n                                }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"flex items-center gap-x-1\",\n                                        children: \"Enable audio alerts\"\n                                    })\n                                })\n                            })\n                        ]\n                    })\n                })\n            ]\n        });\n    }\n    switch(notificationState.route){\n        case \"render-visualization\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TabLayout, {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(RenderBarChart, {\n                        selectedEvent: notificationState.selectedEvent\n                    })\n                });\n            }\n        case \"render-explanation\":\n            {\n                if (!notificationState.selectedFiber) {\n                    throw new Error(\"Invariant: must have selected fiber when viewing render explanation\");\n                }\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TabLayout, {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(RenderExplanation, {\n                        selectedFiber: notificationState.selectedFiber,\n                        selectedEvent: notificationState.selectedEvent\n                    })\n                });\n            }\n        case \"other-visualization\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TabLayout, {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(OtherVisualization, {\n                        selectedEvent: notificationState.selectedEvent\n                    })\n                });\n            }\n        case \"optimize\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TabLayout, {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Optimize, {\n                        selectedEvent: notificationState.selectedEvent\n                    })\n                });\n            }\n    }\n    notificationState.route;\n};\n_s10(DetailsRoutes, \"IdC9dPhcrgJcOxhvFfDP/MbzIJM=\", false, function() {\n    return [\n        useNotificationsContext,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect\n    ];\n});\n_c19 = DetailsRoutes;\nvar TabLayout = (param)=>{\n    let { children } = param;\n    _s11();\n    const { notificationState } = useNotificationsContext();\n    if (!notificationState.selectedEvent) {\n        throw new Error(\"Invariant: d must have selected event when viewing render explanation\");\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            \"w-full h-full flex flex-col gap-y-2\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn([\n                    \"h-[50px] w-full\"\n                ]),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(NotificationTabs, {\n                    selectedEvent: notificationState.selectedEvent\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                id: \"overview-scroll-container\",\n                className: cn([\n                    \"h-calc(100%-50px) flex flex-col overflow-y-auto px-3\"\n                ]),\n                children\n            })\n        ]\n    });\n};\n_s11(TabLayout, \"BhJ6FzE5OGQx5yShu8mmvD4Qbwg=\", false, function() {\n    return [\n        useNotificationsContext\n    ];\n});\n_c20 = TabLayout;\n// src/web/views/notifications/notification-header.tsx\n\nvar NotificationHeader = (param)=>{\n    let { selectedEvent } = param;\n    const severity = getEventSeverity(selectedEvent);\n    switch(selectedEvent.kind){\n        case \"interaction\":\n            {\n                return(// h-[48px] is a hack to adjust for header size\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        \"w-full flex border-b border-[#27272A] min-h-[48px]\"\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"min-w-fit w-full justify-start flex items-center border-r border-[#27272A] pl-5 pr-2 text-sm gap-x-4\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: cn([\n                                    \"flex items-center gap-x-2 \"\n                                ]),\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: cn([\n                                            \"text-[#5a5a5a] mr-0.5\"\n                                        ]),\n                                        children: selectedEvent.type === \"click\" ? \"Clicked \" : \"Typed in \"\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        children: getComponentName(selectedEvent.componentPath)\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"w-fit flex items-center justify-center h-fit text-white px-1 rounded-sm font-semibold text-[10px] whitespace-nowrap\",\n                                            severity === \"low\" && \"bg-green-500/50\",\n                                            severity === \"needs-improvement\" && \"bg-[#b77116]\",\n                                            severity === \"high\" && \"bg-[#b94040]\"\n                                        ]),\n                                        children: [\n                                            getTotalTime(selectedEvent.timing).toFixed(0),\n                                            \"ms processing time\"\n                                        ]\n                                    })\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center gap-x-2  justify-end ml-auto\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: cn([\n                                        \"p-2 flex justify-center items-center border-[#27272A]\"\n                                    ]),\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                        onClick: ()=>{\n                                            signalSettingsOpen.value = false;\n                                            signalNotificationsOpen.value = false;\n                                        },\n                                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CloseIcon, {\n                                            size: 18,\n                                            className: \"text-[#6F6F78]\"\n                                        })\n                                    })\n                                })\n                            })\n                        ]\n                    })\n                }));\n            }\n        case \"dropped-frames\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        \"w-full flex border-b border-[#27272A] min-h-[48px]\"\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"min-w-fit w-full justify-start flex items-center border-r border-[#27272A] pl-5 pr-2 text-sm gap-x-4\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: cn([\n                                    \"flex items-center gap-x-2 \"\n                                ]),\n                                children: [\n                                    \"FPS Drop\",\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"w-fit flex items-center justify-center h-fit text-white px-1 rounded-sm font-semibold text-[10px] whitespace-nowrap\",\n                                            severity === \"low\" && \"bg-green-500/50\",\n                                            severity === \"needs-improvement\" && \"bg-[#b77116]\",\n                                            severity === \"high\" && \"bg-[#b94040]\"\n                                        ]),\n                                        children: [\n                                            \"dropped to \",\n                                            selectedEvent.fps,\n                                            \" FPS\"\n                                        ]\n                                    })\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center gap-x-2 w-2/4 justify-end ml-auto\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: cn([\n                                        \"p-2 flex justify-center items-center border-[#27272A]\"\n                                    ]),\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                        onClick: ()=>{\n                                            signalSettingsOpen.value = false;\n                                            signalNotificationsOpen.value = false;\n                                        },\n                                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CloseIcon, {\n                                            size: 18,\n                                            className: \"text-[#6F6F78]\"\n                                        })\n                                    })\n                                })\n                            })\n                        ]\n                    })\n                });\n            }\n    }\n};\n_c21 = NotificationHeader;\n// src/web/views/notifications/slowdown-history.tsx\n\n\nvar useFlashManager = (events)=>{\n    _s12();\n    const prevEventsRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)([]);\n    const [newEventIds, setNewEventIds] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(/* @__PURE__ */ new Set());\n    const isInitialMount = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(true);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"useFlashManager.useEffect5\": ()=>{\n            if (isInitialMount.current) {\n                isInitialMount.current = false;\n                prevEventsRef.current = events;\n                return;\n            }\n            const currentIds = new Set(events.map({\n                \"useFlashManager.useEffect5\": (e)=>e.id\n            }[\"useFlashManager.useEffect5\"]));\n            const prevIds = new Set(prevEventsRef.current.map({\n                \"useFlashManager.useEffect5\": (e)=>e.id\n            }[\"useFlashManager.useEffect5\"]));\n            const newIds = /* @__PURE__ */ new Set();\n            currentIds.forEach({\n                \"useFlashManager.useEffect5\": (id)=>{\n                    if (!prevIds.has(id)) {\n                        newIds.add(id);\n                    }\n                }\n            }[\"useFlashManager.useEffect5\"]);\n            if (newIds.size > 0) {\n                setNewEventIds(newIds);\n                setTimeout({\n                    \"useFlashManager.useEffect5\": ()=>{\n                        setNewEventIds(/* @__PURE__ */ new Set());\n                    }\n                }[\"useFlashManager.useEffect5\"], 2e3);\n            }\n            prevEventsRef.current = events;\n        }\n    }[\"useFlashManager.useEffect5\"], [\n        events\n    ]);\n    return (id)=>newEventIds.has(id);\n};\n_s12(useFlashManager, \"tUPw5AqkTAi0qErxvPtuggEsPqk=\", false, function() {\n    return [\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect\n    ];\n});\nvar useFlash = (param)=>{\n    let { shouldFlash } = param;\n    _s13();\n    const [isFlashing, setIsFlashing] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(shouldFlash);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"useFlash.useEffect5\": ()=>{\n            if (shouldFlash) {\n                setIsFlashing(true);\n                const timer = setTimeout({\n                    \"useFlash.useEffect5.timer\": ()=>{\n                        setIsFlashing(false);\n                    }\n                }[\"useFlash.useEffect5.timer\"], 1e3);\n                return ({\n                    \"useFlash.useEffect5\": ()=>clearTimeout(timer)\n                })[\"useFlash.useEffect5\"];\n            }\n        }\n    }[\"useFlash.useEffect5\"], [\n        shouldFlash\n    ]);\n    return isFlashing;\n};\n_s13(useFlash, \"D6FYFyG37DE1pj8Kc5oMYQ5dD7o=\", false, function() {\n    return [\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect\n    ];\n});\nvar SlowdownHistoryItem = (param)=>{\n    let { event, shouldFlash } = param;\n    _s14();\n    const { notificationState, setNotificationState } = useNotificationsContext();\n    const severity = getEventSeverity(event);\n    const isFlashing = useFlash({\n        shouldFlash\n    });\n    switch(event.kind){\n        case \"interaction\":\n            {\n                var _notificationState_selectedEvent;\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onClick: ()=>{\n                        setNotificationState((prev)=>({\n                                ...prev,\n                                selectedEvent: event,\n                                route: prev.route === \"other-visualization\" || prev.route === \"optimize\" ? \"other-visualization\" : \"render-visualization\",\n                                selectedFiber: null\n                            }));\n                    },\n                    className: cn([\n                        \"pl-2 py-1.5  text-sm flex w-full items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\",\n                        event.id === ((_notificationState_selectedEvent = notificationState.selectedEvent) === null || _notificationState_selectedEvent === void 0 ? void 0 : _notificationState_selectedEvent.id) && \"bg-[#18181B]\",\n                        isFlashing && \"after:absolute after:inset-0 after:bg-purple-500/30 after:animate-[fadeOut_1s_ease-out_forwards]\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"w-4/5 flex items-center justify-start h-full gap-x-1.5\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"min-w-fit text-xs\"\n                                    ]),\n                                    children: iife(()=>{\n                                        switch(event.type){\n                                            case \"click\":\n                                                {\n                                                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PointerIcon, {\n                                                        size: 14\n                                                    });\n                                                }\n                                            case \"keyboard\":\n                                                {\n                                                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(KeyboardIcon, {\n                                                        size: 14\n                                                    });\n                                                }\n                                        }\n                                    })\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"text-xs pr-1 truncate\"\n                                    ]),\n                                    children: getComponentName(event.componentPath)\n                                })\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \" min-w-fit flex justify-end items-center ml-auto\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                style: {\n                                    lineHeight: \"10px\"\n                                },\n                                className: cn([\n                                    \"gap-x-0.5 w-fit flex items-end justify-center h-full text-white px-1 py-1 rounded-sm font-semibold text-[10px]\",\n                                    severity === \"low\" && \"bg-green-500/50\",\n                                    severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                                    severity === \"high\" && \"bg-[#b94040]\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    style: {\n                                        lineHeight: \"10px\"\n                                    },\n                                    className: cn([\n                                        \"text-[10px] text-white flex items-end\"\n                                    ]),\n                                    children: [\n                                        getTotalTime(event.timing).toFixed(0),\n                                        \"ms\"\n                                    ]\n                                })\n                            })\n                        })\n                    ]\n                });\n            }\n        case \"dropped-frames\":\n            {\n                var _notificationState_selectedEvent1;\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onClick: ()=>{\n                        setNotificationState((prev)=>({\n                                ...prev,\n                                selectedEvent: event,\n                                route: prev.route === \"other-visualization\" || prev.route === \"optimize\" ? \"other-visualization\" : \"render-visualization\",\n                                selectedFiber: null\n                            }));\n                    },\n                    className: cn([\n                        \"pl-2 py-1.5  w-full text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\",\n                        event.id === ((_notificationState_selectedEvent1 = notificationState.selectedEvent) === null || _notificationState_selectedEvent1 === void 0 ? void 0 : _notificationState_selectedEvent1.id) && \"bg-[#18181B]\",\n                        isFlashing && \"after:absolute after:inset-0 after:bg-purple-500/30 after:animate-[fadeOut_1s_ease-out_forwards]\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"w-4/5 flex items-center justify-start h-full text-xs truncate\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TrendingDownIcon, {\n                                    size: 14,\n                                    className: \"mr-1.5\"\n                                }),\n                                \" FPS Drop\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \" min-w-fit flex justify-end items-center ml-auto\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                style: {\n                                    lineHeight: \"10px\"\n                                },\n                                className: cn([\n                                    \"w-fit flex items-center justify-center h-full text-white px-1 py-1 rounded-sm text-[10px] font-bold\",\n                                    severity === \"low\" && \"bg-green-500/60\",\n                                    severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                                    severity === \"high\" && \"bg-[#b94040]\"\n                                ]),\n                                children: [\n                                    event.fps,\n                                    \" FPS\"\n                                ]\n                            })\n                        })\n                    ]\n                });\n            }\n    }\n};\n_s14(SlowdownHistoryItem, \"0oG38z9GbVxhS/TQjZJG7tXnm/k=\", false, function() {\n    return [\n        useNotificationsContext,\n        useFlash\n    ];\n});\n_c22 = SlowdownHistoryItem;\nvar collapseEvents = (events)=>{\n    const newEvents = events.reduce((prev, curr)=>{\n        const lastEvent = prev.at(-1);\n        if (!lastEvent) {\n            return [\n                {\n                    kind: \"single\",\n                    event: curr,\n                    timestamp: curr.timestamp\n                }\n            ];\n        }\n        switch(lastEvent.kind){\n            case \"collapsed-keyboard\":\n                {\n                    if (curr.kind === \"interaction\" && curr.type === \"keyboard\" && // must be on the same semantic component, it would be ideal to compare on fiberId, but i digress\n                    curr.componentPath.join(\"-\") === lastEvent.events[0].componentPath.join(\"-\")) {\n                        const eventsWithoutLast = prev.filter((e)=>e !== lastEvent);\n                        return [\n                            ...eventsWithoutLast,\n                            {\n                                kind: \"collapsed-keyboard\",\n                                events: [\n                                    ...lastEvent.events,\n                                    curr\n                                ],\n                                timestamp: Math.max(...[\n                                    ...lastEvent.events,\n                                    curr\n                                ].map((e)=>e.timestamp))\n                            }\n                        ];\n                    }\n                    return [\n                        ...prev,\n                        {\n                            kind: \"single\",\n                            event: curr,\n                            timestamp: curr.timestamp\n                        }\n                    ];\n                }\n            case \"single\":\n                {\n                    if (lastEvent.event.kind === \"interaction\" && lastEvent.event.type === \"keyboard\" && curr.kind === \"interaction\" && curr.type === \"keyboard\" && lastEvent.event.componentPath.join(\"-\") === curr.componentPath.join(\"-\")) {\n                        const eventsWithoutLast = prev.filter((e)=>e !== lastEvent);\n                        return [\n                            ...eventsWithoutLast,\n                            {\n                                kind: \"collapsed-keyboard\",\n                                events: [\n                                    lastEvent.event,\n                                    curr\n                                ],\n                                timestamp: Math.max(lastEvent.event.timestamp, curr.timestamp)\n                            }\n                        ];\n                    }\n                    if (lastEvent.event.kind === \"dropped-frames\" && curr.kind === \"dropped-frames\") {\n                        const eventsWithoutLast = prev.filter((e)=>e !== lastEvent);\n                        return [\n                            ...eventsWithoutLast,\n                            {\n                                kind: \"multiple\",\n                                events: [\n                                    lastEvent.event,\n                                    curr\n                                ],\n                                timestamp: Math.max(lastEvent.event.timestamp, curr.timestamp)\n                            }\n                        ];\n                    }\n                    return [\n                        ...prev,\n                        {\n                            kind: \"single\",\n                            event: curr,\n                            timestamp: curr.timestamp\n                        }\n                    ];\n                }\n            case \"multiple\":\n                {\n                    if (curr.kind === \"dropped-frames\") {\n                        const eventsWithoutLast = prev.filter((e)=>e !== lastEvent);\n                        return [\n                            ...eventsWithoutLast,\n                            {\n                                kind: \"multiple\",\n                                events: [\n                                    ...lastEvent.events,\n                                    curr\n                                ],\n                                timestamp: Math.max(...[\n                                    ...lastEvent.events,\n                                    curr\n                                ].map((e)=>e.timestamp))\n                            }\n                        ];\n                    }\n                    return [\n                        ...prev,\n                        {\n                            kind: \"single\",\n                            event: curr,\n                            timestamp: curr.timestamp\n                        }\n                    ];\n                }\n        }\n    }, []);\n    return newEvents;\n};\nvar useLaggedEvents = function() {\n    let lagMs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 150;\n    _s15();\n    const { notificationState } = useNotificationsContext();\n    const [laggedEvents, setLaggedEvents] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(notificationState.events);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"useLaggedEvents.useEffect5\": ()=>{\n            setTimeout({\n                \"useLaggedEvents.useEffect5\": ()=>{\n                    setLaggedEvents(notificationState.events);\n                }\n            }[\"useLaggedEvents.useEffect5\"], lagMs);\n        }\n    }[\"useLaggedEvents.useEffect5\"], [\n        notificationState.events\n    ]);\n    return [\n        laggedEvents,\n        setLaggedEvents\n    ];\n};\n_s15(useLaggedEvents, \"wP0fhmeTdCAotiTdepKHiFSvSVc=\", false, function() {\n    return [\n        useNotificationsContext,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect\n    ];\n});\nvar SlowdownHistory = ()=>{\n    _s16();\n    const { notificationState, setNotificationState } = useNotificationsContext();\n    const shouldFlash = useFlashManager(notificationState.events);\n    const [laggedEvents, setLaggedEvents] = useLaggedEvents();\n    const collapsedEvents = collapseEvents(laggedEvents).toSorted((a, b)=>b.timestamp - a.timestamp);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            \"w-full h-full gap-y-2 flex flex-col border-r border-[#27272A] pt-2 overflow-y-auto\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"text-sm text-[#65656D] pl-3 pr-1 w-full flex items-center justify-between\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        children: \"History\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Popover, {\n                        wrapperProps: {\n                            className: \"h-full flex items-center justify-center ml-auto\"\n                        },\n                        triggerContent: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                            className: cn([\n                                \"hover:bg-[#18181B] rounded-full p-2\"\n                            ]),\n                            onClick: ()=>{\n                                toolbarEventStore.getState().actions.clear();\n                                setNotificationState((prev)=>({\n                                        ...prev,\n                                        selectedEvent: null,\n                                        selectedFiber: null,\n                                        route: prev.route === \"other-visualization\" ? \"other-visualization\" : \"render-visualization\"\n                                    }));\n                                setLaggedEvents([]);\n                            },\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ClearIcon, {\n                                className: cn([\n                                    \"\"\n                                ]),\n                                size: 16\n                            })\n                        }),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"w-full flex justify-center\"\n                            ]),\n                            children: \"Clear all events\"\n                        })\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"flex flex-col px-1 gap-y-1\"\n                ]),\n                children: [\n                    collapsedEvents.length === 0 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"flex items-center justify-center text-zinc-500 text-sm py-4\"\n                        ]),\n                        children: \"No Events\"\n                    }),\n                    collapsedEvents.map((historyItem)=>iife(()=>{\n                            switch(historyItem.kind){\n                                case \"collapsed-keyboard\":\n                                    {\n                                        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CollapsedKeyboard, {\n                                            shouldFlash,\n                                            collapsedKeyboardInput: historyItem\n                                        });\n                                    }\n                                case \"single\":\n                                    {\n                                        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlowdownHistoryItem, {\n                                            event: historyItem.event,\n                                            shouldFlash: shouldFlash(historyItem.event.id)\n                                        }, historyItem.event.id);\n                                    }\n                                case \"multiple\":\n                                    {\n                                        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CollapsedItem, {\n                                            shouldFlash,\n                                            historyItem\n                                        });\n                                    }\n                            }\n                        }))\n                ]\n            })\n        ]\n    });\n};\n_s16(SlowdownHistory, \"z3GHOF96GzuA+hvJ2hu5zhUjMrs=\", false, function() {\n    return [\n        useNotificationsContext,\n        useFlashManager,\n        useLaggedEvents\n    ];\n});\n_c23 = SlowdownHistory;\nvar IndentedContent = (param)=>{\n    let { children } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"relative pl-6 flex flex-col gap-y-1\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"absolute left-3 top-0 bottom-0 w-px bg-[#27272A]\"\n            }),\n            children\n        ]\n    });\n};\n_c24 = IndentedContent;\nvar CollapsedKeyboard = (param)=>{\n    let { collapsedKeyboardInput, shouldFlash } = param;\n    _s17();\n    const [expanded, setExpanded] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(false);\n    const severity = collapsedKeyboardInput.events.map(getEventSeverity).reduce((prev, curr)=>{\n        switch(curr){\n            case \"high\":\n                {\n                    return \"high\";\n                }\n            case \"needs-improvement\":\n                {\n                    return prev === \"high\" ? \"high\" : \"needs-improvement\";\n                }\n            case \"low\":\n                {\n                    return prev;\n                }\n        }\n    }, \"low\");\n    const flashingItemsCount = collapsedKeyboardInput.events.reduce((prev, curr)=>shouldFlash(curr.id) ? prev + 1 : prev, 0);\n    const newFlash = useNestedFlash({\n        flashingItemsCount,\n        totalEvents: collapsedKeyboardInput.events.length\n    });\n    if (expanded) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: cn([\n                \"flex flex-col gap-y-1 object-contain\"\n            ]),\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onClick: ()=>setExpanded(false),\n                    className: cn([\n                        \"pl-1.5 py-1.5 text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"w-4/5 flex items-center justify-start h-full text-xs truncate gap-x-1.5 min-w-fit\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChevronRight, {\n                                    className: \"rotate-90 text-[#A1A1AA] transition-transform\",\n                                    size: 10\n                                }, \"chevron-\".concat(collapsedKeyboardInput.timestamp)),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"text-xs\"\n                                    ]),\n                                    children: getComponentName(collapsedKeyboardInput.events[0].componentPath)\n                                })\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \" min-w-fit flex justify-end items-center ml-auto\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                style: {\n                                    lineHeight: \"10px\"\n                                },\n                                className: cn([\n                                    \"w-fit flex text-[10px] items-center justify-center h-full text-white px-1 py-1 rounded-sm font-semibold\",\n                                    severity === \"low\" && \"bg-green-500/50\",\n                                    severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                                    severity === \"high\" && \"bg-[#b94040]\"\n                                ]),\n                                children: [\n                                    \"x\",\n                                    collapsedKeyboardInput.events.length\n                                ]\n                            })\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(IndentedContent, {\n                    children: collapsedKeyboardInput.events.toSorted((a, b)=>b.timestamp - a.timestamp).map((event)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlowdownHistoryItem, {\n                            event,\n                            shouldFlash: false\n                        }, event.id))\n                })\n            ]\n        });\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        onClick: ()=>setExpanded(true),\n        className: cn([\n            \"pl-1.5 py-1.5 text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\",\n            newFlash && \"after:absolute after:inset-0 after:bg-purple-500/30 after:animate-[fadeOut_1s_ease-out_forwards]\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-4/5 flex items-center justify-start h-full text-xs truncate gap-x-1.5\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChevronRight, {\n                        className: \"text-[#A1A1AA] transition-transform min-w-fit\",\n                        size: 10\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: cn([\n                            \"text-xs\"\n                        ]),\n                        children: getComponentName(collapsedKeyboardInput.events[0].componentPath)\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn([\n                    \"min-w-fit flex justify-end items-center ml-auto\"\n                ]),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    style: {\n                        lineHeight: \"10px\"\n                    },\n                    className: cn([\n                        \"w-fit flex text-[10px] items-center justify-center h-full text-white px-1 py-1 rounded-sm font-semibold\",\n                        severity === \"low\" && \"bg-green-500/50\",\n                        severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                        severity === \"high\" && \"bg-[#b94040]\"\n                    ]),\n                    children: [\n                        \"x\",\n                        collapsedKeyboardInput.events.length\n                    ]\n                })\n            })\n        ]\n    });\n};\n_s17(CollapsedKeyboard, \"1A20i3byydVKkZljPL/s7eT5kRM=\", false, function() {\n    return [\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState,\n        useNestedFlash\n    ];\n});\n_c25 = CollapsedKeyboard;\nvar useNestedFlash = (param)=>{\n    let { flashingItemsCount, totalEvents } = param;\n    _s18();\n    const [newFlash, setNewFlash] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(false);\n    const flashedFor = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(0);\n    const lastFlashTime = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(0);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"useNestedFlash.useEffect5\": ()=>{\n            if (flashedFor.current >= totalEvents) {\n                return;\n            }\n            const now = Date.now();\n            const debounceTime = 250;\n            const timeSinceLastFlash = now - lastFlashTime.current;\n            if (timeSinceLastFlash >= debounceTime) {\n                setNewFlash(false);\n                const timeout2 = setTimeout({\n                    \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                        flashedFor.current = totalEvents;\n                        lastFlashTime.current = Date.now();\n                        setNewFlash(true);\n                        setTimeout({\n                            \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                                setNewFlash(false);\n                            }\n                        }[\"useNestedFlash.useEffect5.timeout2\"], 2e3);\n                    }\n                }[\"useNestedFlash.useEffect5.timeout2\"], 50);\n                return ({\n                    \"useNestedFlash.useEffect5\": ()=>clearTimeout(timeout2)\n                })[\"useNestedFlash.useEffect5\"];\n            } else {\n                const delayNeeded = debounceTime - timeSinceLastFlash;\n                const timeout2 = setTimeout({\n                    \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                        setNewFlash(false);\n                        setTimeout({\n                            \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                                flashedFor.current = totalEvents;\n                                lastFlashTime.current = Date.now();\n                                setNewFlash(true);\n                                setTimeout({\n                                    \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                                        setNewFlash(false);\n                                    }\n                                }[\"useNestedFlash.useEffect5.timeout2\"], 2e3);\n                            }\n                        }[\"useNestedFlash.useEffect5.timeout2\"], 50);\n                    }\n                }[\"useNestedFlash.useEffect5.timeout2\"], delayNeeded);\n                return ({\n                    \"useNestedFlash.useEffect5\": ()=>clearTimeout(timeout2)\n                })[\"useNestedFlash.useEffect5\"];\n            }\n        }\n    }[\"useNestedFlash.useEffect5\"], [\n        flashingItemsCount\n    ]);\n    return newFlash;\n};\n_s18(useNestedFlash, \"GQsh3/czMna8s5IV7SskoFifUnw=\", false, function() {\n    return [\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect\n    ];\n});\nvar CollapsedItem = (param)=>{\n    let { historyItem, shouldFlash } = param;\n    _s19();\n    useNotificationsContext();\n    const [expanded, setExpanded] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(false);\n    const severity = historyItem.events.map(getEventSeverity).reduce((prev, curr)=>{\n        switch(curr){\n            case \"high\":\n                {\n                    return \"high\";\n                }\n            case \"needs-improvement\":\n                {\n                    return prev === \"high\" ? \"high\" : \"needs-improvement\";\n                }\n            case \"low\":\n                {\n                    return prev;\n                }\n        }\n    }, \"low\");\n    const flashingItemsCount = historyItem.events.reduce((prev, curr)=>shouldFlash(curr.id) ? prev + 1 : prev, 0);\n    const newFlash = useNestedFlash({\n        flashingItemsCount,\n        totalEvents: historyItem.events.length\n    });\n    if (expanded) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: cn([\n                \"flex flex-col gap-y-0.5\"\n            ]),\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onClick: ()=>setExpanded(false),\n                    className: cn([\n                        \"pl-2 py-1.5  text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"w-4/5 flex items-center justify-start h-full text-xs truncate gap-x-1.5\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"min-w-fit\"\n                                    ]),\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChevronRight, {\n                                        className: \"rotate-90 text-[#A1A1AA] transition-transform\",\n                                        size: 14\n                                    }, \"chevron-\".concat(historyItem.timestamp))\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"text-xs\"\n                                    ]),\n                                    children: \"FPS Drops\"\n                                })\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"ml-auto min-w-fit flex justify-end items-center\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                style: {\n                                    lineHeight: \"10px\"\n                                },\n                                className: cn([\n                                    \"w-fit flex items-center text-[10px] justify-center h-full text-white px-1 py-1 rounded-sm font-semibold\",\n                                    severity === \"low\" && \"bg-green-500/60\",\n                                    severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                                    severity === \"high\" && \"bg-[#b94040]\"\n                                ]),\n                                children: [\n                                    \"x\",\n                                    historyItem.events.length\n                                ]\n                            })\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(IndentedContent, {\n                    children: historyItem.events.toSorted((a, b)=>b.timestamp - a.timestamp).map((event)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlowdownHistoryItem, {\n                            event,\n                            shouldFlash: shouldFlash(event.id)\n                        }))\n                })\n            ]\n        });\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        onClick: ()=>setExpanded(true),\n        className: cn([\n            \"pl-2  py-1.5 text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\",\n            \"group\",\n            newFlash && \"after:absolute after:inset-0 after:bg-purple-500/30 after:animate-[fadeOut_1s_ease-out_forwards]\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-4/5 flex items-center justify-start h-full text-xs truncate gap-x-1.5\"\n                ]),\n                children: [\n                    \" \",\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChevronRight, {\n                        className: \"text-[#A1A1AA] transition-transform\",\n                        size: 14\n                    }, \"chevron-\".concat(historyItem.timestamp)),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: cn([\n                            \"text-xs\"\n                        ]),\n                        children: \"FPS Drops\"\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn([\n                    \"ml-auto min-w-fit flex justify-end items-center\"\n                ]),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    style: {\n                        lineHeight: \"10px\"\n                    },\n                    className: cn([\n                        \"w-fit flex items-center text-[10px] justify-center h-full text-white px-1 py-1 rounded-sm font-semibold\",\n                        severity === \"low\" && \"bg-green-500/60\",\n                        severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                        severity === \"high\" && \"bg-[#b94040]\"\n                    ]),\n                    children: [\n                        \"x\",\n                        historyItem.events.length\n                    ]\n                })\n            })\n        ]\n    });\n};\n_s19(CollapsedItem, \"yzLkEM+G/zdoeMVM0WetqKJLFqQ=\", false, function() {\n    return [\n        useNotificationsContext,\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState,\n        useNestedFlash\n    ];\n});\n_c26 = CollapsedItem;\n// src/web/views/notifications/notifications.tsx\n\nvar getGroupedFiberRenders = (fiberRenders)=>{\n    const res = Object.values(fiberRenders).map((render2)=>({\n            id: not_globally_unique_generateId(),\n            totalTime: render2.nodeInfo.reduce((prev, curr)=>prev + curr.selfTime, 0),\n            count: render2.nodeInfo.length,\n            name: render2.nodeInfo[0].name,\n            // invariant, at least one exists,\n            deletedAll: false,\n            // it would be nice if we calculated the % of components memoizable, but this would have to be calculated downstream before it got aggregated\n            elements: render2.nodeInfo.map((node)=>node.element),\n            changes: {\n                context: render2.changes.fiberContext.current.filter((change)=>render2.changes.fiberContext.changesCounts.get(change.name)).map((change)=>{\n                    var _render2_changes_fiberContext_changesCounts_get;\n                    return {\n                        name: String(change.name),\n                        count: (_render2_changes_fiberContext_changesCounts_get = render2.changes.fiberContext.changesCounts.get(change.name)) !== null && _render2_changes_fiberContext_changesCounts_get !== void 0 ? _render2_changes_fiberContext_changesCounts_get : 0\n                    };\n                }),\n                props: render2.changes.fiberProps.current.filter((change)=>render2.changes.fiberProps.changesCounts.get(change.name)).map((change)=>{\n                    var _render2_changes_fiberProps_changesCounts_get;\n                    return {\n                        name: String(change.name),\n                        count: (_render2_changes_fiberProps_changesCounts_get = render2.changes.fiberProps.changesCounts.get(change.name)) !== null && _render2_changes_fiberProps_changesCounts_get !== void 0 ? _render2_changes_fiberProps_changesCounts_get : 0\n                    };\n                }),\n                state: render2.changes.fiberState.current.filter((change)=>render2.changes.fiberState.changesCounts.get(Number(change.name))).map((change)=>{\n                    var _render2_changes_fiberState_changesCounts_get;\n                    return {\n                        index: change.name,\n                        count: (_render2_changes_fiberState_changesCounts_get = render2.changes.fiberState.changesCounts.get(Number(change.name))) !== null && _render2_changes_fiberState_changesCounts_get !== void 0 ? _render2_changes_fiberState_changesCounts_get : 0\n                    };\n                })\n            }\n        }));\n    return res;\n};\nvar useGarbageCollectElements = (notificationEvents)=>{\n    _s20();\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"useGarbageCollectElements.useEffect6\": ()=>{\n            const checkElementsExistence = {\n                \"useGarbageCollectElements.useEffect6.checkElementsExistence\": ()=>{\n                    notificationEvents.forEach({\n                        \"useGarbageCollectElements.useEffect6.checkElementsExistence\": (event)=>{\n                            if (!event.groupedFiberRenders) return;\n                            event.groupedFiberRenders.forEach({\n                                \"useGarbageCollectElements.useEffect6.checkElementsExistence\": (render2)=>{\n                                    if (render2.deletedAll) return;\n                                    if (!render2.elements || render2.elements.length === 0) {\n                                        render2.deletedAll = true;\n                                        return;\n                                    }\n                                    const initialLength = render2.elements.length;\n                                    render2.elements = render2.elements.filter({\n                                        \"useGarbageCollectElements.useEffect6.checkElementsExistence\": (element)=>{\n                                            return element && element.isConnected;\n                                        }\n                                    }[\"useGarbageCollectElements.useEffect6.checkElementsExistence\"]);\n                                    if (render2.elements.length === 0 && initialLength > 0) {\n                                        render2.deletedAll = true;\n                                    }\n                                }\n                            }[\"useGarbageCollectElements.useEffect6.checkElementsExistence\"]);\n                        }\n                    }[\"useGarbageCollectElements.useEffect6.checkElementsExistence\"]);\n                }\n            }[\"useGarbageCollectElements.useEffect6.checkElementsExistence\"];\n            const intervalId = setInterval(checkElementsExistence, 5e3);\n            return ({\n                \"useGarbageCollectElements.useEffect6\": ()=>{\n                    clearInterval(intervalId);\n                }\n            })[\"useGarbageCollectElements.useEffect6\"];\n        }\n    }[\"useGarbageCollectElements.useEffect6\"], [\n        notificationEvents\n    ]);\n};\n_s20(useGarbageCollectElements, \"LKl7CEOHcLto+nilfhupi2rv9Bc=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\nvar useAppNotifications = ()=>{\n    _s21();\n    const log2 = useToolbarEventLog();\n    const notificationEvents = [];\n    useGarbageCollectElements(notificationEvents);\n    log2.state.events.forEach((event)=>{\n        const fiberRenders = event.kind === \"interaction\" ? event.data.meta.detailedTiming.fiberRenders : event.data.meta.fiberRenders;\n        const groupedFiberRenders = getGroupedFiberRenders(fiberRenders);\n        const renderTime = groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0);\n        switch(event.kind){\n            case \"interaction\":\n                {\n                    const { commitEnd, jsEndDetail, interactionStartDetail, rafStart } = event.data.meta.detailedTiming;\n                    if (jsEndDetail - interactionStartDetail - renderTime < 0) {\n                        invariantError(\"js time must be longer than render time\");\n                    }\n                    const otherJSTime = Math.max(0, jsEndDetail - interactionStartDetail - renderTime);\n                    const frameDraw = Math.max(event.data.meta.latency - (commitEnd - interactionStartDetail), 0);\n                    notificationEvents.push({\n                        componentPath: event.data.meta.detailedTiming.componentPath,\n                        groupedFiberRenders,\n                        id: event.id,\n                        kind: \"interaction\",\n                        memory: null,\n                        timestamp: event.data.startAt,\n                        type: event.data.meta.detailedTiming.interactionType === \"keyboard\" ? \"keyboard\" : \"click\",\n                        timing: {\n                            renderTime,\n                            kind: \"interaction\",\n                            otherJSTime,\n                            framePreparation: rafStart - jsEndDetail,\n                            frameConstruction: commitEnd - rafStart,\n                            frameDraw\n                        }\n                    });\n                    return;\n                }\n            case \"long-render\":\n                {\n                    notificationEvents.push({\n                        kind: \"dropped-frames\",\n                        id: event.id,\n                        memory: null,\n                        timing: {\n                            kind: \"dropped-frames\",\n                            renderTime,\n                            otherTime: event.data.meta.latency\n                        },\n                        groupedFiberRenders,\n                        timestamp: event.data.startAt,\n                        fps: event.data.meta.fps\n                    });\n                    return;\n                }\n        }\n    });\n    return notificationEvents;\n};\n_s21(useAppNotifications, \"EoiOO/f6P6ks2IlTaWdYX941JMc=\", false, function() {\n    return [\n        useToolbarEventLog,\n        useGarbageCollectElements\n    ];\n});\nvar timeout = 1e3;\nvar NotificationAudio = ()=>{\n    _s22();\n    const { notificationState, setNotificationState } = useNotificationsContext();\n    const playedFor = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const debounceTimeout = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const lastPlayedTime = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const [laggedEvents] = useLaggedEvents();\n    const alertEventsCount = laggedEvents.filter(// todo: make this configurable\n    (event)=>getEventSeverity(event) === \"high\").length;\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"NotificationAudio.useEffect6\": ()=>{\n            const audioEnabledString = localStorage.getItem(\"react-scan-notifications-audio\");\n            if (audioEnabledString !== \"false\" && audioEnabledString !== \"true\") {\n                localStorage.setItem(\"react-scan-notifications-audio\", \"false\");\n                return;\n            }\n            const audioEnabled = audioEnabledString === \"false\" ? false : true;\n            if (audioEnabled) {\n                setNotificationState({\n                    \"NotificationAudio.useEffect6\": (prev)=>{\n                        if (prev.audioNotificationsOptions.enabled) {\n                            return prev;\n                        }\n                        return {\n                            ...prev,\n                            audioNotificationsOptions: {\n                                enabled: true,\n                                audioContext: new AudioContext()\n                            }\n                        };\n                    }\n                }[\"NotificationAudio.useEffect6\"]);\n                return;\n            }\n        }\n    }[\"NotificationAudio.useEffect6\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"NotificationAudio.useEffect6\": ()=>{\n            const { audioNotificationsOptions } = notificationState;\n            if (!audioNotificationsOptions.enabled) {\n                return;\n            }\n            if (alertEventsCount === 0) {\n                return;\n            }\n            if (playedFor.current && playedFor.current >= alertEventsCount) {\n                return;\n            }\n            if (debounceTimeout.current) {\n                clearTimeout(debounceTimeout.current);\n            }\n            const now = Date.now();\n            const timeSinceLastPlay = now - lastPlayedTime.current;\n            const remainingDebounceTime = Math.max(0, timeout - timeSinceLastPlay);\n            debounceTimeout.current = setTimeout({\n                \"NotificationAudio.useEffect6\": ()=>{\n                    playNotificationSound(audioNotificationsOptions.audioContext);\n                    playedFor.current = alertEventsCount;\n                    lastPlayedTime.current = Date.now();\n                    debounceTimeout.current = null;\n                }\n            }[\"NotificationAudio.useEffect6\"], remainingDebounceTime);\n        }\n    }[\"NotificationAudio.useEffect6\"], [\n        alertEventsCount\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"NotificationAudio.useEffect6\": ()=>{\n            if (alertEventsCount !== 0) {\n                return;\n            }\n            playedFor.current = null;\n        }\n    }[\"NotificationAudio.useEffect6\"], [\n        alertEventsCount\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"NotificationAudio.useEffect6\": ()=>{\n            return ({\n                \"NotificationAudio.useEffect6\": ()=>{\n                    if (debounceTimeout.current) {\n                        clearTimeout(debounceTimeout.current);\n                    }\n                }\n            })[\"NotificationAudio.useEffect6\"];\n        }\n    }[\"NotificationAudio.useEffect6\"], []);\n    return null;\n};\n_s22(NotificationAudio, \"kYQCSLneDGJPZWB4z/7FkH+UD18=\", false, function() {\n    return [\n        useNotificationsContext,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        useLaggedEvents,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c27 = NotificationAudio;\nvar NotificationWrapper = _s23((0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.forwardRef)(_c28 = _s23((_, ref)=>{\n    _s23();\n    const events = useAppNotifications();\n    var _events_toSorted_at;\n    const [notificationState, setNotificationState] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        detailsExpanded: false,\n        events,\n        filterBy: \"latest\",\n        moreInfoExpanded: false,\n        route: \"render-visualization\",\n        selectedEvent: (_events_toSorted_at = events.toSorted({\n            \"NotificationWrapper.useState8\": (a, b)=>a.timestamp - b.timestamp\n        }[\"NotificationWrapper.useState8\"]).at(-1)) !== null && _events_toSorted_at !== void 0 ? _events_toSorted_at : null,\n        selectedFiber: null,\n        routeMessage: null,\n        audioNotificationsOptions: {\n            enabled: false,\n            audioContext: null\n        }\n    });\n    notificationState.events = events;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(NotificationStateContext.Provider, {\n        value: {\n            notificationState,\n            setNotificationState,\n            setRoute: (param)=>{\n                let { route, routeMessage } = param;\n                setNotificationState((prev)=>{\n                    const newState = {\n                        ...prev,\n                        route,\n                        routeMessage\n                    };\n                    switch(route){\n                        case \"render-visualization\":\n                            {\n                                fadeOutHighlights();\n                                return {\n                                    ...newState,\n                                    selectedFiber: null\n                                };\n                            }\n                        case \"optimize\":\n                            {\n                                fadeOutHighlights();\n                                return {\n                                    ...newState,\n                                    selectedFiber: null\n                                };\n                            }\n                        case \"other-visualization\":\n                            {\n                                fadeOutHighlights();\n                                return {\n                                    ...newState,\n                                    selectedFiber: null\n                                };\n                            }\n                        case \"render-explanation\":\n                            {\n                                fadeOutHighlights();\n                                return newState;\n                            }\n                    }\n                    route;\n                });\n            }\n        },\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(NotificationAudio, {}),\n            signalNotificationsOpen.value && Store.inspectState.value.kind === \"inspect-off\" && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Notifications, {\n                ref\n            })\n        ]\n    });\n}, \"+UsQNBoNg5XWV3FwBNhwD2GcMPk=\", false, function() {\n    return [\n        useAppNotifications,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState\n    ];\n})), \"+UsQNBoNg5XWV3FwBNhwD2GcMPk=\", false, function() {\n    return [\n        useAppNotifications,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState\n    ];\n});\n_c29 = NotificationWrapper;\nvar Notifications = _s24((0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.forwardRef)(_c30 = _s24((_, ref)=>{\n    var _notificationState_selectedEvent;\n    _s24();\n    const { notificationState } = useNotificationsContext();\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        ref,\n        className: cn([\n            \"h-full w-full flex flex-col\"\n        ]),\n        children: [\n            notificationState.selectedEvent && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-full h-[48px] flex flex-col\",\n                    notificationState.moreInfoExpanded && \"h-[235px]\",\n                    notificationState.moreInfoExpanded && notificationState.selectedEvent.kind === \"dropped-frames\" && \"h-[150px]\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(NotificationHeader, {\n                        selectedEvent: notificationState.selectedEvent\n                    }),\n                    notificationState.moreInfoExpanded && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(MoreInfo, {})\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"flex \",\n                    notificationState.selectedEvent ? \"h-[calc(100%-48px)]\" : \"h-full\",\n                    notificationState.moreInfoExpanded && \"h-[calc(100%-200px)]\",\n                    notificationState.moreInfoExpanded && ((_notificationState_selectedEvent = notificationState.selectedEvent) === null || _notificationState_selectedEvent === void 0 ? void 0 : _notificationState_selectedEvent.kind) === \"dropped-frames\" && \"h-[calc(100%-150px)]\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"h-full min-w-[200px]\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlowdownHistory, {})\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"w-[calc(100%-200px)] h-full overflow-y-auto\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DetailsRoutes, {})\n                    })\n                ]\n            })\n        ]\n    });\n}, \"BhJ6FzE5OGQx5yShu8mmvD4Qbwg=\", false, function() {\n    return [\n        useNotificationsContext\n    ];\n})), \"BhJ6FzE5OGQx5yShu8mmvD4Qbwg=\", false, function() {\n    return [\n        useNotificationsContext\n    ];\n});\n_c31 = Notifications;\nvar MoreInfo = ()=>{\n    _s25();\n    const { notificationState } = useNotificationsContext();\n    if (!notificationState.selectedEvent) {\n        throw new Error(\"Invariant must have selected event for more info\");\n    }\n    const event = notificationState.selectedEvent;\n    const date = new Date(event.timestamp);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: cn([\n            \"px-4 py-2 border-b border-[#27272A] bg-[#18181B]/50 h-[calc(100%-40px)]\",\n            event.kind === \"dropped-frames\" && \"h-[calc(100%-25px)]\"\n        ]),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: cn([\n                \"flex flex-col gap-y-4 h-full\"\n            ]),\n            children: iife(()=>{\n                switch(event.kind){\n                    case \"interaction\":\n                        {\n                            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: event.type === \"click\" ? \"Clicked component location\" : \"Typed in component location\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                                className: \"font-mono text-[#E4E4E7] flex items-center bg-[#27272A] pl-2 py-1 rounded-sm overflow-x-auto\",\n                                                children: event.componentPath.toReversed().map((part, i)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                        children: [\n                                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                                style: {\n                                                                    lineHeight: \"14px\"\n                                                                },\n                                                                className: \"text-[10px] whitespace-nowrap\",\n                                                                children: part\n                                                            }, part),\n                                                            i < event.componentPath.length - 1 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                                className: \"text-[#6F6F78] mx-0.5\",\n                                                                children: \"\\u2039\"\n                                                            })\n                                                        ]\n                                                    }))\n                                            })\n                                        ]\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: \"Total Time\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                                className: \"text-[#E4E4E7] bg-[#27272A] px-1.5 py-1 rounded-sm text-xs\",\n                                                children: [\n                                                    getTotalTime(event.timing).toFixed(0),\n                                                    \"ms\"\n                                                ]\n                                            })\n                                        ]\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: \"Occurred\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#E4E4E7] bg-[#27272A] px-1.5 py-1 rounded-sm text-xs\",\n                                                children: \"\".concat(((Date.now() - event.timestamp) / 1e3).toFixed(0), \"s ago\")\n                                            })\n                                        ]\n                                    })\n                                ]\n                            });\n                        }\n                    case \"dropped-frames\":\n                        {\n                            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: \"Total Time\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                                className: \"text-[#E4E4E7] bg-[#27272A] px-1.5 py-1 rounded-sm text-xs\",\n                                                children: [\n                                                    getTotalTime(event.timing).toFixed(0),\n                                                    \"ms\"\n                                                ]\n                                            })\n                                        ]\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: \"Occurred\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#E4E4E7] bg-[#27272A] px-1.5 py-1 rounded-sm text-xs\",\n                                                children: \"\".concat(((Date.now() - event.timestamp) / 1e3).toFixed(0), \"s ago\")\n                                            })\n                                        ]\n                                    })\n                                ]\n                            });\n                        }\n                }\n            })\n        })\n    });\n};\n_s25(MoreInfo, \"BhJ6FzE5OGQx5yShu8mmvD4Qbwg=\", false, function() {\n    return [\n        useNotificationsContext\n    ];\n});\n_c32 = MoreInfo;\n// src/web/views/widget/components-tree/index.tsx\n\n// src/web/hooks/use-virtual-list.ts\n\nvar useVirtualList = (options)=>{\n    _s26();\n    const { count, getScrollElement, estimateSize, overscan = 5 } = options;\n    const [scrollTop, setScrollTop] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [containerHeight, setContainerHeight] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const refResizeObserver = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const refScrollElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refRafId = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const itemHeight = estimateSize();\n    const updateContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"useVirtualList.useCallback[updateContainer]\": (entries)=>{\n            var _entries_;\n            if (!refScrollElement.current) return;\n            var _entries__contentRect_height;\n            const height = (_entries__contentRect_height = entries === null || entries === void 0 ? void 0 : (_entries_ = entries[0]) === null || _entries_ === void 0 ? void 0 : _entries_.contentRect.height) !== null && _entries__contentRect_height !== void 0 ? _entries__contentRect_height : refScrollElement.current.getBoundingClientRect().height;\n            setContainerHeight(height);\n        }\n    }[\"useVirtualList.useCallback[updateContainer]\"], []);\n    const debouncedUpdateContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"useVirtualList.useCallback[debouncedUpdateContainer]\": ()=>{\n            if (refRafId.current !== null) {\n                cancelAnimationFrame(refRafId.current);\n            }\n            refRafId.current = requestAnimationFrame({\n                \"useVirtualList.useCallback[debouncedUpdateContainer]\": ()=>{\n                    updateContainer();\n                    refRafId.current = null;\n                }\n            }[\"useVirtualList.useCallback[debouncedUpdateContainer]\"]);\n        }\n    }[\"useVirtualList.useCallback[debouncedUpdateContainer]\"], [\n        updateContainer\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"useVirtualList.useEffect7\": ()=>{\n            const element = getScrollElement();\n            if (!element) return;\n            refScrollElement.current = element;\n            const handleScroll = {\n                \"useVirtualList.useEffect7.handleScroll\": ()=>{\n                    if (!refScrollElement.current) return;\n                    setScrollTop(refScrollElement.current.scrollTop);\n                }\n            }[\"useVirtualList.useEffect7.handleScroll\"];\n            updateContainer();\n            if (!refResizeObserver.current) {\n                refResizeObserver.current = new ResizeObserver({\n                    \"useVirtualList.useEffect7\": ()=>{\n                        debouncedUpdateContainer();\n                    }\n                }[\"useVirtualList.useEffect7\"]);\n            }\n            refResizeObserver.current.observe(element);\n            element.addEventListener(\"scroll\", handleScroll, {\n                passive: true\n            });\n            const mutationObserver = new MutationObserver(debouncedUpdateContainer);\n            mutationObserver.observe(element, {\n                attributes: true,\n                childList: true,\n                subtree: true\n            });\n            return ({\n                \"useVirtualList.useEffect7\": ()=>{\n                    element.removeEventListener(\"scroll\", handleScroll);\n                    if (refResizeObserver.current) {\n                        refResizeObserver.current.disconnect();\n                    }\n                    mutationObserver.disconnect();\n                    if (refRafId.current !== null) {\n                        cancelAnimationFrame(refRafId.current);\n                    }\n                }\n            })[\"useVirtualList.useEffect7\"];\n        }\n    }[\"useVirtualList.useEffect7\"], [\n        getScrollElement,\n        updateContainer,\n        debouncedUpdateContainer\n    ]);\n    const visibleRange = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"useVirtualList.useMemo[visibleRange]\": ()=>{\n            const start2 = Math.floor(scrollTop / itemHeight);\n            const visibleCount = Math.ceil(containerHeight / itemHeight);\n            return {\n                start: Math.max(0, start2 - overscan),\n                end: Math.min(count, start2 + visibleCount + overscan)\n            };\n        }\n    }[\"useVirtualList.useMemo[visibleRange]\"], [\n        scrollTop,\n        itemHeight,\n        containerHeight,\n        count,\n        overscan\n    ]);\n    const items = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"useVirtualList.useMemo[items]\": ()=>{\n            const virtualItems = [];\n            for(let index = visibleRange.start; index < visibleRange.end; index++){\n                virtualItems.push({\n                    key: index,\n                    index,\n                    start: index * itemHeight\n                });\n            }\n            return virtualItems;\n        }\n    }[\"useVirtualList.useMemo[items]\"], [\n        visibleRange,\n        itemHeight\n    ]);\n    return {\n        virtualItems: items,\n        totalSize: count * itemHeight,\n        scrollTop,\n        containerHeight\n    };\n};\n_s26(useVirtualList, \"QNy3ukcrNfylWzy8LNPqPRp8ILM=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n// src/web/utils/pin.ts\nvar metadata = readLocalStorage(\"react-scann-pinned\");\nvar getFiberPath = (fiber)=>{\n    const pathSegments = [];\n    let currentFiber = fiber;\n    while(currentFiber){\n        const elementType = currentFiber.elementType;\n        const name = typeof elementType === \"function\" ? elementType.displayName || elementType.name : typeof elementType === \"string\" ? elementType : \"Unknown\";\n        const index = currentFiber.index !== void 0 ? \"[\".concat(currentFiber.index, \"]\") : \"\";\n        pathSegments.unshift(\"\".concat(name).concat(index));\n        var _currentFiber_return;\n        currentFiber = (_currentFiber_return = currentFiber.return) !== null && _currentFiber_return !== void 0 ? _currentFiber_return : null;\n    }\n    return pathSegments.join(\"::\");\n};\n// src/web/views/icon/index.tsx\n\n\nvar Icon = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.forwardRef)(_c33 = (param, ref)=>{\n    let { size = 15, name, fill = \"currentColor\", stroke = \"currentColor\", className, externalURL = \"\", style } = param;\n    const width = Array.isArray(size) ? size[0] : size;\n    const height = Array.isArray(size) ? size[1] || size[0] : size;\n    const path = \"\".concat(externalURL, \"#\").concat(name);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        ref,\n        width: \"\".concat(width, \"px\"),\n        height: \"\".concat(height, \"px\"),\n        fill,\n        stroke,\n        className,\n        style: {\n            ...style,\n            minWidth: \"\".concat(width, \"px\"),\n            maxWidth: \"\".concat(width, \"px\"),\n            minHeight: \"\".concat(height, \"px\"),\n            maxHeight: \"\".concat(height, \"px\")\n        },\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"title\", {\n                children: name\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"use\", {\n                href: path\n            })\n        ]\n    });\n});\n_c34 = Icon;\n// src/web/views/inspector/states.ts\n\n// src/web/views/inspector/flash-overlay.ts\nvar fadeOutTimers = /* @__PURE__ */ new WeakMap();\nvar trackElementPosition = (element, callback)=>{\n    const handleScroll = callback.bind(null, element);\n    document.addEventListener(\"scroll\", handleScroll, {\n        passive: true,\n        capture: true\n    });\n    return ()=>{\n        document.removeEventListener(\"scroll\", handleScroll, {\n            capture: true\n        });\n    };\n};\nvar flashManager = {\n    activeFlashes: /* @__PURE__ */ new Map(),\n    create (container) {\n        const existingOverlay = container.querySelector(\".react-scan-flash-overlay\");\n        const overlay = existingOverlay instanceof HTMLElement ? existingOverlay : (()=>{\n            const newOverlay = document.createElement(\"div\");\n            newOverlay.className = \"react-scan-flash-overlay\";\n            container.appendChild(newOverlay);\n            const scrollCleanup = trackElementPosition(container, ()=>{\n                if (container.querySelector(\".react-scan-flash-overlay\")) {\n                    this.create(container);\n                }\n            });\n            this.activeFlashes.set(container, {\n                element: container,\n                overlay: newOverlay,\n                scrollCleanup\n            });\n            return newOverlay;\n        })();\n        const existingTimer = fadeOutTimers.get(overlay);\n        if (existingTimer) {\n            clearTimeout(existingTimer);\n            fadeOutTimers.delete(overlay);\n        }\n        requestAnimationFrame(()=>{\n            overlay.style.transition = \"none\";\n            overlay.style.opacity = \"0.9\";\n            const timerId = setTimeout(()=>{\n                overlay.style.transition = \"opacity 150ms ease-out\";\n                overlay.style.opacity = \"0\";\n                const cleanupTimer = setTimeout(()=>{\n                    if (overlay.parentNode) {\n                        overlay.parentNode.removeChild(overlay);\n                    }\n                    const entry = this.activeFlashes.get(container);\n                    if (entry === null || entry === void 0 ? void 0 : entry.scrollCleanup) {\n                        entry.scrollCleanup();\n                    }\n                    this.activeFlashes.delete(container);\n                    fadeOutTimers.delete(overlay);\n                }, 150);\n                fadeOutTimers.set(overlay, cleanupTimer);\n            }, 300);\n            fadeOutTimers.set(overlay, timerId);\n        });\n    },\n    cleanup (container) {\n        const entry = this.activeFlashes.get(container);\n        if (entry) {\n            const existingTimer = fadeOutTimers.get(entry.overlay);\n            if (existingTimer) {\n                clearTimeout(existingTimer);\n                fadeOutTimers.delete(entry.overlay);\n            }\n            if (entry.overlay.parentNode) {\n                entry.overlay.parentNode.removeChild(entry.overlay);\n            }\n            if (entry.scrollCleanup) {\n                entry.scrollCleanup();\n            }\n            this.activeFlashes.delete(container);\n        }\n    },\n    cleanupAll () {\n        for (const [, entry] of this.activeFlashes){\n            this.cleanup(entry.element);\n        }\n    }\n};\n// src/web/views/inspector/states.ts\nvar TIMELINE_MAX_UPDATES = 1e3;\nvar timelineStateDefault = {\n    updates: [],\n    currentFiber: null,\n    totalUpdates: 0,\n    windowOffset: 0,\n    currentIndex: 0,\n    isViewingHistory: false,\n    latestFiber: null,\n    isVisible: false,\n    playbackSpeed: 1\n};\nvar timelineState = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(timelineStateDefault);\nvar inspectorUpdateSignal = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(0);\nvar pendingUpdates = [];\nvar batchTimeout = null;\nvar batchUpdates = ()=>{\n    if (pendingUpdates.length === 0) return;\n    const batchedUpdates = [\n        ...pendingUpdates\n    ];\n    const { updates, totalUpdates, currentIndex, isViewingHistory } = timelineState.value;\n    const newUpdates = [\n        ...updates\n    ];\n    let newTotalUpdates = totalUpdates;\n    for (const { update } of batchedUpdates){\n        if (newUpdates.length >= TIMELINE_MAX_UPDATES) {\n            newUpdates.shift();\n        }\n        newUpdates.push(update);\n        newTotalUpdates++;\n    }\n    const newWindowOffset = Math.max(0, newTotalUpdates - TIMELINE_MAX_UPDATES);\n    let newCurrentIndex;\n    if (isViewingHistory) {\n        if (currentIndex === totalUpdates - 1) {\n            newCurrentIndex = newUpdates.length - 1;\n        } else if (currentIndex === 0) {\n            newCurrentIndex = 0;\n        } else {\n            if (newWindowOffset === 0) {\n                newCurrentIndex = currentIndex;\n            } else {\n                newCurrentIndex = currentIndex - 1;\n            }\n        }\n    } else {\n        newCurrentIndex = newUpdates.length - 1;\n    }\n    const lastUpdate = batchedUpdates[batchedUpdates.length - 1];\n    timelineState.value = {\n        ...timelineState.value,\n        latestFiber: lastUpdate.fiber,\n        updates: newUpdates,\n        totalUpdates: newTotalUpdates,\n        windowOffset: newWindowOffset,\n        currentIndex: newCurrentIndex,\n        isViewingHistory\n    };\n    pendingUpdates = pendingUpdates.slice(batchedUpdates.length);\n};\nvar timelineActions = {\n    showTimeline: ()=>{\n        timelineState.value = {\n            ...timelineState.value,\n            isVisible: true\n        };\n    },\n    hideTimeline: ()=>{\n        timelineState.value = {\n            ...timelineState.value,\n            isVisible: false,\n            currentIndex: timelineState.value.updates.length - 1\n        };\n    },\n    updateFrame: (index, isViewingHistory)=>{\n        timelineState.value = {\n            ...timelineState.value,\n            currentIndex: index,\n            isViewingHistory\n        };\n    },\n    updatePlaybackSpeed: (speed)=>{\n        timelineState.value = {\n            ...timelineState.value,\n            playbackSpeed: speed\n        };\n    },\n    addUpdate: (update, latestFiber)=>{\n        pendingUpdates.push({\n            update,\n            fiber: latestFiber\n        });\n        if (!batchTimeout) {\n            const processBatch = ()=>{\n                batchUpdates();\n                batchTimeout = null;\n                if (pendingUpdates.length > 0) {\n                    batchTimeout = setTimeout(processBatch, 96);\n                }\n            };\n            batchTimeout = setTimeout(processBatch, 96);\n        }\n    },\n    reset: ()=>{\n        if (batchTimeout) {\n            clearTimeout(batchTimeout);\n            batchTimeout = null;\n        }\n        pendingUpdates = [];\n        timelineState.value = timelineStateDefault;\n    }\n};\n// src/web/views/widget/components-tree/breadcrumb.tsx\n\n// src/web/views/widget/components-tree/state.ts\n\nvar searchState = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)({\n    query: \"\",\n    matches: [],\n    currentMatchIndex: -1\n});\nvar signalSkipTreeUpdate = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n// src/web/views/widget/components-tree/breadcrumb.tsx\n\nvar Breadcrumb = (param)=>{\n    let { selectedElement } = param;\n    _s27();\n    const refContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refPaths = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const [path, setPath] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [areAllItemsVisible, setAreAllItemsVisible] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Breadcrumb.useEffect8\": ()=>{\n            if (!selectedElement) return;\n            const ancestors = getInspectableAncestors(selectedElement);\n            setPath(ancestors);\n        }\n    }[\"Breadcrumb.useEffect8\"], [\n        selectedElement\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Breadcrumb.useEffect8\": ()=>{\n            let timeoutId;\n            const checkVisibility = {\n                \"Breadcrumb.useEffect8.checkVisibility\": ()=>{\n                    clearTimeout(timeoutId);\n                    timeoutId = setTimeout({\n                        \"Breadcrumb.useEffect8.checkVisibility\": ()=>{\n                            if (refContainer.current && refPaths.current) {\n                                const isFullyVisible = refContainer.current.offsetHeight >= refPaths.current.offsetHeight;\n                                setAreAllItemsVisible(isFullyVisible);\n                            }\n                        }\n                    }[\"Breadcrumb.useEffect8.checkVisibility\"], 16);\n                }\n            }[\"Breadcrumb.useEffect8.checkVisibility\"];\n            const resizeObserver = new ResizeObserver(checkVisibility);\n            if (refContainer.current && refPaths.current) {\n                resizeObserver.observe(refPaths.current);\n                checkVisibility();\n            }\n            return ({\n                \"Breadcrumb.useEffect8\": ()=>resizeObserver.disconnect()\n            })[\"Breadcrumb.useEffect8\"];\n        }\n    }[\"Breadcrumb.useEffect8\"], []);\n    const handleElementClick = (element)=>{\n        const { parentCompositeFiber } = getCompositeFiberFromElement(element);\n        if (!parentCompositeFiber) return;\n        signalSkipTreeUpdate.value = false;\n        Store.inspectState.value = {\n            kind: \"focused\",\n            focusedDomElement: element,\n            fiber: parentCompositeFiber\n        };\n    };\n    const firstItem = path[0];\n    const restItems = path.slice(1).reverse();\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        ref: refContainer,\n        className: cn(\"flex items-center gap-x-1\", \"px-2\", \"text-xs text-neutral-400\", \"border-b border-white/10\", \"overflow-hidden whitespace-nowrap\"),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                className: \"hover:text-neutral-300 transition-colors\",\n                onClick: ()=>{\n                    handleElementClick(firstItem.element);\n                },\n                children: firstItem === null || firstItem === void 0 ? void 0 : firstItem.name\n            }),\n            !areAllItemsVisible && restItems.length > 1 ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"text-sm w-2.5 h-2.5 flex items-center justify-center\",\n                children: \"\\u2026\"\n            }) : restItems.length > 0 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"w-2.5 h-2.5 flex items-center justify-center text-neutral-400\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-chevron-right\",\n                    size: 10\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"h-7 overflow-hidden\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    ref: refPaths,\n                    className: cn(\"flex-1 flex flex-wrap flex-row-reverse justify-end gap-x-1\"),\n                    children: restItems.map((item, index)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn(\"flex-1 flex items-center gap-x-1\", \"flex-[0_0_auto]\", \"h-7\", \"hover:text-neutral-300 transition-colors\", \"overflow-hidden\"),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    type: \"button\",\n                                    title: item.name,\n                                    style: {\n                                        maxWidth: \"160px\"\n                                    },\n                                    className: \"truncate\",\n                                    onClick: ()=>{\n                                        handleElementClick(item.element);\n                                    },\n                                    children: item.name\n                                }),\n                                index > 0 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: \"w-2.5 h-2.5 flex items-center justify-center text-neutral-400\",\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                        name: \"icon-chevron-right\",\n                                        size: 10\n                                    })\n                                })\n                            ]\n                        }, \"\".concat(item.name, \"-\").concat(index)))\n                })\n            })\n        ]\n    });\n};\n_s27(Breadcrumb, \"FQUzDl1bdCwlPPmz26EufStfgrA=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c35 = Breadcrumb;\n// src/web/views/widget/components-tree/index.tsx\n\nvar flattenTree = function(nodes) {\n    let depth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, parentPath = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    return nodes.reduce((acc, node, index)=>{\n        var _node_children;\n        const nodePath = node.element ? getFiberPath(node.fiber) : \"\".concat(parentPath, \"-\").concat(index);\n        const flatNode = {\n            ...node,\n            depth,\n            nodeId: nodePath,\n            parentId: parentPath,\n            fiber: node.fiber\n        };\n        acc.push(flatNode);\n        if ((_node_children = node.children) === null || _node_children === void 0 ? void 0 : _node_children.length) {\n            acc.push(...flattenTree(node.children, depth + 1, nodePath));\n        }\n        return acc;\n    }, []);\n};\nvar getMaxDepth = (nodes)=>{\n    return nodes.reduce((max, node)=>Math.max(max, node.depth), 0);\n};\nvar calculateIndentSize = (containerWidth, maxDepth)=>{\n    const MIN_INDENT = 0;\n    const MAX_INDENT = 24;\n    const MIN_TOTAL_INDENT = 24;\n    if (maxDepth <= 0) return MAX_INDENT;\n    const availableSpace = Math.max(0, containerWidth - MIN_CONTAINER_WIDTH);\n    if (availableSpace < MIN_TOTAL_INDENT) return MIN_INDENT;\n    const targetTotalIndent = Math.min(availableSpace * 0.3, maxDepth * MAX_INDENT);\n    const baseIndent = targetTotalIndent / maxDepth;\n    return Math.max(MIN_INDENT, Math.min(MAX_INDENT, baseIndent));\n};\nvar VALID_TYPES = [\n    \"memo\",\n    \"forwardRef\",\n    \"lazy\",\n    \"suspense\"\n];\nvar parseTypeSearch = (query)=>{\n    const typeMatch = query.match(/\\[(.*?)\\]/);\n    if (!typeMatch) return null;\n    const typeSearches = [];\n    const parts = typeMatch[1].split(\",\");\n    for (const part of parts){\n        const trimmed = part.trim().toLowerCase();\n        if (trimmed) typeSearches.push(trimmed);\n    }\n    return typeSearches;\n};\nvar isValidTypeSearch = (typeSearches)=>{\n    if (typeSearches.length === 0) return false;\n    for (const search of typeSearches){\n        let isValid = false;\n        for (const validType of VALID_TYPES){\n            if (validType.toLowerCase().includes(search)) {\n                isValid = true;\n                break;\n            }\n        }\n        if (!isValid) return false;\n    }\n    return true;\n};\nvar matchesTypeSearch = (typeSearches, wrapperTypes)=>{\n    if (typeSearches.length === 0) return true;\n    if (!wrapperTypes.length) return false;\n    for (const search of typeSearches){\n        let foundMatch = false;\n        for (const wrapper of wrapperTypes){\n            if (wrapper.type.toLowerCase().includes(search)) {\n                foundMatch = true;\n                break;\n            }\n        }\n        if (!foundMatch) return false;\n    }\n    return true;\n};\nvar useNodeHighlighting = (node, searchValue)=>{\n    _s28();\n    return (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"useNodeHighlighting.useMemo2\": ()=>{\n            const { query, matches } = searchValue;\n            const isMatch = matches.some({\n                \"useNodeHighlighting.useMemo2.isMatch\": (match)=>match.nodeId === node.nodeId\n            }[\"useNodeHighlighting.useMemo2.isMatch\"]);\n            const typeSearches = parseTypeSearch(query) || [];\n            const searchQuery = query ? query.replace(/\\[.*?\\]/, \"\").trim() : \"\";\n            if (!query || !isMatch) {\n                return {\n                    highlightedText: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"truncate\",\n                        children: node.label\n                    }),\n                    typeHighlight: false\n                };\n            }\n            let matchesType = true;\n            if (typeSearches.length > 0) {\n                if (!node.fiber) {\n                    matchesType = false;\n                } else {\n                    const { wrapperTypes } = getExtendedDisplayName(node.fiber);\n                    matchesType = matchesTypeSearch(typeSearches, wrapperTypes);\n                }\n            }\n            let textContent = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"truncate\",\n                children: node.label\n            });\n            if (searchQuery) {\n                try {\n                    if (searchQuery.startsWith(\"/\") && searchQuery.endsWith(\"/\")) {\n                        const pattern = searchQuery.slice(1, -1);\n                        const regex = new RegExp(\"(\".concat(pattern, \")\"), \"i\");\n                        const parts = node.label.split(regex);\n                        textContent = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"tree-node-search-highlight\",\n                            children: parts.map({\n                                \"useNodeHighlighting.useMemo2\": (part, index)=>regex.test(part) ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: cn(\"regex\", {\n                                            start: regex.test(part) && index === 0,\n                                            middle: regex.test(part) && index % 2 === 1,\n                                            end: regex.test(part) && index === parts.length - 1,\n                                            \"!ml-0\": index === 1\n                                        }),\n                                        children: part\n                                    }, \"\".concat(node.nodeId, \"-\").concat(part)) : part\n                            }[\"useNodeHighlighting.useMemo2\"])\n                        });\n                    } else {\n                        const lowerLabel = node.label.toLowerCase();\n                        const lowerQuery = searchQuery.toLowerCase();\n                        const index = lowerLabel.indexOf(lowerQuery);\n                        if (index >= 0) {\n                            textContent = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                className: \"tree-node-search-highlight\",\n                                children: [\n                                    node.label.slice(0, index),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"single\",\n                                        children: node.label.slice(index, index + searchQuery.length)\n                                    }),\n                                    node.label.slice(index + searchQuery.length)\n                                ]\n                            });\n                        }\n                    }\n                } catch (e) {}\n            }\n            return {\n                highlightedText: textContent,\n                typeHighlight: matchesType && typeSearches.length > 0\n            };\n        }\n    }[\"useNodeHighlighting.useMemo2\"], [\n        node.label,\n        node.nodeId,\n        node.fiber,\n        searchValue\n    ]);\n};\n_s28(useNodeHighlighting, \"EE8w1JogrvaDwFgR/slUv4vJJBs=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo\n    ];\n});\nvar TreeNodeItem = (param)=>{\n    let { node, onElementClick, collapsedNodes, onToggle, searchValue } = param;\n    _s29();\n    const hasChildren = node.children && node.children.length > 0;\n    const isCollapsed = collapsedNodes.has(node.nodeId);\n    const handleClick = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"TreeNodeItem.useCallback2[handleClick]\": ()=>{\n            if (node.element) {\n                onElementClick === null || onElementClick === void 0 ? void 0 : onElementClick(node.element);\n            }\n        }\n    }[\"TreeNodeItem.useCallback2[handleClick]\"], [\n        node.element,\n        onElementClick\n    ]);\n    const handleToggle = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"TreeNodeItem.useCallback2[handleToggle]\": ()=>{\n            if (hasChildren) {\n                onToggle(node.nodeId);\n            }\n        }\n    }[\"TreeNodeItem.useCallback2[handleToggle]\"], [\n        hasChildren,\n        node.nodeId,\n        onToggle\n    ]);\n    const { highlightedText, typeHighlight } = useNodeHighlighting(node, searchValue);\n    const componentTypes = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"TreeNodeItem.useMemo2[componentTypes]\": ()=>{\n            if (!node.fiber) return null;\n            const { wrapperTypes } = getExtendedDisplayName(node.fiber);\n            const firstWrapperType = wrapperTypes[0];\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                className: cn(\"flex items-center gap-x-1\", \"text-[10px] text-neutral-400 tracking-wide\", \"overflow-hidden\"),\n                children: [\n                    firstWrapperType && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                title: firstWrapperType === null || firstWrapperType === void 0 ? void 0 : firstWrapperType.title,\n                                className: cn(\"rounded py-[1px] px-1\", \"bg-neutral-700 text-neutral-300\", \"truncate\", {\n                                    \"bg-[#8e61e3] text-white\": firstWrapperType.type === \"memo\",\n                                    \"bg-yellow-300 text-black\": typeHighlight\n                                }),\n                                children: firstWrapperType.type\n                            }, firstWrapperType.type),\n                            firstWrapperType.compiler && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                className: \"text-yellow-300 ml-1\",\n                                children: \"\\u2728\"\n                            })\n                        ]\n                    }),\n                    wrapperTypes.length > 1 && \"\\xd7\".concat(wrapperTypes.length)\n                ]\n            });\n        }\n    }[\"TreeNodeItem.useMemo2[componentTypes]\"], [\n        node.fiber,\n        typeHighlight\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        type: \"button\",\n        title: node.title,\n        className: cn(\"flex items-center gap-x-1\", \"px-2\", \"w-full h-7\", \"text-left\", \"rounded\", \"cursor-pointer select-none\"),\n        onClick: handleClick,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                onClick: handleToggle,\n                className: cn(\"w-4 h-4 flex items-center justify-center\", \"text-left\"),\n                children: hasChildren && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-chevron-right\",\n                    size: 12,\n                    className: cn(\"w-4 h-4\", \"transition-transform\", {\n                        \"rotate-90\": !isCollapsed\n                    })\n                })\n            }),\n            highlightedText,\n            componentTypes\n        ]\n    });\n};\n_s29(TreeNodeItem, \"JvrlCftOlDCacp8A/PbhP0n9t1Y=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        useNodeHighlighting,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo\n    ];\n});\n_c36 = TreeNodeItem;\nvar ComponentsTree = ()=>{\n    _s30();\n    const refContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refBreadcrumbContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refMainContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refSearchInputContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refSearchInput = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refSelectedElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refMaxTreeDepth = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const refIsHovering = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const refIsResizing = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const [flattenedNodes, setFlattenedNodes] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [collapsedNodes, setCollapsedNodes] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(/* @__PURE__ */ new Set());\n    const [selectedIndex, setSelectedIndex] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [searchValue, setSearchValue] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(searchState.value);\n    const visibleNodes = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"ComponentsTree.useMemo2[visibleNodes]\": ()=>{\n            const visible = [];\n            const nodes = flattenedNodes;\n            const nodeMap = new Map(nodes.map({\n                \"ComponentsTree.useMemo2[visibleNodes]\": (node)=>[\n                        node.nodeId,\n                        node\n                    ]\n            }[\"ComponentsTree.useMemo2[visibleNodes]\"]));\n            for (const node of nodes){\n                let isVisible = true;\n                let currentNode = node;\n                while(currentNode.parentId){\n                    const parent = nodeMap.get(currentNode.parentId);\n                    if (!parent) break;\n                    if (collapsedNodes.has(parent.nodeId)) {\n                        isVisible = false;\n                        break;\n                    }\n                    currentNode = parent;\n                }\n                if (isVisible) {\n                    visible.push(node);\n                }\n            }\n            return visible;\n        }\n    }[\"ComponentsTree.useMemo2[visibleNodes]\"], [\n        collapsedNodes,\n        flattenedNodes\n    ]);\n    const ITEM_HEIGHT = 28;\n    const { virtualItems, totalSize } = useVirtualList({\n        count: visibleNodes.length,\n        getScrollElement: {\n            \"ComponentsTree.useVirtualList\": ()=>refContainer.current\n        }[\"ComponentsTree.useVirtualList\"],\n        estimateSize: {\n            \"ComponentsTree.useVirtualList\": ()=>ITEM_HEIGHT\n        }[\"ComponentsTree.useVirtualList\"],\n        overscan: 5\n    });\n    const handleElementClick = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleElementClick]\": (element)=>{\n            var _refSearchInput_current;\n            refIsHovering.current = true;\n            (_refSearchInput_current = refSearchInput.current) === null || _refSearchInput_current === void 0 ? void 0 : _refSearchInput_current.blur();\n            signalSkipTreeUpdate.value = true;\n            const { parentCompositeFiber } = getCompositeComponentFromElement(element);\n            if (!parentCompositeFiber) return;\n            Store.inspectState.value = {\n                kind: \"focused\",\n                focusedDomElement: element,\n                fiber: parentCompositeFiber\n            };\n            const nodeIndex = visibleNodes.findIndex({\n                \"ComponentsTree.useCallback2[handleElementClick].nodeIndex\": (node)=>node.element === element\n            }[\"ComponentsTree.useCallback2[handleElementClick].nodeIndex\"]);\n            if (nodeIndex !== -1) {\n                setSelectedIndex(nodeIndex);\n                const itemTop = nodeIndex * ITEM_HEIGHT;\n                const container = refContainer.current;\n                if (container) {\n                    const containerHeight = container.clientHeight;\n                    const scrollTop = container.scrollTop;\n                    const breadcrumbHeight = 32;\n                    if (itemTop < scrollTop || itemTop + ITEM_HEIGHT > scrollTop + containerHeight) {\n                        container.scrollTo({\n                            top: Math.max(0, itemTop - (containerHeight - breadcrumbHeight) / 2),\n                            behavior: \"instant\"\n                        });\n                    }\n                }\n            }\n        }\n    }[\"ComponentsTree.useCallback2[handleElementClick]\"], [\n        visibleNodes\n    ]);\n    const handleToggle = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleToggle]\": (nodeId)=>{\n            setCollapsedNodes({\n                \"ComponentsTree.useCallback2[handleToggle]\": (prev)=>{\n                    const next = new Set(prev);\n                    if (next.has(nodeId)) {\n                        next.delete(nodeId);\n                    } else {\n                        next.add(nodeId);\n                    }\n                    return next;\n                }\n            }[\"ComponentsTree.useCallback2[handleToggle]\"]);\n        }\n    }[\"ComponentsTree.useCallback2[handleToggle]\"], []);\n    const handleOnChangeSearch = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleOnChangeSearch]\": (query)=>{\n            var _refSearchInputContainer_current;\n            (_refSearchInputContainer_current = refSearchInputContainer.current) === null || _refSearchInputContainer_current === void 0 ? void 0 : _refSearchInputContainer_current.classList.remove(\"!border-red-500\");\n            const matches = [];\n            if (!query) {\n                searchState.value = {\n                    query,\n                    matches,\n                    currentMatchIndex: -1\n                };\n                return;\n            }\n            if (query.includes(\"[\") && !query.includes(\"]\")) {\n                if (query.length > query.indexOf(\"[\") + 1) {\n                    var _refSearchInputContainer_current1;\n                    (_refSearchInputContainer_current1 = refSearchInputContainer.current) === null || _refSearchInputContainer_current1 === void 0 ? void 0 : _refSearchInputContainer_current1.classList.add(\"!border-red-500\");\n                    return;\n                }\n            }\n            const typeSearches = parseTypeSearch(query) || [];\n            if (query.includes(\"[\")) {\n                if (!isValidTypeSearch(typeSearches)) {\n                    var _refSearchInputContainer_current2;\n                    (_refSearchInputContainer_current2 = refSearchInputContainer.current) === null || _refSearchInputContainer_current2 === void 0 ? void 0 : _refSearchInputContainer_current2.classList.add(\"!border-red-500\");\n                    return;\n                }\n            }\n            const searchQuery = query.replace(/\\[.*?\\]/, \"\").trim();\n            const isRegex = /^\\/.*\\/$/.test(searchQuery);\n            let matchesLabel = {\n                \"ComponentsTree.useCallback2[handleOnChangeSearch].matchesLabel\": (_label)=>false\n            }[\"ComponentsTree.useCallback2[handleOnChangeSearch].matchesLabel\"];\n            if (searchQuery.startsWith(\"/\") && !isRegex) {\n                if (searchQuery.length > 1) {\n                    var _refSearchInputContainer_current3;\n                    (_refSearchInputContainer_current3 = refSearchInputContainer.current) === null || _refSearchInputContainer_current3 === void 0 ? void 0 : _refSearchInputContainer_current3.classList.add(\"!border-red-500\");\n                    return;\n                }\n            }\n            if (isRegex) {\n                try {\n                    const pattern = searchQuery.slice(1, -1);\n                    const regex = new RegExp(pattern, \"i\");\n                    matchesLabel = ({\n                        \"ComponentsTree.useCallback2[handleOnChangeSearch]\": (label)=>regex.test(label)\n                    })[\"ComponentsTree.useCallback2[handleOnChangeSearch]\"];\n                } catch (e) {\n                    var _refSearchInputContainer_current4;\n                    (_refSearchInputContainer_current4 = refSearchInputContainer.current) === null || _refSearchInputContainer_current4 === void 0 ? void 0 : _refSearchInputContainer_current4.classList.add(\"!border-red-500\");\n                    return;\n                }\n            } else if (searchQuery) {\n                const lowerQuery = searchQuery.toLowerCase();\n                matchesLabel = ({\n                    \"ComponentsTree.useCallback2[handleOnChangeSearch]\": (label)=>label.toLowerCase().includes(lowerQuery)\n                })[\"ComponentsTree.useCallback2[handleOnChangeSearch]\"];\n            }\n            for (const node of flattenedNodes){\n                let matchesSearch = true;\n                if (searchQuery) {\n                    matchesSearch = matchesLabel(node.label);\n                }\n                if (matchesSearch && typeSearches.length > 0) {\n                    if (!node.fiber) {\n                        matchesSearch = false;\n                    } else {\n                        const { wrapperTypes } = getExtendedDisplayName(node.fiber);\n                        matchesSearch = matchesTypeSearch(typeSearches, wrapperTypes);\n                    }\n                }\n                if (matchesSearch) {\n                    matches.push(node);\n                }\n            }\n            searchState.value = {\n                query,\n                matches,\n                currentMatchIndex: matches.length > 0 ? 0 : -1\n            };\n            if (matches.length > 0) {\n                const firstMatch = matches[0];\n                const nodeIndex = visibleNodes.findIndex({\n                    \"ComponentsTree.useCallback2[handleOnChangeSearch].nodeIndex\": (node)=>node.nodeId === firstMatch.nodeId\n                }[\"ComponentsTree.useCallback2[handleOnChangeSearch].nodeIndex\"]);\n                if (nodeIndex !== -1) {\n                    const itemTop = nodeIndex * ITEM_HEIGHT;\n                    const container = refContainer.current;\n                    if (container) {\n                        const containerHeight = container.clientHeight;\n                        container.scrollTo({\n                            top: Math.max(0, itemTop - containerHeight / 2),\n                            behavior: \"instant\"\n                        });\n                    }\n                }\n            }\n        }\n    }[\"ComponentsTree.useCallback2[handleOnChangeSearch]\"], [\n        flattenedNodes,\n        visibleNodes\n    ]);\n    const handleInputChange = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleInputChange]\": (e)=>{\n            const target = e.currentTarget;\n            if (!target) return;\n            handleOnChangeSearch(target.value);\n        }\n    }[\"ComponentsTree.useCallback2[handleInputChange]\"], [\n        handleOnChangeSearch\n    ]);\n    const navigateSearch = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[navigateSearch]\": (direction)=>{\n            const { matches, currentMatchIndex } = searchState.value;\n            if (matches.length === 0) return;\n            const newIndex = direction === \"next\" ? (currentMatchIndex + 1) % matches.length : (currentMatchIndex - 1 + matches.length) % matches.length;\n            searchState.value = {\n                ...searchState.value,\n                currentMatchIndex: newIndex\n            };\n            const currentMatch = matches[newIndex];\n            const nodeIndex = visibleNodes.findIndex({\n                \"ComponentsTree.useCallback2[navigateSearch].nodeIndex\": (node)=>node.nodeId === currentMatch.nodeId\n            }[\"ComponentsTree.useCallback2[navigateSearch].nodeIndex\"]);\n            if (nodeIndex !== -1) {\n                setSelectedIndex(nodeIndex);\n                const itemTop = nodeIndex * ITEM_HEIGHT;\n                const container = refContainer.current;\n                if (container) {\n                    const containerHeight = container.clientHeight;\n                    container.scrollTo({\n                        top: Math.max(0, itemTop - containerHeight / 2),\n                        behavior: \"instant\"\n                    });\n                }\n            }\n        }\n    }[\"ComponentsTree.useCallback2[navigateSearch]\"], [\n        visibleNodes\n    ]);\n    const updateContainerWidths = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[updateContainerWidths]\": (width)=>{\n            if (refMainContainer.current) {\n                refMainContainer.current.style.width = \"\".concat(width, \"px\");\n            }\n            if (refContainer.current) {\n                refContainer.current.style.width = \"\".concat(width, \"px\");\n                const indentSize = calculateIndentSize(width, refMaxTreeDepth.current);\n                refContainer.current.style.setProperty(\"--indentation-size\", \"\".concat(indentSize, \"px\"));\n            }\n        }\n    }[\"ComponentsTree.useCallback2[updateContainerWidths]\"], []);\n    const handleResize = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleResize]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            if (!refContainer.current) return;\n            refContainer.current.style.setProperty(\"pointer-events\", \"none\");\n            refIsResizing.current = true;\n            const startX = e.clientX;\n            const startWidth = refContainer.current.offsetWidth;\n            const parentWidth = signalWidget.value.dimensions.width;\n            const maxWidth = Math.floor(parentWidth - MIN_SIZE.width / 2);\n            const handleMouseMove = {\n                \"ComponentsTree.useCallback2[handleResize].handleMouseMove\": (e2)=>{\n                    const delta = startX - e2.clientX;\n                    const newWidth = Math.min(maxWidth, Math.max(MIN_CONTAINER_WIDTH, startWidth + delta));\n                    updateContainerWidths(newWidth);\n                }\n            }[\"ComponentsTree.useCallback2[handleResize].handleMouseMove\"];\n            const handleMouseUp = {\n                \"ComponentsTree.useCallback2[handleResize].handleMouseUp\": ()=>{\n                    if (!refContainer.current) return;\n                    refContainer.current.style.removeProperty(\"pointer-events\");\n                    document.removeEventListener(\"mousemove\", handleMouseMove);\n                    document.removeEventListener(\"mouseup\", handleMouseUp);\n                    signalWidget.value = {\n                        ...signalWidget.value,\n                        componentsTree: {\n                            ...signalWidget.value.componentsTree,\n                            width: refContainer.current.offsetWidth\n                        }\n                    };\n                    saveLocalStorage(LOCALSTORAGE_KEY, signalWidget.value);\n                    refIsResizing.current = false;\n                }\n            }[\"ComponentsTree.useCallback2[handleResize].handleMouseUp\"];\n            document.addEventListener(\"mousemove\", handleMouseMove);\n            document.addEventListener(\"mouseup\", handleMouseUp);\n        }\n    }[\"ComponentsTree.useCallback2[handleResize]\"], []);\n    const onMouseLeave = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[onMouseLeave]\": ()=>{\n            refIsHovering.current = false;\n        }\n    }[\"ComponentsTree.useCallback2[onMouseLeave]\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ComponentsTree.useEffect9\": ()=>{\n            const buildTreeFromElements = {\n                \"ComponentsTree.useEffect9.buildTreeFromElements\": (elements)=>{\n                    const nodeMap = /* @__PURE__ */ new Map();\n                    const rootNodes = [];\n                    for (const { element, name, fiber } of elements){\n                        if (!element) continue;\n                        let title = name;\n                        const { name: componentName, wrappers } = getExtendedDisplayName(fiber);\n                        if (componentName) {\n                            if (wrappers.length > 0) {\n                                title = \"\".concat(wrappers.join(\"(\"), \"(\").concat(componentName, \")\").concat(\")\".repeat(wrappers.length));\n                            } else {\n                                title = componentName;\n                            }\n                        }\n                        nodeMap.set(element, {\n                            label: componentName || name,\n                            title,\n                            children: [],\n                            element,\n                            fiber\n                        });\n                    }\n                    for (const { element, depth } of elements){\n                        if (!element) continue;\n                        const node = nodeMap.get(element);\n                        if (!node) continue;\n                        if (depth === 0) {\n                            rootNodes.push(node);\n                        } else {\n                            let parent = element.parentElement;\n                            while(parent){\n                                const parentNode = nodeMap.get(parent);\n                                if (parentNode) {\n                                    parentNode.children = parentNode.children || [];\n                                    parentNode.children.push(node);\n                                    break;\n                                }\n                                parent = parent.parentElement;\n                            }\n                        }\n                    }\n                    return rootNodes;\n                }\n            }[\"ComponentsTree.useEffect9.buildTreeFromElements\"];\n            const updateTree = {\n                \"ComponentsTree.useEffect9.updateTree\": ()=>{\n                    const element = refSelectedElement.current;\n                    if (!element) return;\n                    const inspectableElements = getInspectableElements(element);\n                    const tree = buildTreeFromElements(inspectableElements);\n                    if (tree.length > 0) {\n                        const flattened = flattenTree(tree);\n                        const newMaxDepth = getMaxDepth(flattened);\n                        refMaxTreeDepth.current = newMaxDepth;\n                        updateContainerWidths(signalWidget.value.componentsTree.width);\n                        setFlattenedNodes(flattened);\n                    }\n                }\n            }[\"ComponentsTree.useEffect9.updateTree\"];\n            const unsubscribeStore = Store.inspectState.subscribe({\n                \"ComponentsTree.useEffect9.unsubscribeStore\": (state2)=>{\n                    if (state2.kind === \"focused\") {\n                        if (signalSkipTreeUpdate.value) {\n                            return;\n                        }\n                        handleOnChangeSearch(\"\");\n                        setSelectedIndex(0);\n                        refSelectedElement.current = state2.focusedDomElement;\n                        updateTree();\n                    }\n                }\n            }[\"ComponentsTree.useEffect9.unsubscribeStore\"]);\n            let rafId = 0;\n            const unsubscribeUpdates = inspectorUpdateSignal.subscribe({\n                \"ComponentsTree.useEffect9.unsubscribeUpdates\": ()=>{\n                    if (Store.inspectState.value.kind === \"focused\") {\n                        cancelAnimationFrame(rafId);\n                        if (refIsResizing.current) return;\n                        rafId = requestAnimationFrame({\n                            \"ComponentsTree.useEffect9.unsubscribeUpdates\": ()=>{\n                                signalSkipTreeUpdate.value = false;\n                                updateTree();\n                            }\n                        }[\"ComponentsTree.useEffect9.unsubscribeUpdates\"]);\n                    }\n                }\n            }[\"ComponentsTree.useEffect9.unsubscribeUpdates\"]);\n            return ({\n                \"ComponentsTree.useEffect9\": ()=>{\n                    unsubscribeStore();\n                    unsubscribeUpdates();\n                    searchState.value = {\n                        query: \"\",\n                        matches: [],\n                        currentMatchIndex: -1\n                    };\n                }\n            })[\"ComponentsTree.useEffect9\"];\n        }\n    }[\"ComponentsTree.useEffect9\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ComponentsTree.useEffect9\": ()=>{\n            const handleKeyDown = {\n                \"ComponentsTree.useEffect9.handleKeyDown\": (e)=>{\n                    if (!refIsHovering.current) return;\n                    switch(e.key){\n                        case \"ArrowUp\":\n                            {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                if (selectedIndex > 0) {\n                                    const currentNode = visibleNodes[selectedIndex - 1];\n                                    if (currentNode === null || currentNode === void 0 ? void 0 : currentNode.element) {\n                                        handleElementClick(currentNode.element);\n                                    }\n                                }\n                                return;\n                            }\n                        case \"ArrowDown\":\n                            {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                if (selectedIndex < visibleNodes.length - 1) {\n                                    const currentNode = visibleNodes[selectedIndex + 1];\n                                    if (currentNode === null || currentNode === void 0 ? void 0 : currentNode.element) {\n                                        handleElementClick(currentNode.element);\n                                    }\n                                }\n                                return;\n                            }\n                        case \"ArrowLeft\":\n                            {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                const currentNode = visibleNodes[selectedIndex];\n                                if (currentNode === null || currentNode === void 0 ? void 0 : currentNode.nodeId) {\n                                    handleToggle(currentNode.nodeId);\n                                }\n                                return;\n                            }\n                        case \"ArrowRight\":\n                            {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                const currentNode = visibleNodes[selectedIndex];\n                                if (currentNode === null || currentNode === void 0 ? void 0 : currentNode.nodeId) {\n                                    handleToggle(currentNode.nodeId);\n                                }\n                                return;\n                            }\n                    }\n                }\n            }[\"ComponentsTree.useEffect9.handleKeyDown\"];\n            document.addEventListener(\"keydown\", handleKeyDown);\n            return ({\n                \"ComponentsTree.useEffect9\": ()=>{\n                    document.removeEventListener(\"keydown\", handleKeyDown);\n                }\n            })[\"ComponentsTree.useEffect9\"];\n        }\n    }[\"ComponentsTree.useEffect9\"], [\n        selectedIndex,\n        visibleNodes,\n        handleElementClick,\n        handleToggle\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ComponentsTree.useEffect9\": ()=>{\n            return searchState.subscribe(setSearchValue);\n        }\n    }[\"ComponentsTree.useEffect9\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ComponentsTree.useEffect9\": ()=>{\n            const unsubscribe = signalWidget.subscribe({\n                \"ComponentsTree.useEffect9.unsubscribe\": (state2)=>{\n                    updateContainerWidths(state2.componentsTree.width);\n                }\n            }[\"ComponentsTree.useEffect9.unsubscribe\"]);\n            return ({\n                \"ComponentsTree.useEffect9\": ()=>{\n                    unsubscribe();\n                }\n            })[\"ComponentsTree.useEffect9\"];\n        }\n    }[\"ComponentsTree.useEffect9\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                onMouseDown: handleResize,\n                className: \"relative resize-v-line\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                        name: \"icon-ellipsis\",\n                        size: 18\n                    })\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                ref: refMainContainer,\n                className: \"flex flex-col h-full\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        ref: refBreadcrumbContainer,\n                        className: \"overflow-hidden\",\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Breadcrumb, {\n                                selectedElement: refSelectedElement.current\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"py-2 pr-2 border-b border-[#1e1e1e]\",\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    ref: refSearchInputContainer,\n                                    title: 'Search components by:\\n\\n• Name (e.g., \"Button\") — Case insensitive, matches any part\\n\\n• Regular Expression (e.g., \"/^Button/\") — Use forward slashes\\n\\n• Wrapper Type (e.g., \"[memo,forwardRef]\"):\\n   - Available types: memo, forwardRef, lazy, suspense\\n   - Matches any part of type name (e.g., \"mo\" matches \"memo\")\\n   - Use commas for multiple types\\n\\n• Combined Search:\\n   - Mix name/regex with type: \"button [for]\"\\n   - Will match components satisfying both conditions\\n\\n• Navigation:\\n   - Enter → Next match\\n   - Shift + Enter → Previous match\\n   - Cmd/Ctrl + Enter → Select and focus match (keeps search active)\\n',\n                                    className: cn(\"relative\", \"flex items-center gap-x-1 px-2\", \"rounded\", \"border border-transparent\", \"focus-within:border-[#454545]\", \"bg-[#1e1e1e] text-neutral-300\", \"transition-colors\", \"whitespace-nowrap\", \"overflow-hidden\"),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                            name: \"icon-search\",\n                                            size: 12,\n                                            className: \" text-neutral-500\"\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                            className: \"relative flex-1 h-7 overflow-hidden\",\n                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n                                                ref: refSearchInput,\n                                                type: \"text\",\n                                                value: searchState.value.query,\n                                                onClick: (e)=>{\n                                                    e.stopPropagation();\n                                                    e.currentTarget.focus();\n                                                },\n                                                onMouseDown: (e)=>{\n                                                    e.stopPropagation();\n                                                },\n                                                onKeyDown: (e)=>{\n                                                    if (e.key === \"Escape\") {\n                                                        e.currentTarget.blur();\n                                                    }\n                                                    if (searchState.value.matches.length) {\n                                                        if (e.key === \"Enter\" && e.shiftKey) {\n                                                            navigateSearch(\"prev\");\n                                                        } else if (e.key === \"Enter\") {\n                                                            if (e.metaKey || e.ctrlKey) {\n                                                                e.preventDefault();\n                                                                e.stopPropagation();\n                                                                handleElementClick(searchState.value.matches[searchState.value.currentMatchIndex].element);\n                                                                e.currentTarget.focus();\n                                                            } else {\n                                                                navigateSearch(\"next\");\n                                                            }\n                                                        }\n                                                    }\n                                                },\n                                                onChange: handleInputChange,\n                                                className: \"absolute inset-y-0 inset-x-1\",\n                                                placeholder: \"Component name, /regex/, or [type]\"\n                                            })\n                                        }),\n                                        searchState.value.query ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                            children: [\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                                    className: \"flex items-center gap-x-0.5 text-xs text-neutral-500\",\n                                                    children: [\n                                                        searchState.value.currentMatchIndex + 1,\n                                                        \"|\",\n                                                        searchState.value.matches.length\n                                                    ]\n                                                }),\n                                                !!searchState.value.matches.length && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                    children: [\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                                            type: \"button\",\n                                                            onClick: (e)=>{\n                                                                e.stopPropagation();\n                                                                navigateSearch(\"prev\");\n                                                            },\n                                                            className: \"button rounded w-4 h-4 flex items-center justify-center text-neutral-400 hover:text-neutral-300\",\n                                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                                                name: \"icon-chevron-right\",\n                                                                className: \"-rotate-90\",\n                                                                size: 12\n                                                            })\n                                                        }),\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                                            type: \"button\",\n                                                            onClick: (e)=>{\n                                                                e.stopPropagation();\n                                                                navigateSearch(\"next\");\n                                                            },\n                                                            className: \"button rounded w-4 h-4 flex items-center justify-center text-neutral-400 hover:text-neutral-300\",\n                                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                                                name: \"icon-chevron-right\",\n                                                                className: \"rotate-90\",\n                                                                size: 12\n                                                            })\n                                                        })\n                                                    ]\n                                                }),\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                                    type: \"button\",\n                                                    onClick: (e)=>{\n                                                        e.stopPropagation();\n                                                        handleOnChangeSearch(\"\");\n                                                    },\n                                                    className: \"button rounded w-4 h-4 flex items-center justify-center text-neutral-400 hover:text-neutral-300\",\n                                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                                        name: \"icon-close\",\n                                                        size: 12\n                                                    })\n                                                })\n                                            ]\n                                        }) : !!flattenedNodes.length && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: \"text-xs text-neutral-500\",\n                                            children: flattenedNodes.length\n                                        })\n                                    ]\n                                })\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"flex-1 overflow-hidden\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            ref: refContainer,\n                            onMouseLeave,\n                            className: \"h-full overflow-auto will-change-transform\",\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"relative w-full\",\n                                style: {\n                                    height: totalSize\n                                },\n                                children: virtualItems.map((virtualItem)=>{\n                                    const node = visibleNodes[virtualItem.index];\n                                    if (!node) return null;\n                                    const isSelected = Store.inspectState.value.kind === \"focused\" && node.element === Store.inspectState.value.focusedDomElement;\n                                    const isKeyboardSelected = virtualItem.index === selectedIndex;\n                                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                        className: cn(\"absolute left-0 w-full overflow-hidden\", \"text-neutral-400 hover:text-neutral-300\", \"bg-transparent hover:bg-[#5f3f9a]/20\", {\n                                            \"text-neutral-300 bg-[#5f3f9a]/40 hover:bg-[#5f3f9a]/40\": isSelected || isKeyboardSelected\n                                        }),\n                                        style: {\n                                            top: virtualItem.start,\n                                            height: ITEM_HEIGHT\n                                        },\n                                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                            className: \"w-full h-full\",\n                                            style: {\n                                                paddingLeft: \"calc(\".concat(node.depth, \" * var(--indentation-size))\")\n                                            },\n                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TreeNodeItem, {\n                                                node,\n                                                onElementClick: handleElementClick,\n                                                collapsedNodes,\n                                                onToggle: handleToggle,\n                                                searchValue\n                                            })\n                                        })\n                                    }, node.nodeId);\n                                })\n                            })\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n};\n_s30(ComponentsTree, \"TinZunmuC/Yt3n7I+7TuClSfa6g=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        useVirtualList,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c37 = ComponentsTree;\n// src/web/views/widget/header.tsx\n\n\nvar HeaderInspect = ()=>{\n    _s31();\n    const refReRenders = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refTiming = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const isSettingsOpen = signalIsSettingsOpen.value;\n    const [currentFiber, setCurrentFiber] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"HeaderInspect.useEffect10\": ()=>{\n            const unSubState = Store.inspectState.subscribe({\n                \"HeaderInspect.useEffect10.unSubState\": (state2)=>{\n                    if (state2.kind !== \"focused\") return;\n                    const fiber = state2.fiber;\n                    if (!fiber) return;\n                    setCurrentFiber(fiber);\n                }\n            }[\"HeaderInspect.useEffect10.unSubState\"]);\n            return unSubState;\n        }\n    }[\"HeaderInspect.useEffect10\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"HeaderInspect.useEffect10\": ()=>{\n            const unSubTimeline = timelineState.subscribe({\n                \"HeaderInspect.useEffect10.unSubTimeline\": (state2)=>{\n                    if (Store.inspectState.value.kind !== \"focused\") return;\n                    if (!refReRenders.current || !refTiming.current) return;\n                    const { totalUpdates, currentIndex, updates, isVisible, windowOffset } = state2;\n                    const reRenders = Math.max(0, totalUpdates - 1);\n                    const headerText = isVisible ? \"#\".concat(windowOffset + currentIndex, \" Re-render since selected\") : \"\".concat(reRenders === 0 ? \"No renders since selected\" : \"\".concat(reRenders, \" Re-renders since selected\"));\n                    let formattedTime;\n                    if (reRenders > 0 && currentIndex >= 0 && currentIndex < updates.length) {\n                        var _updates_currentIndex_fiberInfo, _updates_currentIndex;\n                        const time = (_updates_currentIndex = updates[currentIndex]) === null || _updates_currentIndex === void 0 ? void 0 : (_updates_currentIndex_fiberInfo = _updates_currentIndex.fiberInfo) === null || _updates_currentIndex_fiberInfo === void 0 ? void 0 : _updates_currentIndex_fiberInfo.selfTime;\n                        formattedTime = time > 0 ? time < 0.1 - Number.EPSILON ? \"< 0.1ms\" : \"\".concat(Number(time.toFixed(1)), \"ms\") : void 0;\n                    }\n                    refReRenders.current.dataset.text = \"\".concat(headerText).concat(reRenders > 0 && formattedTime ? \" \\u2022\" : \"\");\n                    if (formattedTime) {\n                        refTiming.current.dataset.text = formattedTime;\n                    }\n                }\n            }[\"HeaderInspect.useEffect10.unSubTimeline\"]);\n            return unSubTimeline;\n        }\n    }[\"HeaderInspect.useEffect10\"], []);\n    const componentName = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"HeaderInspect.useMemo3[componentName]\": ()=>{\n            if (!currentFiber) return null;\n            const { name, wrappers, wrapperTypes } = getExtendedDisplayName(currentFiber);\n            const title = wrappers.length ? \"\".concat(wrappers.join(\"(\"), \"(\").concat(name, \")\").concat(\")\".repeat(wrappers.length)) : name !== null && name !== void 0 ? name : \"\";\n            const firstWrapperType = wrapperTypes[0];\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                title,\n                className: \"flex items-center gap-x-1\",\n                children: [\n                    name !== null && name !== void 0 ? name : \"Unknown\",\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        title: firstWrapperType === null || firstWrapperType === void 0 ? void 0 : firstWrapperType.title,\n                        className: \"flex items-center gap-x-1 text-[10px] text-purple-400\",\n                        children: !!firstWrapperType && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn(\"rounded py-[1px] px-1\", \"truncate\", {\n                                        \"bg-purple-800 text-neutral-400\": firstWrapperType.compiler,\n                                        \"bg-neutral-700 text-neutral-300\": !firstWrapperType.compiler,\n                                        \"bg-[#5f3f9a] text-white\": firstWrapperType.type === \"memo\"\n                                    }),\n                                    children: firstWrapperType.type\n                                }, firstWrapperType.type),\n                                firstWrapperType.compiler && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: \"text-yellow-300\",\n                                    children: \"\\u2728\"\n                                })\n                            ]\n                        })\n                    }),\n                    wrapperTypes.length > 1 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                        className: \"text-[10px] text-neutral-400\",\n                        children: [\n                            \"\\xD7\",\n                            wrapperTypes.length - 1\n                        ]\n                    })\n                ]\n            });\n        }\n    }[\"HeaderInspect.useMemo3[componentName]\"], [\n        currentFiber\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(\"absolute inset-0 flex items-center gap-x-2\", \"translate-y-0\", \"transition-transform duration-300\", {\n            \"-translate-y-[200%]\": isSettingsOpen\n        }),\n        children: [\n            componentName,\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"flex items-center gap-x-2 mr-auto text-xs text-[#888]\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                    ref: refReRenders,\n                    className: \"with-data-text cursor-pointer !overflow-visible\",\n                    title: \"Click to toggle between rerenders and total renders\"\n                })\n            })\n        ]\n    });\n};\n_s31(HeaderInspect, \"xodOfgSwqm05N5mJwTPYOV1wjK0=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo\n    ];\n});\n_c38 = HeaderInspect;\nvar HeaderSettings = ()=>{\n    const isSettingsOpen = signalIsSettingsOpen.value;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n        \"data-text\": \"Settings\",\n        className: cn(\"absolute inset-0 flex items-center\", \"with-data-text\", \"-translate-y-[200%]\", \"transition-transform duration-300\", {\n            \"translate-y-0\": isSettingsOpen\n        })\n    });\n};\n_c39 = HeaderSettings;\nvar Header = ()=>{\n    const handleClose = ()=>{\n        if (signalIsSettingsOpen.value) {\n            signalIsSettingsOpen.value = false;\n            return;\n        }\n        Store.inspectState.value = {\n            kind: \"inspect-off\"\n        };\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"react-scan-header\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"relative flex-1 h-full\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(HeaderSettings, {}),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(HeaderInspect, {})\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                title: \"Close\",\n                className: \"react-scan-close-button\",\n                onClick: handleClose,\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-close\"\n                })\n            })\n        ]\n    });\n};\n_c40 = Header;\n// src/web/views/widget/helpers.ts\nvar WindowDimensions = class {\n    rightEdge(width) {\n        return this.width - width - SAFE_AREA;\n    }\n    bottomEdge(height) {\n        return this.height - height - SAFE_AREA;\n    }\n    isFullWidth(width) {\n        return width >= this.maxWidth;\n    }\n    isFullHeight(height) {\n        return height >= this.maxHeight;\n    }\n    constructor(width, height){\n        this.width = width;\n        this.height = height;\n        this.maxWidth = width - SAFE_AREA * 2;\n        this.maxHeight = height - SAFE_AREA * 2;\n    }\n};\nvar cachedWindowDimensions;\nvar getWindowDimensions = ()=>{\n    const currentWidth = window.innerWidth;\n    const currentHeight = window.innerHeight;\n    if (cachedWindowDimensions && cachedWindowDimensions.width === currentWidth && cachedWindowDimensions.height === currentHeight) {\n        return cachedWindowDimensions;\n    }\n    cachedWindowDimensions = new WindowDimensions(currentWidth, currentHeight);\n    return cachedWindowDimensions;\n};\nvar getOppositeCorner = (position, currentCorner, isFullScreen, isFullWidth, isFullHeight)=>{\n    if (isFullScreen) {\n        if (position === \"top-left\") return \"bottom-right\";\n        if (position === \"top-right\") return \"bottom-left\";\n        if (position === \"bottom-left\") return \"top-right\";\n        if (position === \"bottom-right\") return \"top-left\";\n        const [vertical, horizontal] = currentCorner.split(\"-\");\n        if (position === \"left\") return \"\".concat(vertical, \"-right\");\n        if (position === \"right\") return \"\".concat(vertical, \"-left\");\n        if (position === \"top\") return \"bottom-\".concat(horizontal);\n        if (position === \"bottom\") return \"top-\".concat(horizontal);\n    }\n    if (isFullWidth) {\n        if (position === \"left\") return \"\".concat(currentCorner.split(\"-\")[0], \"-right\");\n        if (position === \"right\") return \"\".concat(currentCorner.split(\"-\")[0], \"-left\");\n    }\n    if (isFullHeight) {\n        if (position === \"top\") return \"bottom-\".concat(currentCorner.split(\"-\")[1]);\n        if (position === \"bottom\") return \"top-\".concat(currentCorner.split(\"-\")[1]);\n    }\n    return currentCorner;\n};\nvar calculatePosition = (corner, width, height)=>{\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    const isMinimized = width === MIN_SIZE.width;\n    const effectiveWidth = isMinimized ? width : Math.min(width, windowWidth - SAFE_AREA * 2);\n    const effectiveHeight = isMinimized ? height : Math.min(height, windowHeight - SAFE_AREA * 2);\n    let x;\n    let y;\n    switch(corner){\n        case \"top-right\":\n            x = windowWidth - effectiveWidth - SAFE_AREA;\n            y = SAFE_AREA;\n            break;\n        case \"bottom-right\":\n            x = windowWidth - effectiveWidth - SAFE_AREA;\n            y = windowHeight - effectiveHeight - SAFE_AREA;\n            break;\n        case \"bottom-left\":\n            x = SAFE_AREA;\n            y = windowHeight - effectiveHeight - SAFE_AREA;\n            break;\n        case \"top-left\":\n            x = SAFE_AREA;\n            y = SAFE_AREA;\n            break;\n        default:\n            x = SAFE_AREA;\n            y = SAFE_AREA;\n            break;\n    }\n    if (isMinimized) {\n        x = Math.max(SAFE_AREA, Math.min(x, windowWidth - effectiveWidth - SAFE_AREA));\n        y = Math.max(SAFE_AREA, Math.min(y, windowHeight - effectiveHeight - SAFE_AREA));\n    }\n    return {\n        x,\n        y\n    };\n};\nvar positionMatchesCorner = (position, corner)=>{\n    const [vertical, horizontal] = corner.split(\"-\");\n    return position !== vertical && position !== horizontal;\n};\nvar getHandleVisibility = (position, corner, isFullWidth, isFullHeight)=>{\n    if (isFullWidth && isFullHeight) {\n        return true;\n    }\n    if (!isFullWidth && !isFullHeight) {\n        return positionMatchesCorner(position, corner);\n    }\n    if (isFullWidth) {\n        return position !== corner.split(\"-\")[0];\n    }\n    if (isFullHeight) {\n        return position !== corner.split(\"-\")[1];\n    }\n    return false;\n};\nvar calculateBoundedSize = (currentSize, delta, isWidth)=>{\n    const min = isWidth ? MIN_SIZE.width : MIN_SIZE.initialHeight;\n    const max = isWidth ? getWindowDimensions().maxWidth : getWindowDimensions().maxHeight;\n    const newSize = currentSize + delta;\n    return Math.min(Math.max(min, newSize), max);\n};\nvar calculateNewSizeAndPosition = (position, initialSize, initialPosition, deltaX, deltaY)=>{\n    const maxWidth = window.innerWidth - SAFE_AREA * 2;\n    const maxHeight = window.innerHeight - SAFE_AREA * 2;\n    let newWidth = initialSize.width;\n    let newHeight = initialSize.height;\n    let newX = initialPosition.x;\n    let newY = initialPosition.y;\n    if (position.includes(\"right\")) {\n        const availableWidth = window.innerWidth - initialPosition.x - SAFE_AREA;\n        const proposedWidth = Math.min(initialSize.width + deltaX, availableWidth);\n        newWidth = Math.min(maxWidth, Math.max(MIN_SIZE.width, proposedWidth));\n    }\n    if (position.includes(\"left\")) {\n        const availableWidth = initialPosition.x + initialSize.width - SAFE_AREA;\n        const proposedWidth = Math.min(initialSize.width - deltaX, availableWidth);\n        newWidth = Math.min(maxWidth, Math.max(MIN_SIZE.width, proposedWidth));\n        newX = initialPosition.x - (newWidth - initialSize.width);\n    }\n    if (position.includes(\"bottom\")) {\n        const availableHeight = window.innerHeight - initialPosition.y - SAFE_AREA;\n        const proposedHeight = Math.min(initialSize.height + deltaY, availableHeight);\n        newHeight = Math.min(maxHeight, Math.max(MIN_SIZE.initialHeight, proposedHeight));\n    }\n    if (position.includes(\"top\")) {\n        const availableHeight = initialPosition.y + initialSize.height - SAFE_AREA;\n        const proposedHeight = Math.min(initialSize.height - deltaY, availableHeight);\n        newHeight = Math.min(maxHeight, Math.max(MIN_SIZE.initialHeight, proposedHeight));\n        newY = initialPosition.y - (newHeight - initialSize.height);\n    }\n    newX = Math.max(SAFE_AREA, Math.min(newX, window.innerWidth - SAFE_AREA - newWidth));\n    newY = Math.max(SAFE_AREA, Math.min(newY, window.innerHeight - SAFE_AREA - newHeight));\n    return {\n        newSize: {\n            width: newWidth,\n            height: newHeight\n        },\n        newPosition: {\n            x: newX,\n            y: newY\n        }\n    };\n};\nvar getClosestCorner = (position)=>{\n    const windowDims = getWindowDimensions();\n    const distances = {\n        \"top-left\": Math.hypot(position.x, position.y),\n        \"top-right\": Math.hypot(windowDims.maxWidth - position.x, position.y),\n        \"bottom-left\": Math.hypot(position.x, windowDims.maxHeight - position.y),\n        \"bottom-right\": Math.hypot(windowDims.maxWidth - position.x, windowDims.maxHeight - position.y)\n    };\n    let closest = \"top-left\";\n    for(const key in distances){\n        if (distances[key] < distances[closest]) {\n            closest = key;\n        }\n    }\n    return closest;\n};\nvar getBestCorner = function(mouseX, mouseY, initialMouseX, initialMouseY) {\n    let threshold = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 100;\n    const deltaX = initialMouseX !== void 0 ? mouseX - initialMouseX : 0;\n    const deltaY = initialMouseY !== void 0 ? mouseY - initialMouseY : 0;\n    const windowCenterX = window.innerWidth / 2;\n    const windowCenterY = window.innerHeight / 2;\n    const movingRight = deltaX > threshold;\n    const movingLeft = deltaX < -threshold;\n    const movingDown = deltaY > threshold;\n    const movingUp = deltaY < -threshold;\n    if (movingRight || movingLeft) {\n        const isBottom = mouseY > windowCenterY;\n        return movingRight ? isBottom ? \"bottom-right\" : \"top-right\" : isBottom ? \"bottom-left\" : \"top-left\";\n    }\n    if (movingDown || movingUp) {\n        const isRight = mouseX > windowCenterX;\n        return movingDown ? isRight ? \"bottom-right\" : \"bottom-left\" : isRight ? \"top-right\" : \"top-left\";\n    }\n    return mouseX > windowCenterX ? mouseY > windowCenterY ? \"bottom-right\" : \"top-right\" : mouseY > windowCenterY ? \"bottom-left\" : \"top-left\";\n};\n// src/web/views/widget/resize-handle.tsx\n\n\nvar ResizeHandle = (param)=>{\n    let { position } = param;\n    _s32();\n    const refContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const prevWidth = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const prevHeight = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const prevCorner = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ResizeHandle.useEffect11\": ()=>{\n            const container = refContainer.current;\n            if (!container) return;\n            const updateVisibility = {\n                \"ResizeHandle.useEffect11.updateVisibility\": (isFocused)=>{\n                    const isVisible = (isFocused || signalNotificationsOpen.value) && getHandleVisibility(position, signalWidget.value.corner, signalWidget.value.dimensions.isFullWidth, signalWidget.value.dimensions.isFullHeight);\n                    if (isVisible) {\n                        container.classList.remove(\"hidden\", \"pointer-events-none\", \"opacity-0\");\n                    } else {\n                        container.classList.add(\"hidden\", \"pointer-events-none\", \"opacity-0\");\n                    }\n                }\n            }[\"ResizeHandle.useEffect11.updateVisibility\"];\n            const unsubscribeSignalWidget = signalWidget.subscribe({\n                \"ResizeHandle.useEffect11.unsubscribeSignalWidget\": (state2)=>{\n                    if (prevWidth.current !== null && prevHeight.current !== null && prevCorner.current !== null && state2.dimensions.width === prevWidth.current && state2.dimensions.height === prevHeight.current && state2.corner === prevCorner.current) {\n                        return;\n                    }\n                    updateVisibility(Store.inspectState.value.kind === \"focused\");\n                    prevWidth.current = state2.dimensions.width;\n                    prevHeight.current = state2.dimensions.height;\n                    prevCorner.current = state2.corner;\n                }\n            }[\"ResizeHandle.useEffect11.unsubscribeSignalWidget\"]);\n            const unsubscribeStoreInspectState = Store.inspectState.subscribe({\n                \"ResizeHandle.useEffect11.unsubscribeStoreInspectState\": (state2)=>{\n                    updateVisibility(state2.kind === \"focused\");\n                }\n            }[\"ResizeHandle.useEffect11.unsubscribeStoreInspectState\"]);\n            const unsubscribeNotificationClicked = signalNotificationsOpen.subscribe({\n                \"ResizeHandle.useEffect11.unsubscribeNotificationClicked\": ()=>{\n                    updateVisibility(Store.inspectState.value.kind === \"focused\");\n                }\n            }[\"ResizeHandle.useEffect11.unsubscribeNotificationClicked\"]);\n            return ({\n                \"ResizeHandle.useEffect11\": ()=>{\n                    unsubscribeSignalWidget();\n                    unsubscribeStoreInspectState();\n                    unsubscribeNotificationClicked();\n                    prevWidth.current = null;\n                    prevHeight.current = null;\n                    prevCorner.current = null;\n                }\n            })[\"ResizeHandle.useEffect11\"];\n        }\n    }[\"ResizeHandle.useEffect11\"], []);\n    const handleResize = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ResizeHandle.useCallback3[handleResize]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            const widget = signalRefWidget.value;\n            if (!widget) return;\n            const containerStyle = widget.style;\n            const { dimensions } = signalWidget.value;\n            const initialX = e.clientX;\n            const initialY = e.clientY;\n            const initialWidth = dimensions.width;\n            const initialHeight = dimensions.height;\n            const initialPosition = dimensions.position;\n            signalWidget.value = {\n                ...signalWidget.value,\n                dimensions: {\n                    ...dimensions,\n                    isFullWidth: false,\n                    isFullHeight: false,\n                    width: initialWidth,\n                    height: initialHeight,\n                    position: initialPosition\n                }\n            };\n            let rafId = null;\n            const handleMouseMove = {\n                \"ResizeHandle.useCallback3[handleResize].handleMouseMove\": (e2)=>{\n                    if (rafId) return;\n                    containerStyle.transition = \"none\";\n                    rafId = requestAnimationFrame({\n                        \"ResizeHandle.useCallback3[handleResize].handleMouseMove\": ()=>{\n                            const { newSize, newPosition } = calculateNewSizeAndPosition(position, {\n                                width: initialWidth,\n                                height: initialHeight\n                            }, initialPosition, e2.clientX - initialX, e2.clientY - initialY);\n                            containerStyle.transform = \"translate3d(\".concat(newPosition.x, \"px, \").concat(newPosition.y, \"px, 0)\");\n                            containerStyle.width = \"\".concat(newSize.width, \"px\");\n                            containerStyle.height = \"\".concat(newSize.height, \"px\");\n                            const maxTreeWidth = Math.floor(newSize.width - MIN_SIZE.width / 2);\n                            const currentTreeWidth = signalWidget.value.componentsTree.width;\n                            const newTreeWidth = Math.min(maxTreeWidth, Math.max(MIN_CONTAINER_WIDTH, currentTreeWidth));\n                            signalWidget.value = {\n                                ...signalWidget.value,\n                                dimensions: {\n                                    isFullWidth: false,\n                                    isFullHeight: false,\n                                    width: newSize.width,\n                                    height: newSize.height,\n                                    position: newPosition\n                                },\n                                componentsTree: {\n                                    ...signalWidget.value.componentsTree,\n                                    width: newTreeWidth\n                                }\n                            };\n                            rafId = null;\n                        }\n                    }[\"ResizeHandle.useCallback3[handleResize].handleMouseMove\"]);\n                }\n            }[\"ResizeHandle.useCallback3[handleResize].handleMouseMove\"];\n            const handleMouseUp = {\n                \"ResizeHandle.useCallback3[handleResize].handleMouseUp\": ()=>{\n                    if (rafId) {\n                        cancelAnimationFrame(rafId);\n                        rafId = null;\n                    }\n                    document.removeEventListener(\"mousemove\", handleMouseMove);\n                    document.removeEventListener(\"mouseup\", handleMouseUp);\n                    const { dimensions: dimensions2, corner } = signalWidget.value;\n                    const windowDims = getWindowDimensions();\n                    const isCurrentFullWidth = windowDims.isFullWidth(dimensions2.width);\n                    const isCurrentFullHeight = windowDims.isFullHeight(dimensions2.height);\n                    const isFullScreen = isCurrentFullWidth && isCurrentFullHeight;\n                    let newCorner = corner;\n                    if (isFullScreen || isCurrentFullWidth || isCurrentFullHeight) {\n                        newCorner = getClosestCorner(dimensions2.position);\n                    }\n                    const newPosition = calculatePosition(newCorner, dimensions2.width, dimensions2.height);\n                    const onTransitionEnd = {\n                        \"ResizeHandle.useCallback3[handleResize].handleMouseUp.onTransitionEnd\": ()=>{\n                            widget.removeEventListener(\"transitionend\", onTransitionEnd);\n                        }\n                    }[\"ResizeHandle.useCallback3[handleResize].handleMouseUp.onTransitionEnd\"];\n                    widget.addEventListener(\"transitionend\", onTransitionEnd);\n                    containerStyle.transform = \"translate3d(\".concat(newPosition.x, \"px, \").concat(newPosition.y, \"px, 0)\");\n                    signalWidget.value = {\n                        ...signalWidget.value,\n                        corner: newCorner,\n                        dimensions: {\n                            isFullWidth: isCurrentFullWidth,\n                            isFullHeight: isCurrentFullHeight,\n                            width: dimensions2.width,\n                            height: dimensions2.height,\n                            position: newPosition\n                        },\n                        lastDimensions: {\n                            isFullWidth: isCurrentFullWidth,\n                            isFullHeight: isCurrentFullHeight,\n                            width: dimensions2.width,\n                            height: dimensions2.height,\n                            position: newPosition\n                        }\n                    };\n                    saveLocalStorage(LOCALSTORAGE_KEY, {\n                        corner: newCorner,\n                        dimensions: signalWidget.value.dimensions,\n                        lastDimensions: signalWidget.value.lastDimensions,\n                        componentsTree: signalWidget.value.componentsTree\n                    });\n                }\n            }[\"ResizeHandle.useCallback3[handleResize].handleMouseUp\"];\n            document.addEventListener(\"mousemove\", handleMouseMove, {\n                passive: true\n            });\n            document.addEventListener(\"mouseup\", handleMouseUp);\n        }\n    }[\"ResizeHandle.useCallback3[handleResize]\"], []);\n    const handleDoubleClick = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ResizeHandle.useCallback3[handleDoubleClick]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            const widget = signalRefWidget.value;\n            if (!widget) return;\n            const containerStyle = widget.style;\n            const { dimensions, corner } = signalWidget.value;\n            const windowDims = getWindowDimensions();\n            const isCurrentFullWidth = windowDims.isFullWidth(dimensions.width);\n            const isCurrentFullHeight = windowDims.isFullHeight(dimensions.height);\n            const isFullScreen = isCurrentFullWidth && isCurrentFullHeight;\n            const isPartiallyMaximized = (isCurrentFullWidth || isCurrentFullHeight) && !isFullScreen;\n            let newWidth = dimensions.width;\n            let newHeight = dimensions.height;\n            const newCorner = getOppositeCorner(position, corner, isFullScreen, isCurrentFullWidth, isCurrentFullHeight);\n            if (position === \"left\" || position === \"right\") {\n                newWidth = isCurrentFullWidth ? dimensions.width : windowDims.maxWidth;\n                if (isPartiallyMaximized) {\n                    newWidth = isCurrentFullWidth ? MIN_SIZE.width : windowDims.maxWidth;\n                }\n            } else {\n                newHeight = isCurrentFullHeight ? dimensions.height : windowDims.maxHeight;\n                if (isPartiallyMaximized) {\n                    newHeight = isCurrentFullHeight ? MIN_SIZE.initialHeight : windowDims.maxHeight;\n                }\n            }\n            if (isFullScreen) {\n                if (position === \"left\" || position === \"right\") {\n                    newWidth = MIN_SIZE.width;\n                } else {\n                    newHeight = MIN_SIZE.initialHeight;\n                }\n            }\n            const newPosition = calculatePosition(newCorner, newWidth, newHeight);\n            const newDimensions = {\n                isFullWidth: windowDims.isFullWidth(newWidth),\n                isFullHeight: windowDims.isFullHeight(newHeight),\n                width: newWidth,\n                height: newHeight,\n                position: newPosition\n            };\n            const maxTreeWidth = Math.floor(newWidth - MIN_SIZE.width / 2);\n            const currentTreeWidth = signalWidget.value.componentsTree.width;\n            const defaultWidth = Math.floor(newWidth * 0.3);\n            const newTreeWidth = isCurrentFullWidth ? MIN_CONTAINER_WIDTH : (position === \"left\" || position === \"right\") && !isCurrentFullWidth ? Math.min(maxTreeWidth, Math.max(MIN_CONTAINER_WIDTH, defaultWidth)) : Math.min(maxTreeWidth, Math.max(MIN_CONTAINER_WIDTH, currentTreeWidth));\n            requestAnimationFrame({\n                \"ResizeHandle.useCallback3[handleDoubleClick]\": ()=>{\n                    signalWidget.value = {\n                        corner: newCorner,\n                        dimensions: newDimensions,\n                        lastDimensions: dimensions,\n                        componentsTree: {\n                            ...signalWidget.value.componentsTree,\n                            width: newTreeWidth\n                        }\n                    };\n                    containerStyle.transition = \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\";\n                    containerStyle.width = \"\".concat(newWidth, \"px\");\n                    containerStyle.height = \"\".concat(newHeight, \"px\");\n                    containerStyle.transform = \"translate3d(\".concat(newPosition.x, \"px, \").concat(newPosition.y, \"px, 0)\");\n                }\n            }[\"ResizeHandle.useCallback3[handleDoubleClick]\"]);\n            saveLocalStorage(LOCALSTORAGE_KEY, {\n                corner: newCorner,\n                dimensions: newDimensions,\n                lastDimensions: dimensions,\n                componentsTree: {\n                    ...signalWidget.value.componentsTree,\n                    width: newTreeWidth\n                }\n            });\n        }\n    }[\"ResizeHandle.useCallback3[handleDoubleClick]\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        ref: refContainer,\n        onMouseDown: handleResize,\n        onDblClick: handleDoubleClick,\n        className: cn(\"absolute z-50\", \"flex items-center justify-center\", \"group\", \"transition-colors select-none\", \"peer\", {\n            \"resize-left peer/left\": position === \"left\",\n            \"resize-right peer/right z-10\": position === \"right\",\n            \"resize-top peer/top\": position === \"top\",\n            \"resize-bottom peer/bottom\": position === \"bottom\"\n        }),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n            className: \"resize-line-wrapper\",\n            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"resize-line\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-ellipsis\",\n                    size: 18,\n                    className: cn(\"text-neutral-400\", {\n                        \"rotate-90\": position === \"left\" || position === \"right\"\n                    })\n                })\n            })\n        })\n    });\n};\n_s32(ResizeHandle, \"qWeUwl2iKrTduAy3sm6mV6o3ORA=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c41 = ResizeHandle;\n// src/web/views/widget/toolbar/index.tsx\n\n// src/web/views/toggle/index.tsx\n\nvar Toggle = (param)=>{\n    let { checked, onChange, class: className, ...props } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(\"react-scan-toggle\", className),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n                type: \"checkbox\",\n                checked,\n                onChange,\n                ...props\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {})\n        ]\n    });\n};\n_c42 = Toggle;\n// src/web/views/widget/fps-meter.tsx\n\nvar FpsMeter = (param)=>{\n    let { fps: fps2 } = param;\n    const getColor = (fps3)=>{\n        if (fps3 < 30) return \"#EF4444\";\n        if (fps3 < 50) return \"#F59E0B\";\n        return \"rgb(214,132,245)\";\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(\"flex items-center gap-x-1 px-2 w-full\", \"h-6\", \"rounded-md\", \"font-mono leading-none\", \"bg-[#141414]\", \"ring-1 ring-white/[0.08]\"),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                style: {\n                    color: getColor(fps2)\n                },\n                className: \"text-sm font-semibold tracking-wide transition-colors ease-in-out w-full flex justify-center items-center\",\n                children: fps2\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"text-white/30 text-[11px] font-medium tracking-wide ml-auto min-w-fit\",\n                children: \"FPS\"\n            })\n        ]\n    });\n};\n_c43 = FpsMeter;\n// src/web/views/widget/toolbar/index.tsx\n\nvar Toolbar = ()=>{\n    var _ReactScanInternals_instrumentation;\n    _s33();\n    const refSettingsButton = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const events = useAppNotifications();\n    const [laggedEvents, setLaggedEvents] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(events);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Toolbar.useEffect12\": ()=>{\n            const timeout2 = setTimeout({\n                \"Toolbar.useEffect12.timeout2\": ()=>{\n                    setLaggedEvents(events);\n                }\n            }[\"Toolbar.useEffect12.timeout2\"], 500 + 100);\n            return ({\n                \"Toolbar.useEffect12\": ()=>{\n                    clearTimeout(timeout2);\n                }\n            })[\"Toolbar.useEffect12\"];\n        }\n    }[\"Toolbar.useEffect12\"], [\n        events.length\n    ]);\n    const inspectState = Store.inspectState;\n    const isInspectActive = inspectState.value.kind === \"inspecting\";\n    const isInspectFocused = inspectState.value.kind === \"focused\";\n    const onToggleActive = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Toolbar.useCallback4[onToggleActive]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            if (!ReactScanInternals.instrumentation) {\n                return;\n            }\n            const isPaused = !ReactScanInternals.instrumentation.isPaused.value;\n            ReactScanInternals.instrumentation.isPaused.value = isPaused;\n            const existingLocalStorageOptions = readLocalStorage(\"react-scan-options\");\n            saveLocalStorage(\"react-scan-options\", {\n                ...existingLocalStorageOptions,\n                enabled: !isPaused\n            });\n        }\n    }[\"Toolbar.useCallback4[onToggleActive]\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Toolbar.useEffect12\": ()=>{\n            const unSubState = Store.inspectState.subscribe({\n                \"Toolbar.useEffect12.unSubState\": (state2)=>{\n                    if (state2.kind === \"uninitialized\") {\n                        Store.inspectState.value = {\n                            kind: \"inspect-off\"\n                        };\n                    }\n                }\n            }[\"Toolbar.useEffect12.unSubState\"]);\n            const unSubSettings = signalIsSettingsOpen.subscribe({\n                \"Toolbar.useEffect12.unSubSettings\": (state2)=>{\n                    var _refSettingsButton_current;\n                    (_refSettingsButton_current = refSettingsButton.current) === null || _refSettingsButton_current === void 0 ? void 0 : _refSettingsButton_current.classList.toggle(\"text-inspect\", state2);\n                }\n            }[\"Toolbar.useEffect12.unSubSettings\"]);\n            return ({\n                \"Toolbar.useEffect12\": ()=>{\n                    unSubState();\n                    unSubSettings();\n                }\n            })[\"Toolbar.useEffect12\"];\n        }\n    }[\"Toolbar.useEffect12\"], []);\n    let inspectIcon = null;\n    let inspectColor = \"#999\";\n    if (isInspectActive) {\n        inspectIcon = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n            name: \"icon-inspect\"\n        });\n        inspectColor = \"#8e61e3\";\n    } else if (isInspectFocused) {\n        inspectIcon = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n            name: \"icon-focus\"\n        });\n        inspectColor = \"#8e61e3\";\n    } else {\n        inspectIcon = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n            name: \"icon-inspect\"\n        });\n        inspectColor = \"#999\";\n    }\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Toolbar.useEffect12\": ()=>{\n            return signalNotificationsOpen.subscribe({\n                \"Toolbar.useEffect12\": (value)=>{\n                    if (!value) {\n                        fadeOutHighlights();\n                    }\n                }\n            }[\"Toolbar.useEffect12\"]);\n        }\n    }[\"Toolbar.useEffect12\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"flex max-h-9 min-h-9 flex-1 items-stretch overflow-hidden gap-x-[6px]\",\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: \"h-full flex items-center min-w-fit\",\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: \"h-full flex items-center justify-center\",\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        type: \"button\",\n                        id: \"react-scan-inspect-element\",\n                        onClick: ()=>{\n                            const currentState = Store.inspectState.value;\n                            switch(currentState.kind){\n                                case \"inspecting\":\n                                    Store.inspectState.value = {\n                                        kind: \"inspect-off\"\n                                    };\n                                    break;\n                                case \"focused\":\n                                    Store.inspectState.value = {\n                                        kind: \"inspecting\",\n                                        hoveredDomElement: null\n                                    };\n                                    break;\n                                case \"inspect-off\":\n                                    signalNotificationsOpen.value = false;\n                                    Store.inspectState.value = {\n                                        kind: \"inspecting\",\n                                        hoveredDomElement: null\n                                    };\n                                    break;\n                                case \"uninitialized\":\n                                    break;\n                            }\n                        },\n                        className: \"button flex items-center justify-center h-full w-full pl-3 pr-2.5\",\n                        style: {\n                            color: inspectColor\n                        },\n                        children: inspectIcon\n                    })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: \"h-full flex items-center justify-center\",\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        type: \"button\",\n                        id: \"react-scan-notifications\",\n                        onClick: ()=>{\n                            Store.inspectState.value = {\n                                kind: \"inspect-off\"\n                            };\n                            signalNotificationsOpen.value = !signalNotificationsOpen.value;\n                        },\n                        className: \"button flex items-center justify-center h-full pl-2.5 pr-2.5\",\n                        style: {\n                            color: inspectColor\n                        },\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Notification, {\n                            events: laggedEvents.map((event)=>getEventSeverity(event) === \"high\"),\n                            size: 16,\n                            className: cn([\n                                \"text-[#999]\",\n                                signalNotificationsOpen.value && \"text-[#8E61E3]\"\n                            ])\n                        })\n                    })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        \"min-w-fit flex flex-col items-center pl-1\"\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"h-full flex items-center justify-center\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Toggle, {\n                            checked: !((_ReactScanInternals_instrumentation = ReactScanInternals.instrumentation) === null || _ReactScanInternals_instrumentation === void 0 ? void 0 : _ReactScanInternals_instrumentation.isPaused.value),\n                            onChange: onToggleActive\n                        })\n                    })\n                }),\n                ReactScanInternals.options.value.showFPS && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(FPSWrapper, {})\n            ]\n        })\n    });\n};\n_s33(Toolbar, \"r5zPKQzIE4IjN/GZR1jYQ5Hq9Nk=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        useAppNotifications,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c44 = Toolbar;\nvar FPSWrapper = ()=>{\n    _s34();\n    const [fps2, setFps] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"FPSWrapper.useEffect12\": ()=>{\n            const intervalId = setInterval({\n                \"FPSWrapper.useEffect12.intervalId\": ()=>{\n                    setFps(getFPS());\n                }\n            }[\"FPSWrapper.useEffect12.intervalId\"], 200);\n            return ({\n                \"FPSWrapper.useEffect12\": ()=>clearInterval(intervalId)\n            })[\"FPSWrapper.useEffect12\"];\n        }\n    }[\"FPSWrapper.useEffect12\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: cn(\"flex items-center justify-end gap-x-2 px-1 ml-1 w-[72px]\", \"whitespace-nowrap text-sm text-white\"),\n        children: fps2 === null ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n            children: \"\\uFE0F\"\n        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(FpsMeter, {\n            fps: fps2\n        })\n    });\n};\n_s34(FPSWrapper, \"3UJKAUw4IVDTYNcWDYXfZy1yS44=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c45 = FPSWrapper;\n// src/web/views/widget/index.tsx\n\nvar DEBUG = false;\nvar Widget = ()=>{\n    _s35();\n    const refWidget = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refContent = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refInitialMinimizedWidth = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const refInitialMinimizedHeight = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const updateWidgetPosition = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Widget.useCallback5[updateWidgetPosition]\": function() {\n            let shouldSave = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n            if (!refWidget.current) return;\n            const inspectState = Store.inspectState.value;\n            const isInspectFocused = inspectState.kind === \"focused\";\n            const { corner } = signalWidget.value;\n            let newWidth;\n            let newHeight;\n            if (isInspectFocused || signalIsSettingsOpen.value || signalNotificationsOpen.value) {\n                const lastDims = signalWidget.value.lastDimensions;\n                newWidth = calculateBoundedSize(lastDims.width, 0, true);\n                newHeight = calculateBoundedSize(lastDims.height, 0, false);\n            } else {\n                const currentDims = signalWidget.value.dimensions;\n                if (currentDims.width > refInitialMinimizedWidth.current) {\n                    signalWidget.value = {\n                        ...signalWidget.value,\n                        lastDimensions: {\n                            isFullWidth: currentDims.isFullWidth,\n                            isFullHeight: currentDims.isFullHeight,\n                            width: currentDims.width,\n                            height: currentDims.height,\n                            position: currentDims.position\n                        }\n                    };\n                }\n                newWidth = refInitialMinimizedWidth.current;\n                newHeight = refInitialMinimizedHeight.current;\n            }\n            const newPosition = calculatePosition(corner, newWidth, newHeight);\n            const isTooSmall = newWidth < MIN_SIZE.width || newHeight < MIN_SIZE.initialHeight;\n            const shouldPersist = shouldSave && !isTooSmall;\n            const container = refWidget.current;\n            const containerStyle = container.style;\n            let rafId = null;\n            const onTransitionEnd = {\n                \"Widget.useCallback5[updateWidgetPosition].onTransitionEnd\": ()=>{\n                    updateDimensions();\n                    container.removeEventListener(\"transitionend\", onTransitionEnd);\n                    if (rafId) {\n                        cancelAnimationFrame(rafId);\n                        rafId = null;\n                    }\n                }\n            }[\"Widget.useCallback5[updateWidgetPosition].onTransitionEnd\"];\n            container.addEventListener(\"transitionend\", onTransitionEnd);\n            containerStyle.transition = \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\";\n            rafId = requestAnimationFrame({\n                \"Widget.useCallback5[updateWidgetPosition]\": ()=>{\n                    containerStyle.width = \"\".concat(newWidth, \"px\");\n                    containerStyle.height = \"\".concat(newHeight, \"px\");\n                    containerStyle.transform = \"translate3d(\".concat(newPosition.x, \"px, \").concat(newPosition.y, \"px, 0)\");\n                    rafId = null;\n                }\n            }[\"Widget.useCallback5[updateWidgetPosition]\"]);\n            const newDimensions = {\n                isFullWidth: newWidth >= window.innerWidth - SAFE_AREA * 2,\n                isFullHeight: newHeight >= window.innerHeight - SAFE_AREA * 2,\n                width: newWidth,\n                height: newHeight,\n                position: newPosition\n            };\n            signalWidget.value = {\n                corner,\n                dimensions: newDimensions,\n                lastDimensions: isInspectFocused ? signalWidget.value.lastDimensions : newWidth > refInitialMinimizedWidth.current ? newDimensions : signalWidget.value.lastDimensions,\n                componentsTree: signalWidget.value.componentsTree\n            };\n            if (shouldPersist) {\n                saveLocalStorage(LOCALSTORAGE_KEY, {\n                    corner: signalWidget.value.corner,\n                    dimensions: signalWidget.value.dimensions,\n                    lastDimensions: signalWidget.value.lastDimensions,\n                    componentsTree: signalWidget.value.componentsTree\n                });\n            }\n            updateDimensions();\n        }\n    }[\"Widget.useCallback5[updateWidgetPosition]\"], []);\n    const handleDrag = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Widget.useCallback5[handleDrag]\": (e)=>{\n            e.preventDefault();\n            if (!refWidget.current || e.target.closest(\"button\")) return;\n            const container = refWidget.current;\n            const containerStyle = container.style;\n            const { dimensions } = signalWidget.value;\n            const initialMouseX = e.clientX;\n            const initialMouseY = e.clientY;\n            const initialX = dimensions.position.x;\n            const initialY = dimensions.position.y;\n            let currentX = initialX;\n            let currentY = initialY;\n            let rafId = null;\n            let hasMoved = false;\n            let lastMouseX = initialMouseX;\n            let lastMouseY = initialMouseY;\n            const handleMouseMove = {\n                \"Widget.useCallback5[handleDrag].handleMouseMove\": (e2)=>{\n                    if (rafId) return;\n                    hasMoved = true;\n                    lastMouseX = e2.clientX;\n                    lastMouseY = e2.clientY;\n                    rafId = requestAnimationFrame({\n                        \"Widget.useCallback5[handleDrag].handleMouseMove\": ()=>{\n                            const deltaX = lastMouseX - initialMouseX;\n                            const deltaY = lastMouseY - initialMouseY;\n                            currentX = Number(initialX) + deltaX;\n                            currentY = Number(initialY) + deltaY;\n                            containerStyle.transition = \"none\";\n                            containerStyle.transform = \"translate3d(\".concat(currentX, \"px, \").concat(currentY, \"px, 0)\");\n                            rafId = null;\n                        }\n                    }[\"Widget.useCallback5[handleDrag].handleMouseMove\"]);\n                }\n            }[\"Widget.useCallback5[handleDrag].handleMouseMove\"];\n            const handleMouseUp = {\n                \"Widget.useCallback5[handleDrag].handleMouseUp\": ()=>{\n                    if (!container) return;\n                    if (rafId) {\n                        cancelAnimationFrame(rafId);\n                        rafId = null;\n                    }\n                    document.removeEventListener(\"mousemove\", handleMouseMove);\n                    document.removeEventListener(\"mouseup\", handleMouseUp);\n                    const totalDeltaX = Math.abs(lastMouseX - initialMouseX);\n                    const totalDeltaY = Math.abs(lastMouseY - initialMouseY);\n                    const totalMovement = Math.sqrt(totalDeltaX * totalDeltaX + totalDeltaY * totalDeltaY);\n                    if (!hasMoved || totalMovement < 60) return;\n                    const newCorner = getBestCorner(lastMouseX, lastMouseY, initialMouseX, initialMouseY, Store.inspectState.value.kind === \"focused\" ? 80 : 40);\n                    if (newCorner === signalWidget.value.corner) {\n                        containerStyle.transition = \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\";\n                        const currentPosition = signalWidget.value.dimensions.position;\n                        requestAnimationFrame({\n                            \"Widget.useCallback5[handleDrag].handleMouseUp\": ()=>{\n                                containerStyle.transform = \"translate3d(\".concat(currentPosition.x, \"px, \").concat(currentPosition.y, \"px, 0)\");\n                            }\n                        }[\"Widget.useCallback5[handleDrag].handleMouseUp\"]);\n                        return;\n                    }\n                    const snappedPosition = calculatePosition(newCorner, dimensions.width, dimensions.height);\n                    if (currentX === initialX && currentY === initialY) return;\n                    const onTransitionEnd = {\n                        \"Widget.useCallback5[handleDrag].handleMouseUp.onTransitionEnd\": ()=>{\n                            containerStyle.transition = \"none\";\n                            updateDimensions();\n                            container.removeEventListener(\"transitionend\", onTransitionEnd);\n                            if (rafId) {\n                                cancelAnimationFrame(rafId);\n                                rafId = null;\n                            }\n                        }\n                    }[\"Widget.useCallback5[handleDrag].handleMouseUp.onTransitionEnd\"];\n                    container.addEventListener(\"transitionend\", onTransitionEnd);\n                    containerStyle.transition = \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\";\n                    requestAnimationFrame({\n                        \"Widget.useCallback5[handleDrag].handleMouseUp\": ()=>{\n                            containerStyle.transform = \"translate3d(\".concat(snappedPosition.x, \"px, \").concat(snappedPosition.y, \"px, 0)\");\n                        }\n                    }[\"Widget.useCallback5[handleDrag].handleMouseUp\"]);\n                    signalWidget.value = {\n                        corner: newCorner,\n                        dimensions: {\n                            isFullWidth: dimensions.isFullWidth,\n                            isFullHeight: dimensions.isFullHeight,\n                            width: dimensions.width,\n                            height: dimensions.height,\n                            position: snappedPosition\n                        },\n                        lastDimensions: signalWidget.value.lastDimensions,\n                        componentsTree: signalWidget.value.componentsTree\n                    };\n                    saveLocalStorage(LOCALSTORAGE_KEY, {\n                        corner: newCorner,\n                        dimensions: signalWidget.value.dimensions,\n                        lastDimensions: signalWidget.value.lastDimensions,\n                        componentsTree: signalWidget.value.componentsTree\n                    });\n                }\n            }[\"Widget.useCallback5[handleDrag].handleMouseUp\"];\n            document.addEventListener(\"mousemove\", handleMouseMove, {\n                passive: true\n            });\n            document.addEventListener(\"mouseup\", handleMouseUp);\n        }\n    }[\"Widget.useCallback5[handleDrag]\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Widget.useEffect13\": ()=>{\n            if (!refWidget.current) return;\n            refWidget.current.style.width = \"min-content\";\n            refInitialMinimizedHeight.current = 36;\n            refInitialMinimizedWidth.current = refWidget.current.offsetWidth;\n            refWidget.current.style.maxWidth = \"calc(100vw - \".concat(SAFE_AREA * 2, \"px)\");\n            refWidget.current.style.maxHeight = \"calc(100vh - \".concat(SAFE_AREA * 2, \"px)\");\n            if (Store.inspectState.value.kind !== \"focused\") {\n                signalWidget.value = {\n                    ...signalWidget.value,\n                    dimensions: {\n                        isFullWidth: false,\n                        isFullHeight: false,\n                        width: refInitialMinimizedWidth.current,\n                        height: refInitialMinimizedHeight.current,\n                        position: signalWidget.value.dimensions.position\n                    }\n                };\n            }\n            signalRefWidget.value = refWidget.current;\n            const unsubscribeSignalWidget = signalWidget.subscribe({\n                \"Widget.useEffect13.unsubscribeSignalWidget\": (widget)=>{\n                    if (!refWidget.current) return;\n                    const { x, y } = widget.dimensions.position;\n                    const { width, height } = widget.dimensions;\n                    const container = refWidget.current;\n                    requestAnimationFrame({\n                        \"Widget.useEffect13.unsubscribeSignalWidget\": ()=>{\n                            container.style.transform = \"translate3d(\".concat(x, \"px, \").concat(y, \"px, 0)\");\n                            container.style.width = \"\".concat(width, \"px\");\n                            container.style.height = \"\".concat(height, \"px\");\n                        }\n                    }[\"Widget.useEffect13.unsubscribeSignalWidget\"]);\n                }\n            }[\"Widget.useEffect13.unsubscribeSignalWidget\"]);\n            signalIsSettingsOpen.subscribe({\n                \"Widget.useEffect13\": ()=>{\n                    updateWidgetPosition();\n                }\n            }[\"Widget.useEffect13\"]);\n            signalNotificationsOpen.subscribe({\n                \"Widget.useEffect13\": ()=>{\n                    updateWidgetPosition(false);\n                }\n            }[\"Widget.useEffect13\"]);\n            signalNotificationDismissed.subscribe({\n                \"Widget.useEffect13\": ()=>{\n                    updateWidgetPosition();\n                }\n            }[\"Widget.useEffect13\"]);\n            signalSettingsOpen.subscribe({\n                \"Widget.useEffect13\": ()=>{\n                    updateWidgetPosition();\n                }\n            }[\"Widget.useEffect13\"]);\n            const unsubscribeStoreInspectState = Store.inspectState.subscribe({\n                \"Widget.useEffect13.unsubscribeStoreInspectState\": (state2)=>{\n                    if (!refContent.current) return;\n                    if (state2.kind === \"inspecting\") {\n                        toggleMultipleClasses(refContent.current, [\n                            \"opacity-0\",\n                            \"duration-0\",\n                            \"delay-0\"\n                        ]);\n                    }\n                    updateWidgetPosition();\n                }\n            }[\"Widget.useEffect13.unsubscribeStoreInspectState\"]);\n            const handleWindowResize = {\n                \"Widget.useEffect13.handleWindowResize\": ()=>{\n                    updateWidgetPosition(true);\n                }\n            }[\"Widget.useEffect13.handleWindowResize\"];\n            window.addEventListener(\"resize\", handleWindowResize, {\n                passive: true\n            });\n            return ({\n                \"Widget.useEffect13\": ()=>{\n                    window.removeEventListener(\"resize\", handleWindowResize);\n                    unsubscribeStoreInspectState();\n                    unsubscribeSignalWidget();\n                    saveLocalStorage(LOCALSTORAGE_KEY, {\n                        ...defaultWidgetConfig,\n                        corner: signalWidget.value.corner\n                    });\n                }\n            })[\"Widget.useEffect13\"];\n        }\n    }[\"Widget.useEffect13\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ScanOverlay, {}),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ToolbarElementContext.Provider, {\n                value: refWidget.current,\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    id: \"react-scan-toolbar\",\n                    dir: \"ltr\",\n                    ref: refWidget,\n                    onMouseDown: handleDrag,\n                    className: cn(\"fixed inset-0 rounded-lg shadow-lg\", \"flex flex-col\", \"font-mono text-[13px]\", \"user-select-none\", \"opacity-0\", \"cursor-move\", \"z-[124124124124]\", \"animate-fade-in animation-duration-300 animation-delay-300\", \"will-change-transform\"),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ResizeHandle, {\n                            position: \"top\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ResizeHandle, {\n                            position: \"bottom\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ResizeHandle, {\n                            position: \"left\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ResizeHandle, {\n                            position: \"right\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn(\"flex flex-1 flex-col\", \"overflow-hidden z-10\", \"rounded-lg\", \"bg-black\", \"opacity-100\", \"transition-[border-radius]\", \"peer-hover/left:rounded-l-none\", \"peer-hover/right:rounded-r-none\", \"peer-hover/top:rounded-t-none\", \"peer-hover/bottom:rounded-b-none\"),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    ref: refContent,\n                                    className: cn(\"relative\", \"flex-1\", \"flex flex-col\", \"rounded-t-lg\", \"overflow-hidden\", \"opacity-100\", \"transition-[opacity]\"),\n                                    children: [\n                                        Store.inspectState.value.kind === \"focused\" && !signalNotificationsOpen.value && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Header, {}),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn(\"relative\", \"flex-1 flex\", \"text-white\", \"bg-[#0A0A0A]\", \"transition-opacity delay-150\", \"overflow-hidden\", \"border-b border-white/10\"),\n                                            children: [\n                                                Store.inspectState.value.kind === \"focused\" && !signalNotificationsOpen.value && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                    children: [\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Inspector, {}),\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ComponentsTree, {})\n                                                    ]\n                                                }),\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(NotificationWrapper, {})\n                                            ]\n                                        })\n                                    ]\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Toolbar, {})\n                            ]\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\n_s35(Widget, \"SfLfBDiCOgf5GohUKM4+r7yQw6U=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c46 = Widget;\nvar ToolbarElementContext = (0,preact__WEBPACK_IMPORTED_MODULE_2__.createContext)(null);\n// src/web/state.ts\nvar signalIsSettingsOpen = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\nvar signalRefWidget = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\nvar signalNotificationsOpen = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(DEBUG);\nvar signalNotificationDismissed = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\nvar signalLastDismissTime = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(0);\nvar signalSettingsOpen = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\nvar defaultWidgetConfig = {\n    corner: \"top-left\",\n    dimensions: {\n        isFullWidth: false,\n        isFullHeight: false,\n        width: MIN_SIZE.width,\n        height: MIN_SIZE.height,\n        position: {\n            x: SAFE_AREA,\n            y: SAFE_AREA\n        }\n    },\n    lastDimensions: {\n        isFullWidth: false,\n        isFullHeight: false,\n        width: MIN_SIZE.width,\n        height: MIN_SIZE.height,\n        position: {\n            x: SAFE_AREA,\n            y: SAFE_AREA\n        }\n    },\n    componentsTree: {\n        width: MIN_CONTAINER_WIDTH\n    }\n};\nvar getInitialWidgetConfig = ()=>{\n    const stored = readLocalStorage(LOCALSTORAGE_KEY);\n    if (!stored) {\n        saveLocalStorage(LOCALSTORAGE_KEY, {\n            corner: defaultWidgetConfig.corner,\n            dimensions: defaultWidgetConfig.dimensions,\n            lastDimensions: defaultWidgetConfig.lastDimensions,\n            componentsTree: defaultWidgetConfig.componentsTree\n        });\n        return defaultWidgetConfig;\n    }\n    var _stored_corner, _stored_dimensions_position, _stored_dimensions, _stored_componentsTree;\n    return {\n        corner: (_stored_corner = stored.corner) !== null && _stored_corner !== void 0 ? _stored_corner : defaultWidgetConfig.corner,\n        dimensions: {\n            isFullWidth: false,\n            isFullHeight: false,\n            width: MIN_SIZE.width,\n            height: MIN_SIZE.height,\n            position: (_stored_dimensions_position = stored.dimensions.position) !== null && _stored_dimensions_position !== void 0 ? _stored_dimensions_position : defaultWidgetConfig.dimensions.position\n        },\n        lastDimensions: (_stored_dimensions = stored.dimensions) !== null && _stored_dimensions !== void 0 ? _stored_dimensions : defaultWidgetConfig.dimensions,\n        componentsTree: (_stored_componentsTree = stored.componentsTree) !== null && _stored_componentsTree !== void 0 ? _stored_componentsTree : defaultWidgetConfig.componentsTree\n    };\n};\nvar signalWidget = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(getInitialWidgetConfig());\nvar updateDimensions = ()=>{\n    if (typeof window === \"undefined\") return;\n    const { dimensions } = signalWidget.value;\n    const { width, height, position } = dimensions;\n    signalWidget.value = {\n        ...signalWidget.value,\n        dimensions: {\n            isFullWidth: width >= window.innerWidth - SAFE_AREA * 2,\n            isFullHeight: height >= window.innerHeight - SAFE_AREA * 2,\n            width,\n            height,\n            position\n        }\n    };\n};\n// src/web/utils/preact/constant.ts\n\nfunction CONSTANT_UPDATE() {\n    return false;\n}\n_c47 = CONSTANT_UPDATE;\nfunction constant(Component3) {\n    function Memoed(props) {\n        this.shouldComponentUpdate = CONSTANT_UPDATE;\n        return (0,preact__WEBPACK_IMPORTED_MODULE_2__.createElement)(Component3, props);\n    }\n    Memoed.displayName = \"Memo(\".concat(Component3.displayName || Component3.name, \")\");\n    Memoed.prototype.isReactComponent = true;\n    Memoed._forwarded = true;\n    return Memoed;\n}\n// src/web/views/sticky-section/index.tsx\n\n\nvar StickySection = _s36((0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(_c48 = _s36((param)=>{\n    let { children } = param;\n    _s36();\n    const refScrollableElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refScrollAtTop = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const [isSticky, setIsSticky] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const refRafId = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const calculateStickyTop = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"StickySection.useCallback6[calculateStickyTop]\": function() {\n            let removeSticky = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n            var _refScrollableElement_current;\n            const stickyElements = Array.from(((_refScrollableElement_current = refScrollableElement.current) === null || _refScrollableElement_current === void 0 ? void 0 : _refScrollableElement_current.children) || []);\n            if (!stickyElements.length) return;\n            let cumulativeHeight = 0;\n            for (const element of stickyElements){\n                const sticky = element;\n                if (sticky.dataset.sticky) {\n                    if (removeSticky) {\n                        sticky.style.removeProperty(\"top\");\n                    } else {\n                        sticky.style.setProperty(\"top\", \"\".concat(cumulativeHeight, \"px\"));\n                    }\n                    cumulativeHeight += sticky.offsetHeight;\n                }\n            }\n        }\n    }[\"StickySection.useCallback6[calculateStickyTop]\"], []);\n    const refSticky = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"StickySection.useCallback6[refSticky]\": (node)=>{\n            var _refScrollableElement_current;\n            if (!node) {\n                requestAnimationFrame({\n                    \"StickySection.useCallback6[refSticky]\": ()=>{\n                        calculateStickyTop();\n                    }\n                }[\"StickySection.useCallback6[refSticky]\"]);\n                return;\n            }\n            refElement.current = node;\n            refScrollableElement.current = node.parentElement;\n            node.dataset.sticky = \"true\";\n            const handleClick = {\n                \"StickySection.useCallback6[refSticky].handleClick\": ()=>{\n                    if (!node.dataset.disableScroll) {\n                        var _refScrollableElement_current;\n                        var _Number;\n                        (_refScrollableElement_current = refScrollableElement.current) === null || _refScrollableElement_current === void 0 ? void 0 : _refScrollableElement_current.scrollTo({\n                            top: (_Number = Number(node.style.top)) !== null && _Number !== void 0 ? _Number : 0,\n                            behavior: \"smooth\"\n                        });\n                    }\n                }\n            }[\"StickySection.useCallback6[refSticky].handleClick\"];\n            node.onclick = handleClick;\n            calculateStickyTop();\n            const handleScroll = {\n                \"StickySection.useCallback6[refSticky].handleScroll\": ()=>{\n                    cancelAnimationFrame(refRafId.current);\n                    refRafId.current = requestAnimationFrame({\n                        \"StickySection.useCallback6[refSticky].handleScroll\": ()=>{\n                            if (!node || !refScrollableElement.current) return;\n                            const refRect = node.getBoundingClientRect();\n                            const containerRect = refScrollableElement.current.getBoundingClientRect();\n                            const stickyOffset = Number.parseInt(getComputedStyle(node).top);\n                            refScrollAtTop.current = refScrollableElement.current.scrollTop > 0;\n                            const stickyActive = refScrollAtTop.current && refRect.top <= containerRect.top + stickyOffset;\n                            if (stickyActive !== isSticky) {\n                                setIsSticky(stickyActive);\n                            }\n                            calculateStickyTop();\n                        }\n                    }[\"StickySection.useCallback6[refSticky].handleScroll\"]);\n                }\n            }[\"StickySection.useCallback6[refSticky].handleScroll\"];\n            (_refScrollableElement_current = refScrollableElement.current) === null || _refScrollableElement_current === void 0 ? void 0 : _refScrollableElement_current.addEventListener(\"scroll\", handleScroll, {\n                passive: true\n            });\n        }\n    }[\"StickySection.useCallback6[refSticky]\"], [\n        isSticky,\n        calculateStickyTop\n    ]);\n    return children({\n        refSticky,\n        isSticky,\n        calculateStickyTop\n    });\n}, \"XDrL1oyKXPQLvsi5gLLn3MdqTqg=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n})), \"XDrL1oyKXPQLvsi5gLLn3MdqTqg=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c49 = StickySection;\n// src/web/views/inspector/properties.tsx\n\n\n// src/web/hooks/use-merged-refs.ts\n\nvar assignRef = (ref, value)=>{\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref !== null) {\n        ref.current = value;\n    }\n};\nvar mergeRefs = function() {\n    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){\n        refs[_key] = arguments[_key];\n    }\n    return (node)=>{\n        for (const ref of refs){\n            if (ref) {\n                assignRef(ref, node);\n            }\n        }\n    };\n};\nvar useMergedRefs = function() {\n    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){\n        refs[_key] = arguments[_key];\n    }\n    _s37();\n    return (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useCallback)(mergeRefs(...refs), [\n        ...refs\n    ]);\n};\n_s37(useMergedRefs, \"L0vPL08aZ8rrK8vFaMwdynMfTJ0=\", false, function() {\n    return [\n        preact_compat__WEBPACK_IMPORTED_MODULE_5__.useCallback\n    ];\n});\n// src/web/views/copy-to-clipboard/index.tsx\n\n\n\nvar CopyToClipboard = _s38((0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(_c50 = _s38((param)=>{\n    let { text, children, onCopy, className, iconSize = 14 } = param;\n    _s38();\n    const refTimeout = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const [isCopied, setIsCopied] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"CopyToClipboard.useEffect14\": ()=>{\n            if (isCopied) {\n                refTimeout.current = setTimeout({\n                    \"CopyToClipboard.useEffect14\": ()=>setIsCopied(false)\n                }[\"CopyToClipboard.useEffect14\"], 600);\n                return ({\n                    \"CopyToClipboard.useEffect14\": ()=>{\n                        clearTimeout(refTimeout.current);\n                    }\n                })[\"CopyToClipboard.useEffect14\"];\n            }\n        }\n    }[\"CopyToClipboard.useEffect14\"], [\n        isCopied\n    ]);\n    const copyToClipboard = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"CopyToClipboard.useCallback8[copyToClipboard]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            navigator.clipboard.writeText(text).then({\n                \"CopyToClipboard.useCallback8[copyToClipboard]\": ()=>{\n                    setIsCopied(true);\n                    onCopy === null || onCopy === void 0 ? void 0 : onCopy(true, text);\n                }\n            }[\"CopyToClipboard.useCallback8[copyToClipboard]\"], {\n                \"CopyToClipboard.useCallback8[copyToClipboard]\": ()=>{\n                    onCopy === null || onCopy === void 0 ? void 0 : onCopy(false, text);\n                }\n            }[\"CopyToClipboard.useCallback8[copyToClipboard]\"]);\n        }\n    }[\"CopyToClipboard.useCallback8[copyToClipboard]\"], [\n        text,\n        onCopy\n    ]);\n    const ClipboardIcon = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n        onClick: copyToClipboard,\n        type: \"button\",\n        className: cn(\"z-10\", \"flex items-center justify-center\", \"hover:text-dev-pink-400\", \"transition-colors duration-200 ease-in-out\", \"cursor-pointer\", \"size-[\".concat(iconSize, \"px]\"), className),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n            name: \"icon-\".concat(isCopied ? \"check\" : \"copy\"),\n            size: [\n                iconSize\n            ],\n            className: cn({\n                \"text-green-500\": isCopied\n            })\n        })\n    });\n    if (!children) {\n        return ClipboardIcon;\n    }\n    return children({\n        ClipboardIcon,\n        onClick: copyToClipboard\n    });\n}, \"DbPE9r4+bzIS+bHtDoqSYqeNsNQ=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n})), \"DbPE9r4+bzIS+bHtDoqSYqeNsNQ=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c51 = CopyToClipboard;\n// src/web/views/inspector/properties.tsx\n\nvar EditableValue = (param)=>{\n    let { value, onSave, onCancel } = param;\n    _s39();\n    const refInput = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const [editValue, setEditValue] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(\"\");\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"EditableValue.useEffect15\": ()=>{\n            let initialValue = \"\";\n            try {\n                if (value instanceof Date) {\n                    initialValue = value.toISOString().slice(0, 16);\n                } else if (value instanceof Map || value instanceof Set || value instanceof RegExp || value instanceof Error || value instanceof ArrayBuffer || ArrayBuffer.isView(value) || typeof value === \"object\" && value !== null) {\n                    initialValue = formatValue(value);\n                } else {\n                    initialValue = formatInitialValue(value);\n                }\n            } catch (e) {\n                initialValue = String(value);\n            }\n            const sanitizedValue = sanitizeString(initialValue);\n            setEditValue(sanitizedValue);\n            requestAnimationFrame({\n                \"EditableValue.useEffect15\": ()=>{\n                    if (!refInput.current) return;\n                    refInput.current.focus();\n                    if (typeof value === \"string\") {\n                        refInput.current.setSelectionRange(1, sanitizedValue.length - 1);\n                    } else {\n                        refInput.current.select();\n                    }\n                }\n            }[\"EditableValue.useEffect15\"]);\n        }\n    }[\"EditableValue.useEffect15\"], [\n        value\n    ]);\n    const handleChange = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"EditableValue.useCallback9[handleChange]\": (e)=>{\n            const target = e.target;\n            if (target) {\n                setEditValue(target.value);\n            }\n        }\n    }[\"EditableValue.useCallback9[handleChange]\"], []);\n    const handleKeyDown = (e)=>{\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            try {\n                let newValue;\n                if (value instanceof Date) {\n                    const date = new Date(editValue);\n                    if (Number.isNaN(date.getTime())) {\n                        throw new Error(\"Invalid date\");\n                    }\n                    newValue = date;\n                } else {\n                    const detected = detectValueType(editValue);\n                    newValue = detected.value;\n                }\n                onSave(newValue);\n            } catch (e) {\n                onCancel();\n            }\n        } else if (e.key === \"Escape\") {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n            onCancel();\n        }\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n        ref: refInput,\n        type: value instanceof Date ? \"datetime-local\" : \"text\",\n        className: \"react-scan-input flex-1\",\n        value: editValue,\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: onCancel,\n        step: value instanceof Date ? 1 : void 0\n    });\n};\n_s39(EditableValue, \"A5MXH5JcsKNCEyFcsM2TeCGX1v4=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c52 = EditableValue;\nvar PropertyElement = (param)=>{\n    let { name, value, section, level, parentPath, objectPathMap = /* @__PURE__ */ new WeakMap(), changedKeys = /* @__PURE__ */ new Set(), allowEditing = true } = param;\n    _s40();\n    const { updates, currentIndex } = timelineState.value;\n    const currentUpdate = updates[currentIndex];\n    const fiberInfo = currentUpdate === null || currentUpdate === void 0 ? void 0 : currentUpdate.fiberInfo;\n    const refElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const currentPath = getPath(fiberInfo.displayName, section, parentPath !== null && parentPath !== void 0 ? parentPath : \"\", name);\n    const [isExpanded, setIsExpanded] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(globalInspectorState.expandedPaths.has(currentPath));\n    const [isEditing, setIsEditing] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const prevValue = globalInspectorState.lastRendered.get(currentPath);\n    const isChanged = !isEqual(prevValue, value);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"PropertyElement.useEffect15\": ()=>{\n            if (name === \"children\") {\n                return;\n            }\n            if (section === \"context\") {\n                return;\n            }\n            const isFirstRender = !globalInspectorState.lastRendered.has(currentPath);\n            const shouldFlash = isChanged && refElement.current && !isFirstRender;\n            globalInspectorState.lastRendered.set(currentPath, value);\n            if (shouldFlash && refElement.current && level === 0) {\n                flashManager.create(refElement.current);\n            }\n        }\n    }[\"PropertyElement.useEffect15\"], [\n        value,\n        isChanged,\n        currentPath,\n        level,\n        name,\n        section\n    ]);\n    const handleToggleExpand = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"PropertyElement.useCallback9[handleToggleExpand]\": ()=>{\n            setIsExpanded({\n                \"PropertyElement.useCallback9[handleToggleExpand]\": (prevState)=>{\n                    const newIsExpanded = !prevState;\n                    if (newIsExpanded) {\n                        globalInspectorState.expandedPaths.add(currentPath);\n                    } else {\n                        globalInspectorState.expandedPaths.delete(currentPath);\n                    }\n                    return newIsExpanded;\n                }\n            }[\"PropertyElement.useCallback9[handleToggleExpand]\"]);\n        }\n    }[\"PropertyElement.useCallback9[handleToggleExpand]\"], [\n        currentPath\n    ]);\n    const valuePreview = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[valuePreview]\": ()=>{\n            if (typeof value === \"object\" && value !== null) {\n                if (\"displayValue\" in value) {\n                    return String(value.displayValue);\n                }\n            }\n            return formatValue(value);\n        }\n    }[\"PropertyElement.useMemo4[valuePreview]\"], [\n        value\n    ]);\n    const clipboardText = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[clipboardText]\": ()=>{\n            if (typeof value === \"object\" && value !== null) {\n                if (\"value\" in value) {\n                    return String(formatForClipboard(value.value));\n                }\n                if (\"displayValue\" in value) {\n                    return String(value.displayValue);\n                }\n            }\n            return String(formatForClipboard(value));\n        }\n    }[\"PropertyElement.useMemo4[clipboardText]\"], [\n        value\n    ]);\n    const isExpandableValue = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[isExpandableValue]\": ()=>{\n            if (!value || typeof value !== \"object\") return false;\n            if (\"type\" in value) {\n                const metadata2 = value;\n                switch(metadata2.type){\n                    case \"array\":\n                    case \"Map\":\n                    case \"Set\":\n                        var _metadata2_size, _ref;\n                        return ((_ref = (_metadata2_size = metadata2.size) !== null && _metadata2_size !== void 0 ? _metadata2_size : metadata2.length) !== null && _ref !== void 0 ? _ref : 0) > 0;\n                    case \"object\":\n                        var _metadata2_size1;\n                        return ((_metadata2_size1 = metadata2.size) !== null && _metadata2_size1 !== void 0 ? _metadata2_size1 : 0) > 0;\n                    case \"ArrayBuffer\":\n                    case \"DataView\":\n                        var _metadata2_byteLength;\n                        return ((_metadata2_byteLength = metadata2.byteLength) !== null && _metadata2_byteLength !== void 0 ? _metadata2_byteLength : 0) > 0;\n                    case \"circular\":\n                    case \"promise\":\n                    case \"function\":\n                    case \"error\":\n                        return false;\n                    default:\n                        if (\"entries\" in metadata2 || \"items\" in metadata2) {\n                            return true;\n                        }\n                        return false;\n                }\n            }\n            return isExpandable(value);\n        }\n    }[\"PropertyElement.useMemo4[isExpandableValue]\"], [\n        value\n    ]);\n    const { overrideProps, overrideHookState } = getOverrideMethods();\n    const canEdit = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[canEdit]\": ()=>{\n            if (!allowEditing) return false;\n            if (section === \"props\") return !!overrideProps && name !== \"children\";\n            if (section === \"state\") return !!overrideHookState;\n            return false;\n        }\n    }[\"PropertyElement.useMemo4[canEdit]\"], [\n        section,\n        overrideProps,\n        overrideHookState,\n        allowEditing,\n        name\n    ]);\n    const handleEdit = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"PropertyElement.useCallback9[handleEdit]\": ()=>{\n            if (canEdit) {\n                setIsEditing(true);\n            }\n        }\n    }[\"PropertyElement.useCallback9[handleEdit]\"], [\n        canEdit\n    ]);\n    const handleSave = (section2, name2, value2)=>{\n        const { updates: updates2, currentIndex: currentIndex2, latestFiber } = timelineState.value;\n        const currentUpdate2 = updates2[currentIndex2];\n        if (!latestFiber) return;\n        const { overrideProps: overrideProps2, overrideHookState: overrideHookState2 } = getOverrideMethods();\n        if (!overrideProps2 || !overrideHookState2) return;\n        if (section2 === \"props\") {\n            tryOrElse(()=>{\n                const currentProps = latestFiber.memoizedProps || {};\n                let currentValue;\n                let path;\n                if (parentPath) {\n                    const parts = parentPath.split(\".\");\n                    path = parts.filter((part)=>part !== \"props\" && part !== (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(latestFiber.type));\n                    path.push(name2);\n                    currentValue = path.reduce((obj, key)=>obj && typeof obj === \"object\" ? obj[key] : {}, currentProps);\n                } else {\n                    path = [\n                        name2\n                    ];\n                    currentValue = currentProps[name2];\n                }\n                if (!isEqual(currentValue, value2)) {\n                    overrideProps2(latestFiber, path, value2);\n                    if (latestFiber.alternate) {\n                        overrideProps2(latestFiber.alternate, path, value2);\n                    }\n                }\n            }, null);\n        } else if (section2 === \"state\") {\n            tryOrElse(()=>{\n                if (!parentPath) {\n                    const stateNames = currentUpdate2.stateNames;\n                    const namedStateIndex = stateNames.indexOf(name2);\n                    const hookId = namedStateIndex !== -1 ? namedStateIndex.toString() : name2;\n                    overrideHookState2(latestFiber, hookId, [], value2);\n                } else {\n                    var _currentState_find;\n                    const fullPathParts = parentPath.split(\".\");\n                    const stateIndex = fullPathParts.indexOf(\"state\");\n                    if (stateIndex === -1) return;\n                    const statePath = fullPathParts.slice(stateIndex + 1);\n                    const baseStateKey = statePath[0];\n                    const stateNames = currentUpdate2.stateNames;\n                    const namedStateIndex = stateNames.indexOf(baseStateKey);\n                    const hookId = namedStateIndex !== -1 ? namedStateIndex.toString() : \"0\";\n                    const currentState = currentUpdate2.state.current;\n                    if (!currentState || !currentState.find((item)=>item.name === Number(baseStateKey))) {\n                        return;\n                    }\n                    const updatedState = updateNestedValue((_currentState_find = currentState.find((item)=>item.name === Number(baseStateKey))) === null || _currentState_find === void 0 ? void 0 : _currentState_find.value, statePath.slice(1).concat(name2), value2);\n                    overrideHookState2(latestFiber, hookId, [], updatedState);\n                }\n            }, null);\n        }\n        setIsEditing(false);\n    };\n    const checkCircularInValue = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[checkCircularInValue]\": ()=>{\n            if (!value || typeof value !== \"object\" || isPromise(value)) return false;\n            return \"type\" in value && value.type === \"circular\";\n        }\n    }[\"PropertyElement.useMemo4[checkCircularInValue]\"], [\n        value\n    ]);\n    const renderNestedProperties = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"PropertyElement.useCallback9[renderNestedProperties]\": (obj)=>{\n            if (!obj || typeof obj !== \"object\") return null;\n            if (\"type\" in obj) {\n                const metadata2 = obj;\n                if (\"entries\" in metadata2 && metadata2.entries) {\n                    const entries2 = Object.entries(metadata2.entries);\n                    if (entries2.length === 0) return null;\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"react-scan-nested\",\n                        children: entries2.map({\n                            \"PropertyElement.useCallback9[renderNestedProperties]\": (param)=>{\n                                let [key, val] = param;\n                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                                    name: key,\n                                    value: val,\n                                    section,\n                                    level: level + 1,\n                                    parentPath: currentPath,\n                                    objectPathMap,\n                                    changedKeys,\n                                    allowEditing\n                                }, \"\".concat(currentPath, \"-entry-\").concat(key));\n                            }\n                        }[\"PropertyElement.useCallback9[renderNestedProperties]\"])\n                    });\n                }\n                if (\"items\" in metadata2 && Array.isArray(metadata2.items)) {\n                    if (metadata2.items.length === 0) return null;\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"react-scan-nested\",\n                        children: metadata2.items.map({\n                            \"PropertyElement.useCallback9[renderNestedProperties]\": (item, i)=>{\n                                const itemKey = \"\".concat(currentPath, \"-item-\").concat(item.type, \"-\").concat(i);\n                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                                    name: \"\".concat(i),\n                                    value: item,\n                                    section,\n                                    level: level + 1,\n                                    parentPath: currentPath,\n                                    objectPathMap,\n                                    changedKeys,\n                                    allowEditing\n                                }, itemKey);\n                            }\n                        }[\"PropertyElement.useCallback9[renderNestedProperties]\"])\n                    });\n                }\n                return null;\n            }\n            let entries;\n            if (obj instanceof ArrayBuffer) {\n                const view = new Uint8Array(obj);\n                entries = Array.from(view).map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (v, i)=>[\n                            i,\n                            v\n                        ]\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else if (obj instanceof DataView) {\n                const view = new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength);\n                entries = Array.from(view).map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (v, i)=>[\n                            i,\n                            v\n                        ]\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else if (ArrayBuffer.isView(obj)) {\n                if (obj instanceof BigInt64Array || obj instanceof BigUint64Array) {\n                    entries = Array.from({\n                        length: obj.length\n                    }, {\n                        \"PropertyElement.useCallback9[renderNestedProperties]\": (_, i)=>[\n                                i,\n                                obj[i]\n                            ]\n                    }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n                } else {\n                    const typedArray = obj;\n                    entries = Array.from(typedArray).map({\n                        \"PropertyElement.useCallback9[renderNestedProperties]\": (v, i)=>[\n                                i,\n                                v\n                            ]\n                    }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n                }\n            } else if (obj instanceof Map) {\n                entries = Array.from(obj.entries()).map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (param)=>{\n                        let [k, v] = param;\n                        return [\n                            String(k),\n                            v\n                        ];\n                    }\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else if (obj instanceof Set) {\n                entries = Array.from(obj).map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (v, i)=>[\n                            i,\n                            v\n                        ]\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else if (Array.isArray(obj)) {\n                entries = obj.map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (value2, index)=>[\n                            \"\".concat(index),\n                            value2\n                        ]\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else {\n                entries = Object.entries(obj);\n            }\n            if (entries.length === 0) return null;\n            const canEditChildren = !(obj instanceof DataView || obj instanceof ArrayBuffer || ArrayBuffer.isView(obj));\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"react-scan-nested\",\n                children: entries.map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (param)=>{\n                        let [key, val] = param;\n                        const itemKey = \"\".concat(currentPath, \"-\").concat(typeof key === \"number\" ? \"item-\".concat(key) : key);\n                        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                            name: String(key),\n                            value: val,\n                            section,\n                            level: level + 1,\n                            parentPath: currentPath,\n                            objectPathMap,\n                            changedKeys,\n                            allowEditing: canEditChildren\n                        }, itemKey);\n                    }\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"])\n            });\n        }\n    }[\"PropertyElement.useCallback9[renderNestedProperties]\"], [\n        section,\n        level,\n        currentPath,\n        objectPathMap,\n        changedKeys,\n        allowEditing\n    ]);\n    if (checkCircularInValue) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: \"react-scan-property\",\n            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"react-scan-property-content\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"react-scan-preview-line\",\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"react-scan-key\",\n                            children: [\n                                name,\n                                \":\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"text-yellow-500\",\n                            children: \"[Circular Reference]\"\n                        })\n                    ]\n                })\n            })\n        });\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        ref: refElement,\n        className: \"react-scan-property\",\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: \"react-scan-property-content\",\n            children: [\n                isExpandableValue && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                    type: \"button\",\n                    onClick: handleToggleExpand,\n                    className: \"react-scan-arrow\",\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                        name: \"icon-chevron-right\",\n                        size: 12,\n                        className: cn({\n                            \"rotate-90\": isExpanded\n                        })\n                    })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn(\"group\", \"react-scan-preview-line\", {\n                        \"react-scan-highlight\": isChanged\n                    }),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"react-scan-key\",\n                            children: [\n                                name,\n                                \":\"\n                            ]\n                        }),\n                        isEditing && isEditableValue(value, parentPath) ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(EditableValue, {\n                            value,\n                            onSave: (newValue)=>handleSave(section, name, newValue),\n                            onCancel: ()=>setIsEditing(false)\n                        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                            type: \"button\",\n                            className: \"truncate\",\n                            onClick: handleEdit,\n                            children: valuePreview\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyToClipboard, {\n                            text: clipboardText,\n                            className: \"opacity-0 transition-opacity group-hover:opacity-100\",\n                            children: (param)=>{\n                                let { ClipboardIcon } = param;\n                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                    children: ClipboardIcon\n                                });\n                            }\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn(\"react-scan-expandable\", {\n                        \"react-scan-expanded\": isExpanded\n                    }),\n                    children: isExpandableValue && isExpanded && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"react-scan-nested\",\n                        children: renderNestedProperties(value)\n                    })\n                })\n            ]\n        })\n    });\n};\n_s40(PropertyElement, \"qT3eUIDJMtK41UhEXrQi87RiD24=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c53 = PropertyElement;\nvar PropertySection = (param)=>{\n    let { refSticky, isSticky, section } = param;\n    _s41();\n    const refStickyElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refSection = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const { updates, currentIndex } = timelineState.value;\n    const [isExpanded, setIsExpanded] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const refs = useMergedRefs(refStickyElement, refSticky);\n    const pathMap = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertySection.useMemo4[pathMap]\": ()=>/* @__PURE__ */ new WeakMap()\n    }[\"PropertySection.useMemo4[pathMap]\"], []);\n    const { currentData, changedKeys } = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertySection.useMemo4\": ()=>{\n            var _updates_currentIndex;\n            const data = (_updates_currentIndex = updates[currentIndex]) !== null && _updates_currentIndex !== void 0 ? _updates_currentIndex : {\n                props: {\n                    current: {},\n                    changes: /* @__PURE__ */ new Set()\n                },\n                state: {\n                    current: {},\n                    changes: /* @__PURE__ */ new Set()\n                },\n                context: {\n                    current: {},\n                    changes: /* @__PURE__ */ new Set()\n                }\n            };\n            switch(section){\n                case \"props\":\n                    return {\n                        currentData: data.props.current,\n                        changedKeys: data.props.changes\n                    };\n                case \"state\":\n                    return {\n                        currentData: data.state.current,\n                        changedKeys: data.state.changes\n                    };\n                case \"context\":\n                    return {\n                        currentData: data.context.current,\n                        changedKeys: data.context.changes\n                    };\n                default:\n                    return {\n                        currentData: {},\n                        changedKeys: /* @__PURE__ */ new Set()\n                    };\n            }\n        }\n    }[\"PropertySection.useMemo4\"], [\n        section,\n        currentIndex,\n        updates\n    ]);\n    const toggleExpanded = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"PropertySection.useCallback9[toggleExpanded]\": ()=>{\n            setIsExpanded({\n                \"PropertySection.useCallback9[toggleExpanded]\": (state2)=>{\n                    if (isSticky && isExpanded) {\n                        return state2;\n                    }\n                    return !state2;\n                }\n            }[\"PropertySection.useCallback9[toggleExpanded]\"]);\n        }\n    }[\"PropertySection.useCallback9[toggleExpanded]\"], [\n        isExpanded,\n        isSticky\n    ]);\n    if (!currentData || (Array.isArray(currentData) ? currentData.length === 0 : Object.keys(currentData).length === 0)) {\n        return null;\n    }\n    const propertyCount = Array.isArray(currentData) ? currentData.length : Object.keys(currentData).length;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                ref: refs,\n                type: \"button\",\n                onClick: toggleExpanded,\n                \"data-sticky\": true,\n                className: \"react-section-header\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"w-4 h-4 flex items-center justify-center\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                            name: \"icon-chevron-right\",\n                            size: 12,\n                            className: cn({\n                                \"rotate-90\": isExpanded,\n                                \"rotate-0\": isSticky && isExpanded\n                            })\n                        })\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                        className: \"capitalize\",\n                        children: [\n                            section,\n                            \" \",\n                            !isExpanded && propertyCount > 0 && \"(\".concat(propertyCount, \")\")\n                        ]\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                ref: refSection,\n                className: \"react-scan-section\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn(\"react-scan-expandable\", {\n                        \"react-scan-expanded py-0.5\": isExpanded\n                    }),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"overflow-hidden\",\n                        children: Array.isArray(currentData) ? currentData.map((param)=>{\n                            let { name, value } = param;\n                            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                                name,\n                                value,\n                                section,\n                                level: 0,\n                                objectPathMap: pathMap,\n                                changedKeys\n                            }, name);\n                        }) : Object.entries(currentData).map((param)=>{\n                            let [key, value] = param;\n                            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                                name: key,\n                                value,\n                                section,\n                                level: 0,\n                                objectPathMap: pathMap,\n                                changedKeys\n                            }, key);\n                        })\n                    })\n                })\n            })\n        ]\n    });\n};\n_s41(PropertySection, \"rxQqfsII2ZDAajZp1Ar5uxVK+4U=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        useMergedRefs,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c54 = PropertySection;\n// src/web/views/inspector/what-changed.tsx\n\n\n// src/web/views/inspector/diff-value.tsx\n\n\nvar DiffValueView = (param)=>{\n    let { value, expanded, onToggle, isNegative } = param;\n    _s42();\n    const { value: safeValue, error } = safeGetValue(value);\n    const pathPrefix = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"DiffValueView.useMemo5[pathPrefix]\": ()=>Math.random().toString(36).slice(2)\n    }[\"DiffValueView.useMemo5[pathPrefix]\"], []);\n    const [expandedPaths, setExpandedPaths] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(/* @__PURE__ */ new Set());\n    if (error) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n            className: \"text-gray-500 font-italic\",\n            children: error\n        });\n    }\n    const isExpandable2 = safeValue !== null && typeof safeValue === \"object\" && !(safeValue instanceof Promise);\n    const renderExpandedValue = function(obj) {\n        let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n        if (obj === null || typeof obj !== \"object\") {\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                children: formatValuePreview(obj)\n            });\n        }\n        const entries = Object.entries(obj);\n        const seenObjects = /* @__PURE__ */ new WeakSet();\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            children: entries.map((param, i)=>{\n                let [key, val] = param;\n                const currentPath = path ? \"\".concat(path, \".\").concat(key) : key;\n                const fullPath = \"\".concat(pathPrefix, \".\").concat(currentPath);\n                const isExpanded = expandedPaths.has(fullPath);\n                const canExpand = val !== null && typeof val === \"object\";\n                let isCircular = false;\n                if (canExpand) {\n                    if (seenObjects.has(val)) {\n                        isCircular = true;\n                    } else {\n                        seenObjects.add(val);\n                    }\n                }\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn({\n                        \"mt-1\": i > 0\n                    }),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"flex items-center gap-1\",\n                            children: [\n                                canExpand && !isCircular && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    type: \"button\",\n                                    onClick: ()=>{\n                                        setExpandedPaths((prev)=>{\n                                            const next = new Set(prev);\n                                            if (next.has(fullPath)) {\n                                                next.delete(fullPath);\n                                            } else {\n                                                next.add(fullPath);\n                                            }\n                                            return next;\n                                        });\n                                    },\n                                    className: cn(\"flex items-center\", \"p-0 mr-1\", \"opacity-50\"),\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                        name: \"icon-chevron-right\",\n                                        size: 12,\n                                        className: cn(\"transition-[transform,color]\", \"text-[#4ade80]\", {\n                                            \"transform rotate-90\": isExpanded,\n                                            \"text-[#f87171]\": isNegative\n                                        })\n                                    })\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                    className: \"text-gray-500\",\n                                    children: [\n                                        key,\n                                        \":\"\n                                    ]\n                                }),\n                                isCircular ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: \"text-gray-500 font-italic\",\n                                    children: \"[Circular]\"\n                                }) : !canExpand || !isExpanded ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    children: formatValuePreview(val)\n                                }) : null\n                            ]\n                        }),\n                        canExpand && isExpanded && !isCircular && renderExpandedValue(val, currentPath)\n                    ]\n                }, key);\n            })\n        });\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"flex items-start gap-1\",\n        children: [\n            isExpandable2 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                onClick: onToggle,\n                className: cn(\"flex items-center\", \"p-0 mt-0.5 mr-1\", \"opacity-50\"),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-chevron-right\",\n                    size: 12,\n                    className: cn(\"transition-[transform,color]\", \"text-[#4ade80]\", {\n                        \"transform rotate-90\": expanded,\n                        \"text-[#f87171]\": isNegative\n                    })\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"flex-1\",\n                children: !expanded ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                    children: formatValuePreview(safeValue)\n                }) : renderExpandedValue(safeValue)\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyToClipboard, {\n                text: formatForClipboard(safeValue),\n                className: \"opacity-0 transition-opacity group-hover:opacity-100\",\n                children: (param)=>{\n                    let { ClipboardIcon } = param;\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                        children: ClipboardIcon\n                    });\n                }\n            })\n        ]\n    });\n};\n_s42(DiffValueView, \"nyCHcK97Xv4ceqlhDkt0Wgq/1LY=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState\n    ];\n});\n_c55 = DiffValueView;\n// src/web/views/inspector/timeline/index.tsx\n\n\n\n// src/web/views/slider/index.tsx\n\n\nvar Slider = (param)=>{\n    let { value, min, max, onChange, className, totalUpdates = max + 1 } = param;\n    _s43();\n    const refThumb = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refLastValue = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(value);\n    const updateThumbPosition = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Slider.useCallback10[updateThumbPosition]\": (value2)=>{\n            if (!refThumb.current) return;\n            const range = Math.max(1, max - min);\n            const valueOffset = value2 - min;\n            const percentage = min === max ? 0 : Math.min(100, Math.round(valueOffset / range * 100));\n            refThumb.current.style.setProperty(\"left\", \"\".concat(percentage, \"%\"));\n        }\n    }[\"Slider.useCallback10[updateThumbPosition]\"], [\n        min,\n        max\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Slider.useEffect16\": ()=>{\n            updateThumbPosition(value);\n        }\n    }[\"Slider.useEffect16\"], [\n        min,\n        max,\n        value\n    ]);\n    const handleChange = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Slider.useCallback10[handleChange]\": (e)=>{\n            const target = e.target;\n            const newValue = Number.parseInt(target.value, 10);\n            if (newValue >= totalUpdates) {\n                return;\n            }\n            if (refLastValue.current !== newValue) {\n                refLastValue.current = newValue;\n                updateThumbPosition(newValue);\n                onChange(e);\n            }\n        }\n    }[\"Slider.useCallback10[handleChange]\"], [\n        onChange,\n        updateThumbPosition,\n        totalUpdates\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        onMouseDown: (e)=>{\n            e.stopPropagation();\n        },\n        className: cn(\"react-scan-slider relative\", \"flex-1\", className),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n                type: \"range\",\n                value,\n                min,\n                max,\n                onChange: handleChange,\n                className: cn(\"react-scan-slider\", \"flex-1\", \"h-1.5\", \"bg-gray-200\", \"rounded-lg\", \"appearance-none\", \"cursor-pointer\", className)\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn(\"absolute inset-0 right-2\", \"pointer-events-none\"),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                    ref: refThumb\n                })\n            })\n        ]\n    });\n};\n_s43(Slider, \"0QQ5Jkyc7o31SVRy82TcVbQFsag=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c56 = Slider;\n// src/web/views/inspector/timeline/index.tsx\n\nvar Timeline = _s44((0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(_c57 = _s44((param)=>{\n    let { refSticky } = param;\n    _s44();\n    const refPlayInterval = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refChangeInterval = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const { currentIndex, isVisible, totalUpdates, updates } = timelineState.value;\n    const sliderValues = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"Timeline.useMemo6[sliderValues]\": ()=>{\n            return calculateSliderValues(totalUpdates, currentIndex);\n        }\n    }[\"Timeline.useMemo6[sliderValues]\"], [\n        totalUpdates,\n        currentIndex\n    ]);\n    const handleSliderChange = async (e)=>{\n        const target = e.target;\n        const value = Number.parseInt(target.value, 10);\n        const newIndex = Math.min(updates.length - 1, Math.max(0, value));\n        let isViewingHistory = false;\n        if (newIndex > 0 && newIndex < updates.length - 1) {\n            isViewingHistory = true;\n        }\n        timelineActions.updateFrame(newIndex, isViewingHistory);\n    };\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Timeline.useEffect17\": ()=>{\n            return ({\n                \"Timeline.useEffect17\": ()=>{\n                    if (refPlayInterval.current) {\n                        clearInterval(refPlayInterval.current);\n                    }\n                    if (refChangeInterval.current) {\n                        cancelAnimationFrame(refChangeInterval.current);\n                    }\n                }\n            })[\"Timeline.useEffect17\"];\n        }\n    }[\"Timeline.useEffect17\"], []);\n    const handleShowTimeline = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Timeline.useCallback11[handleShowTimeline]\": ()=>{\n            if (!isVisible) {\n                timelineActions.showTimeline();\n            }\n        }\n    }[\"Timeline.useCallback11[handleShowTimeline]\"], [\n        isVisible\n    ]);\n    const handleHideTimeline = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Timeline.useCallback11[handleHideTimeline]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            if (refPlayInterval.current) {\n                clearInterval(refPlayInterval.current);\n                refPlayInterval.current = null;\n            }\n            timelineActions.hideTimeline();\n        }\n    }[\"Timeline.useCallback11[handleHideTimeline]\"], []);\n    if (!(0,bippy__WEBPACK_IMPORTED_MODULE_0__.isInstrumentationActive)()) {\n        return null;\n    }\n    if (totalUpdates <= 1) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        ref: refSticky,\n        type: \"button\",\n        onClick: handleShowTimeline,\n        className: \"react-section-header\",\n        \"data-disable-scroll\": \"true\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                onClick: isVisible ? handleHideTimeline : void 0,\n                title: isVisible ? \"Hide Re-renders History\" : \"View Re-renders History\",\n                className: \"w-4 h-4 flex items-center justify-center\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-gallery-horizontal-end\",\n                    size: 12\n                })\n            }),\n            isVisible ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"text-xs text-gray-500\",\n                        children: sliderValues.leftValue\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Slider, {\n                        min: sliderValues.min,\n                        max: sliderValues.max,\n                        value: sliderValues.value,\n                        onChange: handleSliderChange,\n                        className: \"flex-1\",\n                        totalUpdates: sliderValues.rightValue + 1\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"text-xs text-gray-500\",\n                        children: sliderValues.rightValue\n                    })\n                ]\n            }) : \"View Change History\"\n        ]\n    });\n}, \"LhhVZBIFYeSqyzLu5ySq5SuRdfM=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n})), \"LhhVZBIFYeSqyzLu5ySq5SuRdfM=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c58 = Timeline;\n// src/web/views/inspector/what-changed.tsx\n\nvar safeGetValue2 = (value)=>{\n    if (value === null || value === void 0) return {\n        value\n    };\n    if (typeof value === \"function\") return {\n        value\n    };\n    if (typeof value !== \"object\") return {\n        value\n    };\n    if (isPromise(value)) {\n        return {\n            value: \"Promise\"\n        };\n    }\n    try {\n        var _proto_constructor;\n        const proto = Object.getPrototypeOf(value);\n        if (proto === Promise.prototype || (proto === null || proto === void 0 ? void 0 : (_proto_constructor = proto.constructor) === null || _proto_constructor === void 0 ? void 0 : _proto_constructor.name) === \"Promise\") {\n            return {\n                value: \"Promise\"\n            };\n        }\n        return {\n            value\n        };\n    } catch (e) {\n        return {\n            value: null,\n            error: \"Error accessing value\"\n        };\n    }\n};\nvar WhatChangedSection = _s45((0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(_c59 = _s45(()=>{\n    _s45();\n    const refShowTimeline = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const [shouldShowChanges, setShouldShowChanges] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"WhatChangedSection.useEffect18\": ()=>{\n            const rafId = 0;\n            const unsubscribe = timelineState.subscribe({\n                \"WhatChangedSection.useEffect18.unsubscribe\": async (state2)=>{\n                    cancelAnimationFrame(rafId);\n                    const { currentIndex, updates } = state2;\n                    if (currentIndex === 0) {\n                        setShouldShowChanges(false);\n                        return;\n                    }\n                    if (updates.length > 0) {\n                        if (!refShowTimeline.current) {\n                            refShowTimeline.current = true;\n                        }\n                        setShouldShowChanges(true);\n                    }\n                }\n            }[\"WhatChangedSection.useEffect18.unsubscribe\"]);\n            return ({\n                \"WhatChangedSection.useEffect18\": ()=>{\n                    unsubscribe();\n                    cancelAnimationFrame(rafId);\n                }\n            })[\"WhatChangedSection.useEffect18\"];\n        }\n    }[\"WhatChangedSection.useEffect18\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            refShowTimeline.current && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Timeline, {\n                        ...props\n                    })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(WhatChanged, {\n                        ...props,\n                        shouldShowChanges\n                    })\n            })\n        ]\n    });\n}, \"AtBu864PJ3xsQsSKnUAXj0fPR0Y=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n})), \"AtBu864PJ3xsQsSKnUAXj0fPR0Y=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c60 = WhatChangedSection;\nvar WhatChanged = _s46((0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(_c61 = _s46((param)=>{\n    let { isSticky, refSticky, calculateStickyTop, shouldShowChanges } = param;\n    _s46();\n    const [isExpanded, setIsExpanded] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(WhatsChangedHeader, {\n                refSticky,\n                isSticky,\n                calculateStickyTop,\n                isExpanded,\n                shouldShowChanges,\n                setIsExpanded\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn(\"react-scan-expandable\", {\n                    \"react-scan-expanded\": isExpanded\n                }),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: \"overflow-hidden\",\n                    children: shouldShowChanges && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn(\"relative\", \"flex flex-col gap-y-2\", \"pl-9 pr-2\", 'before:content-[\"\"] before:absolute before:inset-x-0 before:bottom-0 before:h-[1px] before:bg-[#333]'),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Section, {\n                                title: \"Props\",\n                                isExpanded\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Section, {\n                                title: \"State\",\n                                isExpanded\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Section, {\n                                title: \"Context\",\n                                isExpanded\n                            })\n                        ]\n                    })\n                })\n            })\n        ]\n    });\n}, \"VrD8iPacqu4ZScTVYBv9OG6VhrQ=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState\n    ];\n})), \"VrD8iPacqu4ZScTVYBv9OG6VhrQ=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState\n    ];\n});\n_c62 = WhatChanged;\nvar renderStateName = (key, componentName)=>{\n    if (Number.isNaN(Number(key))) {\n        return key;\n    }\n    const n = Number.parseInt(key);\n    const getOrdinalSuffix = (num)=>{\n        const lastDigit = num % 10;\n        const lastTwoDigits = num % 100;\n        if (lastTwoDigits >= 11 && lastTwoDigits <= 13) {\n            return \"th\";\n        }\n        switch(lastDigit){\n            case 1:\n                return \"st\";\n            case 2:\n                return \"nd\";\n            case 3:\n                return \"rd\";\n            default:\n                return \"th\";\n        }\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n        children: [\n            n,\n            getOrdinalSuffix(n),\n            \" hook\",\n            \" \",\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                style: {\n                    color: \"#666\"\n                },\n                children: [\n                    \"called in \",\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"i\", {\n                        className: \"text-[#A855F7] truncate\",\n                        children: componentName\n                    })\n                ]\n            })\n        ]\n    });\n};\nvar WhatsChangedHeader = _s47((0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(_c63 = _s47((param)=>{\n    let { refSticky, isSticky, calculateStickyTop, isExpanded, shouldShowChanges, setIsExpanded } = param;\n    _s47();\n    const refProps = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refState = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refContext = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refStats = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)({\n        isPropsChanged: false,\n        isStateChanged: false,\n        isContextChanged: false\n    });\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"WhatsChangedHeader.useEffect18\": ()=>{\n            const flash = throttle({\n                \"WhatsChangedHeader.useEffect18.flash\": ()=>{\n                    var _refProps_current, _refState_current, _refContext_current;\n                    const flashElements = [];\n                    if (((_refProps_current = refProps.current) === null || _refProps_current === void 0 ? void 0 : _refProps_current.dataset.flash) === \"true\") {\n                        flashElements.push(refProps.current);\n                    }\n                    if (((_refState_current = refState.current) === null || _refState_current === void 0 ? void 0 : _refState_current.dataset.flash) === \"true\") {\n                        flashElements.push(refState.current);\n                    }\n                    if (((_refContext_current = refContext.current) === null || _refContext_current === void 0 ? void 0 : _refContext_current.dataset.flash) === \"true\") {\n                        flashElements.push(refContext.current);\n                    }\n                    for (const element of flashElements){\n                        element.classList.remove(\"count-flash-white\");\n                        void element.offsetWidth;\n                        element.classList.add(\"count-flash-white\");\n                    }\n                }\n            }[\"WhatsChangedHeader.useEffect18.flash\"], 400);\n            const unsubscribe = timelineState.subscribe({\n                \"WhatsChangedHeader.useEffect18.unsubscribe\": (state2)=>{\n                    var _currentUpdate_props_changes, _currentUpdate_props, _currentUpdate_state_changes, _currentUpdate_state, _currentUpdate_context_changes, _currentUpdate_context;\n                    if (!refProps.current || !refState.current || !refContext.current) {\n                        return;\n                    }\n                    const { currentIndex, updates } = state2;\n                    const currentUpdate = updates[currentIndex];\n                    if (!currentUpdate || currentIndex === 0) {\n                        return;\n                    }\n                    flash();\n                    var _currentUpdate_props_changes_size, _currentUpdate_state_changes_size, _currentUpdate_context_changes_size;\n                    refStats.current = {\n                        isPropsChanged: ((_currentUpdate_props_changes_size = (_currentUpdate_props = currentUpdate.props) === null || _currentUpdate_props === void 0 ? void 0 : (_currentUpdate_props_changes = _currentUpdate_props.changes) === null || _currentUpdate_props_changes === void 0 ? void 0 : _currentUpdate_props_changes.size) !== null && _currentUpdate_props_changes_size !== void 0 ? _currentUpdate_props_changes_size : 0) > 0,\n                        isStateChanged: ((_currentUpdate_state_changes_size = (_currentUpdate_state = currentUpdate.state) === null || _currentUpdate_state === void 0 ? void 0 : (_currentUpdate_state_changes = _currentUpdate_state.changes) === null || _currentUpdate_state_changes === void 0 ? void 0 : _currentUpdate_state_changes.size) !== null && _currentUpdate_state_changes_size !== void 0 ? _currentUpdate_state_changes_size : 0) > 0,\n                        isContextChanged: ((_currentUpdate_context_changes_size = (_currentUpdate_context = currentUpdate.context) === null || _currentUpdate_context === void 0 ? void 0 : (_currentUpdate_context_changes = _currentUpdate_context.changes) === null || _currentUpdate_context_changes === void 0 ? void 0 : _currentUpdate_context_changes.size) !== null && _currentUpdate_context_changes_size !== void 0 ? _currentUpdate_context_changes_size : 0) > 0\n                    };\n                    if (refProps.current.dataset.flash !== \"true\") {\n                        refProps.current.dataset.flash = refStats.current.isPropsChanged.toString();\n                    }\n                    if (refState.current.dataset.flash !== \"true\") {\n                        refState.current.dataset.flash = refStats.current.isStateChanged.toString();\n                    }\n                    if (refContext.current.dataset.flash !== \"true\") {\n                        refContext.current.dataset.flash = refStats.current.isContextChanged.toString();\n                    }\n                }\n            }[\"WhatsChangedHeader.useEffect18.unsubscribe\"]);\n            return unsubscribe;\n        }\n    }[\"WhatsChangedHeader.useEffect18\"], []);\n    const toggleExpanded = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"WhatsChangedHeader.useCallback12[toggleExpanded]\": ()=>{\n            setIsExpanded({\n                \"WhatsChangedHeader.useCallback12[toggleExpanded]\": (state2)=>{\n                    if (isSticky && isExpanded) {\n                        return state2;\n                    }\n                    return !state2;\n                }\n            }[\"WhatsChangedHeader.useCallback12[toggleExpanded]\"]);\n        }\n    }[\"WhatsChangedHeader.useCallback12[toggleExpanded]\"], [\n        setIsExpanded,\n        isExpanded,\n        isSticky\n    ]);\n    const onTransitionStart = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"WhatsChangedHeader.useCallback12[onTransitionStart]\": (e)=>{\n            if (e.propertyName === \"max-height\") {\n                calculateStickyTop(true);\n            }\n        }\n    }[\"WhatsChangedHeader.useCallback12[onTransitionStart]\"], [\n        calculateStickyTop\n    ]);\n    const onTransitionEnd = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"WhatsChangedHeader.useCallback12[onTransitionEnd]\": (e)=>{\n            if (e.propertyName === \"max-height\") {\n                calculateStickyTop(false);\n            }\n        }\n    }[\"WhatsChangedHeader.useCallback12[onTransitionEnd]\"], [\n        calculateStickyTop\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n        ref: refSticky,\n        type: \"button\",\n        onClick: toggleExpanded,\n        onTransitionStart,\n        onTransitionEnd,\n        className: cn(\"react-section-header\", \"overflow-hidden\", \"max-h-0\", \"transition-[max-height]\", {\n            \"max-h-8\": shouldShowChanges\n        }),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: cn(\"flex-1 react-scan-expandable\", {\n                \"react-scan-expanded\": shouldShowChanges\n            }),\n            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"overflow-hidden\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"flex items-center whitespace-nowrap\",\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"flex items-center gap-x-2\",\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: \"w-4 h-4 flex items-center justify-center\",\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                        name: \"icon-chevron-right\",\n                                        size: 12,\n                                        className: cn({\n                                            \"rotate-90\": isExpanded,\n                                            \"rotate-0\": isSticky && isExpanded\n                                        })\n                                    })\n                                }),\n                                \"What changed?\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn(\"ml-auto\", \"change-scope\", \"opacity-0\", \"transition-opacity duration-300 delay-150\", {\n                                \"opacity-100\": !isExpanded\n                            }),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    ref: refProps,\n                                    children: \"props\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    ref: refState,\n                                    children: \"state\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    ref: refContext,\n                                    children: \"context\"\n                                })\n                            ]\n                        })\n                    ]\n                })\n            })\n        })\n    });\n}, \"x5UwCbxxK4UOgFkLbaSMjD6ZK7Y=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n})), \"x5UwCbxxK4UOgFkLbaSMjD6ZK7Y=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c64 = WhatsChangedHeader;\nvar Section = _s48((0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(_c65 = _s48((param)=>{\n    let { title, isExpanded } = param;\n    _s48();\n    const refFiberInfo = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refLastUpdated = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(/* @__PURE__ */ new Set());\n    const refChangesValues = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(/* @__PURE__ */ new Map());\n    const refLatestChanges = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const [changes, setChanges] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [expandedFns, setExpandedFns] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(/* @__PURE__ */ new Set());\n    const [expandedEntries, setExpandedEntries] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(/* @__PURE__ */ new Set());\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Section.useEffect18\": ()=>{\n            const unsubscribe = timelineState.subscribe({\n                \"Section.useEffect18.unsubscribe\": (state2)=>{\n                    const { currentIndex, updates } = state2;\n                    const currentUpdate = currentIndex >= 0 ? updates[currentIndex] : null;\n                    const prevUpdate = currentIndex > 0 ? updates[currentIndex - 1] : null;\n                    const currentData = currentUpdate === null || currentUpdate === void 0 ? void 0 : currentUpdate[title.toLowerCase()];\n                    const prevData = prevUpdate === null || prevUpdate === void 0 ? void 0 : prevUpdate[title.toLowerCase()];\n                    if (!currentData) {\n                        return;\n                    }\n                    refFiberInfo.current = currentUpdate === null || currentUpdate === void 0 ? void 0 : currentUpdate.fiberInfo;\n                    refLastUpdated.current.clear();\n                    const changesMap = new Map(refLatestChanges.current.map({\n                        \"Section.useEffect18.unsubscribe\": (c)=>[\n                                c.name,\n                                c\n                            ]\n                    }[\"Section.useEffect18.unsubscribe\"]));\n                    for (const { name, value } of currentData.current){\n                        var _currentData_changesCounts, _prevData_changesCounts, _prevData_current_find;\n                        var _currentData_changesCounts_get;\n                        const currentCount = (_currentData_changesCounts_get = (_currentData_changesCounts = currentData.changesCounts) === null || _currentData_changesCounts === void 0 ? void 0 : _currentData_changesCounts.get(name)) !== null && _currentData_changesCounts_get !== void 0 ? _currentData_changesCounts_get : 0;\n                        var _prevData_changesCounts_get;\n                        const prevCount = (_prevData_changesCounts_get = prevData === null || prevData === void 0 ? void 0 : (_prevData_changesCounts = prevData.changesCounts) === null || _prevData_changesCounts === void 0 ? void 0 : _prevData_changesCounts.get(name)) !== null && _prevData_changesCounts_get !== void 0 ? _prevData_changesCounts_get : 0;\n                        const count = Math.max(currentCount, prevCount);\n                        const prevValue = prevData === null || prevData === void 0 ? void 0 : (_prevData_current_find = prevData.current.find({\n                            \"Section.useEffect18.unsubscribe\": (p)=>p.name === name\n                        }[\"Section.useEffect18.unsubscribe\"])) === null || _prevData_current_find === void 0 ? void 0 : _prevData_current_find.value;\n                        const hasValueChange = !isEqual(value, prevValue);\n                        if (count > 0 || hasValueChange) {\n                            const { value: safePrevValue, error: prevError } = safeGetValue2(prevValue);\n                            const { value: safeCurrValue, error: currError } = safeGetValue2(value);\n                            const diff = getObjectDiff(safePrevValue, safeCurrValue);\n                            refChangesValues.current.set(name, {\n                                name,\n                                prevValue,\n                                currValue: value,\n                                prevError,\n                                currError,\n                                diff,\n                                isFunction: typeof value === \"function\"\n                            });\n                            const change = {\n                                name,\n                                value,\n                                prevValue,\n                                count\n                            };\n                            const existingChange = changesMap.get(name);\n                            if (!existingChange || existingChange.count !== count || !isEqual(existingChange.value, value)) {\n                                refLastUpdated.current.add(name);\n                            }\n                            changesMap.set(name, change);\n                        }\n                    }\n                    refLatestChanges.current = Array.from(changesMap.values());\n                    setChanges(refLatestChanges.current);\n                }\n            }[\"Section.useEffect18.unsubscribe\"]);\n            return unsubscribe;\n        }\n    }[\"Section.useEffect18\"], [\n        title\n    ]);\n    const handleExpandEntry = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Section.useCallback12[handleExpandEntry]\": (entryKey)=>{\n            setExpandedEntries({\n                \"Section.useCallback12[handleExpandEntry]\": (prev)=>{\n                    const next = new Set(prev);\n                    if (next.has(String(entryKey))) {\n                        next.delete(String(entryKey));\n                    } else {\n                        next.add(String(entryKey));\n                    }\n                    return next;\n                }\n            }[\"Section.useCallback12[handleExpandEntry]\"]);\n        }\n    }[\"Section.useCallback12[handleExpandEntry]\"], []);\n    const memoizedRenderStateName = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Section.useCallback12[memoizedRenderStateName]\": (name)=>{\n            if (!refFiberInfo.current) return name;\n            return renderStateName(name, refFiberInfo.current.displayName);\n        }\n    }[\"Section.useCallback12[memoizedRenderStateName]\"], []);\n    if (changes.length === 0) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"pb-2\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"text-xs text-[#888] mb-1.5\",\n                children: title\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"flex flex-col gap-2\",\n                children: changes.map((change)=>{\n                    const isEntryExpanded = expandedEntries.has(String(change.name));\n                    const values = refChangesValues.current.get(change.name);\n                    if (!values) return null;\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                type: \"button\",\n                                onClick: ()=>handleExpandEntry(String(change.name)),\n                                className: cn(\"relative\", \"flex items-center gap-2\", \"w-full p-0 cursor-pointer text-white text-xs\"),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: \"flex items-center gap-1.5 flex-1\",\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                            name: \"icon-chevron-right\",\n                                            size: 12,\n                                            className: cn(\"text-[#666] transition-transform duration-200 ease-[cubic-bezier(0.25,0.1,0.25,1)]\", {\n                                                \"rotate-90\": isEntryExpanded\n                                            })\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: \"whitespace-nowrap break-words text-left font-medium flex items-center gap-x-1.5\",\n                                            children: [\n                                                memoizedRenderStateName(String(change.name)),\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CountBadge, {\n                                                    forceFlash: isExpanded && refLastUpdated.current.has(change.name),\n                                                    count: change.count,\n                                                    isFunction: values.isFunction,\n                                                    showWarning: values.diff.changes.length === 0\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                })\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn(\"react-scan-expandable\", \"overflow-hidden\", {\n                                    \"react-scan-expanded\": isEntryExpanded\n                                }),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: \"pl-3 text-xs font-mono border-l-1 border-[#333] overflow-hidden\",\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                        className: \"flex flex-col gap-0.5\",\n                                        children: values.prevError || values.currError ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(AccessError, {\n                                            currError: values.currError,\n                                            prevError: values.prevError\n                                        }) : values.diff.changes.length > 0 ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffChange, {\n                                            title,\n                                            change,\n                                            diff: values.diff,\n                                            expandedFns,\n                                            renderName: memoizedRenderStateName,\n                                            setExpandedFns\n                                        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ReferenceOnlyChange, {\n                                            currValue: values.currValue,\n                                            entryKey: change.name,\n                                            expandedFns,\n                                            prevValue: values.prevValue,\n                                            setExpandedFns\n                                        })\n                                    })\n                                })\n                            })\n                        ]\n                    }, change.name);\n                })\n            })\n        ]\n    });\n}, \"D16S6DeC7M5ljWB+IQ5m+YBT+yw=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n})), \"D16S6DeC7M5ljWB+IQ5m+YBT+yw=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback\n    ];\n});\n_c66 = Section;\nvar AccessError = (param)=>{\n    let { prevError, currError } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            prevError && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"text-[#f87171] bg-[#2a1515] px-1.5 py-[3px] rounded-[2px] italic\",\n                children: prevError\n            }),\n            currError && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"text-[#4ade80] bg-[#1a2a1a] px-1.5 py-[3px] rounded-[2px] italic mt-0.5\",\n                children: currError\n            })\n        ]\n    });\n};\n_c67 = AccessError;\nvar DiffChange = (param)=>{\n    let { diff, title, renderName, change, expandedFns, setExpandedFns } = param;\n    return diff.changes.map((diffChange, i)=>{\n        const { value: prevDiffValue, error: prevDiffError } = safeGetValue2(diffChange.prevValue);\n        const { value: currDiffValue, error: currDiffError } = safeGetValue2(diffChange.currentValue);\n        const isFunction = typeof prevDiffValue === \"function\" || typeof currDiffValue === \"function\";\n        let path;\n        if (title === \"Props\") {\n            path = diffChange.path.length > 0 ? \"\".concat(renderName(String(change.name)), \".\").concat(formatPath(diffChange.path)) : void 0;\n        }\n        if (title === \"State\" && diffChange.path.length > 0) {\n            path = \"state.\".concat(formatPath(diffChange.path));\n        }\n        if (!path) {\n            path = formatPath(diffChange.path);\n        }\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: cn(\"flex flex-col gap-y-1\", {\n                \"mb-4\": i < diff.changes.length - 1\n            }),\n            children: [\n                path && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: \"text-[#666] text-[10px]\",\n                    children: path\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    type: \"button\",\n                    className: cn(\"group\", \"flex items-start\", \"py-[3px] px-1.5\", \"text-left text-[#f87171] bg-[#2a1515]\", \"rounded-[2px]\", \"overflow-hidden break-all\", isFunction && \"cursor-pointer\"),\n                    onClick: isFunction ? ()=>{\n                        const fnKey = \"\".concat(formatPath(diffChange.path), \"-prev\");\n                        setExpandedFns((prev)=>{\n                            const next = new Set(prev);\n                            if (next.has(fnKey)) {\n                                next.delete(fnKey);\n                            } else {\n                                next.add(fnKey);\n                            }\n                            return next;\n                        });\n                    } : void 0,\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"w-3 opacity-50\",\n                            children: \"-\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"flex-1 whitespace-nowrap font-mono\",\n                            children: prevDiffError ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                className: \"italic text-[#f87171]\",\n                                children: prevDiffError\n                            }) : isFunction ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: \"flex gap-1 items-start flex-col\",\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: \"flex gap-1 items-start w-full\",\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"flex-1 max-h-40\",\n                                                children: formatFunctionPreview(prevDiffValue, expandedFns.has(\"\".concat(formatPath(diffChange.path), \"-prev\")))\n                                            }),\n                                            typeof prevDiffValue === \"function\" && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyToClipboard, {\n                                                text: prevDiffValue.toString(),\n                                                className: \"opacity-0 transition-opacity group-hover:opacity-100\",\n                                                children: (param)=>{\n                                                    let { ClipboardIcon } = param;\n                                                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                        children: ClipboardIcon\n                                                    });\n                                                }\n                                            })\n                                        ]\n                                    }),\n                                    (prevDiffValue === null || prevDiffValue === void 0 ? void 0 : prevDiffValue.toString()) === (currDiffValue === null || currDiffValue === void 0 ? void 0 : currDiffValue.toString()) && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                        className: \"text-[10px] text-[#666] italic\",\n                                        children: \"Function reference changed\"\n                                    })\n                                ]\n                            }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffValueView, {\n                                value: prevDiffValue,\n                                expanded: expandedFns.has(\"\".concat(formatPath(diffChange.path), \"-prev\")),\n                                onToggle: ()=>{\n                                    const key = \"\".concat(formatPath(diffChange.path), \"-prev\");\n                                    setExpandedFns((prev)=>{\n                                        const next = new Set(prev);\n                                        if (next.has(key)) {\n                                            next.delete(key);\n                                        } else {\n                                            next.add(key);\n                                        }\n                                        return next;\n                                    });\n                                },\n                                isNegative: true\n                            })\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    type: \"button\",\n                    className: cn(\"group\", \"flex items-start\", \"py-[3px] px-1.5\", \"text-left text-[#4ade80] bg-[#1a2a1a]\", \"rounded-[2px]\", \"overflow-hidden break-all\", isFunction && \"cursor-pointer\"),\n                    onClick: isFunction ? ()=>{\n                        const fnKey = \"\".concat(formatPath(diffChange.path), \"-current\");\n                        setExpandedFns((prev)=>{\n                            const next = new Set(prev);\n                            if (next.has(fnKey)) {\n                                next.delete(fnKey);\n                            } else {\n                                next.add(fnKey);\n                            }\n                            return next;\n                        });\n                    } : void 0,\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"w-3 opacity-50\",\n                            children: \"+\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"flex-1 whitespace-pre-wrap font-mono\",\n                            children: currDiffError ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                className: \"italic text-[#4ade80]\",\n                                children: currDiffError\n                            }) : isFunction ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: \"flex gap-1 items-start flex-col\",\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: \"flex gap-1 items-start w-full\",\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"flex-1\",\n                                                children: formatFunctionPreview(currDiffValue, expandedFns.has(\"\".concat(formatPath(diffChange.path), \"-current\")))\n                                            }),\n                                            typeof currDiffValue === \"function\" && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyToClipboard, {\n                                                text: currDiffValue.toString(),\n                                                className: \"opacity-0 transition-opacity group-hover:opacity-100\",\n                                                children: (param)=>{\n                                                    let { ClipboardIcon } = param;\n                                                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                        children: ClipboardIcon\n                                                    });\n                                                }\n                                            })\n                                        ]\n                                    }),\n                                    (prevDiffValue === null || prevDiffValue === void 0 ? void 0 : prevDiffValue.toString()) === (currDiffValue === null || currDiffValue === void 0 ? void 0 : currDiffValue.toString()) && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                        className: \"text-[10px] text-[#666] italic\",\n                                        children: \"Function reference changed\"\n                                    })\n                                ]\n                            }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffValueView, {\n                                value: currDiffValue,\n                                expanded: expandedFns.has(\"\".concat(formatPath(diffChange.path), \"-current\")),\n                                onToggle: ()=>{\n                                    const key = \"\".concat(formatPath(diffChange.path), \"-current\");\n                                    setExpandedFns((prev)=>{\n                                        const next = new Set(prev);\n                                        if (next.has(key)) {\n                                            next.delete(key);\n                                        } else {\n                                            next.add(key);\n                                        }\n                                        return next;\n                                    });\n                                },\n                                isNegative: false\n                            })\n                        })\n                    ]\n                })\n            ]\n        }, \"\".concat(path, \"-\").concat(change.name, \"-\").concat(i));\n    });\n};\n_c68 = DiffChange;\nvar ReferenceOnlyChange = (param)=>{\n    let { prevValue, currValue, entryKey, expandedFns, setExpandedFns } = param;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"group flex items-start text-[#f87171] bg-[#2a1515] py-[3px] px-1.5 rounded-[2px]\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"w-3 opacity-50\",\n                        children: \"-\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"flex-1 whitespace-pre-wrap font-mono\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffValueView, {\n                            value: prevValue,\n                            expanded: expandedFns.has(\"\".concat(String(entryKey), \"-prev\")),\n                            onToggle: ()=>{\n                                const key = \"\".concat(String(entryKey), \"-prev\");\n                                setExpandedFns((prev)=>{\n                                    const next = new Set(prev);\n                                    if (next.has(key)) {\n                                        next.delete(key);\n                                    } else {\n                                        next.add(key);\n                                    }\n                                    return next;\n                                });\n                            },\n                            isNegative: true\n                        })\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"group flex items-start text-[#4ade80] bg-[#1a2a1a] py-[3px] px-1.5 rounded-[2px] mt-0.5\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"w-3 opacity-50\",\n                        children: \"+\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"flex-1 whitespace-pre-wrap font-mono\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffValueView, {\n                            value: currValue,\n                            expanded: expandedFns.has(\"\".concat(String(entryKey), \"-current\")),\n                            onToggle: ()=>{\n                                const key = \"\".concat(String(entryKey), \"-current\");\n                                setExpandedFns((prev)=>{\n                                    const next = new Set(prev);\n                                    if (next.has(key)) {\n                                        next.delete(key);\n                                    } else {\n                                        next.add(key);\n                                    }\n                                    return next;\n                                });\n                            },\n                            isNegative: false\n                        })\n                    })\n                ]\n            }),\n            typeof currValue === \"object\" && currValue !== null && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"text-[#666] text-[10px] italic mt-1\",\n                children: \"Reference changed but objects are the same\"\n            })\n        ]\n    });\n};\n_c69 = ReferenceOnlyChange;\nvar CountBadge = (param)=>{\n    let { count, forceFlash, isFunction, showWarning } = param;\n    _s49();\n    const refTimer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const refIsFirstRender = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(true);\n    const refBadge = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refPrevCount = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(count);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"CountBadge.useEffect18\": ()=>{\n            const element = refBadge.current;\n            if (!element || refPrevCount.current === count) {\n                return;\n            }\n            element.classList.remove(\"count-flash\");\n            void element.offsetWidth;\n            element.classList.add(\"count-flash\");\n            refPrevCount.current = count;\n        }\n    }[\"CountBadge.useEffect18\"], [\n        count\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"CountBadge.useEffect18\": ()=>{\n            if (refIsFirstRender.current) {\n                refIsFirstRender.current = false;\n                return;\n            }\n            if (forceFlash) {\n                refTimer.current = setTimeout({\n                    \"CountBadge.useEffect18\": ()=>{\n                        var _refBadge_current;\n                        (_refBadge_current = refBadge.current) === null || _refBadge_current === void 0 ? void 0 : _refBadge_current.classList.add(\"count-flash-white\");\n                        refTimer.current = setTimeout({\n                            \"CountBadge.useEffect18\": ()=>{\n                                var _refBadge_current;\n                                (_refBadge_current = refBadge.current) === null || _refBadge_current === void 0 ? void 0 : _refBadge_current.classList.remove(\"count-flash-white\");\n                            }\n                        }[\"CountBadge.useEffect18\"], 300);\n                    }\n                }[\"CountBadge.useEffect18\"], 500);\n            }\n            return ({\n                \"CountBadge.useEffect18\": ()=>{\n                    clearTimeout(refTimer.current);\n                }\n            })[\"CountBadge.useEffect18\"];\n        }\n    }[\"CountBadge.useEffect18\"], [\n        forceFlash\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        ref: refBadge,\n        className: \"count-badge\",\n        children: [\n            showWarning && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                name: \"icon-triangle-alert\",\n                className: \"text-yellow-500 mb-px\",\n                size: 14\n            }),\n            isFunction && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                name: \"icon-function\",\n                className: \"text-[#A855F7] mb-px\",\n                size: 14\n            }),\n            \"x\",\n            count\n        ]\n    });\n};\n_s49(CountBadge, \"Zirgc4p3xF3/oe9Z/RV4QV21GTo=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c70 = CountBadge;\n// src/web/views/inspector/index.tsx\n\nvar globalInspectorState = {\n    lastRendered: /* @__PURE__ */ new Map(),\n    expandedPaths: /* @__PURE__ */ new Set(),\n    cleanup: ()=>{\n        globalInspectorState.lastRendered.clear();\n        globalInspectorState.expandedPaths.clear();\n        flashManager.cleanupAll();\n        resetTracking();\n        timelineActions.reset();\n    }\n};\nvar InspectorErrorBoundary = class extends preact__WEBPACK_IMPORTED_MODULE_2__.Component {\n    static getDerivedStateFromError(e) {\n        return {\n            hasError: true,\n            error: e\n        };\n    }\n    render() {\n        if (this.state.hasError) {\n            var _this_state_error;\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"p-4 bg-red-950/50 h-screen backdrop-blur-sm\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"flex items-center gap-2 mb-3 text-red-400 font-medium\",\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                name: \"icon-flame\",\n                                className: \"text-red-500\",\n                                size: 16\n                            }),\n                            \"Something went wrong in the inspector\"\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"p-3 bg-black/40 rounded font-mono text-xs text-red-300 mb-4 break-words\",\n                        children: ((_this_state_error = this.state.error) === null || _this_state_error === void 0 ? void 0 : _this_state_error.message) || JSON.stringify(this.state.error)\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: this.handleReset,\n                        className: \"px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md text-sm font-medium transition-colors flex items-center justify-center gap-2\",\n                        children: \"Reset Inspector\"\n                    })\n                ]\n            });\n        }\n        return this.props.children;\n    }\n    constructor(){\n        super(...arguments);\n        this.state = {\n            hasError: false,\n            error: null\n        };\n        this.handleReset = ()=>{\n            this.setState({\n                hasError: false,\n                error: null\n            });\n            globalInspectorState.cleanup();\n        };\n    }\n};\nvar Inspector = _s50(constant(_c71 = _s50(()=>{\n    _s50();\n    const refInspector = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refLastInspectedFiber = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const isSettingsOpen = signalIsSettingsOpen.value;\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Inspector.useEffect19\": ()=>{\n            const processUpdate = {\n                \"Inspector.useEffect19.processUpdate\": (fiber)=>{\n                    if (!fiber) return;\n                    refLastInspectedFiber.current = fiber;\n                    const { data: inspectorData, shouldUpdate } = collectInspectorData(fiber);\n                    if (shouldUpdate) {\n                        const update = {\n                            timestamp: Date.now(),\n                            fiberInfo: extractMinimalFiberInfo(fiber),\n                            props: inspectorData.fiberProps,\n                            state: inspectorData.fiberState,\n                            context: inspectorData.fiberContext,\n                            stateNames: getStateNames(fiber)\n                        };\n                        timelineActions.addUpdate(update, fiber);\n                    }\n                }\n            }[\"Inspector.useEffect19.processUpdate\"];\n            const unSubState = Store.inspectState.subscribe({\n                \"Inspector.useEffect19.unSubState\": (state2)=>{\n                    var _refLastInspectedFiber_current;\n                    if (state2.kind !== \"focused\" || !state2.focusedDomElement) {\n                        refLastInspectedFiber.current = null;\n                        globalInspectorState.cleanup();\n                        return;\n                    }\n                    if (state2.kind === \"focused\") {\n                        signalIsSettingsOpen.value = false;\n                    }\n                    const { parentCompositeFiber } = getCompositeFiberFromElement(state2.focusedDomElement, state2.fiber);\n                    if (!parentCompositeFiber) return;\n                    const isNewComponent = ((_refLastInspectedFiber_current = refLastInspectedFiber.current) === null || _refLastInspectedFiber_current === void 0 ? void 0 : _refLastInspectedFiber_current.type) !== parentCompositeFiber.type;\n                    if (isNewComponent) {\n                        refLastInspectedFiber.current = parentCompositeFiber;\n                        globalInspectorState.cleanup();\n                        processUpdate(parentCompositeFiber);\n                    }\n                }\n            }[\"Inspector.useEffect19.unSubState\"]);\n            const unSubInspectorUpdate = inspectorUpdateSignal.subscribe({\n                \"Inspector.useEffect19.unSubInspectorUpdate\": ()=>{\n                    const inspectState = Store.inspectState.value;\n                    if (inspectState.kind !== \"focused\" || !inspectState.focusedDomElement) {\n                        refLastInspectedFiber.current = null;\n                        globalInspectorState.cleanup();\n                        return;\n                    }\n                    const { parentCompositeFiber } = getCompositeFiberFromElement(inspectState.focusedDomElement, inspectState.fiber);\n                    if (!parentCompositeFiber) {\n                        Store.inspectState.value = {\n                            kind: \"inspect-off\"\n                        };\n                        return;\n                    }\n                    processUpdate(parentCompositeFiber);\n                    if (!inspectState.focusedDomElement.isConnected) {\n                        refLastInspectedFiber.current = null;\n                        globalInspectorState.cleanup();\n                        Store.inspectState.value = {\n                            kind: \"inspecting\",\n                            hoveredDomElement: null\n                        };\n                    }\n                }\n            }[\"Inspector.useEffect19.unSubInspectorUpdate\"]);\n            return ({\n                \"Inspector.useEffect19\": ()=>{\n                    unSubState();\n                    unSubInspectorUpdate();\n                    globalInspectorState.cleanup();\n                }\n            })[\"Inspector.useEffect19\"];\n        }\n    }[\"Inspector.useEffect19\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(InspectorErrorBoundary, {\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            ref: refInspector,\n            className: cn(\"react-scan-inspector\", \"flex-1\", \"opacity-0\", \"overflow-y-auto overflow-x-hidden\", \"transition-opacity delay-0\", \"pointer-events-none\", {\n                \"opacity-100 delay-300 pointer-events-auto\": !isSettingsOpen\n            }),\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(WhatChangedSection, {}),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                    children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertySection, {\n                            section: \"props\",\n                            ...props\n                        })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                    children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertySection, {\n                            section: \"state\",\n                            ...props\n                        })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                    children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertySection, {\n                            section: \"context\",\n                            ...props\n                        })\n                })\n            ]\n        })\n    });\n}, \"nseohC7eVSYAoQQfOVS4Ql4Q+hw=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n})), \"nseohC7eVSYAoQQfOVS4Ql4Q+hw=\", false, function() {\n    return [\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef,\n        preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect\n    ];\n});\n_c72 = Inspector;\n// src/web/views/inspector/utils.ts\nvar getFiberFromElement = (element)=>{\n    if (\"__REACT_DEVTOOLS_GLOBAL_HOOK__\" in window) {\n        const hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n        if (!(hook === null || hook === void 0 ? void 0 : hook.renderers)) return null;\n        for (const [, renderer] of Array.from(hook.renderers)){\n            try {\n                var _renderer_findFiberByHostInstance;\n                const fiber = (_renderer_findFiberByHostInstance = renderer.findFiberByHostInstance) === null || _renderer_findFiberByHostInstance === void 0 ? void 0 : _renderer_findFiberByHostInstance.call(renderer, element);\n                if (fiber) return fiber;\n            } catch (e) {}\n        }\n    }\n    if (\"_reactRootContainer\" in element) {\n        var _rootContainer2__internalRoot_current, _rootContainer2__internalRoot;\n        const elementWithRoot = element;\n        const rootContainer2 = elementWithRoot._reactRootContainer;\n        var _rootContainer2__internalRoot_current_child;\n        return (_rootContainer2__internalRoot_current_child = rootContainer2 === null || rootContainer2 === void 0 ? void 0 : (_rootContainer2__internalRoot = rootContainer2._internalRoot) === null || _rootContainer2__internalRoot === void 0 ? void 0 : (_rootContainer2__internalRoot_current = _rootContainer2__internalRoot.current) === null || _rootContainer2__internalRoot_current === void 0 ? void 0 : _rootContainer2__internalRoot_current.child) !== null && _rootContainer2__internalRoot_current_child !== void 0 ? _rootContainer2__internalRoot_current_child : null;\n    }\n    for(const key in element){\n        if (key.startsWith(\"__reactInternalInstance$\") || key.startsWith(\"__reactFiber\")) {\n            const elementWithFiber = element;\n            return elementWithFiber[key];\n        }\n    }\n    return null;\n};\nvar getFirstStateNode = (fiber)=>{\n    let current = fiber;\n    while(current){\n        if (current.stateNode instanceof Element) {\n            return current.stateNode;\n        }\n        if (!current.child) {\n            break;\n        }\n        current = current.child;\n    }\n    while(current){\n        if (current.stateNode instanceof Element) {\n            return current.stateNode;\n        }\n        if (!current.return) {\n            break;\n        }\n        current = current.return;\n    }\n    return null;\n};\nvar getNearestFiberFromElement = (element)=>{\n    if (!element) return null;\n    try {\n        const fiber = getFiberFromElement(element);\n        if (!fiber) return null;\n        const res = getParentCompositeFiber(fiber);\n        return res ? res[0] : null;\n    } catch (e) {\n        return null;\n    }\n};\nvar getParentCompositeFiber = (fiber)=>{\n    let current = fiber;\n    let prevHost = null;\n    while(current){\n        if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isCompositeFiber)(current)) return [\n            current,\n            prevHost\n        ];\n        if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isHostFiber)(current) && !prevHost) prevHost = current;\n        current = current.return;\n    }\n    return null;\n};\nvar isFiberInTree = (fiber, root)=>{\n    {\n        const res = !!(0,bippy__WEBPACK_IMPORTED_MODULE_0__.traverseFiber)(root, (searchFiber)=>searchFiber === fiber);\n        return res;\n    }\n};\nvar getAssociatedFiberRect = async (element)=>{\n    const associatedFiber = getNearestFiberFromElement(element);\n    if (!associatedFiber) return null;\n    const stateNode = getFirstStateNode(associatedFiber);\n    if (!stateNode) return null;\n    const rect = (await batchGetBoundingRects([\n        stateNode\n    ])).get(stateNode);\n    if (!rect) return null;\n    return rect;\n};\nvar getCompositeComponentFromElement = (element)=>{\n    const associatedFiber = getNearestFiberFromElement(element);\n    if (!associatedFiber) return {};\n    const stateNode = getFirstStateNode(associatedFiber);\n    if (!stateNode) return {};\n    const parentCompositeFiberInfo = getParentCompositeFiber(associatedFiber);\n    if (!parentCompositeFiberInfo) {\n        return {};\n    }\n    const [parentCompositeFiber] = parentCompositeFiberInfo;\n    return {\n        parentCompositeFiber\n    };\n};\nvar getCompositeFiberFromElement = (element, knownFiber)=>{\n    var _getParentCompositeFiber;\n    if (!element.isConnected) return {};\n    let fiber = knownFiber !== null && knownFiber !== void 0 ? knownFiber : getNearestFiberFromElement(element);\n    if (!fiber) return {};\n    let curr = fiber;\n    let rootFiber = null;\n    let currentRootFiber = null;\n    while(curr){\n        var _ReactScanInternals_instrumentation;\n        if (!curr.stateNode) {\n            curr = curr.return;\n            continue;\n        }\n        if ((_ReactScanInternals_instrumentation = ReactScanInternals.instrumentation) === null || _ReactScanInternals_instrumentation === void 0 ? void 0 : _ReactScanInternals_instrumentation.fiberRoots.has(curr.stateNode)) {\n            rootFiber = curr;\n            currentRootFiber = curr.stateNode.current;\n            break;\n        }\n        curr = curr.return;\n    }\n    if (!rootFiber || !currentRootFiber) return {};\n    var _fiber_alternate;\n    fiber = isFiberInTree(fiber, currentRootFiber) ? fiber : (_fiber_alternate = fiber.alternate) !== null && _fiber_alternate !== void 0 ? _fiber_alternate : fiber;\n    if (!fiber) return {};\n    if (!getFirstStateNode(fiber)) return {};\n    const parentCompositeFiber = (_getParentCompositeFiber = getParentCompositeFiber(fiber)) === null || _getParentCompositeFiber === void 0 ? void 0 : _getParentCompositeFiber[0];\n    if (!parentCompositeFiber) return {};\n    var _parentCompositeFiber_alternate;\n    return {\n        parentCompositeFiber: isFiberInTree(parentCompositeFiber, currentRootFiber) ? parentCompositeFiber : (_parentCompositeFiber_alternate = parentCompositeFiber.alternate) !== null && _parentCompositeFiber_alternate !== void 0 ? _parentCompositeFiber_alternate : parentCompositeFiber\n    };\n};\nvar getChangedPropsDetailed = (fiber)=>{\n    var _fiber_alternate;\n    var _fiber_memoizedProps;\n    const currentProps = (_fiber_memoizedProps = fiber.memoizedProps) !== null && _fiber_memoizedProps !== void 0 ? _fiber_memoizedProps : {};\n    var _fiber_alternate_memoizedProps;\n    const previousProps = (_fiber_alternate_memoizedProps = (_fiber_alternate = fiber.alternate) === null || _fiber_alternate === void 0 ? void 0 : _fiber_alternate.memoizedProps) !== null && _fiber_alternate_memoizedProps !== void 0 ? _fiber_alternate_memoizedProps : {};\n    const changes = [];\n    for(const key in currentProps){\n        if (key === \"children\") continue;\n        const currentValue = currentProps[key];\n        const prevValue = previousProps[key];\n        if (!isEqual(currentValue, prevValue)) {\n            changes.push({\n                name: key,\n                value: currentValue,\n                prevValue,\n                type: 1 /* Props */ \n            });\n        }\n    }\n    return changes;\n};\nvar isRecord = (value)=>{\n    return value !== null && typeof value === \"object\";\n};\nvar getOverrideMethods = ()=>{\n    let overrideProps = null;\n    let overrideHookState = null;\n    let overrideContext = null;\n    if (\"__REACT_DEVTOOLS_GLOBAL_HOOK__\" in window) {\n        const hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n        if (!(hook === null || hook === void 0 ? void 0 : hook.renderers)) {\n            return {\n                overrideProps: null,\n                overrideHookState: null,\n                overrideContext: null\n            };\n        }\n        for (const [, renderer] of Array.from(hook.renderers)){\n            try {\n                const devToolsRenderer = renderer;\n                if (overrideHookState) {\n                    const prevOverrideHookState = overrideHookState;\n                    overrideHookState = (fiber, id, path, value)=>{\n                        var _devToolsRenderer_overrideHookState;\n                        let current = fiber.memoizedState;\n                        for(let i = 0; i < Number(id); i++){\n                            if (!(current === null || current === void 0 ? void 0 : current.next)) break;\n                            current = current.next;\n                        }\n                        if (current === null || current === void 0 ? void 0 : current.queue) {\n                            const queue = current.queue;\n                            if (isRecord(queue) && \"dispatch\" in queue) {\n                                const dispatch = queue.dispatch;\n                                dispatch(value);\n                                return;\n                            }\n                        }\n                        prevOverrideHookState(fiber, id, path, value);\n                        (_devToolsRenderer_overrideHookState = devToolsRenderer.overrideHookState) === null || _devToolsRenderer_overrideHookState === void 0 ? void 0 : _devToolsRenderer_overrideHookState.call(devToolsRenderer, fiber, id, path, value);\n                    };\n                } else if (devToolsRenderer.overrideHookState) {\n                    overrideHookState = devToolsRenderer.overrideHookState;\n                }\n                if (overrideProps) {\n                    const prevOverrideProps = overrideProps;\n                    overrideProps = (fiber, path, value)=>{\n                        var _devToolsRenderer_overrideProps;\n                        prevOverrideProps(fiber, path, value);\n                        (_devToolsRenderer_overrideProps = devToolsRenderer.overrideProps) === null || _devToolsRenderer_overrideProps === void 0 ? void 0 : _devToolsRenderer_overrideProps.call(devToolsRenderer, fiber, path, value);\n                    };\n                } else if (devToolsRenderer.overrideProps) {\n                    overrideProps = devToolsRenderer.overrideProps;\n                }\n                overrideContext = (fiber, contextType, value)=>{\n                    let current = fiber;\n                    while(current){\n                        const type = current.type;\n                        if (type === contextType || (type === null || type === void 0 ? void 0 : type.Provider) === contextType) {\n                            if (overrideProps) {\n                                overrideProps(current, [\n                                    \"value\"\n                                ], value);\n                                if (current.alternate) {\n                                    overrideProps(current.alternate, [\n                                        \"value\"\n                                    ], value);\n                                }\n                            }\n                            break;\n                        }\n                        current = current.return;\n                    }\n                };\n            } catch (e) {}\n        }\n    }\n    return {\n        overrideProps,\n        overrideHookState,\n        overrideContext\n    };\n};\nvar nonVisualTags = /* @__PURE__ */ new Set([\n    \"HTML\",\n    \"HEAD\",\n    \"META\",\n    \"TITLE\",\n    \"BASE\",\n    \"SCRIPT\",\n    \"SCRIPT\",\n    \"STYLE\",\n    \"LINK\",\n    \"NOSCRIPT\",\n    \"SOURCE\",\n    \"TRACK\",\n    \"EMBED\",\n    \"OBJECT\",\n    \"PARAM\",\n    \"TEMPLATE\",\n    \"PORTAL\",\n    \"SLOT\",\n    \"AREA\",\n    \"XML\",\n    \"DOCTYPE\",\n    \"COMMENT\"\n]);\nvar findComponentDOMNode = function(fiber) {\n    let excludeNonVisualTags = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n    if (fiber.stateNode && \"nodeType\" in fiber.stateNode) {\n        const element = fiber.stateNode;\n        if (excludeNonVisualTags && element.tagName && nonVisualTags.has(element.tagName.toLowerCase())) {\n            return null;\n        }\n        return element;\n    }\n    let child = fiber.child;\n    while(child){\n        const result = findComponentDOMNode(child, excludeNonVisualTags);\n        if (result) return result;\n        child = child.sibling;\n    }\n    return null;\n};\nvar getInspectableElements = function() {\n    let root = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document.body;\n    const result = [];\n    const findInspectableFiber = (element)=>{\n        if (!element) return null;\n        const { parentCompositeFiber } = getCompositeComponentFromElement(element);\n        if (!parentCompositeFiber) return null;\n        const componentRoot = findComponentDOMNode(parentCompositeFiber);\n        return componentRoot === element ? element : null;\n    };\n    const traverse = function(element) {\n        let depth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        const inspectable = findInspectableFiber(element);\n        if (inspectable) {\n            const { parentCompositeFiber } = getCompositeComponentFromElement(inspectable);\n            if (!parentCompositeFiber) return;\n            var _getDisplayName5;\n            result.push({\n                element: inspectable,\n                depth,\n                name: (_getDisplayName5 = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(parentCompositeFiber.type)) !== null && _getDisplayName5 !== void 0 ? _getDisplayName5 : \"Unknown\",\n                fiber: parentCompositeFiber\n            });\n        }\n        for (const child of Array.from(element.children)){\n            traverse(child, inspectable ? depth + 1 : depth);\n        }\n    };\n    traverse(root);\n    return result;\n};\nvar fiberMap = /* @__PURE__ */ new WeakMap();\nvar getInspectableAncestors = (element)=>{\n    const result = [];\n    const findInspectableFiber = (element2)=>{\n        if (!element2) return null;\n        const { parentCompositeFiber } = getCompositeComponentFromElement(element2);\n        if (!parentCompositeFiber) return null;\n        const componentRoot = findComponentDOMNode(parentCompositeFiber);\n        if (componentRoot === element2) {\n            fiberMap.set(element2, parentCompositeFiber);\n            return element2;\n        }\n        return null;\n    };\n    let current = element;\n    while(current && current !== document.body){\n        const inspectable = findInspectableFiber(current);\n        if (inspectable) {\n            const fiber = fiberMap.get(inspectable);\n            if (fiber) {\n                var _getDisplayName5;\n                result.unshift({\n                    element: inspectable,\n                    depth: 0,\n                    name: (_getDisplayName5 = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type)) !== null && _getDisplayName5 !== void 0 ? _getDisplayName5 : \"Unknown\",\n                    fiber\n                });\n            }\n        }\n        current = current.parentElement;\n    }\n    return result;\n};\nvar isExpandable = (value)=>{\n    if (value === null || typeof value !== \"object\" || isPromise(value)) {\n        return false;\n    }\n    if (value instanceof ArrayBuffer) {\n        return true;\n    }\n    if (value instanceof DataView) {\n        return true;\n    }\n    if (ArrayBuffer.isView(value)) {\n        return true;\n    }\n    if (value instanceof Map || value instanceof Set) {\n        return value.size > 0;\n    }\n    if (Array.isArray(value)) {\n        return value.length > 0;\n    }\n    return Object.keys(value).length > 0;\n};\nvar isEditableValue = (value, parentPath)=>{\n    if (value == null) return true;\n    if (isPromise(value)) return false;\n    if (typeof value === \"function\") {\n        return false;\n    }\n    if (parentPath) {\n        const parts = parentPath.split(\".\");\n        let currentPath = \"\";\n        for (const part of parts){\n            currentPath = currentPath ? \"\".concat(currentPath, \".\").concat(part) : part;\n            const obj = globalInspectorState.lastRendered.get(currentPath);\n            if (obj instanceof DataView || obj instanceof ArrayBuffer || ArrayBuffer.isView(obj)) {\n                return false;\n            }\n        }\n    }\n    switch(value.constructor){\n        case Date:\n        case RegExp:\n        case Error:\n            return true;\n        default:\n            switch(typeof value){\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                case \"bigint\":\n                    return true;\n                default:\n                    return false;\n            }\n    }\n};\nvar getPath = (componentName, section, parentPath, key)=>{\n    if (parentPath) {\n        return \"\".concat(componentName, \".\").concat(parentPath, \".\").concat(key);\n    }\n    if (section === \"context\" && !key.startsWith(\"context.\")) {\n        return \"\".concat(componentName, \".\").concat(section, \".context.\").concat(key);\n    }\n    return \"\".concat(componentName, \".\").concat(section, \".\").concat(key);\n};\nvar sanitizeString = (value)=>{\n    return value.replace(/[<>]/g, \"\").replace(/javascript:/gi, \"\").replace(/data:/gi, \"\").replace(/on\\w+=/gi, \"\").slice(0, 5e4);\n};\nvar formatValue = (value)=>{\n    const metadata2 = ensureRecord(value);\n    return metadata2.displayValue;\n};\nvar formatForClipboard = (value)=>{\n    try {\n        if (value === null) return \"null\";\n        if (value === void 0) return \"undefined\";\n        if (isPromise(value)) return \"Promise\";\n        if (typeof value === \"function\") {\n            const fnStr = value.toString();\n            try {\n                const formatted = fnStr.replace(/\\s+/g, \" \").replace(/{\\s+/g, \"{\\n  \").replace(/;\\s+/g, \";\\n  \").replace(/}\\s*$/g, \"\\n}\").replace(/\\(\\s+/g, \"(\").replace(/\\s+\\)/g, \")\").replace(/,\\s+/g, \", \");\n                return formatted;\n            } catch (e) {\n                return fnStr;\n            }\n        }\n        switch(true){\n            case value instanceof Date:\n                return value.toISOString();\n            case value instanceof RegExp:\n                return value.toString();\n            case value instanceof Error:\n                return \"\".concat(value.name, \": \").concat(value.message);\n            case value instanceof Map:\n                return JSON.stringify(Array.from(value.entries()), null, 2);\n            case value instanceof Set:\n                return JSON.stringify(Array.from(value), null, 2);\n            case value instanceof DataView:\n                return JSON.stringify(Array.from(new Uint8Array(value.buffer)), null, 2);\n            case value instanceof ArrayBuffer:\n                return JSON.stringify(Array.from(new Uint8Array(value)), null, 2);\n            case ArrayBuffer.isView(value) && \"length\" in value:\n                return JSON.stringify(Array.from(value), null, 2);\n            case Array.isArray(value):\n                return JSON.stringify(value, null, 2);\n            case typeof value === \"object\":\n                return JSON.stringify(value, null, 2);\n            default:\n                return String(value);\n        }\n    } catch (e) {\n        return String(value);\n    }\n};\nvar detectValueType = (value)=>{\n    const trimmed = value.trim();\n    switch(trimmed){\n        case \"undefined\":\n            return {\n                type: \"undefined\",\n                value: void 0\n            };\n        case \"null\":\n            return {\n                type: \"null\",\n                value: null\n            };\n        case \"true\":\n            return {\n                type: \"boolean\",\n                value: true\n            };\n        case \"false\":\n            return {\n                type: \"boolean\",\n                value: false\n            };\n    }\n    if (/^\".*\"$/.test(trimmed)) {\n        return {\n            type: \"string\",\n            value: trimmed.slice(1, -1)\n        };\n    }\n    if (/^-?\\d+(?:\\.\\d+)?$/.test(trimmed)) {\n        return {\n            type: \"number\",\n            value: Number(trimmed)\n        };\n    }\n    return {\n        type: \"string\",\n        value: '\"'.concat(trimmed, '\"')\n    };\n};\nvar formatInitialValue = (value)=>{\n    if (value === void 0) return \"undefined\";\n    if (value === null) return \"null\";\n    if (typeof value === \"string\") return '\"'.concat(value, '\"');\n    return String(value);\n};\nvar updateNestedValue = (obj, path, value)=>{\n    try {\n        if (path.length === 0) return value;\n        const [key, ...rest] = path;\n        if (Array.isArray(obj) && obj.every((item)=>\"name\" in item && \"value\" in item)) {\n            const index = obj.findIndex((item)=>item.name === key);\n            if (index === -1) return obj;\n            const newArray = [\n                ...obj\n            ];\n            if (rest.length === 0) {\n                newArray[index] = {\n                    ...newArray[index],\n                    value\n                };\n            } else {\n                newArray[index] = {\n                    ...newArray[index],\n                    value: updateNestedValue(newArray[index].value, rest, value)\n                };\n            }\n            return newArray;\n        }\n        if (obj instanceof Map) {\n            const newMap = new Map(obj);\n            if (rest.length === 0) {\n                newMap.set(key, value);\n            } else {\n                const currentValue = newMap.get(key);\n                newMap.set(key, updateNestedValue(currentValue, rest, value));\n            }\n            return newMap;\n        }\n        if (Array.isArray(obj)) {\n            const index = Number.parseInt(key, 10);\n            const newArray = [\n                ...obj\n            ];\n            if (rest.length === 0) {\n                newArray[index] = value;\n            } else {\n                newArray[index] = updateNestedValue(obj[index], rest, value);\n            }\n            return newArray;\n        }\n        if (obj && typeof obj === \"object\") {\n            if (rest.length === 0) {\n                return {\n                    ...obj,\n                    [key]: value\n                };\n            }\n            return {\n                ...obj,\n                [key]: updateNestedValue(obj[key], rest, value)\n            };\n        }\n        return value;\n    } catch (e) {\n        return obj;\n    }\n};\nvar areFunctionsEqual = (prev, current)=>{\n    try {\n        if (typeof prev !== \"function\" || typeof current !== \"function\") {\n            return false;\n        }\n        return prev.toString() === current.toString();\n    } catch (e) {\n        return false;\n    }\n};\nvar getObjectDiff = function(prev, current) {\n    let path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], seen = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : /* @__PURE__ */ new WeakSet();\n    if (prev === current) {\n        return {\n            type: \"primitive\",\n            changes: [],\n            hasDeepChanges: false\n        };\n    }\n    if (typeof prev === \"function\" && typeof current === \"function\") {\n        const isSameFunction = areFunctionsEqual(prev, current);\n        return {\n            type: \"primitive\",\n            changes: [\n                {\n                    path,\n                    prevValue: prev,\n                    currentValue: current,\n                    sameFunction: isSameFunction\n                }\n            ],\n            hasDeepChanges: !isSameFunction\n        };\n    }\n    if (prev === null || current === null || prev === void 0 || current === void 0 || typeof prev !== \"object\" || typeof current !== \"object\") {\n        return {\n            type: \"primitive\",\n            changes: [\n                {\n                    path,\n                    prevValue: prev,\n                    currentValue: current\n                }\n            ],\n            hasDeepChanges: true\n        };\n    }\n    if (seen.has(prev) || seen.has(current)) {\n        return {\n            type: \"object\",\n            changes: [\n                {\n                    path,\n                    prevValue: \"[Circular]\",\n                    currentValue: \"[Circular]\"\n                }\n            ],\n            hasDeepChanges: false\n        };\n    }\n    seen.add(prev);\n    seen.add(current);\n    const prevObj = prev;\n    const currentObj = current;\n    const allKeys = /* @__PURE__ */ new Set([\n        ...Object.keys(prevObj),\n        ...Object.keys(currentObj)\n    ]);\n    const changes = [];\n    let hasDeepChanges = false;\n    for (const key of allKeys){\n        const prevValue = prevObj[key];\n        const currentValue = currentObj[key];\n        if (prevValue !== currentValue) {\n            if (typeof prevValue === \"object\" && typeof currentValue === \"object\" && prevValue !== null && currentValue !== null) {\n                const nestedDiff = getObjectDiff(prevValue, currentValue, [\n                    ...path,\n                    key\n                ], seen);\n                changes.push(...nestedDiff.changes);\n                if (nestedDiff.hasDeepChanges) {\n                    hasDeepChanges = true;\n                }\n            } else {\n                changes.push({\n                    path: [\n                        ...path,\n                        key\n                    ],\n                    prevValue,\n                    currentValue\n                });\n                hasDeepChanges = true;\n            }\n        }\n    }\n    return {\n        type: \"object\",\n        changes,\n        hasDeepChanges\n    };\n};\nvar formatPath = (path)=>{\n    if (path.length === 0) return \"\";\n    return path.reduce((acc, segment, i)=>{\n        if (/^\\d+$/.test(segment)) {\n            return \"\".concat(acc, \"[\").concat(segment, \"]\");\n        }\n        return i === 0 ? segment : \"\".concat(acc, \".\").concat(segment);\n    }, \"\");\n};\nfunction hackyJsFormatter(code) {\n    const normalizedCode = code.replace(/\\s+/g, \" \").trim();\n    const rawTokens = [];\n    let current = \"\";\n    for(let i = 0; i < normalizedCode.length; i++){\n        const c = normalizedCode[i];\n        if (c === \"=\" && normalizedCode[i + 1] === \">\") {\n            if (current.trim()) rawTokens.push(current.trim());\n            rawTokens.push(\"=>\");\n            current = \"\";\n            i++;\n            continue;\n        }\n        if (/[(){}[\\];,<>:\\?!]/.test(c)) {\n            if (current.trim()) {\n                rawTokens.push(current.trim());\n            }\n            rawTokens.push(c);\n            current = \"\";\n        } else if (/\\s/.test(c)) {\n            if (current.trim()) {\n                rawTokens.push(current.trim());\n            }\n            current = \"\";\n        } else {\n            current += c;\n        }\n    }\n    if (current.trim()) {\n        rawTokens.push(current.trim());\n    }\n    const merged = [];\n    for(let i = 0; i < rawTokens.length; i++){\n        const t = rawTokens[i];\n        const n = rawTokens[i + 1];\n        if (t === \"(\" && n === \")\" || t === \"[\" && n === \"]\" || t === \"{\" && n === \"}\" || t === \"<\" && n === \">\") {\n            merged.push(t + n);\n            i++;\n        } else {\n            merged.push(t);\n        }\n    }\n    const arrowParamSet = /* @__PURE__ */ new Set();\n    const genericSet = /* @__PURE__ */ new Set();\n    function findMatchingPair(openTok, closeTok, startIndex) {\n        let depth = 0;\n        for(let j = startIndex; j < merged.length; j++){\n            const token = merged[j];\n            if (token === openTok) depth++;\n            else if (token === closeTok) {\n                depth--;\n                if (depth === 0) return j;\n            }\n        }\n        return -1;\n    }\n    for(let i = 0; i < merged.length; i++){\n        const t = merged[i];\n        if (t === \"(\") {\n            const closeIndex = findMatchingPair(\"(\", \")\", i);\n            if (closeIndex !== -1 && merged[closeIndex + 1] === \"=>\") {\n                for(let k = i; k <= closeIndex; k++){\n                    arrowParamSet.add(k);\n                }\n            }\n        }\n    }\n    for(let i = 1; i < merged.length; i++){\n        const prev = merged[i - 1];\n        const t = merged[i];\n        if (/^[a-zA-Z0-9_$]+$/.test(prev) && t === \"<\") {\n            const closeIndex = findMatchingPair(\"<\", \">\", i);\n            if (closeIndex !== -1) {\n                for(let k = i; k <= closeIndex; k++){\n                    genericSet.add(k);\n                }\n            }\n        }\n    }\n    let indentLevel = 0;\n    const indentStr = \"  \";\n    const lines = [];\n    let line = \"\";\n    function pushLine() {\n        if (line.trim()) {\n            lines.push(line.replace(/\\s+$/, \"\"));\n        }\n        line = \"\";\n    }\n    function newLine() {\n        pushLine();\n        line = indentStr.repeat(indentLevel);\n    }\n    const stack = [];\n    function stackTop() {\n        return stack.length ? stack[stack.length - 1] : null;\n    }\n    function placeToken(tok) {\n        let noSpaceBefore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (!line.trim()) {\n            line += tok;\n        } else {\n            if (noSpaceBefore || /^[),;:\\].}>]$/.test(tok)) {\n                line += tok;\n            } else {\n                line += \" \".concat(tok);\n            }\n        }\n    }\n    for(let i = 0; i < merged.length; i++){\n        const tok = merged[i];\n        const next = merged[i + 1] || \"\";\n        if ([\n            \"(\",\n            \"{\",\n            \"[\",\n            \"<\"\n        ].includes(tok)) {\n            placeToken(tok);\n            stack.push(tok);\n            if (tok === \"{\") {\n                indentLevel++;\n                newLine();\n            } else if (tok === \"(\" || tok === \"[\" || tok === \"<\") {\n                if (arrowParamSet.has(i) && tok === \"(\" || genericSet.has(i) && tok === \"<\") {} else {\n                    const directClose = {\n                        \"(\": \")\",\n                        \"[\": \"]\",\n                        \"<\": \">\"\n                    }[tok];\n                    if (next !== directClose && next !== \"()\" && next !== \"[]\" && next !== \"<>\") {\n                        indentLevel++;\n                        newLine();\n                    }\n                }\n            }\n        } else if ([\n            \")\",\n            \"}\",\n            \"]\",\n            \">\"\n        ].includes(tok)) {\n            const opening = stackTop();\n            if (tok === \")\" && opening === \"(\" || tok === \"]\" && opening === \"[\" || tok === \">\" && opening === \"<\") {\n                if (!(arrowParamSet.has(i) && tok === \")\") && !(genericSet.has(i) && tok === \">\")) {\n                    indentLevel = Math.max(indentLevel - 1, 0);\n                    newLine();\n                }\n            } else if (tok === \"}\" && opening === \"{\") {\n                indentLevel = Math.max(indentLevel - 1, 0);\n                newLine();\n            }\n            stack.pop();\n            placeToken(tok);\n            if (tok === \"}\") {\n                newLine();\n            }\n        } else if (/^\\(\\)|\\[\\]|\\{\\}|\\<\\>$/.test(tok)) {\n            placeToken(tok);\n        } else if (tok === \"=>\") {\n            placeToken(tok);\n        } else if (tok === \";\") {\n            placeToken(tok, true);\n            newLine();\n        } else if (tok === \",\") {\n            placeToken(tok, true);\n            const top = stackTop();\n            if (!(arrowParamSet.has(i) && top === \"(\") && !(genericSet.has(i) && top === \"<\")) {\n                if (top && [\n                    \"{\",\n                    \"[\",\n                    \"(\",\n                    \"<\"\n                ].includes(top)) {\n                    newLine();\n                }\n            }\n        } else {\n            placeToken(tok);\n        }\n    }\n    pushLine();\n    return lines.join(\"\\n\").replace(/\\n\\s*\\n+/g, \"\\n\").trim();\n}\nvar formatFunctionPreview = function(fn) {\n    let expanded = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    try {\n        const fnStr = fn.toString();\n        const match = fnStr.match(/(?:function\\s*)?(?:\\(([^)]*)\\)|([^=>\\s]+))\\s*=>?/);\n        if (!match) return \"\\u0192\";\n        const params = match[1] || match[2] || \"\";\n        const cleanParams = params.replace(/\\s+/g, \"\");\n        if (!expanded) {\n            return \"ƒ (\".concat(cleanParams, \") => ...\");\n        }\n        return hackyJsFormatter(fnStr);\n    } catch (e) {\n        return \"\\u0192\";\n    }\n};\nvar formatValuePreview = (value)=>{\n    if (value === null) return \"null\";\n    if (value === void 0) return \"undefined\";\n    if (typeof value === \"string\") return '\"'.concat(value.length > 150 ? \"\".concat(value.slice(0, 20), \"...\") : value, '\"');\n    if (typeof value === \"number\" || typeof value === \"boolean\") return String(value);\n    if (typeof value === \"function\") return formatFunctionPreview(value);\n    if (Array.isArray(value)) return \"Array(\".concat(value.length, \")\");\n    if (value instanceof Map) return \"Map(\".concat(value.size, \")\");\n    if (value instanceof Set) return \"Set(\".concat(value.size, \")\");\n    if (value instanceof Date) return value.toISOString();\n    if (value instanceof RegExp) return value.toString();\n    if (value instanceof Error) return \"\".concat(value.name, \": \").concat(value.message);\n    if (typeof value === \"object\") {\n        const keys = Object.keys(value);\n        return \"{\".concat(keys.length > 2 ? \"\".concat(keys.slice(0, 2).join(\", \"), \", ...\") : keys.join(\", \"), \"}\");\n    }\n    return String(value);\n};\nvar safeGetValue = (value)=>{\n    if (value === null || value === void 0) return {\n        value\n    };\n    if (typeof value === \"function\") return {\n        value\n    };\n    if (typeof value !== \"object\") return {\n        value\n    };\n    if (value instanceof Promise) {\n        return {\n            value: \"Promise\"\n        };\n    }\n    try {\n        var _proto_constructor;\n        const proto = Object.getPrototypeOf(value);\n        if (proto === Promise.prototype || (proto === null || proto === void 0 ? void 0 : (_proto_constructor = proto.constructor) === null || _proto_constructor === void 0 ? void 0 : _proto_constructor.name) === \"Promise\") {\n            return {\n                value: \"Promise\"\n            };\n        }\n        return {\n            value\n        };\n    } catch (e) {\n        return {\n            value: null,\n            error: \"Error accessing value\"\n        };\n    }\n};\nvar calculateSliderValues = (totalUpdates, currentIndex)=>{\n    if (totalUpdates <= TIMELINE_MAX_UPDATES) {\n        return {\n            leftValue: 0,\n            min: 0,\n            max: totalUpdates - 1,\n            value: currentIndex,\n            rightValue: totalUpdates - 1\n        };\n    }\n    return {\n        leftValue: totalUpdates - TIMELINE_MAX_UPDATES,\n        min: 0,\n        max: TIMELINE_MAX_UPDATES - 1,\n        value: currentIndex,\n        rightValue: totalUpdates - 1\n    };\n};\nvar isPromise = (value)=>{\n    return !!value && (value instanceof Promise || typeof value === \"object\" && \"then\" in value);\n};\nvar ensureRecord = function(value) {\n    let maxDepth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2, seen = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : /* @__PURE__ */ new WeakSet();\n    if (isPromise(value)) {\n        return {\n            type: \"promise\",\n            displayValue: \"Promise\"\n        };\n    }\n    if (value === null) {\n        return {\n            type: \"null\",\n            displayValue: \"null\"\n        };\n    }\n    if (value === void 0) {\n        return {\n            type: \"undefined\",\n            displayValue: \"undefined\"\n        };\n    }\n    switch(typeof value){\n        case \"object\":\n            {\n                if (seen.has(value)) {\n                    return {\n                        type: \"circular\",\n                        displayValue: \"[Circular Reference]\"\n                    };\n                }\n                if (!value) return {\n                    type: \"null\",\n                    displayValue: \"null\"\n                };\n                seen.add(value);\n                try {\n                    const result = {};\n                    if (value instanceof Element) {\n                        result.type = \"Element\";\n                        result.tagName = value.tagName.toLowerCase();\n                        result.displayValue = value.tagName.toLowerCase();\n                        return result;\n                    }\n                    if (value instanceof Map) {\n                        result.type = \"Map\";\n                        result.size = value.size;\n                        result.displayValue = \"Map(\".concat(value.size, \")\");\n                        if (maxDepth > 0) {\n                            const entries = {};\n                            let index = 0;\n                            for (const [key, val] of value.entries()){\n                                if (index >= 50) break;\n                                try {\n                                    entries[String(key)] = ensureRecord(val, maxDepth - 1, seen);\n                                } catch (e) {\n                                    entries[String(index)] = {\n                                        type: \"error\",\n                                        displayValue: \"Error accessing Map entry\"\n                                    };\n                                }\n                                index++;\n                            }\n                            result.entries = entries;\n                        }\n                        return result;\n                    }\n                    if (value instanceof Set) {\n                        result.type = \"Set\";\n                        result.size = value.size;\n                        result.displayValue = \"Set(\".concat(value.size, \")\");\n                        if (maxDepth > 0) {\n                            const items = [];\n                            let count = 0;\n                            for (const item of value){\n                                if (count >= 50) break;\n                                items.push(ensureRecord(item, maxDepth - 1, seen));\n                                count++;\n                            }\n                            result.items = items;\n                        }\n                        return result;\n                    }\n                    if (value instanceof Date) {\n                        result.type = \"Date\";\n                        result.value = value.toISOString();\n                        result.displayValue = value.toLocaleString();\n                        return result;\n                    }\n                    if (value instanceof RegExp) {\n                        result.type = \"RegExp\";\n                        result.value = value.toString();\n                        result.displayValue = value.toString();\n                        return result;\n                    }\n                    if (value instanceof Error) {\n                        result.type = \"Error\";\n                        result.name = value.name;\n                        result.message = value.message;\n                        result.displayValue = \"\".concat(value.name, \": \").concat(value.message);\n                        return result;\n                    }\n                    if (value instanceof ArrayBuffer) {\n                        result.type = \"ArrayBuffer\";\n                        result.byteLength = value.byteLength;\n                        result.displayValue = \"ArrayBuffer(\".concat(value.byteLength, \")\");\n                        return result;\n                    }\n                    if (value instanceof DataView) {\n                        result.type = \"DataView\";\n                        result.byteLength = value.byteLength;\n                        result.displayValue = \"DataView(\".concat(value.byteLength, \")\");\n                        return result;\n                    }\n                    if (ArrayBuffer.isView(value)) {\n                        const typedArray = value;\n                        result.type = typedArray.constructor.name;\n                        result.length = typedArray.length;\n                        result.byteLength = typedArray.buffer.byteLength;\n                        result.displayValue = \"\".concat(typedArray.constructor.name, \"(\").concat(typedArray.length, \")\");\n                        return result;\n                    }\n                    if (Array.isArray(value)) {\n                        result.type = \"array\";\n                        result.length = value.length;\n                        result.displayValue = \"Array(\".concat(value.length, \")\");\n                        if (maxDepth > 0) {\n                            result.items = value.slice(0, 50).map((item)=>ensureRecord(item, maxDepth - 1, seen));\n                        }\n                        return result;\n                    }\n                    const keys = Object.keys(value);\n                    result.type = \"object\";\n                    result.size = keys.length;\n                    result.displayValue = keys.length <= 5 ? \"{\".concat(keys.join(\", \"), \"}\") : \"{\".concat(keys.slice(0, 5).join(\", \"), \", ...\").concat(keys.length - 5, \"}\");\n                    if (maxDepth > 0) {\n                        const entries = {};\n                        for (const key of keys.slice(0, 50)){\n                            try {\n                                entries[key] = ensureRecord(value[key], maxDepth - 1, seen);\n                            } catch (e) {\n                                entries[key] = {\n                                    type: \"error\",\n                                    displayValue: \"Error accessing property\"\n                                };\n                            }\n                        }\n                        result.entries = entries;\n                    }\n                    return result;\n                } finally{\n                    seen.delete(value);\n                }\n            }\n        case \"string\":\n            return {\n                type: \"string\",\n                value,\n                displayValue: '\"'.concat(value, '\"')\n            };\n        case \"function\":\n            return {\n                type: \"function\",\n                displayValue: \"\\u0192()\",\n                name: value.name || \"anonymous\"\n            };\n        default:\n            return {\n                type: typeof value,\n                value,\n                displayValue: String(value)\n            };\n    }\n};\nvar extractMinimalFiberInfo = (fiber)=>{\n    const timings = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber);\n    var _timings_selfTime, _timings_totalTime;\n    return {\n        displayName: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber) || \"Unknown\",\n        type: fiber.type,\n        key: fiber.key,\n        id: fiber.index,\n        selfTime: (_timings_selfTime = timings === null || timings === void 0 ? void 0 : timings.selfTime) !== null && _timings_selfTime !== void 0 ? _timings_selfTime : null,\n        totalTime: (_timings_totalTime = timings === null || timings === void 0 ? void 0 : timings.totalTime) !== null && _timings_totalTime !== void 0 ? _timings_totalTime : null\n    };\n};\n// src/web/views/inspector/timeline/utils.ts\nvar propsTracker = /* @__PURE__ */ new Map();\nvar stateTracker = /* @__PURE__ */ new Map();\nvar contextTracker = /* @__PURE__ */ new Map();\nvar lastComponentType = null;\nvar STATE_NAME_REGEX = RegExp(\"\\\\[(?<name>\\\\w+),\\\\s*set\\\\w+\\\\]\", \"g\");\nvar PROPS_ORDER_REGEX = RegExp(\"\\\\(\\\\s*{\\\\s*(?<props>[^}]+)\\\\s*}\\\\s*\\\\)\");\nvar getStateNames = (fiber)=>{\n    var _fiber_type_toString, _fiber_type;\n    const componentSource = ((_fiber_type = fiber.type) === null || _fiber_type === void 0 ? void 0 : (_fiber_type_toString = _fiber_type.toString) === null || _fiber_type_toString === void 0 ? void 0 : _fiber_type_toString.call(_fiber_type)) || \"\";\n    return componentSource ? Array.from(componentSource.matchAll(STATE_NAME_REGEX), (m)=>{\n        var _m_groups;\n        var _m_groups_name;\n        return (_m_groups_name = (_m_groups = m.groups) === null || _m_groups === void 0 ? void 0 : _m_groups.name) !== null && _m_groups_name !== void 0 ? _m_groups_name : \"\";\n    }) : [];\n};\nvar resetTracking = ()=>{\n    propsTracker.clear();\n    stateTracker.clear();\n    contextTracker.clear();\n    lastComponentType = null;\n};\nvar isInitialComponentUpdate = (fiber)=>{\n    const isNewComponent = fiber.type !== lastComponentType;\n    lastComponentType = fiber.type;\n    return isNewComponent;\n};\nvar trackChange = (tracker, key, currentValue, previousValue)=>{\n    const existing = tracker.get(key);\n    const isInitialValue = tracker === propsTracker || tracker === contextTracker;\n    const hasChanged = !isEqual(currentValue, previousValue);\n    if (!existing) {\n        tracker.set(key, {\n            count: hasChanged && isInitialValue ? 1 : 0,\n            currentValue,\n            previousValue,\n            lastUpdated: Date.now()\n        });\n        return {\n            hasChanged,\n            count: hasChanged && isInitialValue ? 1 : isInitialValue ? 0 : 1\n        };\n    }\n    if (!isEqual(existing.currentValue, currentValue)) {\n        const newCount = existing.count + 1;\n        tracker.set(key, {\n            count: newCount,\n            currentValue,\n            previousValue: existing.currentValue,\n            lastUpdated: Date.now()\n        });\n        return {\n            hasChanged: true,\n            count: newCount\n        };\n    }\n    return {\n        hasChanged: false,\n        count: existing.count\n    };\n};\nvar getStateFromFiber = (fiber)=>{\n    if (!fiber) return {};\n    if (fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.FunctionComponentTag || fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ForwardRefTag || fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.SimpleMemoComponentTag || fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.MemoComponentTag) {\n        let memoizedState = fiber.memoizedState;\n        const state2 = {};\n        let index = 0;\n        while(memoizedState){\n            if (memoizedState.queue && memoizedState.memoizedState !== void 0) {\n                state2[index] = memoizedState.memoizedState;\n            }\n            memoizedState = memoizedState.next;\n            index++;\n        }\n        return state2;\n    }\n    if (fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ClassComponentTag) {\n        return fiber.memoizedState || {};\n    }\n    return {};\n};\nvar getPropsOrder = (fiber)=>{\n    var _fiber_type_toString, _fiber_type, _match_groups;\n    const componentSource = ((_fiber_type = fiber.type) === null || _fiber_type === void 0 ? void 0 : (_fiber_type_toString = _fiber_type.toString) === null || _fiber_type_toString === void 0 ? void 0 : _fiber_type_toString.call(_fiber_type)) || \"\";\n    const match = componentSource.match(PROPS_ORDER_REGEX);\n    if (!(match === null || match === void 0 ? void 0 : (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups.props)) return [];\n    return match.groups.props.split(\",\").map((prop)=>prop.trim().split(\":\")[0].split(\"=\")[0].trim()).filter(Boolean);\n};\nvar collectPropsChanges = (fiber)=>{\n    var _fiber_alternate;\n    const currentProps = fiber.memoizedProps || {};\n    const prevProps = ((_fiber_alternate = fiber.alternate) === null || _fiber_alternate === void 0 ? void 0 : _fiber_alternate.memoizedProps) || {};\n    const orderedProps = getPropsOrder(fiber);\n    const current = {};\n    const prev = {};\n    const allProps = [\n        .../* @__PURE__ */ new Set([\n            ...orderedProps,\n            ...Object.keys(currentProps)\n        ])\n    ];\n    for (const key of allProps){\n        if (key in currentProps) {\n            current[key] = currentProps[key];\n            prev[key] = prevProps[key];\n        }\n    }\n    const changes = getChangedPropsDetailed(fiber).map((change)=>({\n            name: change.name,\n            value: change.value,\n            prevValue: change.prevValue\n        }));\n    return {\n        current,\n        prev,\n        changes\n    };\n};\nvar collectStateChanges = (fiber)=>{\n    const current = getStateFromFiber(fiber);\n    const prev = fiber.alternate ? getStateFromFiber(fiber.alternate) : {};\n    const changes = [];\n    for (const [index, value] of Object.entries(current)){\n        const stateKey = fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ClassComponentTag ? index : Number(index);\n        if (fiber.alternate && !isEqual(prev[index], value)) {\n            changes.push({\n                name: stateKey,\n                value,\n                prevValue: prev[index]\n            });\n        }\n    }\n    return {\n        current,\n        prev,\n        changes\n    };\n};\nvar collectContextChanges = (fiber)=>{\n    const currentContexts = getAllFiberContexts(fiber);\n    const prevContexts = fiber.alternate ? getAllFiberContexts(fiber.alternate) : /* @__PURE__ */ new Map();\n    const current = {};\n    const prev = {};\n    const changes = [];\n    const seenContexts = /* @__PURE__ */ new Set();\n    for (const [contextType, ctx2] of currentContexts){\n        const name = ctx2.displayName;\n        const contextKey = \"\".concat(name, \"-\").concat(contextType === null || contextType === void 0 ? void 0 : contextType.toString());\n        if (seenContexts.has(contextKey)) continue;\n        seenContexts.add(contextKey);\n        current[name] = ctx2.value;\n        const prevCtx = prevContexts.get(contextType);\n        if (prevCtx) {\n            prev[name] = prevCtx.value;\n            if (!isEqual(prevCtx.value, ctx2.value)) {\n                changes.push({\n                    name,\n                    value: ctx2.value,\n                    prevValue: prevCtx.value,\n                    contextType\n                });\n            }\n        }\n    }\n    return {\n        current,\n        prev,\n        changes\n    };\n};\nvar collectInspectorDataWithoutCounts = (fiber)=>{\n    const emptySection = ()=>({\n            current: [],\n            changes: /* @__PURE__ */ new Set(),\n            changesCounts: /* @__PURE__ */ new Map()\n        });\n    if (!fiber) {\n        return {\n            fiberProps: emptySection(),\n            fiberState: emptySection(),\n            fiberContext: emptySection()\n        };\n    }\n    let hasNewChanges = false;\n    const propsData = emptySection();\n    if (fiber.memoizedProps) {\n        const { current: current2, changes: changes2 } = collectPropsChanges(fiber);\n        for (const [key, value] of Object.entries(current2)){\n            propsData.current.push({\n                name: key,\n                value: isPromise(value) ? {\n                    type: \"promise\",\n                    displayValue: \"Promise\"\n                } : value\n            });\n        }\n        for (const change of changes2){\n            hasNewChanges = true;\n            propsData.changes.add(change.name);\n            propsData.changesCounts.set(change.name, 1);\n        }\n    }\n    const stateData = emptySection();\n    if (fiber.memoizedState) {\n        const { current: current2, changes: changes2 } = collectStateChanges(fiber);\n        for (const [key, value] of Object.entries(current2)){\n            stateData.current.push({\n                name: key,\n                value: isPromise(value) ? {\n                    type: \"promise\",\n                    displayValue: \"Promise\"\n                } : value\n            });\n        }\n        for (const change of changes2){\n            hasNewChanges = true;\n            stateData.changes.add(change.name);\n            stateData.changesCounts.set(change.name, 1);\n        }\n    }\n    const contextData = emptySection();\n    const { current, changes } = collectContextChanges(fiber);\n    for (const [key, value] of Object.entries(current)){\n        contextData.current.push({\n            name: key,\n            value: isPromise(value) ? {\n                type: \"promise\",\n                displayValue: \"Promise\"\n            } : value\n        });\n    }\n    for (const change of changes){\n        hasNewChanges = true;\n        contextData.changes.add(change.name);\n        contextData.changesCounts.set(change.name, 1);\n    }\n    return {\n        // data: {\n        fiberProps: propsData,\n        fiberState: stateData,\n        fiberContext: contextData\n    };\n};\nvar collectInspectorData = (fiber)=>{\n    const emptySection = ()=>({\n            current: [],\n            changes: /* @__PURE__ */ new Set(),\n            changesCounts: /* @__PURE__ */ new Map()\n        });\n    if (!fiber) {\n        return {\n            data: {\n                fiberProps: emptySection(),\n                fiberState: emptySection(),\n                fiberContext: emptySection()\n            },\n            shouldUpdate: false\n        };\n    }\n    let hasNewChanges = false;\n    const isInitialUpdate = isInitialComponentUpdate(fiber);\n    const propsData = emptySection();\n    if (fiber.memoizedProps) {\n        const { current, changes } = collectPropsChanges(fiber);\n        for (const [key, value] of Object.entries(current)){\n            propsData.current.push({\n                name: key,\n                value: isPromise(value) ? {\n                    type: \"promise\",\n                    displayValue: \"Promise\"\n                } : value\n            });\n        }\n        for (const change of changes){\n            const { hasChanged, count } = trackChange(propsTracker, change.name, change.value, change.prevValue);\n            if (hasChanged) {\n                hasNewChanges = true;\n                propsData.changes.add(change.name);\n                propsData.changesCounts.set(change.name, count);\n            }\n        }\n    }\n    const stateData = emptySection();\n    const { current: stateCurrent, changes: stateChanges } = collectStateChanges(fiber);\n    for (const [index, value] of Object.entries(stateCurrent)){\n        const stateKey = fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ClassComponentTag ? index : Number(index);\n        stateData.current.push({\n            name: stateKey,\n            value\n        });\n    }\n    for (const change of stateChanges){\n        const { hasChanged, count } = trackChange(stateTracker, change.name, change.value, change.prevValue);\n        if (hasChanged) {\n            hasNewChanges = true;\n            stateData.changes.add(change.name);\n            stateData.changesCounts.set(change.name, count);\n        }\n    }\n    const contextData = emptySection();\n    const { current: contextCurrent, changes: contextChanges } = collectContextChanges(fiber);\n    for (const [name, value] of Object.entries(contextCurrent)){\n        contextData.current.push({\n            name,\n            value\n        });\n    }\n    if (!isInitialUpdate) {\n        for (const change of contextChanges){\n            const { hasChanged, count } = trackChange(contextTracker, change.name, change.value, change.prevValue);\n            if (hasChanged) {\n                hasNewChanges = true;\n                contextData.changes.add(change.name);\n                contextData.changesCounts.set(change.name, count);\n            }\n        }\n    }\n    if (!hasNewChanges && !isInitialUpdate) {\n        propsData.changes.clear();\n        stateData.changes.clear();\n        contextData.changes.clear();\n    }\n    return {\n        data: {\n            fiberProps: propsData,\n            fiberState: stateData,\n            fiberContext: contextData\n        },\n        shouldUpdate: hasNewChanges || isInitialUpdate\n    };\n};\nvar fiberContextsCache = /* @__PURE__ */ new WeakMap();\nvar getAllFiberContexts = (fiber)=>{\n    if (!fiber) {\n        return /* @__PURE__ */ new Map();\n    }\n    const cachedContexts = fiberContextsCache.get(fiber);\n    if (cachedContexts) {\n        return cachedContexts;\n    }\n    const contexts = /* @__PURE__ */ new Map();\n    let currentFiber = fiber;\n    while(currentFiber){\n        const dependencies = currentFiber.dependencies;\n        if (dependencies === null || dependencies === void 0 ? void 0 : dependencies.firstContext) {\n            let contextItem = dependencies.firstContext;\n            while(contextItem){\n                var _contextItem_context;\n                const memoizedValue = contextItem.memoizedValue;\n                const displayName = (_contextItem_context = contextItem.context) === null || _contextItem_context === void 0 ? void 0 : _contextItem_context.displayName;\n                if (!contexts.has(memoizedValue)) {\n                    contexts.set(contextItem.context, {\n                        value: memoizedValue,\n                        displayName: displayName !== null && displayName !== void 0 ? displayName : \"UnnamedContext\",\n                        contextType: null\n                    });\n                }\n                if (contextItem === contextItem.next) {\n                    break;\n                }\n                contextItem = contextItem.next;\n            }\n        }\n        currentFiber = currentFiber.return;\n    }\n    fiberContextsCache.set(fiber, contexts);\n    return contexts;\n};\n// src/core/instrumentation.ts\nvar fps = 0;\nvar lastTime = performance.now();\nvar frameCount = 0;\nvar initedFps = false;\nvar fpsListeners = [];\nvar updateFPS = (onChange)=>{\n    frameCount++;\n    const now = performance.now();\n    const timeSinceLastUpdate = now - lastTime;\n    if (timeSinceLastUpdate >= 500) {\n        const calculatedFPS = Math.round(frameCount / timeSinceLastUpdate * 1e3);\n        if (calculatedFPS !== fps) {\n            for (const listener of fpsListeners){\n                listener(calculatedFPS);\n            }\n        }\n        fps = calculatedFPS;\n        frameCount = 0;\n        lastTime = now;\n    }\n    requestAnimationFrame(()=>updateFPS(onChange));\n};\nvar getFPS = ()=>{\n    if (!initedFps) {\n        initedFps = true;\n        updateFPS();\n        fps = 60;\n    }\n    return fps;\n};\nvar isValueUnstable = (prevValue, nextValue)=>{\n    const prevValueString = fastSerialize(prevValue);\n    const nextValueString = fastSerialize(nextValue);\n    return prevValueString === nextValueString && unstableTypes.includes(typeof prevValue) && unstableTypes.includes(typeof nextValue);\n};\nvar unstableTypes = [\n    \"function\",\n    \"object\"\n];\nvar cache = /* @__PURE__ */ new WeakMap();\nfunction fastSerialize(value) {\n    let depth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    if (depth < 0) return \"\\u2026\";\n    switch(typeof value){\n        case \"function\":\n            return value.toString();\n        case \"string\":\n            return value;\n        case \"number\":\n        case \"boolean\":\n        case \"undefined\":\n            return String(value);\n        case \"object\":\n            break;\n        default:\n            return String(value);\n    }\n    if (value === null) return \"null\";\n    if (cache.has(value)) {\n        const cached = cache.get(value);\n        if (cached !== void 0) {\n            return cached;\n        }\n    }\n    if (Array.isArray(value)) {\n        const str2 = value.length ? \"[\".concat(value.length, \"]\") : \"[]\";\n        cache.set(value, str2);\n        return str2;\n    }\n    if ((0,preact__WEBPACK_IMPORTED_MODULE_2__.isValidElement)(value)) {\n        var _getDisplayName6;\n        const type = (_getDisplayName6 = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(value.type)) !== null && _getDisplayName6 !== void 0 ? _getDisplayName6 : \"\";\n        const propCount = value.props ? Object.keys(value.props).length : 0;\n        const str2 = \"<\".concat(type, \" \").concat(propCount, \">\");\n        cache.set(value, str2);\n        return str2;\n    }\n    if (Object.getPrototypeOf(value) === Object.prototype) {\n        const keys = Object.keys(value);\n        const str2 = keys.length ? \"{\".concat(keys.length, \"}\") : \"{}\";\n        cache.set(value, str2);\n        return str2;\n    }\n    const ctor = value && typeof value === \"object\" ? value.constructor : void 0;\n    if (ctor && typeof ctor === \"function\" && ctor.name) {\n        const str2 = \"\".concat(ctor.name, \"{…}\");\n        cache.set(value, str2);\n        return str2;\n    }\n    const tagString = Object.prototype.toString.call(value).slice(8, -1);\n    const str = \"\".concat(tagString, \"{…}\");\n    cache.set(value, str);\n    return str;\n}\nvar instrumentationInstances = /* @__PURE__ */ new Map();\nvar inited = false;\nvar getAllInstances = ()=>Array.from(instrumentationInstances.values());\nfunction isRenderUnnecessaryTraversal(_propsName, prevValue, nextValue) {\n    if (!isEqual(prevValue, nextValue) && !isValueUnstable(prevValue, nextValue)) {\n        this.isRequiredChange = true;\n    }\n}\nvar isRenderUnnecessary = (fiber)=>{\n    if (!(0,bippy__WEBPACK_IMPORTED_MODULE_0__.didFiberCommit)(fiber)) return true;\n    const mutatedHostFibers = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getMutatedHostFibers)(fiber);\n    for (const mutatedHostFiber of mutatedHostFibers){\n        const state2 = {\n            isRequiredChange: false\n        };\n        (0,bippy__WEBPACK_IMPORTED_MODULE_0__.traverseProps)(mutatedHostFiber, isRenderUnnecessaryTraversal.bind(state2));\n        if (state2.isRequiredChange) return false;\n    }\n    return true;\n};\nvar TRACK_UNNECESSARY_RENDERS = false;\nvar createInstrumentation = (instanceKey, config)=>{\n    const instrumentation = {\n        // this will typically be false, but in cases where a user provides showToolbar: true, this will be true\n        isPaused: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(!ReactScanInternals.options.value.enabled),\n        fiberRoots: /* @__PURE__ */ new WeakSet()\n    };\n    instrumentationInstances.set(instanceKey, {\n        key: instanceKey,\n        config,\n        instrumentation\n    });\n    if (!inited) {\n        inited = true;\n        (0,bippy__WEBPACK_IMPORTED_MODULE_0__.instrument)({\n            name: \"react-scan\",\n            onActive: config.onActive,\n            onCommitFiberRoot (_rendererID, root) {\n                instrumentation.fiberRoots.add(root);\n                const allInstances = getAllInstances();\n                for (const instance of allInstances){\n                    instance.config.onCommitStart();\n                }\n                const renderedAt = Date.now();\n                (0,bippy__WEBPACK_IMPORTED_MODULE_0__.traverseRenderedFibers)(root.current, (fiber, phase)=>{\n                    const type = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getType)(fiber.type);\n                    if (!type) return null;\n                    const allInstances2 = getAllInstances();\n                    const validInstancesIndicies = [];\n                    for(let i = 0, len = allInstances2.length; i < len; i++){\n                        const instance = allInstances2[i];\n                        if (!instance.config.isValidFiber(fiber)) continue;\n                        validInstancesIndicies.push(i);\n                    }\n                    if (!validInstancesIndicies.length) return null;\n                    const changes = [];\n                    if (allInstances2.some((instance)=>instance.config.trackChanges)) {\n                        const changesProps = collectPropsChanges(fiber).changes;\n                        const changesState = collectStateChanges(fiber).changes;\n                        const changesContext = collectContextChanges(fiber).changes;\n                        changes.push.apply(null, changesProps.map((change)=>({\n                                type: 1 /* Props */ ,\n                                name: change.name,\n                                value: change.value\n                            })));\n                        for (const change of changesState){\n                            if (fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ClassComponentTag) {\n                                changes.push({\n                                    type: 3 /* ClassState */ ,\n                                    name: change.name.toString(),\n                                    value: change.value\n                                });\n                            } else {\n                                changes.push({\n                                    type: 2 /* FunctionalState */ ,\n                                    name: change.name.toString(),\n                                    value: change.value\n                                });\n                            }\n                        }\n                        changes.push.apply(null, changesContext.map((change)=>({\n                                type: 4 /* Context */ ,\n                                name: change.name,\n                                value: change.value,\n                                contextType: Number(change.contextType)\n                            })));\n                    }\n                    const { selfTime } = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber);\n                    const fps2 = getFPS();\n                    const render2 = {\n                        phase: RENDER_PHASE_STRING_TO_ENUM[phase],\n                        componentName: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(type),\n                        count: 1,\n                        changes,\n                        time: selfTime,\n                        forget: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.hasMemoCache)(fiber),\n                        // todo: allow this to be toggle-able through toolbar\n                        // todo: performance optimization: if the last fiber measure was very off screen, do not run isRenderUnnecessary\n                        unnecessary: TRACK_UNNECESSARY_RENDERS ? isRenderUnnecessary(fiber) : null,\n                        didCommit: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.didFiberCommit)(fiber),\n                        fps: fps2\n                    };\n                    for(let i = 0, len = validInstancesIndicies.length; i < len; i++){\n                        const index = validInstancesIndicies[i];\n                        const instance = allInstances2[index];\n                        instance.config.onRender(fiber, [\n                            render2\n                        ], renderedAt);\n                    }\n                });\n                for (const instance of allInstances){\n                    instance.config.onCommitFinish();\n                }\n            }\n        });\n    }\n    return instrumentation;\n};\n// src/web/utils/log.ts\nvar log = (renders)=>{\n    const logMap = /* @__PURE__ */ new Map();\n    for(let i = 0, len = renders.length; i < len; i++){\n        const render2 = renders[i];\n        if (!render2.componentName) continue;\n        var _logMap_get;\n        const changeLog = (_logMap_get = logMap.get(render2.componentName)) !== null && _logMap_get !== void 0 ? _logMap_get : [];\n        renders;\n        const labelText = getLabelText([\n            {\n                aggregatedCount: 1,\n                computedKey: null,\n                name: render2.componentName,\n                frame: null,\n                ...render2,\n                changes: {\n                    // TODO(Alexis): use a faster reduction method\n                    type: render2.changes.reduce((set, change)=>set | change.type, 0),\n                    unstable: render2.changes.some((change)=>change.unstable)\n                },\n                phase: render2.phase,\n                computedCurrent: null\n            }\n        ]);\n        if (!labelText) continue;\n        let prevChangedProps = null;\n        let nextChangedProps = null;\n        if (render2.changes) {\n            for(let i2 = 0, len2 = render2.changes.length; i2 < len2; i2++){\n                const { name, prevValue, nextValue, unstable, type } = render2.changes[i2];\n                if (type === 1 /* Props */ ) {\n                    prevChangedProps !== null && prevChangedProps !== void 0 ? prevChangedProps : prevChangedProps = {};\n                    nextChangedProps !== null && nextChangedProps !== void 0 ? nextChangedProps : nextChangedProps = {};\n                    prevChangedProps[\"\".concat(unstable ? \"\\u26A0\\uFE0F\" : \"\").concat(name, \" (prev)\")] = prevValue;\n                    nextChangedProps[\"\".concat(unstable ? \"\\u26A0\\uFE0F\" : \"\").concat(name, \" (next)\")] = nextValue;\n                } else {\n                    changeLog.push({\n                        prev: prevValue,\n                        next: nextValue,\n                        type: type === 4 /* Context */  ? \"context\" : \"state\",\n                        unstable: unstable !== null && unstable !== void 0 ? unstable : false\n                    });\n                }\n            }\n        }\n        if (prevChangedProps && nextChangedProps) {\n            changeLog.push({\n                prev: prevChangedProps,\n                next: nextChangedProps,\n                type: \"props\",\n                unstable: false\n            });\n        }\n        logMap.set(labelText, changeLog);\n    }\n    for (const [name, changeLog] of Array.from(logMap.entries())){\n        console.group(\"%c\".concat(name), \"background: hsla(0,0%,70%,.3); border-radius:3px; padding: 0 2px;\");\n        for (const { type, prev, next, unstable } of changeLog){\n            console.log(\"\".concat(type, \":\"), unstable ? \"\\u26A0\\uFE0F\" : \"\", prev, \"!==\", next);\n        }\n        console.groupEnd();\n    }\n};\nvar logIntro = ()=>{\n    console.log(\"%c[\\xB7] %cReact Scan\", \"font-weight:bold;color:#7a68e8;font-size:20px;\", \"font-weight:bold;font-size:14px;\");\n    console.log(\"Try React Scan Monitoring to target performance issues in production: https://react-scan.com/monitoring\");\n};\n// src/new-outlines/canvas.ts\nvar OUTLINE_ARRAY_SIZE = 7;\nvar MONO_FONT = \"Menlo,Consolas,Monaco,Liberation Mono,Lucida Console,monospace\";\nvar INTERPOLATION_SPEED = 0.1;\nvar lerp2 = (start2, end)=>{\n    return Math.floor(start2 + (end - start2) * INTERPOLATION_SPEED);\n};\nvar MAX_PARTS_LENGTH = 4;\nvar MAX_LABEL_LENGTH = 40;\nvar TOTAL_FRAMES = 45;\nvar primaryColor = \"115,97,230\";\nvar getLabelText2 = (outlines)=>{\n    const nameByCount = /* @__PURE__ */ new Map();\n    for (const outline of outlines){\n        const { name, count } = outline;\n        nameByCount.set(name, (nameByCount.get(name) || 0) + count);\n    }\n    const countByNames = /* @__PURE__ */ new Map();\n    for (const [name, count] of nameByCount.entries()){\n        const names = countByNames.get(count);\n        if (names) {\n            names.push(name);\n        } else {\n            countByNames.set(count, [\n                name\n            ]);\n        }\n    }\n    const partsEntries = Array.from(countByNames.entries()).sort((param, param1)=>{\n        let [countA] = param, [countB] = param1;\n        return countB - countA;\n    });\n    const partsLength = partsEntries.length;\n    let labelText = \"\";\n    for(let i = 0; i < partsLength; i++){\n        const [count, names] = partsEntries[i];\n        let part = \"\".concat(names.slice(0, MAX_PARTS_LENGTH).join(\", \"), \" \\xd7\").concat(count);\n        if (part.length > MAX_LABEL_LENGTH) {\n            part = \"\".concat(part.slice(0, MAX_LABEL_LENGTH), \"…\");\n        }\n        if (i !== partsLength - 1) {\n            part += \", \";\n        }\n        labelText += part;\n    }\n    if (labelText.length > MAX_LABEL_LENGTH) {\n        return \"\".concat(labelText.slice(0, MAX_LABEL_LENGTH), \"…\");\n    }\n    return labelText;\n};\nvar getAreaFromOutlines = (outlines)=>{\n    let area = 0;\n    for (const outline of outlines){\n        area += outline.width * outline.height;\n    }\n    return area;\n};\nvar updateOutlines = (activeOutlines2, outlines)=>{\n    for (const { id, name, count, x, y, width, height, didCommit } of outlines){\n        const outline = {\n            id,\n            name,\n            count,\n            x,\n            y,\n            width,\n            height,\n            frame: 0,\n            targetX: x,\n            targetY: y,\n            targetWidth: width,\n            targetHeight: height,\n            didCommit\n        };\n        const key = String(outline.id);\n        const existingOutline = activeOutlines2.get(key);\n        if (existingOutline) {\n            existingOutline.count++;\n            existingOutline.frame = 0;\n            existingOutline.targetX = x;\n            existingOutline.targetY = y;\n            existingOutline.targetWidth = width;\n            existingOutline.targetHeight = height;\n            existingOutline.didCommit = didCommit;\n        } else {\n            activeOutlines2.set(key, outline);\n        }\n    }\n};\nvar updateScroll = (activeOutlines2, deltaX, deltaY)=>{\n    for (const outline of activeOutlines2.values()){\n        const newX = outline.x - deltaX;\n        const newY = outline.y - deltaY;\n        outline.targetX = newX;\n        outline.targetY = newY;\n    }\n};\nvar initCanvas = (canvas2, dpr2)=>{\n    const ctx2 = canvas2.getContext(\"2d\", {\n        alpha: true\n    });\n    if (ctx2) {\n        ctx2.scale(dpr2, dpr2);\n    }\n    return ctx2;\n};\nvar drawCanvas = (ctx2, canvas2, dpr2, activeOutlines2)=>{\n    ctx2.clearRect(0, 0, canvas2.width / dpr2, canvas2.height / dpr2);\n    const groupedOutlinesMap = /* @__PURE__ */ new Map();\n    const rectMap = /* @__PURE__ */ new Map();\n    for (const outline of activeOutlines2.values()){\n        const { x, y, width, height, targetX, targetY, targetWidth, targetHeight, frame } = outline;\n        if (targetX !== x) {\n            outline.x = lerp2(x, targetX);\n        }\n        if (targetY !== y) {\n            outline.y = lerp2(y, targetY);\n        }\n        if (targetWidth !== width) {\n            outline.width = lerp2(width, targetWidth);\n        }\n        if (targetHeight !== height) {\n            outline.height = lerp2(height, targetHeight);\n        }\n        const labelKey = \"\".concat(targetX !== null && targetX !== void 0 ? targetX : x, \",\").concat(targetY !== null && targetY !== void 0 ? targetY : y);\n        const rectKey = \"\".concat(labelKey, \",\").concat(targetWidth !== null && targetWidth !== void 0 ? targetWidth : width, \",\").concat(targetHeight !== null && targetHeight !== void 0 ? targetHeight : height);\n        const outlines = groupedOutlinesMap.get(labelKey);\n        if (outlines) {\n            outlines.push(outline);\n        } else {\n            groupedOutlinesMap.set(labelKey, [\n                outline\n            ]);\n        }\n        const alpha = 1 - frame / TOTAL_FRAMES;\n        outline.frame++;\n        const rect = rectMap.get(rectKey) || {\n            x,\n            y,\n            width,\n            height,\n            alpha\n        };\n        if (alpha > rect.alpha) {\n            rect.alpha = alpha;\n        }\n        rectMap.set(rectKey, rect);\n    }\n    for (const rect of rectMap.values()){\n        const { x, y, width, height, alpha } = rect;\n        ctx2.strokeStyle = \"rgba(\".concat(primaryColor, \",\").concat(alpha, \")\");\n        ctx2.lineWidth = 1;\n        ctx2.beginPath();\n        ctx2.rect(x, y, width, height);\n        ctx2.stroke();\n        ctx2.fillStyle = \"rgba(\".concat(primaryColor, \",\").concat(alpha * 0.1, \")\");\n        ctx2.fill();\n    }\n    ctx2.font = \"11px \".concat(MONO_FONT);\n    const labelMap = /* @__PURE__ */ new Map();\n    ctx2.textRendering = \"optimizeSpeed\";\n    for (const outlines of groupedOutlinesMap.values()){\n        const first = outlines[0];\n        const { x, y, frame } = first;\n        const alpha = 1 - frame / TOTAL_FRAMES;\n        const text = getLabelText2(outlines);\n        const { width } = ctx2.measureText(text);\n        const height = 11;\n        labelMap.set(\"\".concat(x, \",\").concat(y, \",\").concat(width, \",\").concat(text), {\n            text,\n            width,\n            height,\n            alpha,\n            x,\n            y,\n            outlines\n        });\n        let labelY = y - height - 4;\n        if (labelY < 0) {\n            labelY = 0;\n        }\n        if (frame > TOTAL_FRAMES) {\n            for (const outline of outlines){\n                activeOutlines2.delete(String(outline.id));\n            }\n        }\n    }\n    const sortedLabels = Array.from(labelMap.entries()).sort((param, param1)=>{\n        let [_, a] = param, [__, b] = param1;\n        return getAreaFromOutlines(b.outlines) - getAreaFromOutlines(a.outlines);\n    });\n    for (const [labelKey, label] of sortedLabels){\n        if (!labelMap.has(labelKey)) continue;\n        for (const [otherKey, otherLabel] of labelMap.entries()){\n            if (labelKey === otherKey) continue;\n            const { x, y, width, height } = label;\n            const { x: otherX, y: otherY, width: otherWidth, height: otherHeight } = otherLabel;\n            if (x + width > otherX && otherX + otherWidth > x && y + height > otherY && otherY + otherHeight > y) {\n                label.text = getLabelText2([\n                    ...label.outlines,\n                    ...otherLabel.outlines\n                ]);\n                label.width = ctx2.measureText(label.text).width;\n                labelMap.delete(otherKey);\n            }\n        }\n    }\n    for (const label of labelMap.values()){\n        const { x, y, alpha, width, height, text } = label;\n        let labelY = y - height - 4;\n        if (labelY < 0) {\n            labelY = 0;\n        }\n        ctx2.fillStyle = \"rgba(\".concat(primaryColor, \",\").concat(alpha, \")\");\n        ctx2.fillRect(x, labelY, width + 4, height + 4);\n        ctx2.fillStyle = \"rgba(255,255,255,\".concat(alpha, \")\");\n        ctx2.fillText(text, x + 2, labelY + height);\n    }\n    return activeOutlines2.size > 0;\n};\n// src/new-outlines/index.ts\nvar workerCode = \"\\\"use strict\\\";(()=>{var Y=\\\"Menlo,Consolas,Monaco,Liberation Mono,Lucida Console,monospace\\\";var C=(t,l)=>Math.floor(t+(l-t)*.1);var _=\\\"115,97,230\\\";var $=t=>{let l=new Map;for(let o of t){let{name:f,count:e}=o;l.set(f,(l.get(f)||0)+e)}let u=new Map;for(let[o,f]of l.entries()){let e=u.get(f);e?e.push(o):u.set(f,[o])}let m=Array.from(u.entries()).sort(([o],[f])=>f-o),s=m.length,i=\\\"\\\";for(let o=0;o<s;o++){let[f,e]=m[o],n=`${e.slice(0,4).join(\\\", \\\")} \\\\xD7${f}`;n.length>40&&(n=`${n.slice(0,40)}\\\\u2026`),o!==s-1&&(n+=\\\", \\\"),i+=n}return i.length>40?`${i.slice(0,40)}\\\\u2026`:i},S=t=>{let l=0;for(let u of t)l+=u.width*u.height;return l};var X=(t,l)=>{let u=t.getContext(\\\"2d\\\",{alpha:!0});return u&&u.scale(l,l),u},N=(t,l,u,m)=>{t.clearRect(0,0,l.width/u,l.height/u);let s=new Map,i=new Map;for(let e of m.values()){let{x:n,y:c,width:a,height:h,targetX:r,targetY:d,targetWidth:g,targetHeight:A,frame:x}=e;r!==n&&(e.x=C(n,r)),d!==c&&(e.y=C(c,d)),g!==a&&(e.width=C(a,g)),A!==h&&(e.height=C(h,A));let O=`${r??n},${d??c}`,y=`${O},${g??a},${A??h}`,R=s.get(O);R?R.push(e):s.set(O,[e]);let M=1-x/45;e.frame++;let E=i.get(y)||{x:n,y:c,width:a,height:h,alpha:M};M>E.alpha&&(E.alpha=M),i.set(y,E)}for(let e of i.values()){let{x:n,y:c,width:a,height:h,alpha:r}=e;t.strokeStyle=`rgba(${_},${r})`,t.lineWidth=1,t.beginPath(),t.rect(n,c,a,h),t.stroke(),t.fillStyle=`rgba(${_},${r*.1})`,t.fill()}t.font=`11px ${Y}`;let o=new Map;t.textRendering=\\\"optimizeSpeed\\\";for(let e of s.values()){let n=e[0],{x:c,y:a,frame:h}=n,r=1-h/45,d=$(e),{width:g}=t.measureText(d),A=11;o.set(`${c},${a},${g},${d}`,{text:d,width:g,height:A,alpha:r,x:c,y:a,outlines:e});let x=a-A-4;if(x<0&&(x=0),h>45)for(let O of e)m.delete(String(O.id))}let f=Array.from(o.entries()).sort(([e,n],[c,a])=>S(a.outlines)-S(n.outlines));for(let[e,n]of f)if(o.has(e))for(let[c,a]of o.entries()){if(e===c)continue;let{x:h,y:r,width:d,height:g}=n,{x:A,y:x,width:O,height:y}=a;h+d>A&&A+O>h&&r+g>x&&x+y>r&&(n.text=$([...n.outlines,...a.outlines]),n.width=t.measureText(n.text).width,o.delete(c))}for(let e of o.values()){let{x:n,y:c,alpha:a,width:h,height:r,text:d}=e,g=c-r-4;g<0&&(g=0),t.fillStyle=`rgba(${_},${a})`,t.fillRect(n,g,h+4,r+4),t.fillStyle=`rgba(255,255,255,${a})`,t.fillText(d,n+2,g+r)}return m.size>0};var p=null,w=null,b=1,L=new Map,T=null,v=()=>{if(!w||!p)return;N(w,p,b,L)?T=requestAnimationFrame(v):T=null};self.onmessage=t=>{let{type:l}=t.data;if(l===\\\"init\\\"&&(p=t.data.canvas,b=t.data.dpr,p&&(p.width=t.data.width,p.height=t.data.height,w=X(p,b))),!(!p||!w)){if(l===\\\"resize\\\"){b=t.data.dpr,p.width=t.data.width*b,p.height=t.data.height*b,w.resetTransform(),w.scale(b,b),v();return}if(l===\\\"draw-outlines\\\"){let{data:u,names:m}=t.data,s=new Float32Array(u);for(let i=0;i<s.length;i+=7){let o=s[i+2],f=s[i+3],e=s[i+4],n=s[i+5],c=s[i+6],a={id:s[i],name:m[i/7],count:s[i+1],x:o,y:f,width:e,height:n,frame:0,targetX:o,targetY:f,targetWidth:e,targetHeight:n,didCommit:c},h=String(a.id),r=L.get(h);r?(r.count++,r.frame=0,r.targetX=o,r.targetY=f,r.targetWidth=e,r.targetHeight=n,r.didCommit=c):L.set(h,a)}T||(T=requestAnimationFrame(v));return}if(l===\\\"scroll\\\"){let{deltaX:u,deltaY:m}=t.data;for(let s of L.values()){let i=s.x-u,o=s.y-m;s.targetX=i,s.targetY=o}}}};})();\\n\";\nvar worker = null;\nvar canvas = null;\nvar ctx = null;\nvar dpr = 1;\nvar animationFrameId = null;\nvar activeOutlines = /* @__PURE__ */ new Map();\nvar blueprintMap = /* @__PURE__ */ new Map();\nvar blueprintMapKeys = /* @__PURE__ */ new Set();\nvar outlineFiber = (fiber, renderedAt)=>{\n    if (!(0,bippy__WEBPACK_IMPORTED_MODULE_0__.isCompositeFiber)(fiber)) return;\n    const name = typeof fiber.type === \"string\" ? fiber.type : (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber);\n    if (!name) return;\n    const blueprint = blueprintMap.get(fiber);\n    const nearestFibers = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getNearestHostFibers)(fiber);\n    const didCommit = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.didFiberCommit)(fiber);\n    if (!blueprint) {\n        blueprintMap.set(fiber, {\n            name,\n            count: 1,\n            elements: nearestFibers.map((fiber2)=>fiber2.stateNode),\n            didCommit: didCommit ? 1 : 0,\n            renderedAt\n        });\n        blueprintMapKeys.add(fiber);\n    } else {\n        blueprint.count++;\n        blueprint.renderedAt = renderedAt;\n    }\n};\nvar mergeRects = (rects)=>{\n    const firstRect = rects[0];\n    if (rects.length === 1) return firstRect;\n    let minX;\n    let minY;\n    let maxX;\n    let maxY;\n    for(let i = 0, len = rects.length; i < len; i++){\n        const rect = rects[i];\n        minX = minX == null ? rect.x : Math.min(minX, rect.x);\n        minY = minY == null ? rect.y : Math.min(minY, rect.y);\n        maxX = maxX == null ? rect.x + rect.width : Math.max(maxX, rect.x + rect.width);\n        maxY = maxY == null ? rect.y + rect.height : Math.max(maxY, rect.y + rect.height);\n    }\n    if (minX == null || minY == null || maxX == null || maxY == null) {\n        return rects[0];\n    }\n    return new DOMRect(minX, minY, maxX - minX, maxY - minY);\n};\nvar elementInvariant = (shouldBeEl)=>{\n    if (!(shouldBeEl instanceof Element)) {\n        throw new Error(\"Element Invariant\");\n    }\n};\nvar getBatchedRectMap = async function*(elements) {\n    elements.forEach(elementInvariant);\n    const uniqueElements = new Set(elements);\n    const seenElements = /* @__PURE__ */ new Set();\n    let resolveNext = null;\n    let done = false;\n    const observer = new IntersectionObserver((entries)=>{\n        const newEntries = [];\n        for (const entry of entries){\n            const element = entry.target;\n            if (!seenElements.has(element)) {\n                seenElements.add(element);\n                newEntries.push(entry);\n            }\n        }\n        if (newEntries.length > 0 && resolveNext) {\n            resolveNext(newEntries);\n            resolveNext = null;\n        }\n        if (seenElements.size === uniqueElements.size) {\n            observer.disconnect();\n            done = true;\n            if (resolveNext) {\n                resolveNext([]);\n            }\n        }\n    });\n    for (const element of uniqueElements){\n        observer.observe(element);\n    }\n    while(!done){\n        const entries = await new Promise((resolve)=>{\n            resolveNext = resolve;\n        });\n        if (entries.length > 0) {\n            yield entries;\n        }\n    }\n};\nvar SupportedArrayBuffer = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : ArrayBuffer;\nvar currentTimeout;\nvar flushOutlines = async ()=>{\n    const elements = [];\n    for (const fiber of blueprintMapKeys){\n        const blueprint = blueprintMap.get(fiber);\n        if (!blueprint) continue;\n        for(let i = 0; i < blueprint.elements.length; i++){\n            if (!(blueprint.elements[i] instanceof Element)) {\n                continue;\n            }\n            elements.push(blueprint.elements[i]);\n        }\n    }\n    const rectsMap = /* @__PURE__ */ new Map();\n    if (currentTimeout) {\n        clearTimeout(currentTimeout);\n    }\n    const timeout2 = new Promise((_, reject)=>{\n        currentTimeout = setTimeout(()=>reject(new Error(\"Timed out getting rects\")), 2500);\n    });\n    try {\n        await Promise.race([\n            (async ()=>{\n                for await (const entries of getBatchedRectMap(elements)){\n                    for (const entry of entries){\n                        const element = entry.target;\n                        const rect = entry.intersectionRect;\n                        if (entry.isIntersecting && rect.width && rect.height) {\n                            rectsMap.set(element, rect);\n                        }\n                    }\n                    const blueprints = [];\n                    const blueprintRects = [];\n                    const blueprintIds = [];\n                    for (const fiber of blueprintMapKeys){\n                        const blueprint = blueprintMap.get(fiber);\n                        if (!blueprint) continue;\n                        const rects = [];\n                        for(let i = 0; i < blueprint.elements.length; i++){\n                            const element = blueprint.elements[i];\n                            const rect = rectsMap.get(element);\n                            if (!rect) continue;\n                            rects.push(rect);\n                        }\n                        if (!rects.length) continue;\n                        blueprints.push(blueprint);\n                        blueprintRects.push(mergeRects(rects));\n                        blueprintIds.push((0,bippy__WEBPACK_IMPORTED_MODULE_0__.getFiberId)(fiber));\n                    }\n                    if (blueprints.length > 0) {\n                        const arrayBuffer = new SupportedArrayBuffer(blueprints.length * OUTLINE_ARRAY_SIZE * 4);\n                        const sharedView = new Float32Array(arrayBuffer);\n                        const blueprintNames = new Array(blueprints.length);\n                        let outlineData;\n                        for(let i = 0, len = blueprints.length; i < len; i++){\n                            const blueprint = blueprints[i];\n                            const id = blueprintIds[i];\n                            const { x, y, width, height } = blueprintRects[i];\n                            const { count, name, didCommit } = blueprint;\n                            if (worker) {\n                                const scaledIndex = i * OUTLINE_ARRAY_SIZE;\n                                sharedView[scaledIndex] = id;\n                                sharedView[scaledIndex + 1] = count;\n                                sharedView[scaledIndex + 2] = x;\n                                sharedView[scaledIndex + 3] = y;\n                                sharedView[scaledIndex + 4] = width;\n                                sharedView[scaledIndex + 5] = height;\n                                sharedView[scaledIndex + 6] = didCommit;\n                                blueprintNames[i] = name;\n                            } else {\n                                outlineData || (outlineData = new Array(blueprints.length));\n                                outlineData[i] = {\n                                    id,\n                                    name,\n                                    count,\n                                    x,\n                                    y,\n                                    width,\n                                    height,\n                                    didCommit\n                                };\n                            }\n                        }\n                        if (worker) {\n                            worker.postMessage({\n                                type: \"draw-outlines\",\n                                data: arrayBuffer,\n                                names: blueprintNames\n                            });\n                        } else if (canvas && ctx && outlineData) {\n                            updateOutlines(activeOutlines, outlineData);\n                            if (!animationFrameId) {\n                                animationFrameId = requestAnimationFrame(draw);\n                            }\n                        }\n                    }\n                }\n            })(),\n            timeout2\n        ]);\n    } catch (e) {}\n    for (const fiber of blueprintMapKeys){\n        blueprintMap.delete(fiber);\n        blueprintMapKeys.delete(fiber);\n    }\n};\nvar draw = ()=>{\n    if (!ctx || !canvas) return;\n    const shouldContinue = drawCanvas(ctx, canvas, dpr, activeOutlines);\n    if (shouldContinue) {\n        animationFrameId = requestAnimationFrame(draw);\n    } else {\n        animationFrameId = null;\n    }\n};\nvar CANVAS_HTML_STR = '<canvas style=\"position:fixed;top:0;left:0;pointer-events:none;z-index:2147483646\" aria-hidden=\"true\"></canvas>';\nvar IS_OFFSCREEN_CANVAS_WORKER_SUPPORTED = typeof OffscreenCanvas !== \"undefined\" && typeof Worker !== \"undefined\";\nvar getDpr = ()=>{\n    return Math.min(window.devicePixelRatio || 1, 2);\n};\nvar getCanvasEl = ()=>{\n    cleanup();\n    const host = document.createElement(\"div\");\n    host.setAttribute(\"data-react-scan\", \"true\");\n    const shadowRoot2 = host.attachShadow({\n        mode: \"open\"\n    });\n    shadowRoot2.innerHTML = CANVAS_HTML_STR;\n    const canvasEl = shadowRoot2.firstChild;\n    if (!canvasEl) return null;\n    dpr = getDpr();\n    canvas = canvasEl;\n    const { innerWidth, innerHeight } = window;\n    canvasEl.style.width = \"\".concat(innerWidth, \"px\");\n    canvasEl.style.height = \"\".concat(innerHeight, \"px\");\n    const width = innerWidth * dpr;\n    const height = innerHeight * dpr;\n    canvasEl.width = width;\n    canvasEl.height = height;\n    if (IS_OFFSCREEN_CANVAS_WORKER_SUPPORTED) {\n        try {\n            const useExtensionWorker = readLocalStorage(\"use-extension-worker\");\n            removeLocalStorage(\"use-extension-worker\");\n            if (useExtensionWorker) {\n                worker = new Worker(URL.createObjectURL(new Blob([\n                    workerCode\n                ], {\n                    type: \"application/javascript\"\n                })));\n                const offscreenCanvas = canvasEl.transferControlToOffscreen();\n                worker === null || worker === void 0 ? void 0 : worker.postMessage({\n                    type: \"init\",\n                    canvas: offscreenCanvas,\n                    width: canvasEl.width,\n                    height: canvasEl.height,\n                    dpr\n                }, [\n                    offscreenCanvas\n                ]);\n            }\n        } catch (e) {\n            console.warn(\"Failed to initialize OffscreenCanvas worker:\", e);\n        }\n    }\n    if (!worker) {\n        ctx = initCanvas(canvasEl, dpr);\n    }\n    let isResizeScheduled = false;\n    window.addEventListener(\"resize\", ()=>{\n        if (!isResizeScheduled) {\n            isResizeScheduled = true;\n            setTimeout(()=>{\n                const width2 = window.innerWidth;\n                const height2 = window.innerHeight;\n                dpr = getDpr();\n                canvasEl.style.width = \"\".concat(width2, \"px\");\n                canvasEl.style.height = \"\".concat(height2, \"px\");\n                if (worker) {\n                    worker.postMessage({\n                        type: \"resize\",\n                        width: width2,\n                        height: height2,\n                        dpr\n                    });\n                } else {\n                    canvasEl.width = width2 * dpr;\n                    canvasEl.height = height2 * dpr;\n                    if (ctx) {\n                        ctx.resetTransform();\n                        ctx.scale(dpr, dpr);\n                    }\n                    draw();\n                }\n                isResizeScheduled = false;\n            });\n        }\n    });\n    let prevScrollX = window.scrollX;\n    let prevScrollY = window.scrollY;\n    let isScrollScheduled = false;\n    window.addEventListener(\"scroll\", ()=>{\n        if (!isScrollScheduled) {\n            isScrollScheduled = true;\n            setTimeout(()=>{\n                const { scrollX, scrollY } = window;\n                const deltaX = scrollX - prevScrollX;\n                const deltaY = scrollY - prevScrollY;\n                prevScrollX = scrollX;\n                prevScrollY = scrollY;\n                if (worker) {\n                    worker.postMessage({\n                        type: \"scroll\",\n                        deltaX,\n                        deltaY\n                    });\n                } else {\n                    requestAnimationFrame(()=>{\n                        updateScroll(activeOutlines, deltaX, deltaY);\n                    });\n                }\n                isScrollScheduled = false;\n            }, 16 * 2);\n        }\n    });\n    setInterval(()=>{\n        try {\n            if (blueprintMapKeys.size) {\n                requestAnimationFrame(()=>{\n                    flushOutlines();\n                });\n            }\n        } catch (e) {}\n    }, 16 * 2);\n    shadowRoot2.appendChild(canvasEl);\n    return host;\n};\nvar hasStopped = ()=>{\n    return globalThis.__REACT_SCAN_STOP__;\n};\nvar cleanup = ()=>{\n    const host = document.querySelector(\"[data-react-scan]\");\n    if (host) {\n        host.remove();\n    }\n};\nvar needsReport = false;\nvar reportInterval;\nvar startReportInterval = ()=>{\n    clearInterval(reportInterval);\n    reportInterval = setInterval(()=>{\n        if (needsReport) {\n            Store.lastReportTime.value = Date.now();\n            needsReport = false;\n        }\n    }, 50);\n};\nvar isValidFiber = (fiber)=>{\n    if (ignoredProps.has(fiber.memoizedProps)) {\n        return false;\n    }\n    return true;\n};\nvar initReactScanInstrumentation = (param)=>{\n    let { onActive } = param;\n    if (hasStopped()) return;\n    const instrumentation = createInstrumentation(\"react-scan-devtools-0.1.0\", {\n        onCommitStart: ()=>{\n            var _ReactScanInternals_options_value_onCommitStart, _ReactScanInternals_options_value;\n            (_ReactScanInternals_options_value_onCommitStart = (_ReactScanInternals_options_value = ReactScanInternals.options.value).onCommitStart) === null || _ReactScanInternals_options_value_onCommitStart === void 0 ? void 0 : _ReactScanInternals_options_value_onCommitStart.call(_ReactScanInternals_options_value);\n        },\n        onActive,\n        onError () {},\n        isValidFiber,\n        onRender: (fiber, renders, renderedAt)=>{\n            var _ReactScanInternals_instrumentation, _ReactScanInternals_options_value_onRender, _ReactScanInternals_options_value;\n            if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isCompositeFiber)(fiber)) {\n                var _Store_monitor_value_interactionListeningForRenders, _Store_monitor_value;\n                (_Store_monitor_value = Store.monitor.value) === null || _Store_monitor_value === void 0 ? void 0 : (_Store_monitor_value_interactionListeningForRenders = _Store_monitor_value.interactionListeningForRenders) === null || _Store_monitor_value_interactionListeningForRenders === void 0 ? void 0 : _Store_monitor_value_interactionListeningForRenders.call(_Store_monitor_value, fiber, renders);\n            }\n            const isOverlayPaused = (_ReactScanInternals_instrumentation = ReactScanInternals.instrumentation) === null || _ReactScanInternals_instrumentation === void 0 ? void 0 : _ReactScanInternals_instrumentation.isPaused.value;\n            const isInspectorInactive = Store.inspectState.value.kind === \"inspect-off\" || Store.inspectState.value.kind === \"uninitialized\";\n            const shouldFullyAbort = isOverlayPaused && isInspectorInactive;\n            if (shouldFullyAbort) {\n                return;\n            }\n            if (!isOverlayPaused) {\n                outlineFiber(fiber, renderedAt);\n            }\n            if (ReactScanInternals.options.value.log) {\n                log(renders);\n            }\n            if (Store.inspectState.value.kind === \"focused\") {\n                inspectorUpdateSignal.value = Date.now();\n            }\n            (_ReactScanInternals_options_value_onRender = (_ReactScanInternals_options_value = ReactScanInternals.options.value).onRender) === null || _ReactScanInternals_options_value_onRender === void 0 ? void 0 : _ReactScanInternals_options_value_onRender.call(_ReactScanInternals_options_value, fiber, renders);\n        },\n        onCommitFinish: ()=>{\n            var _ReactScanInternals_options_value_onCommitFinish, _ReactScanInternals_options_value;\n            (_ReactScanInternals_options_value_onCommitFinish = (_ReactScanInternals_options_value = ReactScanInternals.options.value).onCommitFinish) === null || _ReactScanInternals_options_value_onCommitFinish === void 0 ? void 0 : _ReactScanInternals_options_value_onCommitFinish.call(_ReactScanInternals_options_value);\n        },\n        trackChanges: false\n    });\n    ReactScanInternals.instrumentation = instrumentation;\n};\n// src/web/assets/css/styles.css\nvar styles_default = '*, ::before, ::after {\\n  --tw-border-spacing-x: 0;\\n  --tw-border-spacing-y: 0;\\n  --tw-translate-x: 0;\\n  --tw-translate-y: 0;\\n  --tw-rotate: 0;\\n  --tw-skew-x: 0;\\n  --tw-skew-y: 0;\\n  --tw-scale-x: 1;\\n  --tw-scale-y: 1;\\n  --tw-pan-x:  ;\\n  --tw-pan-y:  ;\\n  --tw-pinch-zoom:  ;\\n  --tw-scroll-snap-strictness: proximity;\\n  --tw-gradient-from-position:  ;\\n  --tw-gradient-via-position:  ;\\n  --tw-gradient-to-position:  ;\\n  --tw-ordinal:  ;\\n  --tw-slashed-zero:  ;\\n  --tw-numeric-figure:  ;\\n  --tw-numeric-spacing:  ;\\n  --tw-numeric-fraction:  ;\\n  --tw-ring-inset:  ;\\n  --tw-ring-offset-width: 0px;\\n  --tw-ring-offset-color: #fff;\\n  --tw-ring-color: rgb(59 130 246 / 0.5);\\n  --tw-ring-offset-shadow: 0 0 #0000;\\n  --tw-ring-shadow: 0 0 #0000;\\n  --tw-shadow: 0 0 #0000;\\n  --tw-shadow-colored: 0 0 #0000;\\n  --tw-blur:  ;\\n  --tw-brightness:  ;\\n  --tw-contrast:  ;\\n  --tw-grayscale:  ;\\n  --tw-hue-rotate:  ;\\n  --tw-invert:  ;\\n  --tw-saturate:  ;\\n  --tw-sepia:  ;\\n  --tw-drop-shadow:  ;\\n  --tw-backdrop-blur:  ;\\n  --tw-backdrop-brightness:  ;\\n  --tw-backdrop-contrast:  ;\\n  --tw-backdrop-grayscale:  ;\\n  --tw-backdrop-hue-rotate:  ;\\n  --tw-backdrop-invert:  ;\\n  --tw-backdrop-opacity:  ;\\n  --tw-backdrop-saturate:  ;\\n  --tw-backdrop-sepia:  ;\\n  --tw-contain-size:  ;\\n  --tw-contain-layout:  ;\\n  --tw-contain-paint:  ;\\n  --tw-contain-style:  ;\\n}\\n\\n::backdrop {\\n  --tw-border-spacing-x: 0;\\n  --tw-border-spacing-y: 0;\\n  --tw-translate-x: 0;\\n  --tw-translate-y: 0;\\n  --tw-rotate: 0;\\n  --tw-skew-x: 0;\\n  --tw-skew-y: 0;\\n  --tw-scale-x: 1;\\n  --tw-scale-y: 1;\\n  --tw-pan-x:  ;\\n  --tw-pan-y:  ;\\n  --tw-pinch-zoom:  ;\\n  --tw-scroll-snap-strictness: proximity;\\n  --tw-gradient-from-position:  ;\\n  --tw-gradient-via-position:  ;\\n  --tw-gradient-to-position:  ;\\n  --tw-ordinal:  ;\\n  --tw-slashed-zero:  ;\\n  --tw-numeric-figure:  ;\\n  --tw-numeric-spacing:  ;\\n  --tw-numeric-fraction:  ;\\n  --tw-ring-inset:  ;\\n  --tw-ring-offset-width: 0px;\\n  --tw-ring-offset-color: #fff;\\n  --tw-ring-color: rgb(59 130 246 / 0.5);\\n  --tw-ring-offset-shadow: 0 0 #0000;\\n  --tw-ring-shadow: 0 0 #0000;\\n  --tw-shadow: 0 0 #0000;\\n  --tw-shadow-colored: 0 0 #0000;\\n  --tw-blur:  ;\\n  --tw-brightness:  ;\\n  --tw-contrast:  ;\\n  --tw-grayscale:  ;\\n  --tw-hue-rotate:  ;\\n  --tw-invert:  ;\\n  --tw-saturate:  ;\\n  --tw-sepia:  ;\\n  --tw-drop-shadow:  ;\\n  --tw-backdrop-blur:  ;\\n  --tw-backdrop-brightness:  ;\\n  --tw-backdrop-contrast:  ;\\n  --tw-backdrop-grayscale:  ;\\n  --tw-backdrop-hue-rotate:  ;\\n  --tw-backdrop-invert:  ;\\n  --tw-backdrop-opacity:  ;\\n  --tw-backdrop-saturate:  ;\\n  --tw-backdrop-sepia:  ;\\n  --tw-contain-size:  ;\\n  --tw-contain-layout:  ;\\n  --tw-contain-paint:  ;\\n  --tw-contain-style:  ;\\n}/*\\n! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com\\n*//*\\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\\n*/\\n\\n*,\\n::before,\\n::after {\\n  box-sizing: border-box; /* 1 */\\n  border-width: 0; /* 2 */\\n  border-style: solid; /* 2 */\\n  border-color: #e5e7eb; /* 2 */\\n}\\n\\n::before,\\n::after {\\n  --tw-content: \\'\\';\\n}\\n\\n/*\\n1. Use a consistent sensible line-height in all browsers.\\n2. Prevent adjustments of font size after orientation changes in iOS.\\n3. Use a more readable tab size.\\n4. Use the user\\'s configured `sans` font-family by default.\\n5. Use the user\\'s configured `sans` font-feature-settings by default.\\n6. Use the user\\'s configured `sans` font-variation-settings by default.\\n7. Disable tap highlights on iOS\\n*/\\n\\nhtml,\\n:host {\\n  line-height: 1.5; /* 1 */\\n  -webkit-text-size-adjust: 100%; /* 2 */\\n  -moz-tab-size: 4; /* 3 */\\n  -o-tab-size: 4;\\n     tab-size: 4; /* 3 */\\n  font-family: ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 4 */\\n  font-feature-settings: normal; /* 5 */\\n  font-variation-settings: normal; /* 6 */\\n  -webkit-tap-highlight-color: transparent; /* 7 */\\n}\\n\\n/*\\n1. Remove the margin in all browsers.\\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\\n*/\\n\\nbody {\\n  margin: 0; /* 1 */\\n  line-height: inherit; /* 2 */\\n}\\n\\n/*\\n1. Add the correct height in Firefox.\\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\\n3. Ensure horizontal rules are visible by default.\\n*/\\n\\nhr {\\n  height: 0; /* 1 */\\n  color: inherit; /* 2 */\\n  border-top-width: 1px; /* 3 */\\n}\\n\\n/*\\nAdd the correct text decoration in Chrome, Edge, and Safari.\\n*/\\n\\nabbr:where([title]) {\\n  -webkit-text-decoration: underline dotted;\\n          text-decoration: underline dotted;\\n}\\n\\n/*\\nRemove the default font size and weight for headings.\\n*/\\n\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  font-size: inherit;\\n  font-weight: inherit;\\n}\\n\\n/*\\nReset links to optimize for opt-in styling instead of opt-out.\\n*/\\n\\na {\\n  color: inherit;\\n  text-decoration: inherit;\\n}\\n\\n/*\\nAdd the correct font weight in Edge and Safari.\\n*/\\n\\nb,\\nstrong {\\n  font-weight: bolder;\\n}\\n\\n/*\\n1. Use the user\\'s configured `mono` font-family by default.\\n2. Use the user\\'s configured `mono` font-feature-settings by default.\\n3. Use the user\\'s configured `mono` font-variation-settings by default.\\n4. Correct the odd `em` font sizing in all browsers.\\n*/\\n\\ncode,\\nkbd,\\nsamp,\\npre {\\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; /* 1 */\\n  font-feature-settings: normal; /* 2 */\\n  font-variation-settings: normal; /* 3 */\\n  font-size: 1em; /* 4 */\\n}\\n\\n/*\\nAdd the correct font size in all browsers.\\n*/\\n\\nsmall {\\n  font-size: 80%;\\n}\\n\\n/*\\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\\n*/\\n\\nsub,\\nsup {\\n  font-size: 75%;\\n  line-height: 0;\\n  position: relative;\\n  vertical-align: baseline;\\n}\\n\\nsub {\\n  bottom: -0.25em;\\n}\\n\\nsup {\\n  top: -0.5em;\\n}\\n\\n/*\\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\\n3. Remove gaps between table borders by default.\\n*/\\n\\ntable {\\n  text-indent: 0; /* 1 */\\n  border-color: inherit; /* 2 */\\n  border-collapse: collapse; /* 3 */\\n}\\n\\n/*\\n1. Change the font styles in all browsers.\\n2. Remove the margin in Firefox and Safari.\\n3. Remove default padding in all browsers.\\n*/\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n  font-family: inherit; /* 1 */\\n  font-feature-settings: inherit; /* 1 */\\n  font-variation-settings: inherit; /* 1 */\\n  font-size: 100%; /* 1 */\\n  font-weight: inherit; /* 1 */\\n  line-height: inherit; /* 1 */\\n  letter-spacing: inherit; /* 1 */\\n  color: inherit; /* 1 */\\n  margin: 0; /* 2 */\\n  padding: 0; /* 3 */\\n}\\n\\n/*\\nRemove the inheritance of text transform in Edge and Firefox.\\n*/\\n\\nbutton,\\nselect {\\n  text-transform: none;\\n}\\n\\n/*\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Remove default button styles.\\n*/\\n\\nbutton,\\ninput:where([type=\\'button\\']),\\ninput:where([type=\\'reset\\']),\\ninput:where([type=\\'submit\\']) {\\n  -webkit-appearance: button; /* 1 */\\n  background-color: transparent; /* 2 */\\n  background-image: none; /* 2 */\\n}\\n\\n/*\\nUse the modern Firefox focus style for all focusable elements.\\n*/\\n\\n:-moz-focusring {\\n  outline: auto;\\n}\\n\\n/*\\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\\n*/\\n\\n:-moz-ui-invalid {\\n  box-shadow: none;\\n}\\n\\n/*\\nAdd the correct vertical alignment in Chrome and Firefox.\\n*/\\n\\nprogress {\\n  vertical-align: baseline;\\n}\\n\\n/*\\nCorrect the cursor style of increment and decrement buttons in Safari.\\n*/\\n\\n::-webkit-inner-spin-button,\\n::-webkit-outer-spin-button {\\n  height: auto;\\n}\\n\\n/*\\n1. Correct the odd appearance in Chrome and Safari.\\n2. Correct the outline style in Safari.\\n*/\\n\\n[type=\\'search\\'] {\\n  -webkit-appearance: textfield; /* 1 */\\n  outline-offset: -2px; /* 2 */\\n}\\n\\n/*\\nRemove the inner padding in Chrome and Safari on macOS.\\n*/\\n\\n::-webkit-search-decoration {\\n  -webkit-appearance: none;\\n}\\n\\n/*\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Change font properties to `inherit` in Safari.\\n*/\\n\\n::-webkit-file-upload-button {\\n  -webkit-appearance: button; /* 1 */\\n  font: inherit; /* 2 */\\n}\\n\\n/*\\nAdd the correct display in Chrome and Safari.\\n*/\\n\\nsummary {\\n  display: list-item;\\n}\\n\\n/*\\nRemoves the default spacing and border for appropriate elements.\\n*/\\n\\nblockquote,\\ndl,\\ndd,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\nhr,\\nfigure,\\np,\\npre {\\n  margin: 0;\\n}\\n\\nfieldset {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\nlegend {\\n  padding: 0;\\n}\\n\\nol,\\nul,\\nmenu {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n/*\\nReset default styling for dialogs.\\n*/\\ndialog {\\n  padding: 0;\\n}\\n\\n/*\\nPrevent resizing textareas horizontally by default.\\n*/\\n\\ntextarea {\\n  resize: vertical;\\n}\\n\\n/*\\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\\n2. Set the default placeholder color to the user\\'s configured gray 400 color.\\n*/\\n\\ninput::-moz-placeholder, textarea::-moz-placeholder {\\n  opacity: 1; /* 1 */\\n  color: #9ca3af; /* 2 */\\n}\\n\\ninput::placeholder,\\ntextarea::placeholder {\\n  opacity: 1; /* 1 */\\n  color: #9ca3af; /* 2 */\\n}\\n\\n/*\\nSet the default cursor for buttons.\\n*/\\n\\nbutton,\\n[role=\"button\"] {\\n  cursor: pointer;\\n}\\n\\n/*\\nMake sure disabled buttons don\\'t get the pointer cursor.\\n*/\\n:disabled {\\n  cursor: default;\\n}\\n\\n/*\\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\\n   This can trigger a poorly considered lint error in some tools but is included by design.\\n*/\\n\\nimg,\\nsvg,\\nvideo,\\ncanvas,\\naudio,\\niframe,\\nembed,\\nobject {\\n  display: block; /* 1 */\\n  vertical-align: middle; /* 2 */\\n}\\n\\n/*\\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\\n*/\\n\\nimg,\\nvideo {\\n  max-width: 100%;\\n  height: auto;\\n}\\n\\n/* Make elements with the HTML hidden attribute stay hidden by default */\\n[hidden]:where(:not([hidden=\"until-found\"])) {\\n  display: none;\\n}\\n.\\\\!container {\\n  width: 100% !important;\\n}\\n.container {\\n  width: 100%;\\n}\\n@media (min-width: 640px) {\\n\\n  .\\\\!container {\\n    max-width: 640px !important;\\n  }\\n\\n  .container {\\n    max-width: 640px;\\n  }\\n}\\n@media (min-width: 768px) {\\n\\n  .\\\\!container {\\n    max-width: 768px !important;\\n  }\\n\\n  .container {\\n    max-width: 768px;\\n  }\\n}\\n@media (min-width: 1024px) {\\n\\n  .\\\\!container {\\n    max-width: 1024px !important;\\n  }\\n\\n  .container {\\n    max-width: 1024px;\\n  }\\n}\\n@media (min-width: 1280px) {\\n\\n  .\\\\!container {\\n    max-width: 1280px !important;\\n  }\\n\\n  .container {\\n    max-width: 1280px;\\n  }\\n}\\n@media (min-width: 1536px) {\\n\\n  .\\\\!container {\\n    max-width: 1536px !important;\\n  }\\n\\n  .container {\\n    max-width: 1536px;\\n  }\\n}\\n.pointer-events-none {\\n  pointer-events: none;\\n}\\n.pointer-events-auto {\\n  pointer-events: auto;\\n}\\n.visible {\\n  visibility: visible;\\n}\\n.static {\\n  position: static;\\n}\\n.fixed {\\n  position: fixed;\\n}\\n.absolute {\\n  position: absolute;\\n}\\n.relative {\\n  position: relative;\\n}\\n.sticky {\\n  position: sticky;\\n}\\n.inset-0 {\\n  inset: 0px;\\n}\\n.inset-x-1 {\\n  left: 4px;\\n  right: 4px;\\n}\\n.inset-y-0 {\\n  top: 0px;\\n  bottom: 0px;\\n}\\n.-right-1 {\\n  right: -4px;\\n}\\n.-right-2\\\\.5 {\\n  right: -10px;\\n}\\n.-top-1 {\\n  top: -4px;\\n}\\n.-top-2\\\\.5 {\\n  top: -10px;\\n}\\n.bottom-0 {\\n  bottom: 0px;\\n}\\n.bottom-4 {\\n  bottom: 16px;\\n}\\n.left-0 {\\n  left: 0px;\\n}\\n.left-2 {\\n  left: 8px;\\n}\\n.left-3 {\\n  left: 12px;\\n}\\n.right-0 {\\n  right: 0px;\\n}\\n.right-2 {\\n  right: 8px;\\n}\\n.right-4 {\\n  right: 16px;\\n}\\n.top-0 {\\n  top: 0px;\\n}\\n.top-1\\\\/2 {\\n  top: 50%;\\n}\\n.top-2 {\\n  top: 8px;\\n}\\n.z-10 {\\n  z-index: 10;\\n}\\n.z-100 {\\n  z-index: 100;\\n}\\n.z-50 {\\n  z-index: 50;\\n}\\n.z-\\\\[124124124124\\\\] {\\n  z-index: 124124124124;\\n}\\n.z-\\\\[214748365\\\\] {\\n  z-index: 214748365;\\n}\\n.z-\\\\[214748367\\\\] {\\n  z-index: 214748367;\\n}\\n.m-\\\\[2px\\\\] {\\n  margin: 2px;\\n}\\n.mx-0\\\\.5 {\\n  margin-left: 2px;\\n  margin-right: 2px;\\n}\\n.\\\\!ml-0 {\\n  margin-left: 0px !important;\\n}\\n.mb-1\\\\.5 {\\n  margin-bottom: 6px;\\n}\\n.mb-2 {\\n  margin-bottom: 8px;\\n}\\n.mb-3 {\\n  margin-bottom: 12px;\\n}\\n.mb-4 {\\n  margin-bottom: 16px;\\n}\\n.mb-px {\\n  margin-bottom: 1px;\\n}\\n.ml-1 {\\n  margin-left: 4px;\\n}\\n.ml-auto {\\n  margin-left: auto;\\n}\\n.mr-0\\\\.5 {\\n  margin-right: 2px;\\n}\\n.mr-1 {\\n  margin-right: 4px;\\n}\\n.mr-1\\\\.5 {\\n  margin-right: 6px;\\n}\\n.mr-16 {\\n  margin-right: 64px;\\n}\\n.mr-auto {\\n  margin-right: auto;\\n}\\n.mt-0\\\\.5 {\\n  margin-top: 2px;\\n}\\n.mt-1 {\\n  margin-top: 4px;\\n}\\n.mt-4 {\\n  margin-top: 16px;\\n}\\n.block {\\n  display: block;\\n}\\n.inline {\\n  display: inline;\\n}\\n.flex {\\n  display: flex;\\n}\\n.table {\\n  display: table;\\n}\\n.grid {\\n  display: grid;\\n}\\n.hidden {\\n  display: none;\\n}\\n.aspect-square {\\n  aspect-ratio: 1 / 1;\\n}\\n.h-1 {\\n  height: 4px;\\n}\\n.h-1\\\\.5 {\\n  height: 6px;\\n}\\n.h-10 {\\n  height: 40px;\\n}\\n.h-12 {\\n  height: 48px;\\n}\\n.h-2\\\\.5 {\\n  height: 10px;\\n}\\n.h-3\\\\.5 {\\n  height: 14px;\\n}\\n.h-4 {\\n  height: 16px;\\n}\\n.h-4\\\\/5 {\\n  height: 80%;\\n}\\n.h-6 {\\n  height: 24px;\\n}\\n.h-7 {\\n  height: 28px;\\n}\\n.h-8 {\\n  height: 32px;\\n}\\n.h-\\\\[150px\\\\] {\\n  height: 150px;\\n}\\n.h-\\\\[235px\\\\] {\\n  height: 235px;\\n}\\n.h-\\\\[28px\\\\] {\\n  height: 28px;\\n}\\n.h-\\\\[48px\\\\] {\\n  height: 48px;\\n}\\n.h-\\\\[50px\\\\] {\\n  height: 50px;\\n}\\n.h-\\\\[calc\\\\(100\\\\%-150px\\\\)\\\\] {\\n  height: calc(100% - 150px);\\n}\\n.h-\\\\[calc\\\\(100\\\\%-200px\\\\)\\\\] {\\n  height: calc(100% - 200px);\\n}\\n.h-\\\\[calc\\\\(100\\\\%-25px\\\\)\\\\] {\\n  height: calc(100% - 25px);\\n}\\n.h-\\\\[calc\\\\(100\\\\%-40px\\\\)\\\\] {\\n  height: calc(100% - 40px);\\n}\\n.h-\\\\[calc\\\\(100\\\\%-48px\\\\)\\\\] {\\n  height: calc(100% - 48px);\\n}\\n.h-fit {\\n  height: -moz-fit-content;\\n  height: fit-content;\\n}\\n.h-full {\\n  height: 100%;\\n}\\n.h-screen {\\n  height: 100vh;\\n}\\n.max-h-0 {\\n  max-height: 0px;\\n}\\n.max-h-40 {\\n  max-height: 160px;\\n}\\n.max-h-8 {\\n  max-height: 32px;\\n}\\n.max-h-9 {\\n  max-height: 36px;\\n}\\n.max-h-\\\\[\\\\\"auto\\\\\"\\\\] {\\n  max-height: \"auto\";\\n}\\n.max-h-\\\\[400px\\\\] {\\n  max-height: 400px;\\n}\\n.min-h-9 {\\n  min-height: 36px;\\n}\\n.min-h-\\\\[48px\\\\] {\\n  min-height: 48px;\\n}\\n.min-h-fit {\\n  min-height: -moz-fit-content;\\n  min-height: fit-content;\\n}\\n.w-1 {\\n  width: 4px;\\n}\\n.w-1\\\\/2 {\\n  width: 50%;\\n}\\n.w-1\\\\/3 {\\n  width: 33.333333%;\\n}\\n.w-16 {\\n  width: 64px;\\n}\\n.w-2\\\\.5 {\\n  width: 10px;\\n}\\n.w-2\\\\/4 {\\n  width: 50%;\\n}\\n.w-3 {\\n  width: 12px;\\n}\\n.w-3\\\\.5 {\\n  width: 14px;\\n}\\n.w-32 {\\n  width: 128px;\\n}\\n.w-4 {\\n  width: 16px;\\n}\\n.w-4\\\\/5 {\\n  width: 80%;\\n}\\n.w-80 {\\n  width: 320px;\\n}\\n.w-\\\\[5\\\\%\\\\] {\\n  width: 5%;\\n}\\n.w-\\\\[72px\\\\] {\\n  width: 72px;\\n}\\n.w-\\\\[90\\\\%\\\\] {\\n  width: 90%;\\n}\\n.w-\\\\[calc\\\\(100\\\\%-200px\\\\)\\\\] {\\n  width: calc(100% - 200px);\\n}\\n.w-fit {\\n  width: -moz-fit-content;\\n  width: fit-content;\\n}\\n.w-full {\\n  width: 100%;\\n}\\n.w-px {\\n  width: 1px;\\n}\\n.w-screen {\\n  width: 100vw;\\n}\\n.min-w-\\\\[200px\\\\] {\\n  min-width: 200px;\\n}\\n.min-w-fit {\\n  min-width: -moz-fit-content;\\n  min-width: fit-content;\\n}\\n.max-w-md {\\n  max-width: 448px;\\n}\\n.flex-1 {\\n  flex: 1 1 0%;\\n}\\n.flex-\\\\[0_0_auto\\\\] {\\n  flex: 0 0 auto;\\n}\\n.grow {\\n  flex-grow: 1;\\n}\\n.-translate-y-1\\\\/2 {\\n  --tw-translate-y: -50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.-translate-y-\\\\[200\\\\%\\\\] {\\n  --tw-translate-y: -200%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.translate-y-0 {\\n  --tw-translate-y: 0px;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.translate-y-1 {\\n  --tw-translate-y: 4px;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.-rotate-90 {\\n  --tw-rotate: -90deg;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.rotate-0 {\\n  --tw-rotate: 0deg;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.rotate-90 {\\n  --tw-rotate: 90deg;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.scale-110 {\\n  --tw-scale-x: 1.1;\\n  --tw-scale-y: 1.1;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.transform {\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n@keyframes fadeIn {\\n\\n  0% {\\n    opacity: 0;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n.animate-fade-in {\\n  animation: fadeIn ease-in forwards;\\n}\\n.cursor-ew-resize {\\n  cursor: ew-resize;\\n}\\n.cursor-move {\\n  cursor: move;\\n}\\n.cursor-nesw-resize {\\n  cursor: nesw-resize;\\n}\\n.cursor-ns-resize {\\n  cursor: ns-resize;\\n}\\n.cursor-nwse-resize {\\n  cursor: nwse-resize;\\n}\\n.cursor-pointer {\\n  cursor: pointer;\\n}\\n.select-none {\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n          user-select: none;\\n}\\n.resize {\\n  resize: both;\\n}\\n.appearance-none {\\n  -webkit-appearance: none;\\n     -moz-appearance: none;\\n          appearance: none;\\n}\\n.grid-cols-2 {\\n  grid-template-columns: repeat(2, minmax(0, 1fr));\\n}\\n.flex-row-reverse {\\n  flex-direction: row-reverse;\\n}\\n.flex-col {\\n  flex-direction: column;\\n}\\n.flex-wrap {\\n  flex-wrap: wrap;\\n}\\n.items-start {\\n  align-items: flex-start;\\n}\\n.items-end {\\n  align-items: flex-end;\\n}\\n.items-center {\\n  align-items: center;\\n}\\n.items-stretch {\\n  align-items: stretch;\\n}\\n.justify-start {\\n  justify-content: flex-start;\\n}\\n.justify-end {\\n  justify-content: flex-end;\\n}\\n.justify-center {\\n  justify-content: center;\\n}\\n.justify-between {\\n  justify-content: space-between;\\n}\\n.gap-0\\\\.5 {\\n  gap: 2px;\\n}\\n.gap-1 {\\n  gap: 4px;\\n}\\n.gap-1\\\\.5 {\\n  gap: 6px;\\n}\\n.gap-2 {\\n  gap: 8px;\\n}\\n.gap-4 {\\n  gap: 16px;\\n}\\n.gap-x-0\\\\.5 {\\n  -moz-column-gap: 2px;\\n       column-gap: 2px;\\n}\\n.gap-x-1 {\\n  -moz-column-gap: 4px;\\n       column-gap: 4px;\\n}\\n.gap-x-1\\\\.5 {\\n  -moz-column-gap: 6px;\\n       column-gap: 6px;\\n}\\n.gap-x-2 {\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n}\\n.gap-x-3 {\\n  -moz-column-gap: 12px;\\n       column-gap: 12px;\\n}\\n.gap-x-4 {\\n  -moz-column-gap: 16px;\\n       column-gap: 16px;\\n}\\n.gap-x-\\\\[6px\\\\] {\\n  -moz-column-gap: 6px;\\n       column-gap: 6px;\\n}\\n.gap-y-0\\\\.5 {\\n  row-gap: 2px;\\n}\\n.gap-y-1 {\\n  row-gap: 4px;\\n}\\n.gap-y-2 {\\n  row-gap: 8px;\\n}\\n.gap-y-4 {\\n  row-gap: 16px;\\n}\\n.space-y-1 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-space-y-reverse: 0;\\n  margin-top: calc(4px * calc(1 - var(--tw-space-y-reverse)));\\n  margin-bottom: calc(4px * var(--tw-space-y-reverse));\\n}\\n.space-y-1\\\\.5 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-space-y-reverse: 0;\\n  margin-top: calc(6px * calc(1 - var(--tw-space-y-reverse)));\\n  margin-bottom: calc(6px * var(--tw-space-y-reverse));\\n}\\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-space-y-reverse: 0;\\n  margin-top: calc(8px * calc(1 - var(--tw-space-y-reverse)));\\n  margin-bottom: calc(8px * var(--tw-space-y-reverse));\\n}\\n.space-y-4 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-space-y-reverse: 0;\\n  margin-top: calc(16px * calc(1 - var(--tw-space-y-reverse)));\\n  margin-bottom: calc(16px * var(--tw-space-y-reverse));\\n}\\n.divide-y > :not([hidden]) ~ :not([hidden]) {\\n  --tw-divide-y-reverse: 0;\\n  border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\\n  border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\\n}\\n.divide-zinc-800 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-divide-opacity: 1;\\n  border-color: rgb(39 39 42 / var(--tw-divide-opacity, 1));\\n}\\n.overflow-auto {\\n  overflow: auto;\\n}\\n.overflow-hidden {\\n  overflow: hidden;\\n}\\n.\\\\!overflow-visible {\\n  overflow: visible !important;\\n}\\n.overflow-x-auto {\\n  overflow-x: auto;\\n}\\n.overflow-y-auto {\\n  overflow-y: auto;\\n}\\n.overflow-x-hidden {\\n  overflow-x: hidden;\\n}\\n.truncate {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n.whitespace-nowrap {\\n  white-space: nowrap;\\n}\\n.whitespace-pre-wrap {\\n  white-space: pre-wrap;\\n}\\n.text-wrap {\\n  text-wrap: wrap;\\n}\\n.break-words {\\n  overflow-wrap: break-word;\\n}\\n.break-all {\\n  word-break: break-all;\\n}\\n.rounded {\\n  border-radius: 4px;\\n}\\n.rounded-\\\\[2px\\\\] {\\n  border-radius: 2px;\\n}\\n.rounded-full {\\n  border-radius: 9999px;\\n}\\n.rounded-lg {\\n  border-radius: 8px;\\n}\\n.rounded-md {\\n  border-radius: 6px;\\n}\\n.rounded-sm {\\n  border-radius: 2px;\\n}\\n.rounded-l-sm {\\n  border-top-left-radius: 2px;\\n  border-bottom-left-radius: 2px;\\n}\\n.rounded-r-sm {\\n  border-top-right-radius: 2px;\\n  border-bottom-right-radius: 2px;\\n}\\n.rounded-t-lg {\\n  border-top-left-radius: 8px;\\n  border-top-right-radius: 8px;\\n}\\n.rounded-t-sm {\\n  border-top-left-radius: 2px;\\n  border-top-right-radius: 2px;\\n}\\n.border {\\n  border-width: 1px;\\n}\\n.border-4 {\\n  border-width: 4px;\\n}\\n.border-b {\\n  border-bottom-width: 1px;\\n}\\n.border-l-0 {\\n  border-left-width: 0px;\\n}\\n.border-l-1 {\\n  border-left-width: 1px;\\n}\\n.border-r {\\n  border-right-width: 1px;\\n}\\n.border-t {\\n  border-top-width: 1px;\\n}\\n.\\\\!border-red-500 {\\n  --tw-border-opacity: 1 !important;\\n  border-color: rgb(239 68 68 / var(--tw-border-opacity, 1)) !important;\\n}\\n.border-\\\\[\\\\#1e1e1e\\\\] {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(30 30 30 / var(--tw-border-opacity, 1));\\n}\\n.border-\\\\[\\\\#27272A\\\\] {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(39 39 42 / var(--tw-border-opacity, 1));\\n}\\n.border-\\\\[\\\\#333\\\\] {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(51 51 51 / var(--tw-border-opacity, 1));\\n}\\n.border-gray-700\\\\/50 {\\n  border-color: rgb(55 65 81 / 0.5);\\n}\\n.border-red-800\\\\/50 {\\n  border-color: rgb(153 27 27 / 0.5);\\n}\\n.border-transparent {\\n  border-color: transparent;\\n}\\n.border-white\\\\/10 {\\n  border-color: rgb(255 255 255 / 0.1);\\n}\\n.border-white\\\\/20 {\\n  border-color: rgb(255 255 255 / 0.2);\\n}\\n.border-yellow-800\\\\/50 {\\n  border-color: rgb(133 77 14 / 0.5);\\n}\\n.border-zinc-800 {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(39 39 42 / var(--tw-border-opacity, 1));\\n}\\n.bg-\\\\[\\\\#0A0A0A\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(10 10 10 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#141414\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(20 20 20 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#18181B\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(24 24 27 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#18181B\\\\]\\\\/50 {\\n  background-color: rgb(24 24 27 / 0.5);\\n}\\n.bg-\\\\[\\\\#1D3A66\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(29 58 102 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#1a2a1a\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(26 42 26 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#1e1e1e\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(30 30 30 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#214379d4\\\\] {\\n  background-color: #214379d4;\\n}\\n.bg-\\\\[\\\\#27272A\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(39 39 42 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#2a1515\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(42 21 21 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#412162\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(65 33 98 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#4b4b4b\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(75 75 75 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#5f3f9a\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(95 63 154 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#5f3f9a\\\\]\\\\/40 {\\n  background-color: rgb(95 63 154 / 0.4);\\n}\\n.bg-\\\\[\\\\#6a369e\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(106 54 158 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#7521c8\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(117 33 200 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#8e61e3\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(142 97 227 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#A284F5\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(162 132 245 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#EFD81A\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(239 216 26 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#b77116\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(183 113 22 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#b94040\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(185 64 64 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#d36cff\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(211 108 255 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#efd81a6b\\\\] {\\n  background-color: #efd81a6b;\\n}\\n.bg-black {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\\n}\\n.bg-black\\\\/40 {\\n  background-color: rgb(0 0 0 / 0.4);\\n}\\n.bg-gray-200 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity, 1));\\n}\\n.bg-gray-800 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity, 1));\\n}\\n.bg-gray-800\\\\/50 {\\n  background-color: rgb(31 41 55 / 0.5);\\n}\\n.bg-green-500\\\\/50 {\\n  background-color: rgb(34 197 94 / 0.5);\\n}\\n.bg-green-500\\\\/60 {\\n  background-color: rgb(34 197 94 / 0.6);\\n}\\n.bg-neutral-700 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(64 64 64 / var(--tw-bg-opacity, 1));\\n}\\n.bg-purple-500 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(168 85 247 / var(--tw-bg-opacity, 1));\\n}\\n.bg-purple-500\\\\/90 {\\n  background-color: rgb(168 85 247 / 0.9);\\n}\\n.bg-purple-800 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(107 33 168 / var(--tw-bg-opacity, 1));\\n}\\n.bg-red-500 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\\n}\\n.bg-red-500\\\\/90 {\\n  background-color: rgb(239 68 68 / 0.9);\\n}\\n.bg-red-900\\\\/50 {\\n  background-color: rgb(127 29 29 / 0.5);\\n}\\n.bg-red-950\\\\/40 {\\n  background-color: rgb(69 10 10 / 0.4);\\n}\\n.bg-red-950\\\\/50 {\\n  background-color: rgb(69 10 10 / 0.5);\\n}\\n.bg-transparent {\\n  background-color: transparent;\\n}\\n.bg-white {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\\n}\\n.bg-yellow-300 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\\n}\\n.bg-yellow-950\\\\/40 {\\n  background-color: rgb(66 32 6 / 0.4);\\n}\\n.bg-zinc-800 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(39 39 42 / var(--tw-bg-opacity, 1));\\n}\\n.bg-zinc-900\\\\/30 {\\n  background-color: rgb(24 24 27 / 0.3);\\n}\\n.bg-zinc-900\\\\/50 {\\n  background-color: rgb(24 24 27 / 0.5);\\n}\\n.object-contain {\\n  -o-object-fit: contain;\\n     object-fit: contain;\\n}\\n.p-0 {\\n  padding: 0px;\\n}\\n.p-1 {\\n  padding: 4px;\\n}\\n.p-1\\\\.5 {\\n  padding: 6px;\\n}\\n.p-2 {\\n  padding: 8px;\\n}\\n.p-3 {\\n  padding: 12px;\\n}\\n.p-4 {\\n  padding: 16px;\\n}\\n.p-5 {\\n  padding: 20px;\\n}\\n.p-6 {\\n  padding: 24px;\\n}\\n.px-1 {\\n  padding-left: 4px;\\n  padding-right: 4px;\\n}\\n.px-1\\\\.5 {\\n  padding-left: 6px;\\n  padding-right: 6px;\\n}\\n.px-2 {\\n  padding-left: 8px;\\n  padding-right: 8px;\\n}\\n.px-2\\\\.5 {\\n  padding-left: 10px;\\n  padding-right: 10px;\\n}\\n.px-3 {\\n  padding-left: 12px;\\n  padding-right: 12px;\\n}\\n.px-4 {\\n  padding-left: 16px;\\n  padding-right: 16px;\\n}\\n.py-0\\\\.5 {\\n  padding-top: 2px;\\n  padding-bottom: 2px;\\n}\\n.py-1 {\\n  padding-top: 4px;\\n  padding-bottom: 4px;\\n}\\n.py-1\\\\.5 {\\n  padding-top: 6px;\\n  padding-bottom: 6px;\\n}\\n.py-2 {\\n  padding-top: 8px;\\n  padding-bottom: 8px;\\n}\\n.py-3 {\\n  padding-top: 12px;\\n  padding-bottom: 12px;\\n}\\n.py-4 {\\n  padding-top: 16px;\\n  padding-bottom: 16px;\\n}\\n.py-\\\\[1px\\\\] {\\n  padding-top: 1px;\\n  padding-bottom: 1px;\\n}\\n.py-\\\\[3px\\\\] {\\n  padding-top: 3px;\\n  padding-bottom: 3px;\\n}\\n.py-\\\\[5px\\\\] {\\n  padding-top: 5px;\\n  padding-bottom: 5px;\\n}\\n.pb-2 {\\n  padding-bottom: 8px;\\n}\\n.pl-1 {\\n  padding-left: 4px;\\n}\\n.pl-1\\\\.5 {\\n  padding-left: 6px;\\n}\\n.pl-2 {\\n  padding-left: 8px;\\n}\\n.pl-2\\\\.5 {\\n  padding-left: 10px;\\n}\\n.pl-3 {\\n  padding-left: 12px;\\n}\\n.pl-5 {\\n  padding-left: 20px;\\n}\\n.pl-6 {\\n  padding-left: 24px;\\n}\\n.pl-9 {\\n  padding-left: 36px;\\n}\\n.pr-1 {\\n  padding-right: 4px;\\n}\\n.pr-2 {\\n  padding-right: 8px;\\n}\\n.pr-2\\\\.5 {\\n  padding-right: 10px;\\n}\\n.pt-0 {\\n  padding-top: 0px;\\n}\\n.pt-2 {\\n  padding-top: 8px;\\n}\\n.pt-5 {\\n  padding-top: 20px;\\n}\\n.text-left {\\n  text-align: left;\\n}\\n.font-mono {\\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;\\n}\\n.text-\\\\[10px\\\\] {\\n  font-size: 10px;\\n}\\n.text-\\\\[11px\\\\] {\\n  font-size: 11px;\\n}\\n.text-\\\\[13px\\\\] {\\n  font-size: 13px;\\n}\\n.text-\\\\[14px\\\\] {\\n  font-size: 14px;\\n}\\n.text-\\\\[17px\\\\] {\\n  font-size: 17px;\\n}\\n.text-\\\\[8px\\\\] {\\n  font-size: 8px;\\n}\\n.text-sm {\\n  font-size: 14px;\\n  line-height: 20px;\\n}\\n.text-xs {\\n  font-size: 12px;\\n  line-height: 16px;\\n}\\n.font-bold {\\n  font-weight: 700;\\n}\\n.font-medium {\\n  font-weight: 500;\\n}\\n.font-semibold {\\n  font-weight: 600;\\n}\\n.uppercase {\\n  text-transform: uppercase;\\n}\\n.lowercase {\\n  text-transform: lowercase;\\n}\\n.capitalize {\\n  text-transform: capitalize;\\n}\\n.italic {\\n  font-style: italic;\\n}\\n.leading-6 {\\n  line-height: 24px;\\n}\\n.leading-none {\\n  line-height: 1;\\n}\\n.tracking-wide {\\n  letter-spacing: 0.025em;\\n}\\n.tracking-wider {\\n  letter-spacing: 0.05em;\\n}\\n.text-\\\\[\\\\#4ade80\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(74 222 128 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#5a5a5a\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(90 90 90 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#65656D\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(101 101 109 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#666\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(102 102 102 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#6E6E77\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(110 110 119 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#6F6F78\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(111 111 120 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#7346a0\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(115 70 160 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#888\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(136 136 136 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#8E61E3\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(142 97 227 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#999\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(153 153 153 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#A1A1AA\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(161 161 170 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#A284F5\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(162 132 245 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#A855F7\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(168 85 247 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#E4E4E7\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(228 228 231 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#d36cff\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(211 108 255 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#f87171\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(248 113 113 / var(--tw-text-opacity, 1));\\n}\\n.text-black {\\n  --tw-text-opacity: 1;\\n  color: rgb(0 0 0 / var(--tw-text-opacity, 1));\\n}\\n.text-blue-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(59 130 246 / var(--tw-text-opacity, 1));\\n}\\n.text-gray-100 {\\n  --tw-text-opacity: 1;\\n  color: rgb(243 244 246 / var(--tw-text-opacity, 1));\\n}\\n.text-gray-300 {\\n  --tw-text-opacity: 1;\\n  color: rgb(209 213 219 / var(--tw-text-opacity, 1));\\n}\\n.text-gray-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(156 163 175 / var(--tw-text-opacity, 1));\\n}\\n.text-gray-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(107 114 128 / var(--tw-text-opacity, 1));\\n}\\n.text-green-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(34 197 94 / var(--tw-text-opacity, 1));\\n}\\n.text-inspect {\\n  --tw-text-opacity: 1;\\n  color: rgb(142 97 227 / var(--tw-text-opacity, 1));\\n}\\n.text-neutral-300 {\\n  --tw-text-opacity: 1;\\n  color: rgb(212 212 212 / var(--tw-text-opacity, 1));\\n}\\n.text-neutral-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(163 163 163 / var(--tw-text-opacity, 1));\\n}\\n.text-neutral-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(115 115 115 / var(--tw-text-opacity, 1));\\n}\\n.text-purple-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(192 132 252 / var(--tw-text-opacity, 1));\\n}\\n.text-red-300 {\\n  --tw-text-opacity: 1;\\n  color: rgb(252 165 165 / var(--tw-text-opacity, 1));\\n}\\n.text-red-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(248 113 113 / var(--tw-text-opacity, 1));\\n}\\n.text-red-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(239 68 68 / var(--tw-text-opacity, 1));\\n}\\n.text-white {\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n}\\n.text-white\\\\/30 {\\n  color: rgb(255 255 255 / 0.3);\\n}\\n.text-white\\\\/70 {\\n  color: rgb(255 255 255 / 0.7);\\n}\\n.text-yellow-300 {\\n  --tw-text-opacity: 1;\\n  color: rgb(253 224 71 / var(--tw-text-opacity, 1));\\n}\\n.text-yellow-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(250 204 21 / var(--tw-text-opacity, 1));\\n}\\n.text-yellow-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(234 179 8 / var(--tw-text-opacity, 1));\\n}\\n.text-zinc-200 {\\n  --tw-text-opacity: 1;\\n  color: rgb(228 228 231 / var(--tw-text-opacity, 1));\\n}\\n.text-zinc-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(161 161 170 / var(--tw-text-opacity, 1));\\n}\\n.text-zinc-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(113 113 122 / var(--tw-text-opacity, 1));\\n}\\n.text-zinc-600 {\\n  --tw-text-opacity: 1;\\n  color: rgb(82 82 91 / var(--tw-text-opacity, 1));\\n}\\n.opacity-0 {\\n  opacity: 0;\\n}\\n.opacity-100 {\\n  opacity: 1;\\n}\\n.opacity-50 {\\n  opacity: 0.5;\\n}\\n.\\\\!shadow {\\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1) !important;\\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color) !important;\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important;\\n}\\n.shadow {\\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n}\\n.shadow-lg {\\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n}\\n.outline {\\n  outline-style: solid;\\n}\\n.ring-1 {\\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\\n}\\n.ring-white\\\\/\\\\[0\\\\.08\\\\] {\\n  --tw-ring-color: rgb(255 255 255 / 0.08);\\n}\\n.blur {\\n  --tw-blur: blur(8px);\\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\\n}\\n.\\\\!filter {\\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow) !important;\\n}\\n.filter {\\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\\n}\\n.backdrop-blur-sm {\\n  --tw-backdrop-blur: blur(4px);\\n  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\\n  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\\n}\\n.transition {\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-\\\\[border-radius\\\\] {\\n  transition-property: border-radius;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-\\\\[max-height\\\\] {\\n  transition-property: max-height;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-\\\\[opacity\\\\] {\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-\\\\[transform\\\\2c color\\\\] {\\n  transition-property: transform,color;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-all {\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-colors {\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-none {\\n  transition-property: none;\\n}\\n.transition-opacity {\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-transform {\\n  transition-property: transform;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.delay-0 {\\n  transition-delay: 0s;\\n}\\n.delay-150 {\\n  transition-delay: 150ms;\\n}\\n.delay-300 {\\n  transition-delay: 300ms;\\n}\\n.duration-0 {\\n  transition-duration: 0s;\\n}\\n.duration-200 {\\n  transition-duration: 200ms;\\n}\\n.duration-300 {\\n  transition-duration: 300ms;\\n}\\n.ease-\\\\[cubic-bezier\\\\(0\\\\.23\\\\2c 1\\\\2c 0\\\\.32\\\\2c 1\\\\)\\\\] {\\n  transition-timing-function: cubic-bezier(0.23,1,0.32,1);\\n}\\n.ease-\\\\[cubic-bezier\\\\(0\\\\.25\\\\2c 0\\\\.1\\\\2c 0\\\\.25\\\\2c 1\\\\)\\\\] {\\n  transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);\\n}\\n.ease-in-out {\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n}\\n.ease-out {\\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\\n}\\n.will-change-transform {\\n  will-change: transform;\\n}\\n.animation-duration-300 {\\n  animation-duration: .3s;\\n}\\n.animation-delay-300 {\\n  animation-delay: .3s;\\n}\\n\\n* {\\n  outline: none !important;\\n  text-rendering: optimizeLegibility;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n  backface-visibility: hidden;\\n\\n  /* WebKit (Chrome, Safari, Edge) specific scrollbar styles */\\n  &::-webkit-scrollbar {\\n    width: 6px;\\n    height: 6px;\\n  }\\n\\n  &::-webkit-scrollbar-track {\\n    border-radius: 10px;\\n    background: transparent;\\n  }\\n\\n  &::-webkit-scrollbar-thumb {\\n    border-radius: 10px;\\n    background: rgba(255, 255, 255, 0.3);\\n  }\\n\\n  &::-webkit-scrollbar-thumb:hover {\\n    background: rgba(255, 255, 255, .4);\\n  }\\n\\n  &::-webkit-scrollbar-corner {\\n    background: transparent;\\n  }\\n}\\n\\n@-moz-document url-prefix() {\\n  * {\\n    scrollbar-width: thin;\\n    scrollbar-color: rgba(255, 255, 255, 0.4) transparent;\\n    scrollbar-width: 6px;\\n  }\\n}\\n\\n\\nbutton:hover {\\n  background-image: none;\\n}\\n\\n\\nbutton {\\n  outline: 2px solid transparent;\\n  outline-offset: 2px;\\n  border-style: none;\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n  transition-timing-function: linear;\\n  cursor: pointer;\\n}\\n\\ninput {\\n  border-style: none;\\n  background-color: transparent;\\n  background-image: none;\\n  outline: 2px solid transparent;\\n  outline-offset: 2px;\\n}\\n\\ninput::-moz-placeholder {\\n  font-size: 12px;\\n  line-height: 16px;\\n  font-style: italic;\\n  --tw-text-opacity: 1;\\n  color: rgb(115 115 115 / var(--tw-text-opacity, 1));\\n}\\n\\ninput::placeholder {\\n  font-size: 12px;\\n  line-height: 16px;\\n  font-style: italic;\\n  --tw-text-opacity: 1;\\n  color: rgb(115 115 115 / var(--tw-text-opacity, 1));\\n}\\n\\ninput:-moz-placeholder-shown {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\ninput:placeholder-shown {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\nsvg {\\n  height: auto;\\n  width: auto;\\n  pointer-events: none;\\n}\\n\\n/*\\n  Using CSS content with data attributes is more performant than:\\n  1. React re-renders with JSX text content\\n  2. Direct DOM manipulation methods:\\n     - element.textContent (creates/updates text nodes, triggers repaint)\\n     - element.innerText (triggers reflow by computing styles & layout)\\n     - element.innerHTML (heavy parsing, triggers reflow, security risks)\\n  3. Multiple data attributes with complex CSS concatenation\\n\\n  This approach:\\n  - Avoids React reconciliation\\n  - Uses browser\\'s native CSS engine (optimized content updates)\\n  - Minimizes main thread work\\n  - Reduces DOM operations\\n  - Avoids forced reflows (layout recalculation)\\n  - Only triggers necessary repaints\\n  - Keeps pseudo-element updates in render layer\\n*/\\n.with-data-text {\\n  overflow: hidden;\\n  &::before {\\n    content: attr(data-text);\\n  }\\n  &::before {\\n    display: block;\\n  }\\n  &::before {\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n  }\\n}\\n\\n#react-scan-toolbar {\\n  position: fixed;\\n  left: 0px;\\n  top: 0px;\\n  display: flex;\\n  flex-direction: column;\\n  border-radius: 8px;\\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;\\n  font-size: 13px;\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n          user-select: none;\\n  cursor: move;\\n  opacity: 0;\\n  z-index: 2147483678;\\n}\\n\\n@keyframes fadeIn {\\n\\n  0% {\\n    opacity: 0;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n#react-scan-toolbar {\\n  animation: fadeIn ease-in forwards;\\n  animation-duration: .3s;\\n  animation-delay: .3s;\\n  --tw-shadow: 0 4px 12px rgba(0,0,0,0.2);\\n  --tw-shadow-colored: 0 4px 12px var(--tw-shadow-color);\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n  place-self: start;\\n}\\n\\n.button {\\n  &:hover {\\n    background: rgba(255, 255, 255, 0.1);\\n  }\\n\\n  &:active {\\n    background: rgba(255, 255, 255, 0.15);\\n  }\\n}\\n\\n.resize-line-wrapper {\\n  position: absolute;\\n  overflow: hidden;\\n}\\n\\n.resize-line {\\n  position: absolute;\\n  inset: 0px;\\n  overflow: hidden;\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n\\n  svg {\\n    position: absolute;\\n  }\\n\\n  svg {\\n    top: 50%;\\n  }\\n\\n  svg {\\n    left: 50%;\\n  }\\n\\n  svg {\\n    --tw-translate-x: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  svg {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.resize-right,\\n.resize-left {\\n  top: 0px;\\n  bottom: 0px;\\n  width: 24px;\\n  cursor: ew-resize;\\n\\n  .resize-line-wrapper {\\n    top: 0px;\\n    bottom: 0px;\\n  }\\n\\n  .resize-line-wrapper {\\n    width: 50%;\\n  }\\n\\n  &:hover {\\n    .resize-line {\\n      --tw-translate-x: 0px;\\n      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n    }\\n  }\\n}\\n.resize-right {\\n  right: 0px;\\n  --tw-translate-x: 50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n\\n  .resize-line-wrapper {\\n    right: 0px;\\n  }\\n  .resize-line {\\n    border-top-right-radius: 8px;\\n    border-bottom-right-radius: 8px;\\n  }\\n  .resize-line {\\n    --tw-translate-x: -100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.resize-left {\\n  left: 0px;\\n  --tw-translate-x: -50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n\\n  .resize-line-wrapper {\\n    left: 0px;\\n  }\\n  .resize-line {\\n    border-top-left-radius: 8px;\\n    border-bottom-left-radius: 8px;\\n  }\\n  .resize-line {\\n    --tw-translate-x: 100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.resize-top,\\n.resize-bottom {\\n  left: 0px;\\n  right: 0px;\\n  height: 24px;\\n  cursor: ns-resize;\\n\\n  .resize-line-wrapper {\\n    left: 0px;\\n    right: 0px;\\n  }\\n\\n  .resize-line-wrapper {\\n    height: 50%;\\n  }\\n\\n  &:hover {\\n    .resize-line {\\n      --tw-translate-y: 0px;\\n      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n    }\\n  }\\n}\\n.resize-top {\\n  top: 0px;\\n  --tw-translate-y: -50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n\\n  .resize-line-wrapper {\\n    top: 0px;\\n  }\\n  .resize-line {\\n    border-top-left-radius: 8px;\\n    border-top-right-radius: 8px;\\n  }\\n  .resize-line {\\n    --tw-translate-y: 100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.resize-bottom {\\n  bottom: 0px;\\n  --tw-translate-y: 50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n\\n  .resize-line-wrapper {\\n    bottom: 0px;\\n  }\\n  .resize-line {\\n    border-bottom-right-radius: 8px;\\n    border-bottom-left-radius: 8px;\\n  }\\n  .resize-line {\\n    --tw-translate-y: -100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.react-scan-header {\\n  display: flex;\\n  align-items: center;\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n  padding-left: 12px;\\n  padding-right: 8px;\\n  min-height: 36px;\\n  border-bottom-width: 1px;\\n  border-color: rgb(255 255 255 / 0.1);\\n  overflow: hidden;\\n  white-space: nowrap;\\n}\\n\\n.react-scan-replay-button,\\n.react-scan-close-button {\\n  display: flex;\\n  align-items: center;\\n  padding: 4px;\\n  min-width: -moz-fit-content;\\n  min-width: fit-content;\\n  border-radius: 4px;\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 300ms;\\n}\\n\\n.react-scan-replay-button {\\n  position: relative;\\n  overflow: hidden;\\n  background-color: rgb(168 85 247 / 0.5) !important;\\n\\n  &:hover {\\n    background-color: rgb(168 85 247 / 0.25);\\n  }\\n\\n  &.disabled {\\n    opacity: 0.5;\\n  }\\n\\n  &.disabled {\\n    pointer-events: none;\\n  }\\n\\n  &:before {\\n    content: \\'\\';\\n  }\\n\\n  &:before {\\n    position: absolute;\\n  }\\n\\n  &:before {\\n    inset: 0px;\\n  }\\n\\n  &:before {\\n    --tw-translate-x: -100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  &:before {\\n    animation: shimmer 2s infinite;\\n    background: linear-gradient(to right,\\n      transparent,\\n      rgba(142, 97, 227, 0.3),\\n      transparent);\\n  }\\n}\\n\\n.react-scan-close-button {\\n  background-color: rgb(255 255 255 / 0.1);\\n\\n  &:hover {\\n    background-color: rgb(255 255 255 / 0.15);\\n  }\\n}\\n\\n@keyframes shimmer {\\n  100% {\\n    --tw-translate-x: 100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.react-section-header {\\n  position: sticky;\\n  z-index: 100;\\n  display: flex;\\n  align-items: center;\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n  padding-left: 12px;\\n  padding-right: 12px;\\n  height: 32px;\\n  width: 100%;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  --tw-text-opacity: 1;\\n  color: rgb(136 136 136 / var(--tw-text-opacity, 1));\\n  border-bottom-width: 1px;\\n  --tw-border-opacity: 1;\\n  border-color: rgb(34 34 34 / var(--tw-border-opacity, 1));\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(10 10 10 / var(--tw-bg-opacity, 1));\\n}\\n\\n.react-scan-section {\\n  display: flex;\\n  flex-direction: column;\\n  padding-left: 8px;\\n  padding-right: 8px;\\n  --tw-text-opacity: 1;\\n  color: rgb(136 136 136 / var(--tw-text-opacity, 1));\\n}\\n\\n.react-scan-section::before {\\n  --tw-text-opacity: 1;\\n  color: rgb(107 114 128 / var(--tw-text-opacity, 1));\\n  --tw-content: attr(data-section);\\n  content: var(--tw-content);\\n}\\n\\n.react-scan-section {\\n  font-size: 12px;\\n  line-height: 16px;\\n\\n  > .react-scan-property {\\n    margin-left: -14px;\\n  }\\n}\\n\\n.react-scan-property {\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  padding-left: 32px;\\n  border-left-width: 1px;\\n  border-color: transparent;\\n  overflow: hidden;\\n}\\n\\n.react-scan-property-content {\\n  display: flex;\\n  flex: 1 1 0%;\\n  flex-direction: column;\\n  min-height: 24px;\\n  padding-top: 4px;\\n  padding-bottom: 4px;\\n  max-width: 100%;\\n  overflow: hidden;\\n}\\n\\n.react-scan-string {\\n  color: #9ecbff;\\n}\\n\\n.react-scan-number {\\n  color: #79c7ff;\\n}\\n\\n.react-scan-boolean {\\n  color: #56b6c2;\\n}\\n\\n.react-scan-key {\\n  width: -moz-fit-content;\\n  width: fit-content;\\n  max-width: 240px;\\n  white-space: nowrap;\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n}\\n\\n.react-scan-input {\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\\n}\\n\\n@keyframes blink {\\n  from {\\n    opacity: 1;\\n  }\\n  to {\\n    opacity: 0;\\n  }\\n}\\n\\n.react-scan-arrow {\\n  position: absolute;\\n  top: 4px;\\n  left: 28px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  cursor: pointer;\\n  height: 24px;\\n  width: 24px;\\n  --tw-translate-x: -100%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  z-index: 10;\\n\\n  > svg {\\n    transition-property: transform;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n}\\n\\n.react-scan-expandable {\\n  display: grid;\\n  grid-template-rows: 0fr;\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 75ms;\\n\\n  &.react-scan-expanded {\\n    grid-template-rows: 1fr;\\n  }\\n\\n  &.react-scan-expanded {\\n    transition-duration: 100ms;\\n  }\\n}\\n\\n.react-scan-nested {\\n  position: relative;\\n  overflow: hidden;\\n\\n  &:before {\\n    content: \\'\\';\\n  }\\n\\n  &:before {\\n    position: absolute;\\n  }\\n\\n  &:before {\\n    top: 0px;\\n  }\\n\\n  &:before {\\n    left: 0px;\\n  }\\n\\n  &:before {\\n    height: 100%;\\n  }\\n\\n  &:before {\\n    width: 1px;\\n  }\\n\\n  &:before {\\n    background-color: rgb(107 114 128 / 0.3);\\n  }\\n}\\n\\n.react-scan-settings {\\n  position: absolute;\\n  inset: 0px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n  padding-top: 8px;\\n  padding-bottom: 8px;\\n  padding-left: 16px;\\n  padding-right: 16px;\\n  --tw-text-opacity: 1;\\n  color: rgb(136 136 136 / var(--tw-text-opacity, 1));\\n\\n  >div {\\n    display: flex;\\n  }\\n\\n  >div {\\n    align-items: center;\\n  }\\n\\n  >div {\\n    justify-content: space-between;\\n  }\\n\\n  >div {\\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  >div {\\n    transition-duration: 300ms;\\n  }\\n}\\n\\n.react-scan-preview-line {\\n  position: relative;\\n  display: flex;\\n  min-height: 24px;\\n  align-items: center;\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n}\\n\\n.react-scan-flash-overlay {\\n  position: absolute;\\n  inset: 0px;\\n  opacity: 0;\\n  z-index: 50;\\n  pointer-events: none;\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n  mix-blend-mode: multiply;\\n  background-color: rgb(168 85 247 / 0.9);\\n}\\n\\n.react-scan-toggle {\\n  position: relative;\\n  display: inline-block;\\n  height: 24px;\\n  width: 40px;\\n\\n  input {\\n    position: absolute;\\n  }\\n\\n  input {\\n    inset: 0px;\\n  }\\n\\n  input {\\n    z-index: 20;\\n  }\\n\\n  input {\\n    opacity: 0;\\n  }\\n\\n  input {\\n    cursor: pointer;\\n  }\\n\\n  input:checked {\\n    +div {\\n      --tw-bg-opacity: 1;\\n      background-color: rgb(95 63 154 / var(--tw-bg-opacity, 1));\\n    }\\n    +div {\\n\\n      &::before {\\n        --tw-translate-x: 100%;\\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n      }\\n\\n      &::before {\\n        left: auto;\\n      }\\n\\n      &::before {\\n        --tw-border-opacity: 1;\\n        border-color: rgb(95 63 154 / var(--tw-border-opacity, 1));\\n      }\\n    }\\n  }\\n\\n  >div {\\n    position: absolute;\\n  }\\n\\n  >div {\\n    inset: 4px;\\n  }\\n\\n  >div {\\n    --tw-bg-opacity: 1;\\n    background-color: rgb(64 64 64 / var(--tw-bg-opacity, 1));\\n  }\\n\\n  >div {\\n    border-radius: 9999px;\\n  }\\n\\n  >div {\\n    pointer-events: none;\\n  }\\n\\n  >div {\\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  >div {\\n    transition-duration: 300ms;\\n  }\\n\\n  >div {\\n\\n    &:before {\\n      --tw-content: \\'\\';\\n      content: var(--tw-content);\\n    }\\n\\n    &:before {\\n      position: absolute;\\n    }\\n\\n    &:before {\\n      top: 50%;\\n    }\\n\\n    &:before {\\n      left: 0px;\\n    }\\n\\n    &:before {\\n      --tw-translate-y: -50%;\\n      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n    }\\n\\n    &:before {\\n      height: 16px;\\n    }\\n\\n    &:before {\\n      width: 16px;\\n    }\\n\\n    &:before {\\n      --tw-bg-opacity: 1;\\n      background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\\n    }\\n\\n    &:before {\\n      border-width: 2px;\\n    }\\n\\n    &:before {\\n      --tw-border-opacity: 1;\\n      border-color: rgb(64 64 64 / var(--tw-border-opacity, 1));\\n    }\\n\\n    &:before {\\n      border-radius: 9999px;\\n    }\\n\\n    &:before {\\n      --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\\n      --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\\n      box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n    }\\n\\n    &:before {\\n      transition-property: all;\\n      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n      transition-duration: 150ms;\\n    }\\n\\n    &:before {\\n      transition-duration: 300ms;\\n    }\\n  }\\n}\\n\\n.react-scan-flash-active {\\n  opacity: 0.4;\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 300ms;\\n}\\n\\n.react-scan-inspector-overlay {\\n  display: flex;\\n  flex-direction: column;\\n  opacity: 0;\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 300ms;\\n\\n  &.fade-out {\\n    opacity: 0;\\n  }\\n\\n  &.fade-in {\\n    opacity: 1;\\n  }\\n}\\n\\n.react-scan-what-changed {\\n  ul {\\n    list-style-type: disc;\\n  }\\n  ul {\\n    padding-left: 16px;\\n  }\\n\\n  li {\\n    white-space: nowrap;\\n  }\\n\\n  li {\\n    > div {\\n      display: flex;\\n    }\\n    > div {\\n      align-items: center;\\n    }\\n    > div {\\n      justify-content: space-between;\\n    }\\n    > div {\\n      -moz-column-gap: 8px;\\n           column-gap: 8px;\\n    }\\n  }\\n}\\n\\n.count-badge {\\n  display: flex;\\n  align-items: center;\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n  padding-left: 6px;\\n  padding-right: 6px;\\n  padding-top: 2px;\\n  padding-bottom: 2px;\\n  border-radius: 4px;\\n  font-size: 12px;\\n  line-height: 16px;\\n  font-weight: 500;\\n  --tw-numeric-spacing: tabular-nums;\\n  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);\\n  --tw-text-opacity: 1;\\n  color: rgb(168 85 247 / var(--tw-text-opacity, 1));\\n  background-color: rgb(168 85 247 / 0.1);\\n  transform-origin: center;\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-delay: 150ms;\\n  transition-duration: 300ms;\\n}\\n\\n@keyframes countFlash {\\n\\n  0% {\\n    background-color: rgba(168, 85, 247, 0.3);\\n    transform: scale(1.05);\\n  }\\n\\n  100% {\\n    background-color: rgba(168, 85, 247, 0.1);\\n    transform: scale(1);\\n  }\\n}\\n\\n.count-flash {\\n  animation: countFlash .3s ease-out forwards;\\n}\\n\\n@keyframes countFlashShake {\\n\\n  0% {\\n    transform: translateX(0);\\n  }\\n\\n  25% {\\n    transform: translateX(-5px);\\n  }\\n\\n  50% {\\n    transform: translateX(5px) scale(1.1);\\n  }\\n\\n  75% {\\n    transform: translateX(-5px);\\n  }\\n\\n  100% {\\n    transform: translateX(0);\\n  }\\n}\\n\\n.count-flash-white {\\n  animation: countFlashShake .3s ease-out forwards;\\n  transition-delay: 500ms !important;\\n}\\n\\n.change-scope {\\n  display: flex;\\n  align-items: center;\\n  -moz-column-gap: 4px;\\n       column-gap: 4px;\\n  --tw-text-opacity: 1;\\n  color: rgb(102 102 102 / var(--tw-text-opacity, 1));\\n  font-size: 12px;\\n  line-height: 16px;\\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;\\n\\n  > div {\\n    padding-left: 6px;\\n    padding-right: 6px;\\n  }\\n\\n  > div {\\n    padding-top: 2px;\\n    padding-bottom: 2px;\\n  }\\n\\n  > div {\\n    transform-origin: center;\\n  }\\n\\n  > div {\\n    border-radius: 4px;\\n  }\\n\\n  > div {\\n    font-size: 12px;\\n    line-height: 16px;\\n  }\\n\\n  > div {\\n    font-weight: 500;\\n  }\\n\\n  > div {\\n    --tw-numeric-spacing: tabular-nums;\\n    font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);\\n  }\\n\\n  > div {\\n    transform-origin: center;\\n  }\\n\\n  > div {\\n    transition-property: all;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  > div {\\n    transition-delay: 150ms;\\n  }\\n\\n  > div {\\n    transition-duration: 300ms;\\n  }\\n\\n  > div {\\n\\n    &[data-flash=\"true\"] {\\n      background-color: rgb(168 85 247 / 0.1);\\n    }\\n\\n    &[data-flash=\"true\"] {\\n      --tw-text-opacity: 1;\\n      color: rgb(168 85 247 / var(--tw-text-opacity, 1));\\n    }\\n  }\\n}\\n\\n.react-scan-slider {\\n  position: relative;\\n  min-height: 24px;\\n\\n  > input {\\n    position: absolute;\\n  }\\n\\n  > input {\\n    inset: 0px;\\n  }\\n\\n  > input {\\n    opacity: 0;\\n  }\\n\\n  &:before {\\n    --tw-content: \\'\\';\\n    content: var(--tw-content);\\n  }\\n\\n  &:before {\\n    position: absolute;\\n  }\\n\\n  &:before {\\n    left: 0px;\\n    right: 0px;\\n  }\\n\\n  &:before {\\n    top: 50%;\\n  }\\n\\n  &:before {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  &:before {\\n    height: 6px;\\n  }\\n\\n  &:before {\\n    background-color: rgb(142 97 227 / 0.4);\\n  }\\n\\n  &:before {\\n    border-radius: 8px;\\n  }\\n\\n  &:before {\\n    pointer-events: none;\\n  }\\n\\n  &:after {\\n    --tw-content: \\'\\';\\n    content: var(--tw-content);\\n  }\\n\\n  &:after {\\n    position: absolute;\\n  }\\n\\n  &:after {\\n    left: 0px;\\n    right: 0px;\\n  }\\n\\n  &:after {\\n    top: -8px;\\n    bottom: -8px;\\n  }\\n\\n  &:after {\\n    z-index: -10;\\n  }\\n\\n  span {\\n    position: absolute;\\n  }\\n\\n  span {\\n    left: 0px;\\n  }\\n\\n  span {\\n    top: 50%;\\n  }\\n\\n  span {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  span {\\n    height: 10px;\\n  }\\n\\n  span {\\n    width: 10px;\\n  }\\n\\n  span {\\n    border-radius: 8px;\\n  }\\n\\n  span {\\n    --tw-bg-opacity: 1;\\n    background-color: rgb(142 97 227 / var(--tw-bg-opacity, 1));\\n  }\\n\\n  span {\\n    pointer-events: none;\\n  }\\n\\n  span {\\n    transition-property: transform;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  span {\\n    transition-duration: 75ms;\\n  }\\n}\\n\\n.resize-v-line {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  min-width: 20px;\\n  max-width: 20px;\\n  height: 100%;\\n  width: 100%;\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n  cursor: col-resize;\\n\\n  &:hover,\\n  &:active {\\n    > span {\\n      background-color: rgb(255 255 255 / 0.1);\\n    }\\n\\n    svg {\\n      opacity: 1;\\n    }\\n  }\\n\\n  &::before {\\n    --tw-content: \"\";\\n    content: var(--tw-content);\\n  }\\n\\n  &::before {\\n    position: absolute;\\n  }\\n\\n  &::before {\\n    inset: 0px;\\n  }\\n\\n  &::before {\\n    left: 50%;\\n  }\\n\\n  &::before {\\n    --tw-translate-x: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  &::before {\\n    width: 1px;\\n  }\\n\\n  &::before {\\n    background-color: rgb(255 255 255 / 0.1);\\n  }\\n\\n  &::before {\\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  > span {\\n    position: absolute;\\n  }\\n\\n  > span {\\n    left: 50%;\\n  }\\n\\n  > span {\\n    top: 50%;\\n  }\\n\\n  > span {\\n    --tw-translate-x: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  > span {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  > span {\\n    height: 18px;\\n  }\\n\\n  > span {\\n    width: 6px;\\n  }\\n\\n  > span {\\n    border-radius: 4px;\\n  }\\n\\n  > span {\\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  svg {\\n    position: absolute;\\n  }\\n\\n  svg {\\n    left: 50%;\\n  }\\n\\n  svg {\\n    top: 50%;\\n  }\\n\\n  svg {\\n    --tw-translate-x: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  svg {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  svg {\\n    --tw-rotate: 90deg;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  svg {\\n    --tw-text-opacity: 1;\\n    color: rgb(163 163 163 / var(--tw-text-opacity, 1));\\n  }\\n\\n  svg {\\n    opacity: 0;\\n  }\\n\\n  svg {\\n    transition-property: opacity;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  svg {\\n    z-index: 50;\\n  }\\n}\\n\\n\\n.tree-node-search-highlight {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n\\n  span {\\n    padding-top: 1px;\\n    padding-bottom: 1px;\\n  }\\n\\n  span {\\n    border-radius: 2px;\\n  }\\n\\n  span {\\n    --tw-bg-opacity: 1;\\n    background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\\n  }\\n\\n  span {\\n    font-weight: 500;\\n  }\\n\\n  span {\\n    --tw-text-opacity: 1;\\n    color: rgb(0 0 0 / var(--tw-text-opacity, 1));\\n  }\\n\\n  .single {\\n    margin-right: 1px;\\n  }\\n\\n  .single {\\n    padding-left: 2px;\\n    padding-right: 2px;\\n  }\\n\\n  .regex {\\n    padding-left: 2px;\\n    padding-right: 2px;\\n  }\\n\\n  .start {\\n    margin-left: 1px;\\n  }\\n\\n  .start {\\n    border-top-left-radius: 2px;\\n    border-bottom-left-radius: 2px;\\n  }\\n\\n  .end {\\n    margin-right: 1px;\\n  }\\n\\n  .end {\\n    border-top-right-radius: 2px;\\n    border-bottom-right-radius: 2px;\\n  }\\n\\n  .middle {\\n    margin-left: 1px;\\n    margin-right: 1px;\\n  }\\n\\n  .middle {\\n    border-radius: 2px;\\n  }\\n}\\n\\n\\n.before\\\\:absolute::before {\\n  content: var(--tw-content);\\n  position: absolute;\\n}\\n\\n\\n.before\\\\:inset-x-0::before {\\n  content: var(--tw-content);\\n  left: 0px;\\n  right: 0px;\\n}\\n\\n\\n.before\\\\:bottom-0::before {\\n  content: var(--tw-content);\\n  bottom: 0px;\\n}\\n\\n\\n.before\\\\:h-\\\\[1px\\\\]::before {\\n  content: var(--tw-content);\\n  height: 1px;\\n}\\n\\n\\n.before\\\\:bg-\\\\[\\\\#333\\\\]::before {\\n  content: var(--tw-content);\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(51 51 51 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.before\\\\:content-\\\\[\\\\\"\\\\\"\\\\]::before {\\n  --tw-content: \"\";\\n  content: var(--tw-content);\\n}\\n\\n\\n.after\\\\:absolute::after {\\n  content: var(--tw-content);\\n  position: absolute;\\n}\\n\\n\\n.after\\\\:inset-0::after {\\n  content: var(--tw-content);\\n  inset: 0px;\\n}\\n\\n\\n.after\\\\:left-1\\\\/2::after {\\n  content: var(--tw-content);\\n  left: 50%;\\n}\\n\\n\\n.after\\\\:top-\\\\[100\\\\%\\\\]::after {\\n  content: var(--tw-content);\\n  top: 100%;\\n}\\n\\n\\n.after\\\\:h-\\\\[6px\\\\]::after {\\n  content: var(--tw-content);\\n  height: 6px;\\n}\\n\\n\\n.after\\\\:w-\\\\[10px\\\\]::after {\\n  content: var(--tw-content);\\n  width: 10px;\\n}\\n\\n\\n.after\\\\:-translate-x-1\\\\/2::after {\\n  content: var(--tw-content);\\n  --tw-translate-x: -50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n\\n\\n@keyframes fadeOut {\\n\\n  0% {\\n    content: var(--tw-content);\\n    opacity: 1;\\n  }\\n\\n  100% {\\n    content: var(--tw-content);\\n    opacity: 0;\\n  }\\n}\\n\\n\\n.after\\\\:animate-\\\\[fadeOut_1s_ease-out_forwards\\\\]::after {\\n  content: var(--tw-content);\\n  animation: fadeOut 1s ease-out forwards;\\n}\\n\\n\\n.after\\\\:border-l-\\\\[5px\\\\]::after {\\n  content: var(--tw-content);\\n  border-left-width: 5px;\\n}\\n\\n\\n.after\\\\:border-r-\\\\[5px\\\\]::after {\\n  content: var(--tw-content);\\n  border-right-width: 5px;\\n}\\n\\n\\n.after\\\\:border-t-\\\\[6px\\\\]::after {\\n  content: var(--tw-content);\\n  border-top-width: 6px;\\n}\\n\\n\\n.after\\\\:border-l-transparent::after {\\n  content: var(--tw-content);\\n  border-left-color: transparent;\\n}\\n\\n\\n.after\\\\:border-r-transparent::after {\\n  content: var(--tw-content);\\n  border-right-color: transparent;\\n}\\n\\n\\n.after\\\\:border-t-white::after {\\n  content: var(--tw-content);\\n  --tw-border-opacity: 1;\\n  border-top-color: rgb(255 255 255 / var(--tw-border-opacity, 1));\\n}\\n\\n\\n.after\\\\:bg-purple-500\\\\/30::after {\\n  content: var(--tw-content);\\n  background-color: rgb(168 85 247 / 0.3);\\n}\\n\\n\\n.after\\\\:content-\\\\[\\\\\"\\\\\"\\\\]::after {\\n  --tw-content: \"\";\\n  content: var(--tw-content);\\n}\\n\\n\\n.focus-within\\\\:border-\\\\[\\\\#454545\\\\]:focus-within {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(69 69 69 / var(--tw-border-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#0f0f0f\\\\]:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(15 15 15 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#18181B\\\\]:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(24 24 27 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#34343b\\\\]:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(52 52 59 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#5f3f9a\\\\]\\\\/20:hover {\\n  background-color: rgb(95 63 154 / 0.2);\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#5f3f9a\\\\]\\\\/40:hover {\\n  background-color: rgb(95 63 154 / 0.4);\\n}\\n\\n\\n.hover\\\\:bg-red-600:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(220 38 38 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-red-900\\\\/70:hover {\\n  background-color: rgb(127 29 29 / 0.7);\\n}\\n\\n\\n.hover\\\\:bg-white\\\\/5:hover {\\n  background-color: rgb(255 255 255 / 0.05);\\n}\\n\\n\\n.hover\\\\:bg-zinc-700:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(63 63 70 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-zinc-800\\\\/50:hover {\\n  background-color: rgb(39 39 42 / 0.5);\\n}\\n\\n\\n.hover\\\\:text-gray-300:hover {\\n  --tw-text-opacity: 1;\\n  color: rgb(209 213 219 / var(--tw-text-opacity, 1));\\n}\\n\\n\\n.hover\\\\:text-neutral-300:hover {\\n  --tw-text-opacity: 1;\\n  color: rgb(212 212 212 / var(--tw-text-opacity, 1));\\n}\\n\\n\\n.hover\\\\:text-white:hover {\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n}\\n\\n\\n.focus\\\\:ring-\\\\[\\\\#A284F5\\\\]:focus {\\n  --tw-ring-opacity: 1;\\n  --tw-ring-color: rgb(162 132 245 / var(--tw-ring-opacity, 1));\\n}\\n\\n\\n.focus\\\\:ring-offset-0:focus {\\n  --tw-ring-offset-width: 0px;\\n}\\n\\n\\n.group:hover .group-hover\\\\:bg-\\\\[\\\\#21437982\\\\] {\\n  background-color: #21437982;\\n}\\n\\n\\n.group:hover .group-hover\\\\:bg-\\\\[\\\\#272727\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(39 39 39 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.group:hover .group-hover\\\\:bg-\\\\[\\\\#5b2d89\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(91 45 137 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.group:hover .group-hover\\\\:bg-\\\\[\\\\#efda1a2f\\\\] {\\n  background-color: #efda1a2f;\\n}\\n\\n\\n.group:hover .group-hover\\\\:opacity-100 {\\n  opacity: 1;\\n}\\n\\n\\n.peer\\\\/bottom:hover ~ .peer-hover\\\\/bottom\\\\:rounded-b-none {\\n  border-bottom-right-radius: 0px;\\n  border-bottom-left-radius: 0px;\\n}\\n\\n\\n.peer\\\\/left:hover ~ .peer-hover\\\\/left\\\\:rounded-l-none {\\n  border-top-left-radius: 0px;\\n  border-bottom-left-radius: 0px;\\n}\\n\\n\\n.peer\\\\/right:hover ~ .peer-hover\\\\/right\\\\:rounded-r-none {\\n  border-top-right-radius: 0px;\\n  border-bottom-right-radius: 0px;\\n}\\n\\n\\n.peer\\\\/top:hover ~ .peer-hover\\\\/top\\\\:rounded-t-none {\\n  border-top-left-radius: 0px;\\n  border-top-right-radius: 0px;\\n}\\n';\n// src/web/assets/svgs/svgs.ts\nvar ICONS = '\\n<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\\n  <symbol id=\"icon-inspect\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z\"/>\\n    <path d=\"M5 3a2 2 0 0 0-2 2\"/>\\n    <path d=\"M19 3a2 2 0 0 1 2 2\"/>\\n    <path d=\"M5 21a2 2 0 0 1-2-2\"/>\\n    <path d=\"M9 3h1\"/>\\n    <path d=\"M9 21h2\"/>\\n    <path d=\"M14 3h1\"/>\\n    <path d=\"M3 9v1\"/>\\n    <path d=\"M21 9v2\"/>\\n    <path d=\"M3 14v1\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-focus\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z\"/>\\n    <path d=\"M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-next\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"M6 9h6V5l7 7-7 7v-4H6V9z\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-previous\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"M18 15h-6v4l-7-7 7-7v4h6v6z\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-close\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\\n    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-replay\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"M3 7V5a2 2 0 0 1 2-2h2\"/>\\n    <path d=\"M17 3h2a2 2 0 0 1 2 2v2\"/>\\n    <path d=\"M21 17v2a2 2 0 0 1-2 2h-2\"/>\\n    <path d=\"M7 21H5a2 2 0 0 1-2-2v-2\"/>\\n    <circle cx=\"12\" cy=\"12\" r=\"1\"/>\\n    <path d=\"M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-ellipsis\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <circle cx=\"12\" cy=\"12\" r=\"1\"/>\\n    <circle cx=\"19\" cy=\"12\" r=\"1\"/>\\n    <circle cx=\"5\" cy=\"12\" r=\"1\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-copy\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\"/>\\n    <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-check\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"M20 6 9 17l-5-5\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-chevron-right\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"m9 18 6-6-6-6\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-settings\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\"/><circle cx=\"12\" cy=\"12\" r=\"3\" />\\n  </symbol>\\n\\n  <symbol id=\"icon-flame\" viewBox=\"0 0 24 24\">\\n    <path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-function\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\"/>\\n    <path d=\"M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3\"/>\\n    <path d=\"M9 11.2h5.7\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-triangle-alert\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3\"/>\\n    <path d=\"M12 9v4\"/>\\n    <path d=\"M12 17h.01\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-gallery-horizontal-end\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <path d=\"M2 7v10\"/><path d=\"M6 5v14\"/>\\n    <rect width=\"12\" height=\"18\" x=\"10\" y=\"3\" rx=\"2\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-search\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <circle cx=\"11\" cy=\"11\" r=\"8\"/>\\n    <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-lock\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <rect width=\"18\" height=\"11\" x=\"3\" y=\"11\" rx=\"2\" ry=\"2\"/>\\n    <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"/>\\n  </symbol>\\n\\n  <symbol id=\"icon-lock-open\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\\n    <rect width=\"18\" height=\"11\" x=\"3\" y=\"11\" rx=\"2\" ry=\"2\"/>\\n    <path d=\"M7 11V7a5 5 0 0 1 9.9-1\"/>\\n  </symbol>\\n\\n\\n</svg>\\n';\n// src/web/toolbar.tsx\n\n\nvar scriptLevelToolbar = null;\nvar ToolbarErrorBoundary = class extends preact__WEBPACK_IMPORTED_MODULE_2__.Component {\n    static getDerivedStateFromError(error) {\n        console.error(error);\n        return {\n            hasError: true,\n            error\n        };\n    }\n    render() {\n        if (this.state.hasError) {\n            var _this_state_error;\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"fixed bottom-4 right-4 z-[124124124124]\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"p-3 bg-black rounded-lg shadow-lg w-80\",\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"flex items-center gap-2 mb-2 text-red-400 text-sm font-medium\",\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                    name: \"icon-flame\",\n                                    className: \"text-red-500\",\n                                    size: 14\n                                }),\n                                \"React Scan ran into a problem\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: \"p-2 bg-black rounded font-mono text-xs text-red-300 mb-3 break-words\",\n                            children: ((_this_state_error = this.state.error) === null || _this_state_error === void 0 ? void 0 : _this_state_error.message) || JSON.stringify(this.state.error)\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                            type: \"button\",\n                            onClick: this.handleReset,\n                            className: \"px-3 py-1.5 bg-red-500 hover:bg-red-600 text-white rounded text-xs font-medium transition-colors flex items-center justify-center gap-1.5\",\n                            children: \"Restart\"\n                        })\n                    ]\n                })\n            });\n        }\n        return this.props.children;\n    }\n    constructor(){\n        super(...arguments);\n        this.state = {\n            hasError: false,\n            error: null\n        };\n        this.handleReset = ()=>{\n            this.setState({\n                hasError: false,\n                error: null\n            });\n        };\n    }\n};\nvar createToolbar = (root)=>{\n    const container = document.createElement(\"div\");\n    container.id = \"react-scan-toolbar-root\";\n    window.__REACT_SCAN_TOOLBAR_CONTAINER__ = container;\n    scriptLevelToolbar = container;\n    root.appendChild(container);\n    (0,preact__WEBPACK_IMPORTED_MODULE_2__.render)(/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ToolbarErrorBoundary, {\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Widget, {})\n    }), container);\n    const originalRemove = container.remove.bind(container);\n    container.remove = ()=>{\n        if (container.hasChildNodes()) {\n            scriptLevelToolbar = null;\n            (0,preact__WEBPACK_IMPORTED_MODULE_2__.render)(null, container);\n            (0,preact__WEBPACK_IMPORTED_MODULE_2__.render)(null, container);\n        }\n        originalRemove();\n    };\n    return container;\n};\n// src/core/index.ts\nvar rootContainer = null;\nvar shadowRoot = null;\nvar initRootContainer = ()=>{\n    if (rootContainer && shadowRoot) {\n        return {\n            rootContainer,\n            shadowRoot\n        };\n    }\n    rootContainer = document.createElement(\"div\");\n    rootContainer.id = \"react-scan-root\";\n    shadowRoot = rootContainer.attachShadow({\n        mode: \"open\"\n    });\n    const fragment = document.createDocumentFragment();\n    const cssStyles = document.createElement(\"style\");\n    cssStyles.textContent = styles_default;\n    const iconSprite = new DOMParser().parseFromString(ICONS, \"image/svg+xml\").documentElement;\n    shadowRoot.appendChild(iconSprite);\n    const root = document.createElement(\"div\");\n    root.id = \"react-scan-toolbar-root\";\n    root.className = \"absolute z-2147483647\";\n    fragment.appendChild(cssStyles);\n    fragment.appendChild(root);\n    shadowRoot.appendChild(fragment);\n    document.documentElement.appendChild(rootContainer);\n    return {\n        rootContainer,\n        shadowRoot\n    };\n};\nvar Store = {\n    wasDetailsOpen: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(true),\n    isInIframe: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(typeof window !== \"undefined\" && window.self !== window.top),\n    inspectState: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)({\n        kind: \"uninitialized\"\n    }),\n    monitor: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(null),\n    fiberRoots: /* @__PURE__ */ new Set(),\n    reportData: /* @__PURE__ */ new Map(),\n    legacyReportData: /* @__PURE__ */ new Map(),\n    lastReportTime: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(0),\n    changesListeners: /* @__PURE__ */ new Map()\n};\nvar ReactScanInternals = {\n    instrumentation: null,\n    componentAllowList: null,\n    options: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)({\n        enabled: true,\n        includeChildren: true,\n        playSound: false,\n        log: false,\n        showToolbar: true,\n        renderCountThreshold: 0,\n        report: void 0,\n        alwaysShowLabels: false,\n        animationSpeed: \"fast\",\n        dangerouslyForceRunInProduction: false,\n        smoothlyAnimateOutlines: true,\n        trackUnnecessaryRenders: false,\n        showFPS: true\n    }),\n    onRender: null,\n    scheduledOutlines: /* @__PURE__ */ new Map(),\n    activeOutlines: /* @__PURE__ */ new Map(),\n    Store\n};\nfunction isOptionKey(key) {\n    return key in ReactScanInternals.options.value;\n}\nvar validateOptions = (options)=>{\n    const errors = [];\n    const validOptions = {};\n    for(const key in options){\n        if (!isOptionKey(key)) continue;\n        const value = options[key];\n        switch(key){\n            case \"enabled\":\n            // case 'includeChildren':\n            case \"log\":\n            case \"showToolbar\":\n            // case 'report':\n            // case 'alwaysShowLabels':\n            case \"dangerouslyForceRunInProduction\":\n                if (typeof value !== \"boolean\") {\n                    errors.push(\"- \".concat(key, ' must be a boolean. Got \"').concat(value, '\"'));\n                } else {\n                    validOptions[key] = value;\n                }\n                break;\n            // case 'renderCountThreshold':\n            // case 'resetCountTimeout':\n            //   if (typeof value !== 'number' || value < 0) {\n            //     errors.push(`- ${key} must be a non-negative number. Got \"${value}\"`);\n            //   } else {\n            //     validOptions[key] = value as number;\n            //   }\n            //   break;\n            case \"animationSpeed\":\n                if (![\n                    \"slow\",\n                    \"fast\",\n                    \"off\"\n                ].includes(value)) {\n                    errors.push('- Invalid animation speed \"'.concat(value, '\". Using default \"fast\"'));\n                } else {\n                    validOptions[key] = value;\n                }\n                break;\n            case \"onCommitStart\":\n                if (typeof value !== \"function\") {\n                    errors.push(\"- \".concat(key, ' must be a function. Got \"').concat(value, '\"'));\n                } else {\n                    validOptions.onCommitStart = value;\n                }\n                break;\n            case \"onCommitFinish\":\n                if (typeof value !== \"function\") {\n                    errors.push(\"- \".concat(key, ' must be a function. Got \"').concat(value, '\"'));\n                } else {\n                    validOptions.onCommitFinish = value;\n                }\n                break;\n            case \"onRender\":\n                if (typeof value !== \"function\") {\n                    errors.push(\"- \".concat(key, ' must be a function. Got \"').concat(value, '\"'));\n                } else {\n                    validOptions.onRender = value;\n                }\n                break;\n            case \"onPaintStart\":\n            case \"onPaintFinish\":\n                if (typeof value !== \"function\") {\n                    errors.push(\"- \".concat(key, ' must be a function. Got \"').concat(value, '\"'));\n                } else {\n                    validOptions[key] = value;\n                }\n                break;\n            // case 'trackUnnecessaryRenders': {\n            //   validOptions.trackUnnecessaryRenders =\n            //     typeof value === 'boolean' ? value : false;\n            //   break;\n            // }\n            // case 'smoothlyAnimateOutlines': {\n            //   validOptions.smoothlyAnimateOutlines =\n            //     typeof value === 'boolean' ? value : false;\n            //   break;\n            // }\n            default:\n                errors.push('- Unknown option \"'.concat(key, '\"'));\n        }\n    }\n    if (errors.length > 0) {\n        console.warn(\"[React Scan] Invalid options:\\n\".concat(errors.join(\"\\n\")));\n    }\n    return validOptions;\n};\nvar getReport = (type)=>{\n    if (type) {\n        for (const reportData of Array.from(Store.legacyReportData.values())){\n            if (reportData.type === type) {\n                return reportData;\n            }\n        }\n        return null;\n    }\n    return Store.legacyReportData;\n};\nvar setOptions = (userOptions)=>{\n    const validOptions = validateOptions(userOptions);\n    if (Object.keys(validOptions).length === 0) {\n        return;\n    }\n    const newOptions = {\n        ...ReactScanInternals.options.value,\n        ...validOptions\n    };\n    const { instrumentation } = ReactScanInternals;\n    if (instrumentation && \"enabled\" in validOptions) {\n        instrumentation.isPaused.value = validOptions.enabled === false;\n    }\n    ReactScanInternals.options.value = newOptions;\n    const existingLocalStorageOptions = readLocalStorage(\"react-scan-options\");\n    var _existingLocalStorageOptions_enabled, _ref;\n    saveLocalStorage(\"react-scan-options\", {\n        ...newOptions,\n        enabled: newOptions.showToolbar ? (_ref = (_existingLocalStorageOptions_enabled = existingLocalStorageOptions === null || existingLocalStorageOptions === void 0 ? void 0 : existingLocalStorageOptions.enabled) !== null && _existingLocalStorageOptions_enabled !== void 0 ? _existingLocalStorageOptions_enabled : newOptions.enabled) !== null && _ref !== void 0 ? _ref : true : newOptions.enabled\n    });\n    return newOptions;\n};\nvar getOptions = ()=>ReactScanInternals.options;\nvar isProduction = null;\nvar rdtHook;\nvar getIsProduction = ()=>{\n    if (isProduction !== null) {\n        return isProduction;\n    }\n    rdtHook !== null && rdtHook !== void 0 ? rdtHook : rdtHook = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getRDTHook)();\n    for (const renderer of rdtHook.renderers.values()){\n        const buildType = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.detectReactBuildType)(renderer);\n        if (buildType === \"production\") {\n            isProduction = true;\n        }\n    }\n    return isProduction;\n};\nvar start = ()=>{\n    try {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n        Store.monitor.value = {\n            pendingRequests: 0,\n            interactions: [],\n            session: new Promise((res)=>res(null)),\n            url: null,\n            route: null,\n            apiKey: null,\n            commit: null,\n            branch: null,\n            interactionListeningForRenders: null\n        };\n        const localStorageOptions = readLocalStorage(\"react-scan-options\");\n        if (localStorageOptions) {\n            const { enabled } = localStorageOptions;\n            const validLocalOptions = validateOptions({\n                enabled\n            });\n            if (Object.keys(validLocalOptions).length > 0) {\n                ReactScanInternals.options.value = {\n                    ...ReactScanInternals.options.value,\n                    ...validLocalOptions\n                };\n            }\n        }\n        const options = getOptions();\n        initReactScanInstrumentation({\n            onActive: ()=>{\n                const rdtHook2 = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getRDTHook)();\n                if (hasStopped()) return;\n                for (const renderer of rdtHook2.renderers.values()){\n                    const buildType = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.detectReactBuildType)(renderer);\n                    if (buildType === \"production\") {\n                        isProduction = true;\n                    }\n                }\n                if (isProduction && !ReactScanInternals.options.value.dangerouslyForceRunInProduction) {\n                    setOptions({\n                        enabled: false,\n                        showToolbar: false\n                    });\n                    console.warn(\"[React Scan] Running in production mode is not recommended.\\nIf you really need this, set dangerouslyForceRunInProduction: true in options.\");\n                    return;\n                }\n                startTimingTracking();\n                idempotent_createToolbar(!!options.value.showToolbar);\n                const host = getCanvasEl();\n                if (host) {\n                    document.documentElement.appendChild(host);\n                }\n                globalThis.__REACT_SCAN__ = {\n                    ReactScanInternals\n                };\n                startReportInterval();\n                logIntro();\n            }\n        });\n        const isUsedInBrowserExtension = typeof window !== \"undefined\";\n        if (!Store.monitor.value && !isUsedInBrowserExtension) {\n            setTimeout(()=>{\n                if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isInstrumentationActive)()) return;\n                console.error(\"[React Scan] Failed to load. Must import React Scan before React runs.\");\n            }, 5e3);\n        }\n    } catch (e) {}\n};\nvar idempotent_createToolbar = (showToolbar)=>{\n    const windowToolbarContainer = window.__REACT_SCAN_TOOLBAR_CONTAINER__;\n    if (!showToolbar) {\n        windowToolbarContainer === null || windowToolbarContainer === void 0 ? void 0 : windowToolbarContainer.remove();\n        return;\n    }\n    if (!scriptLevelToolbar && windowToolbarContainer) {\n        windowToolbarContainer.remove();\n        const { shadowRoot: shadowRoot3 } = initRootContainer();\n        createToolbar(shadowRoot3);\n        return;\n    }\n    if (scriptLevelToolbar && windowToolbarContainer) {\n        return;\n    }\n    const { shadowRoot: shadowRoot2 } = initRootContainer();\n    createToolbar(shadowRoot2);\n    try {\n        const highlightRoot = document.documentElement;\n        createHighlightCanvas(highlightRoot);\n    } catch (e) {}\n};\nvar scan = function() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    setOptions(options);\n    const isInIframe = Store.isInIframe.value;\n    if (isInIframe) {\n        return;\n    }\n    if (options.enabled === false && options.showToolbar !== true) {\n        return;\n    }\n    start();\n};\nvar useScan = function() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    setOptions(options);\n    start();\n};\nvar onRender = (type, _onRender)=>{\n    const prevOnRender = ReactScanInternals.onRender;\n    ReactScanInternals.onRender = (fiber, renders)=>{\n        prevOnRender === null || prevOnRender === void 0 ? void 0 : prevOnRender(fiber, renders);\n        if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.getType)(fiber.type) === type) {\n            _onRender(fiber, renders);\n        }\n    };\n};\nvar ignoredProps = /* @__PURE__ */ new WeakSet();\nvar ignoreScan = (node)=>{\n    if (node && typeof node === \"object\") {\n        ignoredProps.add(node);\n    }\n};\n// src/index.ts\ninit();\n\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72;\n$RefreshReg$(_c, \"ScanOverlay\");\n$RefreshReg$(_c1, \"ChevronRight\");\n$RefreshReg$(_c2, \"Notification\");\n$RefreshReg$(_c3, \"CloseIcon\");\n$RefreshReg$(_c4, \"VolumeOnIcon\");\n$RefreshReg$(_c5, \"VolumeOffIcon\");\n$RefreshReg$(_c6, \"ArrowLeft\");\n$RefreshReg$(_c7, \"PointerIcon\");\n$RefreshReg$(_c8, \"KeyboardIcon\");\n$RefreshReg$(_c9, \"ClearIcon\");\n$RefreshReg$(_c10, \"TrendingDownIcon\");\n$RefreshReg$(_c11, \"Popover\");\n$RefreshReg$(_c12, \"NotificationTabs\");\n$RefreshReg$(_c13, \"Optimize\");\n$RefreshReg$(_c14, \"OtherVisualization\");\n$RefreshReg$(_c15, \"CopyPromptButton\");\n$RefreshReg$(_c16, \"Explanation\");\n$RefreshReg$(_c17, \"RenderBarChart\");\n$RefreshReg$(_c18, \"RenderExplanation\");\n$RefreshReg$(_c19, \"DetailsRoutes\");\n$RefreshReg$(_c20, \"TabLayout\");\n$RefreshReg$(_c21, \"NotificationHeader\");\n$RefreshReg$(_c22, \"SlowdownHistoryItem\");\n$RefreshReg$(_c23, \"SlowdownHistory\");\n$RefreshReg$(_c24, \"IndentedContent\");\n$RefreshReg$(_c25, \"CollapsedKeyboard\");\n$RefreshReg$(_c26, \"CollapsedItem\");\n$RefreshReg$(_c27, \"NotificationAudio\");\n$RefreshReg$(_c28, \"NotificationWrapper$forwardRef\");\n$RefreshReg$(_c29, \"NotificationWrapper\");\n$RefreshReg$(_c30, \"Notifications$forwardRef\");\n$RefreshReg$(_c31, \"Notifications\");\n$RefreshReg$(_c32, \"MoreInfo\");\n$RefreshReg$(_c33, \"Icon$forwardRef2\");\n$RefreshReg$(_c34, \"Icon\");\n$RefreshReg$(_c35, \"Breadcrumb\");\n$RefreshReg$(_c36, \"TreeNodeItem\");\n$RefreshReg$(_c37, \"ComponentsTree\");\n$RefreshReg$(_c38, \"HeaderInspect\");\n$RefreshReg$(_c39, \"HeaderSettings\");\n$RefreshReg$(_c40, \"Header\");\n$RefreshReg$(_c41, \"ResizeHandle\");\n$RefreshReg$(_c42, \"Toggle\");\n$RefreshReg$(_c43, \"FpsMeter\");\n$RefreshReg$(_c44, \"Toolbar\");\n$RefreshReg$(_c45, \"FPSWrapper\");\n$RefreshReg$(_c46, \"Widget\");\n$RefreshReg$(_c47, \"CONSTANT_UPDATE\");\n$RefreshReg$(_c48, \"StickySection$memo\");\n$RefreshReg$(_c49, \"StickySection\");\n$RefreshReg$(_c50, \"CopyToClipboard$memo2\");\n$RefreshReg$(_c51, \"CopyToClipboard\");\n$RefreshReg$(_c52, \"EditableValue\");\n$RefreshReg$(_c53, \"PropertyElement\");\n$RefreshReg$(_c54, \"PropertySection\");\n$RefreshReg$(_c55, \"DiffValueView\");\n$RefreshReg$(_c56, \"Slider\");\n$RefreshReg$(_c57, \"Timeline$memo3\");\n$RefreshReg$(_c58, \"Timeline\");\n$RefreshReg$(_c59, \"WhatChangedSection$memo4\");\n$RefreshReg$(_c60, \"WhatChangedSection\");\n$RefreshReg$(_c61, \"WhatChanged$memo4\");\n$RefreshReg$(_c62, \"WhatChanged\");\n$RefreshReg$(_c63, \"WhatsChangedHeader$memo4\");\n$RefreshReg$(_c64, \"WhatsChangedHeader\");\n$RefreshReg$(_c65, \"Section$memo4\");\n$RefreshReg$(_c66, \"Section\");\n$RefreshReg$(_c67, \"AccessError\");\n$RefreshReg$(_c68, \"DiffChange\");\n$RefreshReg$(_c69, \"ReferenceOnlyChange\");\n$RefreshReg$(_c70, \"CountBadge\");\n$RefreshReg$(_c71, \"Inspector$constant\");\n$RefreshReg$(_c72, \"Inspector\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-scan/dist/index.mjs\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5Clars_work%5C%5Ceksamen%5C%5Cbiblio-case%5C%5Cbiblio%5C%5Csrc%5C%5CReactScanComponent.tsx%22%2C%22ids%22%3A%5B%22ReactScan%22%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);