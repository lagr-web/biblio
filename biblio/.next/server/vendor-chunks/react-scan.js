"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-scan";
exports.ids = ["vendor-chunks/react-scan"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-scan/dist/index.mjs":
/*!************************************************!*\
  !*** ./node_modules/react-scan/dist/index.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactScanInternals: () => (/* binding */ ReactScanInternals),\n/* harmony export */   Store: () => (/* binding */ Store),\n/* harmony export */   getIsProduction: () => (/* binding */ getIsProduction),\n/* harmony export */   getOptions: () => (/* binding */ getOptions),\n/* harmony export */   getReport: () => (/* binding */ getReport),\n/* harmony export */   ignoreScan: () => (/* binding */ ignoreScan),\n/* harmony export */   ignoredProps: () => (/* binding */ ignoredProps),\n/* harmony export */   onRender: () => (/* binding */ onRender),\n/* harmony export */   scan: () => (/* binding */ scan),\n/* harmony export */   setOptions: () => (/* binding */ setOptions),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   useScan: () => (/* binding */ useScan)\n/* harmony export */ });\n/* harmony import */ var bippy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bippy */ \"(ssr)/./node_modules/bippy/dist/chunk-ZF32UKFC.js\");\n/* harmony import */ var _preact_signals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @preact/signals */ \"(ssr)/./node_modules/@preact/signals/dist/signals.mjs\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! preact */ \"(ssr)/./node_modules/preact/dist/preact.mjs\");\n/* harmony import */ var preact_hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! preact/hooks */ \"(ssr)/./node_modules/preact/hooks/dist/hooks.mjs\");\n/* harmony import */ var preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! preact/jsx-runtime */ \"(ssr)/./node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs\");\n/* harmony import */ var preact_compat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! preact/compat */ \"(ssr)/./node_modules/preact/compat/dist/compat.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ ReactScanInternals,Store,getIsProduction,getOptions,getReport,ignoreScan,ignoredProps,onRender,scan,setOptions,start,useScan auto */ /**\n * Copyright 2024 Aiden Bai, Million Software, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n * and associated documentation files (the “Software”), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or\n * substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ // src/install-hook.ts\n\nvar init = ()=>{\n    (0,bippy__WEBPACK_IMPORTED_MODULE_0__.installRDTHook)();\n};\ninit();\n// src/core/index.ts\n\n\n// src/new-outlines/index.ts\n\n// src/core/instrumentation.ts\n\n\n\n// src/core/utils.ts\n\nfunction descending(a, b) {\n    return b - a;\n}\nfunction getComponentGroupNames(group) {\n    let result = group[0].name;\n    const len = group.length;\n    const max = Math.min(4, len);\n    for(let i = 1; i < max; i++){\n        result += `, ${group[i].name}`;\n    }\n    return result;\n}\nfunction getComponentGroupTotalTime(group) {\n    let result = group[0].time;\n    for(let i = 1, len = group.length; i < len; i++){\n        result += group[i].time;\n    }\n    return result;\n}\nfunction componentGroupHasForget(group) {\n    for(let i = 0, len = group.length; i < len; i++){\n        if (group[i].forget) {\n            return true;\n        }\n    }\n    return false;\n}\nvar getLabelText = (groupedAggregatedRenders)=>{\n    let labelText = \"\";\n    const componentsByCount = /* @__PURE__ */ new Map();\n    for (const aggregatedRender of groupedAggregatedRenders){\n        const { forget, time, aggregatedCount, name } = aggregatedRender;\n        if (!componentsByCount.has(aggregatedCount)) {\n            componentsByCount.set(aggregatedCount, []);\n        }\n        const components = componentsByCount.get(aggregatedCount);\n        if (components) {\n            components.push({\n                name,\n                forget,\n                time: time ?? 0\n            });\n        }\n    }\n    const sortedCounts = Array.from(componentsByCount.keys()).sort(descending);\n    const parts = [];\n    let cumulativeTime = 0;\n    for (const count of sortedCounts){\n        const componentGroup = componentsByCount.get(count);\n        if (!componentGroup) continue;\n        let text = getComponentGroupNames(componentGroup);\n        const totalTime = getComponentGroupTotalTime(componentGroup);\n        const hasForget = componentGroupHasForget(componentGroup);\n        cumulativeTime += totalTime;\n        if (componentGroup.length > 4) {\n            text += \"\\u2026\";\n        }\n        if (count > 1) {\n            text += ` \\xD7 ${count}`;\n        }\n        if (hasForget) {\n            text = `\\u2728${text}`;\n        }\n        parts.push(text);\n    }\n    labelText = parts.join(\", \");\n    if (!labelText.length) return null;\n    if (labelText.length > 40) {\n        labelText = `${labelText.slice(0, 40)}\\u2026`;\n    }\n    if (cumulativeTime >= 0.01) {\n        labelText += ` (${Number(cumulativeTime.toFixed(2))}ms)`;\n    }\n    return labelText;\n};\nfunction isEqual(a, b) {\n    return a === b || a !== a && b !== b;\n}\nvar playNotificationSound = (audioContext)=>{\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n    const options = {\n        type: \"sine\",\n        freq: [\n            392,\n            //  523.25,\n            600\n        ],\n        duration: 0.3,\n        gain: 0.12\n    };\n    const frequencies = options.freq;\n    const timePerNote = options.duration / frequencies.length;\n    frequencies.forEach((freq, i)=>{\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime + i * timePerNote);\n    });\n    oscillator.type = options.type;\n    gainNode.gain.setValueAtTime(options.gain, audioContext.currentTime);\n    gainNode.gain.setTargetAtTime(0, audioContext.currentTime + options.duration * 0.7, 0.05);\n    oscillator.start();\n    oscillator.stop(audioContext.currentTime + options.duration);\n};\n// src/web/utils/lerp.ts\nvar lerp = (start2, end, t)=>{\n    return start2 + (end - start2) * t;\n};\n// src/web/utils/helpers.ts\n\n// ../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs\nfunction r(e) {\n    var t, f, n = \"\";\n    if (\"string\" == typeof e || \"number\" == typeof e) n += e;\n    else if (\"object\" == typeof e) if (Array.isArray(e)) {\n        var o = e.length;\n        for(t = 0; t < o; t++)e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n    } else for(f in e)e[f] && (n && (n += \" \"), n += f);\n    return n;\n}\nfunction clsx() {\n    for(var e, t, f = 0, n = \"\", o = arguments.length; f < o; f++)(e = arguments[f]) && (t = r(e)) && (n && (n += \" \"), n += t);\n    return n;\n}\n// ../../node_modules/.pnpm/tailwind-merge@2.5.5/node_modules/tailwind-merge/dist/bundle-mjs.mjs\nvar CLASS_PART_SEPARATOR = \"-\";\nvar createClassGroupUtils = (config)=>{\n    const classMap = createClassMap(config);\n    const { conflictingClassGroups, conflictingClassGroupModifiers } = config;\n    const getClassGroupId = (className)=>{\n        const classParts = className.split(CLASS_PART_SEPARATOR);\n        if (classParts[0] === \"\" && classParts.length !== 1) {\n            classParts.shift();\n        }\n        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n    };\n    const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier)=>{\n        const conflicts = conflictingClassGroups[classGroupId] || [];\n        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n            return [\n                ...conflicts,\n                ...conflictingClassGroupModifiers[classGroupId]\n            ];\n        }\n        return conflicts;\n    };\n    return {\n        getClassGroupId,\n        getConflictingClassGroupIds\n    };\n};\nvar getGroupRecursive = (classParts, classPartObject)=>{\n    if (classParts.length === 0) {\n        return classPartObject.classGroupId;\n    }\n    const currentClassPart = classParts[0];\n    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;\n    if (classGroupFromNextClassPart) {\n        return classGroupFromNextClassPart;\n    }\n    if (classPartObject.validators.length === 0) {\n        return void 0;\n    }\n    const classRest = classParts.join(CLASS_PART_SEPARATOR);\n    return classPartObject.validators.find(({ validator })=>validator(classRest))?.classGroupId;\n};\nvar arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nvar getGroupIdForArbitraryProperty = (className)=>{\n    if (arbitraryPropertyRegex.test(className)) {\n        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n        const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(\":\"));\n        if (property) {\n            return \"arbitrary..\" + property;\n        }\n    }\n};\nvar createClassMap = (config)=>{\n    const { theme, prefix } = config;\n    const classMap = {\n        nextPart: /* @__PURE__ */ new Map(),\n        validators: []\n    };\n    const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n    prefixedClassGroupEntries.forEach(([classGroupId, classGroup])=>{\n        processClassesRecursively(classGroup, classMap, classGroupId, theme);\n    });\n    return classMap;\n};\nvar processClassesRecursively = (classGroup, classPartObject, classGroupId, theme)=>{\n    classGroup.forEach((classDefinition)=>{\n        if (typeof classDefinition === \"string\") {\n            const classPartObjectToEdit = classDefinition === \"\" ? classPartObject : getPart(classPartObject, classDefinition);\n            classPartObjectToEdit.classGroupId = classGroupId;\n            return;\n        }\n        if (typeof classDefinition === \"function\") {\n            if (isThemeGetter(classDefinition)) {\n                processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n                return;\n            }\n            classPartObject.validators.push({\n                validator: classDefinition,\n                classGroupId\n            });\n            return;\n        }\n        Object.entries(classDefinition).forEach(([key, classGroup2])=>{\n            processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);\n        });\n    });\n};\nvar getPart = (classPartObject, path)=>{\n    let currentClassPartObject = classPartObject;\n    path.split(CLASS_PART_SEPARATOR).forEach((pathPart)=>{\n        if (!currentClassPartObject.nextPart.has(pathPart)) {\n            currentClassPartObject.nextPart.set(pathPart, {\n                nextPart: /* @__PURE__ */ new Map(),\n                validators: []\n            });\n        }\n        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n    });\n    return currentClassPartObject;\n};\nvar isThemeGetter = (func)=>func.isThemeGetter;\nvar getPrefixedClassGroupEntries = (classGroupEntries, prefix)=>{\n    if (!prefix) {\n        return classGroupEntries;\n    }\n    return classGroupEntries.map(([classGroupId, classGroup])=>{\n        const prefixedClassGroup = classGroup.map((classDefinition)=>{\n            if (typeof classDefinition === \"string\") {\n                return prefix + classDefinition;\n            }\n            if (typeof classDefinition === \"object\") {\n                return Object.fromEntries(Object.entries(classDefinition).map(([key, value])=>[\n                        prefix + key,\n                        value\n                    ]));\n            }\n            return classDefinition;\n        });\n        return [\n            classGroupId,\n            prefixedClassGroup\n        ];\n    });\n};\nvar createLruCache = (maxCacheSize)=>{\n    if (maxCacheSize < 1) {\n        return {\n            get: ()=>void 0,\n            set: ()=>{}\n        };\n    }\n    let cacheSize = 0;\n    let cache2 = /* @__PURE__ */ new Map();\n    let previousCache = /* @__PURE__ */ new Map();\n    const update = (key, value)=>{\n        cache2.set(key, value);\n        cacheSize++;\n        if (cacheSize > maxCacheSize) {\n            cacheSize = 0;\n            previousCache = cache2;\n            cache2 = /* @__PURE__ */ new Map();\n        }\n    };\n    return {\n        get (key) {\n            let value = cache2.get(key);\n            if (value !== void 0) {\n                return value;\n            }\n            if ((value = previousCache.get(key)) !== void 0) {\n                update(key, value);\n                return value;\n            }\n        },\n        set (key, value) {\n            if (cache2.has(key)) {\n                cache2.set(key, value);\n            } else {\n                update(key, value);\n            }\n        }\n    };\n};\nvar IMPORTANT_MODIFIER = \"!\";\nvar createParseClassName = (config)=>{\n    const { separator, experimentalParseClassName } = config;\n    const isSeparatorSingleCharacter = separator.length === 1;\n    const firstSeparatorCharacter = separator[0];\n    const separatorLength = separator.length;\n    const parseClassName = (className)=>{\n        const modifiers = [];\n        let bracketDepth = 0;\n        let modifierStart = 0;\n        let postfixModifierPosition;\n        for(let index = 0; index < className.length; index++){\n            let currentCharacter = className[index];\n            if (bracketDepth === 0) {\n                if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {\n                    modifiers.push(className.slice(modifierStart, index));\n                    modifierStart = index + separatorLength;\n                    continue;\n                }\n                if (currentCharacter === \"/\") {\n                    postfixModifierPosition = index;\n                    continue;\n                }\n            }\n            if (currentCharacter === \"[\") {\n                bracketDepth++;\n            } else if (currentCharacter === \"]\") {\n                bracketDepth--;\n            }\n        }\n        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n        const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);\n        const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;\n        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;\n        return {\n            modifiers,\n            hasImportantModifier,\n            baseClassName,\n            maybePostfixModifierPosition\n        };\n    };\n    if (experimentalParseClassName) {\n        return (className)=>experimentalParseClassName({\n                className,\n                parseClassName\n            });\n    }\n    return parseClassName;\n};\nvar sortModifiers = (modifiers)=>{\n    if (modifiers.length <= 1) {\n        return modifiers;\n    }\n    const sortedModifiers = [];\n    let unsortedModifiers = [];\n    modifiers.forEach((modifier)=>{\n        const isArbitraryVariant = modifier[0] === \"[\";\n        if (isArbitraryVariant) {\n            sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n            unsortedModifiers = [];\n        } else {\n            unsortedModifiers.push(modifier);\n        }\n    });\n    sortedModifiers.push(...unsortedModifiers.sort());\n    return sortedModifiers;\n};\nvar createConfigUtils = (config)=>({\n        cache: createLruCache(config.cacheSize),\n        parseClassName: createParseClassName(config),\n        ...createClassGroupUtils(config)\n    });\nvar SPLIT_CLASSES_REGEX = /\\s+/;\nvar mergeClassList = (classList, configUtils)=>{\n    const { parseClassName, getClassGroupId, getConflictingClassGroupIds } = configUtils;\n    const classGroupsInConflict = [];\n    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n    let result = \"\";\n    for(let index = classNames.length - 1; index >= 0; index -= 1){\n        const originalClassName = classNames[index];\n        const { modifiers, hasImportantModifier, baseClassName, maybePostfixModifierPosition } = parseClassName(originalClassName);\n        let hasPostfixModifier = Boolean(maybePostfixModifierPosition);\n        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n        if (!classGroupId) {\n            if (!hasPostfixModifier) {\n                result = originalClassName + (result.length > 0 ? \" \" + result : result);\n                continue;\n            }\n            classGroupId = getClassGroupId(baseClassName);\n            if (!classGroupId) {\n                result = originalClassName + (result.length > 0 ? \" \" + result : result);\n                continue;\n            }\n            hasPostfixModifier = false;\n        }\n        const variantModifier = sortModifiers(modifiers).join(\":\");\n        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n        const classId = modifierId + classGroupId;\n        if (classGroupsInConflict.includes(classId)) {\n            continue;\n        }\n        classGroupsInConflict.push(classId);\n        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n        for(let i = 0; i < conflictGroups.length; ++i){\n            const group = conflictGroups[i];\n            classGroupsInConflict.push(modifierId + group);\n        }\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n    }\n    return result;\n};\nfunction twJoin() {\n    let index = 0;\n    let argument;\n    let resolvedValue;\n    let string = \"\";\n    while(index < arguments.length){\n        if (argument = arguments[index++]) {\n            if (resolvedValue = toValue(argument)) {\n                string && (string += \" \");\n                string += resolvedValue;\n            }\n        }\n    }\n    return string;\n}\nvar toValue = (mix)=>{\n    if (typeof mix === \"string\") {\n        return mix;\n    }\n    let resolvedValue;\n    let string = \"\";\n    for(let k = 0; k < mix.length; k++){\n        if (mix[k]) {\n            if (resolvedValue = toValue(mix[k])) {\n                string && (string += \" \");\n                string += resolvedValue;\n            }\n        }\n    }\n    return string;\n};\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n    let configUtils;\n    let cacheGet;\n    let cacheSet;\n    let functionToCall = initTailwindMerge;\n    function initTailwindMerge(classList) {\n        const config = createConfigRest.reduce((previousConfig, createConfigCurrent)=>createConfigCurrent(previousConfig), createConfigFirst());\n        configUtils = createConfigUtils(config);\n        cacheGet = configUtils.cache.get;\n        cacheSet = configUtils.cache.set;\n        functionToCall = tailwindMerge;\n        return tailwindMerge(classList);\n    }\n    function tailwindMerge(classList) {\n        const cachedResult = cacheGet(classList);\n        if (cachedResult) {\n            return cachedResult;\n        }\n        const result = mergeClassList(classList, configUtils);\n        cacheSet(classList, result);\n        return result;\n    }\n    return function callTailwindMerge() {\n        return functionToCall(twJoin.apply(null, arguments));\n    };\n}\nvar fromTheme = (key)=>{\n    const themeGetter = (theme)=>theme[key] || [];\n    themeGetter.isThemeGetter = true;\n    return themeGetter;\n};\nvar arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /* @__PURE__ */ new Set([\n    \"px\",\n    \"full\",\n    \"screen\"\n]);\nvar tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nvar colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\nvar shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nvar imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nvar isLength = (value)=>isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);\nvar isArbitraryLength = (value)=>getIsArbitraryValue(value, \"length\", isLengthOnly);\nvar isNumber = (value)=>Boolean(value) && !Number.isNaN(Number(value));\nvar isArbitraryNumber = (value)=>getIsArbitraryValue(value, \"number\", isNumber);\nvar isInteger = (value)=>Boolean(value) && Number.isInteger(Number(value));\nvar isPercent = (value)=>value.endsWith(\"%\") && isNumber(value.slice(0, -1));\nvar isArbitraryValue = (value)=>arbitraryValueRegex.test(value);\nvar isTshirtSize = (value)=>tshirtUnitRegex.test(value);\nvar sizeLabels = /* @__PURE__ */ new Set([\n    \"length\",\n    \"size\",\n    \"percentage\"\n]);\nvar isArbitrarySize = (value)=>getIsArbitraryValue(value, sizeLabels, isNever);\nvar isArbitraryPosition = (value)=>getIsArbitraryValue(value, \"position\", isNever);\nvar imageLabels = /* @__PURE__ */ new Set([\n    \"image\",\n    \"url\"\n]);\nvar isArbitraryImage = (value)=>getIsArbitraryValue(value, imageLabels, isImage);\nvar isArbitraryShadow = (value)=>getIsArbitraryValue(value, \"\", isShadow);\nvar isAny = ()=>true;\nvar getIsArbitraryValue = (value, label, testValue)=>{\n    const result = arbitraryValueRegex.exec(value);\n    if (result) {\n        if (result[1]) {\n            return typeof label === \"string\" ? result[1] === label : label.has(result[1]);\n        }\n        return testValue(result[2]);\n    }\n    return false;\n};\nvar isLengthOnly = (value)=>// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);\nvar isNever = ()=>false;\nvar isShadow = (value)=>shadowRegex.test(value);\nvar isImage = (value)=>imageRegex.test(value);\nvar getDefaultConfig = ()=>{\n    const colors = fromTheme(\"colors\");\n    const spacing = fromTheme(\"spacing\");\n    const blur = fromTheme(\"blur\");\n    const brightness = fromTheme(\"brightness\");\n    const borderColor = fromTheme(\"borderColor\");\n    const borderRadius = fromTheme(\"borderRadius\");\n    const borderSpacing = fromTheme(\"borderSpacing\");\n    const borderWidth = fromTheme(\"borderWidth\");\n    const contrast = fromTheme(\"contrast\");\n    const grayscale = fromTheme(\"grayscale\");\n    const hueRotate = fromTheme(\"hueRotate\");\n    const invert = fromTheme(\"invert\");\n    const gap = fromTheme(\"gap\");\n    const gradientColorStops = fromTheme(\"gradientColorStops\");\n    const gradientColorStopPositions = fromTheme(\"gradientColorStopPositions\");\n    const inset = fromTheme(\"inset\");\n    const margin = fromTheme(\"margin\");\n    const opacity = fromTheme(\"opacity\");\n    const padding = fromTheme(\"padding\");\n    const saturate = fromTheme(\"saturate\");\n    const scale = fromTheme(\"scale\");\n    const sepia = fromTheme(\"sepia\");\n    const skew = fromTheme(\"skew\");\n    const space = fromTheme(\"space\");\n    const translate = fromTheme(\"translate\");\n    const getOverscroll = ()=>[\n            \"auto\",\n            \"contain\",\n            \"none\"\n        ];\n    const getOverflow = ()=>[\n            \"auto\",\n            \"hidden\",\n            \"clip\",\n            \"visible\",\n            \"scroll\"\n        ];\n    const getSpacingWithAutoAndArbitrary = ()=>[\n            \"auto\",\n            isArbitraryValue,\n            spacing\n        ];\n    const getSpacingWithArbitrary = ()=>[\n            isArbitraryValue,\n            spacing\n        ];\n    const getLengthWithEmptyAndArbitrary = ()=>[\n            \"\",\n            isLength,\n            isArbitraryLength\n        ];\n    const getNumberWithAutoAndArbitrary = ()=>[\n            \"auto\",\n            isNumber,\n            isArbitraryValue\n        ];\n    const getPositions = ()=>[\n            \"bottom\",\n            \"center\",\n            \"left\",\n            \"left-bottom\",\n            \"left-top\",\n            \"right\",\n            \"right-bottom\",\n            \"right-top\",\n            \"top\"\n        ];\n    const getLineStyles = ()=>[\n            \"solid\",\n            \"dashed\",\n            \"dotted\",\n            \"double\",\n            \"none\"\n        ];\n    const getBlendModes = ()=>[\n            \"normal\",\n            \"multiply\",\n            \"screen\",\n            \"overlay\",\n            \"darken\",\n            \"lighten\",\n            \"color-dodge\",\n            \"color-burn\",\n            \"hard-light\",\n            \"soft-light\",\n            \"difference\",\n            \"exclusion\",\n            \"hue\",\n            \"saturation\",\n            \"color\",\n            \"luminosity\"\n        ];\n    const getAlign = ()=>[\n            \"start\",\n            \"end\",\n            \"center\",\n            \"between\",\n            \"around\",\n            \"evenly\",\n            \"stretch\"\n        ];\n    const getZeroAndEmpty = ()=>[\n            \"\",\n            \"0\",\n            isArbitraryValue\n        ];\n    const getBreaks = ()=>[\n            \"auto\",\n            \"avoid\",\n            \"all\",\n            \"avoid-page\",\n            \"page\",\n            \"left\",\n            \"right\",\n            \"column\"\n        ];\n    const getNumberAndArbitrary = ()=>[\n            isNumber,\n            isArbitraryValue\n        ];\n    return {\n        cacheSize: 500,\n        separator: \":\",\n        theme: {\n            colors: [\n                isAny\n            ],\n            spacing: [\n                isLength,\n                isArbitraryLength\n            ],\n            blur: [\n                \"none\",\n                \"\",\n                isTshirtSize,\n                isArbitraryValue\n            ],\n            brightness: getNumberAndArbitrary(),\n            borderColor: [\n                colors\n            ],\n            borderRadius: [\n                \"none\",\n                \"\",\n                \"full\",\n                isTshirtSize,\n                isArbitraryValue\n            ],\n            borderSpacing: getSpacingWithArbitrary(),\n            borderWidth: getLengthWithEmptyAndArbitrary(),\n            contrast: getNumberAndArbitrary(),\n            grayscale: getZeroAndEmpty(),\n            hueRotate: getNumberAndArbitrary(),\n            invert: getZeroAndEmpty(),\n            gap: getSpacingWithArbitrary(),\n            gradientColorStops: [\n                colors\n            ],\n            gradientColorStopPositions: [\n                isPercent,\n                isArbitraryLength\n            ],\n            inset: getSpacingWithAutoAndArbitrary(),\n            margin: getSpacingWithAutoAndArbitrary(),\n            opacity: getNumberAndArbitrary(),\n            padding: getSpacingWithArbitrary(),\n            saturate: getNumberAndArbitrary(),\n            scale: getNumberAndArbitrary(),\n            sepia: getZeroAndEmpty(),\n            skew: getNumberAndArbitrary(),\n            space: getSpacingWithArbitrary(),\n            translate: getSpacingWithArbitrary()\n        },\n        classGroups: {\n            // Layout\n            /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */ aspect: [\n                {\n                    aspect: [\n                        \"auto\",\n                        \"square\",\n                        \"video\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       */ container: [\n                \"container\"\n            ],\n            /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */ columns: [\n                {\n                    columns: [\n                        isTshirtSize\n                    ]\n                }\n            ],\n            /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */ \"break-after\": [\n                {\n                    \"break-after\": getBreaks()\n                }\n            ],\n            /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */ \"break-before\": [\n                {\n                    \"break-before\": getBreaks()\n                }\n            ],\n            /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */ \"break-inside\": [\n                {\n                    \"break-inside\": [\n                        \"auto\",\n                        \"avoid\",\n                        \"avoid-page\",\n                        \"avoid-column\"\n                    ]\n                }\n            ],\n            /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */ \"box-decoration\": [\n                {\n                    \"box-decoration\": [\n                        \"slice\",\n                        \"clone\"\n                    ]\n                }\n            ],\n            /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */ box: [\n                {\n                    box: [\n                        \"border\",\n                        \"content\"\n                    ]\n                }\n            ],\n            /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */ display: [\n                \"block\",\n                \"inline-block\",\n                \"inline\",\n                \"flex\",\n                \"inline-flex\",\n                \"table\",\n                \"inline-table\",\n                \"table-caption\",\n                \"table-cell\",\n                \"table-column\",\n                \"table-column-group\",\n                \"table-footer-group\",\n                \"table-header-group\",\n                \"table-row-group\",\n                \"table-row\",\n                \"flow-root\",\n                \"grid\",\n                \"inline-grid\",\n                \"contents\",\n                \"list-item\",\n                \"hidden\"\n            ],\n            /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */ float: [\n                {\n                    float: [\n                        \"right\",\n                        \"left\",\n                        \"none\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */ clear: [\n                {\n                    clear: [\n                        \"left\",\n                        \"right\",\n                        \"both\",\n                        \"none\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */ isolation: [\n                \"isolate\",\n                \"isolation-auto\"\n            ],\n            /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */ \"object-fit\": [\n                {\n                    object: [\n                        \"contain\",\n                        \"cover\",\n                        \"fill\",\n                        \"none\",\n                        \"scale-down\"\n                    ]\n                }\n            ],\n            /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */ \"object-position\": [\n                {\n                    object: [\n                        ...getPositions(),\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */ overflow: [\n                {\n                    overflow: getOverflow()\n                }\n            ],\n            /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */ \"overflow-x\": [\n                {\n                    \"overflow-x\": getOverflow()\n                }\n            ],\n            /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */ \"overflow-y\": [\n                {\n                    \"overflow-y\": getOverflow()\n                }\n            ],\n            /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ overscroll: [\n                {\n                    overscroll: getOverscroll()\n                }\n            ],\n            /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ \"overscroll-x\": [\n                {\n                    \"overscroll-x\": getOverscroll()\n                }\n            ],\n            /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ \"overscroll-y\": [\n                {\n                    \"overscroll-y\": getOverscroll()\n                }\n            ],\n            /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */ position: [\n                \"static\",\n                \"fixed\",\n                \"absolute\",\n                \"relative\",\n                \"sticky\"\n            ],\n            /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ inset: [\n                {\n                    inset: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ \"inset-x\": [\n                {\n                    \"inset-x\": [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ \"inset-y\": [\n                {\n                    \"inset-y\": [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ start: [\n                {\n                    start: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ end: [\n                {\n                    end: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ top: [\n                {\n                    top: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ right: [\n                {\n                    right: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ bottom: [\n                {\n                    bottom: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ left: [\n                {\n                    left: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */ visibility: [\n                \"visible\",\n                \"invisible\",\n                \"collapse\"\n            ],\n            /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */ z: [\n                {\n                    z: [\n                        \"auto\",\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Flexbox and Grid\n            /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */ basis: [\n                {\n                    basis: getSpacingWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */ \"flex-direction\": [\n                {\n                    flex: [\n                        \"row\",\n                        \"row-reverse\",\n                        \"col\",\n                        \"col-reverse\"\n                    ]\n                }\n            ],\n            /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */ \"flex-wrap\": [\n                {\n                    flex: [\n                        \"wrap\",\n                        \"wrap-reverse\",\n                        \"nowrap\"\n                    ]\n                }\n            ],\n            /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */ flex: [\n                {\n                    flex: [\n                        \"1\",\n                        \"auto\",\n                        \"initial\",\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */ grow: [\n                {\n                    grow: getZeroAndEmpty()\n                }\n            ],\n            /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */ shrink: [\n                {\n                    shrink: getZeroAndEmpty()\n                }\n            ],\n            /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */ order: [\n                {\n                    order: [\n                        \"first\",\n                        \"last\",\n                        \"none\",\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */ \"grid-cols\": [\n                {\n                    \"grid-cols\": [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-start-end\": [\n                {\n                    col: [\n                        \"auto\",\n                        {\n                            span: [\n                                \"full\",\n                                isInteger,\n                                isArbitraryValue\n                            ]\n                        },\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-start\": [\n                {\n                    \"col-start\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-end\": [\n                {\n                    \"col-end\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */ \"grid-rows\": [\n                {\n                    \"grid-rows\": [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-start-end\": [\n                {\n                    row: [\n                        \"auto\",\n                        {\n                            span: [\n                                isInteger,\n                                isArbitraryValue\n                            ]\n                        },\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-start\": [\n                {\n                    \"row-start\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-end\": [\n                {\n                    \"row-end\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */ \"grid-flow\": [\n                {\n                    \"grid-flow\": [\n                        \"row\",\n                        \"col\",\n                        \"dense\",\n                        \"row-dense\",\n                        \"col-dense\"\n                    ]\n                }\n            ],\n            /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */ \"auto-cols\": [\n                {\n                    \"auto-cols\": [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fr\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */ \"auto-rows\": [\n                {\n                    \"auto-rows\": [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fr\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */ gap: [\n                {\n                    gap: [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */ \"gap-x\": [\n                {\n                    \"gap-x\": [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */ \"gap-y\": [\n                {\n                    \"gap-y\": [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */ \"justify-content\": [\n                {\n                    justify: [\n                        \"normal\",\n                        ...getAlign()\n                    ]\n                }\n            ],\n            /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */ \"justify-items\": [\n                {\n                    \"justify-items\": [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */ \"justify-self\": [\n                {\n                    \"justify-self\": [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */ \"align-content\": [\n                {\n                    content: [\n                        \"normal\",\n                        ...getAlign(),\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */ \"align-items\": [\n                {\n                    items: [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"baseline\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */ \"align-self\": [\n                {\n                    self: [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\",\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */ \"place-content\": [\n                {\n                    \"place-content\": [\n                        ...getAlign(),\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */ \"place-items\": [\n                {\n                    \"place-items\": [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"baseline\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */ \"place-self\": [\n                {\n                    \"place-self\": [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            // Spacing\n            /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */ p: [\n                {\n                    p: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */ px: [\n                {\n                    px: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */ py: [\n                {\n                    py: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */ ps: [\n                {\n                    ps: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */ pe: [\n                {\n                    pe: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */ pt: [\n                {\n                    pt: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */ pr: [\n                {\n                    pr: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */ pb: [\n                {\n                    pb: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */ pl: [\n                {\n                    pl: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */ m: [\n                {\n                    m: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */ mx: [\n                {\n                    mx: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */ my: [\n                {\n                    my: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */ ms: [\n                {\n                    ms: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */ me: [\n                {\n                    me: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */ mt: [\n                {\n                    mt: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */ mr: [\n                {\n                    mr: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */ mb: [\n                {\n                    mb: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */ ml: [\n                {\n                    ml: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-x\": [\n                {\n                    \"space-x\": [\n                        space\n                    ]\n                }\n            ],\n            /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-x-reverse\": [\n                \"space-x-reverse\"\n            ],\n            /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-y\": [\n                {\n                    \"space-y\": [\n                        space\n                    ]\n                }\n            ],\n            /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-y-reverse\": [\n                \"space-y-reverse\"\n            ],\n            // Sizing\n            /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */ w: [\n                {\n                    w: [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svw\",\n                        \"lvw\",\n                        \"dvw\",\n                        isArbitraryValue,\n                        spacing\n                    ]\n                }\n            ],\n            /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */ \"min-w\": [\n                {\n                    \"min-w\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\"\n                    ]\n                }\n            ],\n            /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */ \"max-w\": [\n                {\n                    \"max-w\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"none\",\n                        \"full\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"prose\",\n                        {\n                            screen: [\n                                isTshirtSize\n                            ]\n                        },\n                        isTshirtSize\n                    ]\n                }\n            ],\n            /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */ h: [\n                {\n                    h: [\n                        isArbitraryValue,\n                        spacing,\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */ \"min-h\": [\n                {\n                    \"min-h\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */ \"max-h\": [\n                {\n                    \"max-h\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Size\n       * @see https://tailwindcss.com/docs/size\n       */ size: [\n                {\n                    size: [\n                        isArbitraryValue,\n                        spacing,\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\"\n                    ]\n                }\n            ],\n            // Typography\n            /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */ \"font-size\": [\n                {\n                    text: [\n                        \"base\",\n                        isTshirtSize,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */ \"font-smoothing\": [\n                \"antialiased\",\n                \"subpixel-antialiased\"\n            ],\n            /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */ \"font-style\": [\n                \"italic\",\n                \"not-italic\"\n            ],\n            /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */ \"font-weight\": [\n                {\n                    font: [\n                        \"thin\",\n                        \"extralight\",\n                        \"light\",\n                        \"normal\",\n                        \"medium\",\n                        \"semibold\",\n                        \"bold\",\n                        \"extrabold\",\n                        \"black\",\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */ \"font-family\": [\n                {\n                    font: [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-normal\": [\n                \"normal-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-ordinal\": [\n                \"ordinal\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-slashed-zero\": [\n                \"slashed-zero\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-figure\": [\n                \"lining-nums\",\n                \"oldstyle-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-spacing\": [\n                \"proportional-nums\",\n                \"tabular-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-fraction\": [\n                \"diagonal-fractions\",\n                \"stacked-fractions\"\n            ],\n            /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */ tracking: [\n                {\n                    tracking: [\n                        \"tighter\",\n                        \"tight\",\n                        \"normal\",\n                        \"wide\",\n                        \"wider\",\n                        \"widest\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */ \"line-clamp\": [\n                {\n                    \"line-clamp\": [\n                        \"none\",\n                        isNumber,\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */ leading: [\n                {\n                    leading: [\n                        \"none\",\n                        \"tight\",\n                        \"snug\",\n                        \"normal\",\n                        \"relaxed\",\n                        \"loose\",\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */ \"list-image\": [\n                {\n                    \"list-image\": [\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */ \"list-style-type\": [\n                {\n                    list: [\n                        \"none\",\n                        \"disc\",\n                        \"decimal\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */ \"list-style-position\": [\n                {\n                    list: [\n                        \"inside\",\n                        \"outside\"\n                    ]\n                }\n            ],\n            /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/placeholder-color\n       */ \"placeholder-color\": [\n                {\n                    placeholder: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Placeholder Opacity\n       * @see https://tailwindcss.com/docs/placeholder-opacity\n       */ \"placeholder-opacity\": [\n                {\n                    \"placeholder-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */ \"text-alignment\": [\n                {\n                    text: [\n                        \"left\",\n                        \"center\",\n                        \"right\",\n                        \"justify\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */ \"text-color\": [\n                {\n                    text: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Text Opacity\n       * @see https://tailwindcss.com/docs/text-opacity\n       */ \"text-opacity\": [\n                {\n                    \"text-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */ \"text-decoration\": [\n                \"underline\",\n                \"overline\",\n                \"line-through\",\n                \"no-underline\"\n            ],\n            /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */ \"text-decoration-style\": [\n                {\n                    decoration: [\n                        ...getLineStyles(),\n                        \"wavy\"\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */ \"text-decoration-thickness\": [\n                {\n                    decoration: [\n                        \"auto\",\n                        \"from-font\",\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */ \"underline-offset\": [\n                {\n                    \"underline-offset\": [\n                        \"auto\",\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */ \"text-decoration-color\": [\n                {\n                    decoration: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */ \"text-transform\": [\n                \"uppercase\",\n                \"lowercase\",\n                \"capitalize\",\n                \"normal-case\"\n            ],\n            /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */ \"text-overflow\": [\n                \"truncate\",\n                \"text-ellipsis\",\n                \"text-clip\"\n            ],\n            /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */ \"text-wrap\": [\n                {\n                    text: [\n                        \"wrap\",\n                        \"nowrap\",\n                        \"balance\",\n                        \"pretty\"\n                    ]\n                }\n            ],\n            /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */ indent: [\n                {\n                    indent: getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */ \"vertical-align\": [\n                {\n                    align: [\n                        \"baseline\",\n                        \"top\",\n                        \"middle\",\n                        \"bottom\",\n                        \"text-top\",\n                        \"text-bottom\",\n                        \"sub\",\n                        \"super\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */ whitespace: [\n                {\n                    whitespace: [\n                        \"normal\",\n                        \"nowrap\",\n                        \"pre\",\n                        \"pre-line\",\n                        \"pre-wrap\",\n                        \"break-spaces\"\n                    ]\n                }\n            ],\n            /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */ break: [\n                {\n                    break: [\n                        \"normal\",\n                        \"words\",\n                        \"all\",\n                        \"keep\"\n                    ]\n                }\n            ],\n            /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */ hyphens: [\n                {\n                    hyphens: [\n                        \"none\",\n                        \"manual\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */ content: [\n                {\n                    content: [\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Backgrounds\n            /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */ \"bg-attachment\": [\n                {\n                    bg: [\n                        \"fixed\",\n                        \"local\",\n                        \"scroll\"\n                    ]\n                }\n            ],\n            /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */ \"bg-clip\": [\n                {\n                    \"bg-clip\": [\n                        \"border\",\n                        \"padding\",\n                        \"content\",\n                        \"text\"\n                    ]\n                }\n            ],\n            /**\n       * Background Opacity\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/background-opacity\n       */ \"bg-opacity\": [\n                {\n                    \"bg-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */ \"bg-origin\": [\n                {\n                    \"bg-origin\": [\n                        \"border\",\n                        \"padding\",\n                        \"content\"\n                    ]\n                }\n            ],\n            /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */ \"bg-position\": [\n                {\n                    bg: [\n                        ...getPositions(),\n                        isArbitraryPosition\n                    ]\n                }\n            ],\n            /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */ \"bg-repeat\": [\n                {\n                    bg: [\n                        \"no-repeat\",\n                        {\n                            repeat: [\n                                \"\",\n                                \"x\",\n                                \"y\",\n                                \"round\",\n                                \"space\"\n                            ]\n                        }\n                    ]\n                }\n            ],\n            /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */ \"bg-size\": [\n                {\n                    bg: [\n                        \"auto\",\n                        \"cover\",\n                        \"contain\",\n                        isArbitrarySize\n                    ]\n                }\n            ],\n            /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */ \"bg-image\": [\n                {\n                    bg: [\n                        \"none\",\n                        {\n                            \"gradient-to\": [\n                                \"t\",\n                                \"tr\",\n                                \"r\",\n                                \"br\",\n                                \"b\",\n                                \"bl\",\n                                \"l\",\n                                \"tl\"\n                            ]\n                        },\n                        isArbitraryImage\n                    ]\n                }\n            ],\n            /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */ \"bg-color\": [\n                {\n                    bg: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-from-pos\": [\n                {\n                    from: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-via-pos\": [\n                {\n                    via: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-to-pos\": [\n                {\n                    to: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-from\": [\n                {\n                    from: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-via\": [\n                {\n                    via: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-to\": [\n                {\n                    to: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            // Borders\n            /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */ rounded: [\n                {\n                    rounded: [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-s\": [\n                {\n                    \"rounded-s\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-e\": [\n                {\n                    \"rounded-e\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-t\": [\n                {\n                    \"rounded-t\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-r\": [\n                {\n                    \"rounded-r\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-b\": [\n                {\n                    \"rounded-b\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-l\": [\n                {\n                    \"rounded-l\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-ss\": [\n                {\n                    \"rounded-ss\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-se\": [\n                {\n                    \"rounded-se\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-ee\": [\n                {\n                    \"rounded-ee\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-es\": [\n                {\n                    \"rounded-es\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-tl\": [\n                {\n                    \"rounded-tl\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-tr\": [\n                {\n                    \"rounded-tr\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-br\": [\n                {\n                    \"rounded-br\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-bl\": [\n                {\n                    \"rounded-bl\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w\": [\n                {\n                    border: [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-x\": [\n                {\n                    \"border-x\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-y\": [\n                {\n                    \"border-y\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-s\": [\n                {\n                    \"border-s\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-e\": [\n                {\n                    \"border-e\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-t\": [\n                {\n                    \"border-t\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-r\": [\n                {\n                    \"border-r\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-b\": [\n                {\n                    \"border-b\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-l\": [\n                {\n                    \"border-l\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Opacity\n       * @see https://tailwindcss.com/docs/border-opacity\n       */ \"border-opacity\": [\n                {\n                    \"border-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */ \"border-style\": [\n                {\n                    border: [\n                        ...getLineStyles(),\n                        \"hidden\"\n                    ]\n                }\n            ],\n            /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-x\": [\n                {\n                    \"divide-x\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-x-reverse\": [\n                \"divide-x-reverse\"\n            ],\n            /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-y\": [\n                {\n                    \"divide-y\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-y-reverse\": [\n                \"divide-y-reverse\"\n            ],\n            /**\n       * Divide Opacity\n       * @see https://tailwindcss.com/docs/divide-opacity\n       */ \"divide-opacity\": [\n                {\n                    \"divide-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/divide-style\n       */ \"divide-style\": [\n                {\n                    divide: getLineStyles()\n                }\n            ],\n            /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color\": [\n                {\n                    border: [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-x\": [\n                {\n                    \"border-x\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-y\": [\n                {\n                    \"border-y\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-s\": [\n                {\n                    \"border-s\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-e\": [\n                {\n                    \"border-e\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-t\": [\n                {\n                    \"border-t\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-r\": [\n                {\n                    \"border-r\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-b\": [\n                {\n                    \"border-b\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-l\": [\n                {\n                    \"border-l\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */ \"divide-color\": [\n                {\n                    divide: [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */ \"outline-style\": [\n                {\n                    outline: [\n                        \"\",\n                        ...getLineStyles()\n                    ]\n                }\n            ],\n            /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */ \"outline-offset\": [\n                {\n                    \"outline-offset\": [\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */ \"outline-w\": [\n                {\n                    outline: [\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */ \"outline-color\": [\n                {\n                    outline: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/ring-width\n       */ \"ring-w\": [\n                {\n                    ring: getLengthWithEmptyAndArbitrary()\n                }\n            ],\n            /**\n       * Ring Width Inset\n       * @see https://tailwindcss.com/docs/ring-width\n       */ \"ring-w-inset\": [\n                \"ring-inset\"\n            ],\n            /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/ring-color\n       */ \"ring-color\": [\n                {\n                    ring: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Ring Opacity\n       * @see https://tailwindcss.com/docs/ring-opacity\n       */ \"ring-opacity\": [\n                {\n                    \"ring-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Ring Offset Width\n       * @see https://tailwindcss.com/docs/ring-offset-width\n       */ \"ring-offset-w\": [\n                {\n                    \"ring-offset\": [\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Ring Offset Color\n       * @see https://tailwindcss.com/docs/ring-offset-color\n       */ \"ring-offset-color\": [\n                {\n                    \"ring-offset\": [\n                        colors\n                    ]\n                }\n            ],\n            // Effects\n            /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */ shadow: [\n                {\n                    shadow: [\n                        \"\",\n                        \"inner\",\n                        \"none\",\n                        isTshirtSize,\n                        isArbitraryShadow\n                    ]\n                }\n            ],\n            /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow-color\n       */ \"shadow-color\": [\n                {\n                    shadow: [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */ opacity: [\n                {\n                    opacity: [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */ \"mix-blend\": [\n                {\n                    \"mix-blend\": [\n                        ...getBlendModes(),\n                        \"plus-lighter\",\n                        \"plus-darker\"\n                    ]\n                }\n            ],\n            /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */ \"bg-blend\": [\n                {\n                    \"bg-blend\": getBlendModes()\n                }\n            ],\n            // Filters\n            /**\n       * Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/filter\n       */ filter: [\n                {\n                    filter: [\n                        \"\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */ blur: [\n                {\n                    blur: [\n                        blur\n                    ]\n                }\n            ],\n            /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */ brightness: [\n                {\n                    brightness: [\n                        brightness\n                    ]\n                }\n            ],\n            /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */ contrast: [\n                {\n                    contrast: [\n                        contrast\n                    ]\n                }\n            ],\n            /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */ \"drop-shadow\": [\n                {\n                    \"drop-shadow\": [\n                        \"\",\n                        \"none\",\n                        isTshirtSize,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */ grayscale: [\n                {\n                    grayscale: [\n                        grayscale\n                    ]\n                }\n            ],\n            /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */ \"hue-rotate\": [\n                {\n                    \"hue-rotate\": [\n                        hueRotate\n                    ]\n                }\n            ],\n            /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */ invert: [\n                {\n                    invert: [\n                        invert\n                    ]\n                }\n            ],\n            /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */ saturate: [\n                {\n                    saturate: [\n                        saturate\n                    ]\n                }\n            ],\n            /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */ sepia: [\n                {\n                    sepia: [\n                        sepia\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */ \"backdrop-filter\": [\n                {\n                    \"backdrop-filter\": [\n                        \"\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */ \"backdrop-blur\": [\n                {\n                    \"backdrop-blur\": [\n                        blur\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */ \"backdrop-brightness\": [\n                {\n                    \"backdrop-brightness\": [\n                        brightness\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */ \"backdrop-contrast\": [\n                {\n                    \"backdrop-contrast\": [\n                        contrast\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */ \"backdrop-grayscale\": [\n                {\n                    \"backdrop-grayscale\": [\n                        grayscale\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */ \"backdrop-hue-rotate\": [\n                {\n                    \"backdrop-hue-rotate\": [\n                        hueRotate\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */ \"backdrop-invert\": [\n                {\n                    \"backdrop-invert\": [\n                        invert\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */ \"backdrop-opacity\": [\n                {\n                    \"backdrop-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */ \"backdrop-saturate\": [\n                {\n                    \"backdrop-saturate\": [\n                        saturate\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */ \"backdrop-sepia\": [\n                {\n                    \"backdrop-sepia\": [\n                        sepia\n                    ]\n                }\n            ],\n            // Tables\n            /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */ \"border-collapse\": [\n                {\n                    border: [\n                        \"collapse\",\n                        \"separate\"\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing\": [\n                {\n                    \"border-spacing\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing-x\": [\n                {\n                    \"border-spacing-x\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing-y\": [\n                {\n                    \"border-spacing-y\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */ \"table-layout\": [\n                {\n                    table: [\n                        \"auto\",\n                        \"fixed\"\n                    ]\n                }\n            ],\n            /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */ caption: [\n                {\n                    caption: [\n                        \"top\",\n                        \"bottom\"\n                    ]\n                }\n            ],\n            // Transitions and Animation\n            /**\n       * Tranisition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */ transition: [\n                {\n                    transition: [\n                        \"none\",\n                        \"all\",\n                        \"\",\n                        \"colors\",\n                        \"opacity\",\n                        \"shadow\",\n                        \"transform\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */ duration: [\n                {\n                    duration: getNumberAndArbitrary()\n                }\n            ],\n            /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */ ease: [\n                {\n                    ease: [\n                        \"linear\",\n                        \"in\",\n                        \"out\",\n                        \"in-out\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */ delay: [\n                {\n                    delay: getNumberAndArbitrary()\n                }\n            ],\n            /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */ animate: [\n                {\n                    animate: [\n                        \"none\",\n                        \"spin\",\n                        \"ping\",\n                        \"pulse\",\n                        \"bounce\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Transforms\n            /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */ transform: [\n                {\n                    transform: [\n                        \"\",\n                        \"gpu\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */ scale: [\n                {\n                    scale: [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */ \"scale-x\": [\n                {\n                    \"scale-x\": [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */ \"scale-y\": [\n                {\n                    \"scale-y\": [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */ rotate: [\n                {\n                    rotate: [\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */ \"translate-x\": [\n                {\n                    \"translate-x\": [\n                        translate\n                    ]\n                }\n            ],\n            /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */ \"translate-y\": [\n                {\n                    \"translate-y\": [\n                        translate\n                    ]\n                }\n            ],\n            /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */ \"skew-x\": [\n                {\n                    \"skew-x\": [\n                        skew\n                    ]\n                }\n            ],\n            /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */ \"skew-y\": [\n                {\n                    \"skew-y\": [\n                        skew\n                    ]\n                }\n            ],\n            /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */ \"transform-origin\": [\n                {\n                    origin: [\n                        \"center\",\n                        \"top\",\n                        \"top-right\",\n                        \"right\",\n                        \"bottom-right\",\n                        \"bottom\",\n                        \"bottom-left\",\n                        \"left\",\n                        \"top-left\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Interactivity\n            /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */ accent: [\n                {\n                    accent: [\n                        \"auto\",\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */ appearance: [\n                {\n                    appearance: [\n                        \"none\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */ cursor: [\n                {\n                    cursor: [\n                        \"auto\",\n                        \"default\",\n                        \"pointer\",\n                        \"wait\",\n                        \"text\",\n                        \"move\",\n                        \"help\",\n                        \"not-allowed\",\n                        \"none\",\n                        \"context-menu\",\n                        \"progress\",\n                        \"cell\",\n                        \"crosshair\",\n                        \"vertical-text\",\n                        \"alias\",\n                        \"copy\",\n                        \"no-drop\",\n                        \"grab\",\n                        \"grabbing\",\n                        \"all-scroll\",\n                        \"col-resize\",\n                        \"row-resize\",\n                        \"n-resize\",\n                        \"e-resize\",\n                        \"s-resize\",\n                        \"w-resize\",\n                        \"ne-resize\",\n                        \"nw-resize\",\n                        \"se-resize\",\n                        \"sw-resize\",\n                        \"ew-resize\",\n                        \"ns-resize\",\n                        \"nesw-resize\",\n                        \"nwse-resize\",\n                        \"zoom-in\",\n                        \"zoom-out\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */ \"caret-color\": [\n                {\n                    caret: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */ \"pointer-events\": [\n                {\n                    \"pointer-events\": [\n                        \"none\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */ resize: [\n                {\n                    resize: [\n                        \"none\",\n                        \"y\",\n                        \"x\",\n                        \"\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */ \"scroll-behavior\": [\n                {\n                    scroll: [\n                        \"auto\",\n                        \"smooth\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-m\": [\n                {\n                    \"scroll-m\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mx\": [\n                {\n                    \"scroll-mx\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-my\": [\n                {\n                    \"scroll-my\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-ms\": [\n                {\n                    \"scroll-ms\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-me\": [\n                {\n                    \"scroll-me\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mt\": [\n                {\n                    \"scroll-mt\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mr\": [\n                {\n                    \"scroll-mr\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mb\": [\n                {\n                    \"scroll-mb\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-ml\": [\n                {\n                    \"scroll-ml\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-p\": [\n                {\n                    \"scroll-p\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-px\": [\n                {\n                    \"scroll-px\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-py\": [\n                {\n                    \"scroll-py\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-ps\": [\n                {\n                    \"scroll-ps\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pe\": [\n                {\n                    \"scroll-pe\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pt\": [\n                {\n                    \"scroll-pt\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pr\": [\n                {\n                    \"scroll-pr\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pb\": [\n                {\n                    \"scroll-pb\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pl\": [\n                {\n                    \"scroll-pl\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */ \"snap-align\": [\n                {\n                    snap: [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"align-none\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */ \"snap-stop\": [\n                {\n                    snap: [\n                        \"normal\",\n                        \"always\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */ \"snap-type\": [\n                {\n                    snap: [\n                        \"none\",\n                        \"x\",\n                        \"y\",\n                        \"both\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */ \"snap-strictness\": [\n                {\n                    snap: [\n                        \"mandatory\",\n                        \"proximity\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */ touch: [\n                {\n                    touch: [\n                        \"auto\",\n                        \"none\",\n                        \"manipulation\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-x\": [\n                {\n                    \"touch-pan\": [\n                        \"x\",\n                        \"left\",\n                        \"right\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-y\": [\n                {\n                    \"touch-pan\": [\n                        \"y\",\n                        \"up\",\n                        \"down\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-pz\": [\n                \"touch-pinch-zoom\"\n            ],\n            /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */ select: [\n                {\n                    select: [\n                        \"none\",\n                        \"text\",\n                        \"all\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */ \"will-change\": [\n                {\n                    \"will-change\": [\n                        \"auto\",\n                        \"scroll\",\n                        \"contents\",\n                        \"transform\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // SVG\n            /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */ fill: [\n                {\n                    fill: [\n                        colors,\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */ \"stroke-w\": [\n                {\n                    stroke: [\n                        isLength,\n                        isArbitraryLength,\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */ stroke: [\n                {\n                    stroke: [\n                        colors,\n                        \"none\"\n                    ]\n                }\n            ],\n            // Accessibility\n            /**\n       * Screen Readers\n       * @see https://tailwindcss.com/docs/screen-readers\n       */ sr: [\n                \"sr-only\",\n                \"not-sr-only\"\n            ],\n            /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */ \"forced-color-adjust\": [\n                {\n                    \"forced-color-adjust\": [\n                        \"auto\",\n                        \"none\"\n                    ]\n                }\n            ]\n        },\n        conflictingClassGroups: {\n            overflow: [\n                \"overflow-x\",\n                \"overflow-y\"\n            ],\n            overscroll: [\n                \"overscroll-x\",\n                \"overscroll-y\"\n            ],\n            inset: [\n                \"inset-x\",\n                \"inset-y\",\n                \"start\",\n                \"end\",\n                \"top\",\n                \"right\",\n                \"bottom\",\n                \"left\"\n            ],\n            \"inset-x\": [\n                \"right\",\n                \"left\"\n            ],\n            \"inset-y\": [\n                \"top\",\n                \"bottom\"\n            ],\n            flex: [\n                \"basis\",\n                \"grow\",\n                \"shrink\"\n            ],\n            gap: [\n                \"gap-x\",\n                \"gap-y\"\n            ],\n            p: [\n                \"px\",\n                \"py\",\n                \"ps\",\n                \"pe\",\n                \"pt\",\n                \"pr\",\n                \"pb\",\n                \"pl\"\n            ],\n            px: [\n                \"pr\",\n                \"pl\"\n            ],\n            py: [\n                \"pt\",\n                \"pb\"\n            ],\n            m: [\n                \"mx\",\n                \"my\",\n                \"ms\",\n                \"me\",\n                \"mt\",\n                \"mr\",\n                \"mb\",\n                \"ml\"\n            ],\n            mx: [\n                \"mr\",\n                \"ml\"\n            ],\n            my: [\n                \"mt\",\n                \"mb\"\n            ],\n            size: [\n                \"w\",\n                \"h\"\n            ],\n            \"font-size\": [\n                \"leading\"\n            ],\n            \"fvn-normal\": [\n                \"fvn-ordinal\",\n                \"fvn-slashed-zero\",\n                \"fvn-figure\",\n                \"fvn-spacing\",\n                \"fvn-fraction\"\n            ],\n            \"fvn-ordinal\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-slashed-zero\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-figure\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-spacing\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-fraction\": [\n                \"fvn-normal\"\n            ],\n            \"line-clamp\": [\n                \"display\",\n                \"overflow\"\n            ],\n            rounded: [\n                \"rounded-s\",\n                \"rounded-e\",\n                \"rounded-t\",\n                \"rounded-r\",\n                \"rounded-b\",\n                \"rounded-l\",\n                \"rounded-ss\",\n                \"rounded-se\",\n                \"rounded-ee\",\n                \"rounded-es\",\n                \"rounded-tl\",\n                \"rounded-tr\",\n                \"rounded-br\",\n                \"rounded-bl\"\n            ],\n            \"rounded-s\": [\n                \"rounded-ss\",\n                \"rounded-es\"\n            ],\n            \"rounded-e\": [\n                \"rounded-se\",\n                \"rounded-ee\"\n            ],\n            \"rounded-t\": [\n                \"rounded-tl\",\n                \"rounded-tr\"\n            ],\n            \"rounded-r\": [\n                \"rounded-tr\",\n                \"rounded-br\"\n            ],\n            \"rounded-b\": [\n                \"rounded-br\",\n                \"rounded-bl\"\n            ],\n            \"rounded-l\": [\n                \"rounded-tl\",\n                \"rounded-bl\"\n            ],\n            \"border-spacing\": [\n                \"border-spacing-x\",\n                \"border-spacing-y\"\n            ],\n            \"border-w\": [\n                \"border-w-s\",\n                \"border-w-e\",\n                \"border-w-t\",\n                \"border-w-r\",\n                \"border-w-b\",\n                \"border-w-l\"\n            ],\n            \"border-w-x\": [\n                \"border-w-r\",\n                \"border-w-l\"\n            ],\n            \"border-w-y\": [\n                \"border-w-t\",\n                \"border-w-b\"\n            ],\n            \"border-color\": [\n                \"border-color-s\",\n                \"border-color-e\",\n                \"border-color-t\",\n                \"border-color-r\",\n                \"border-color-b\",\n                \"border-color-l\"\n            ],\n            \"border-color-x\": [\n                \"border-color-r\",\n                \"border-color-l\"\n            ],\n            \"border-color-y\": [\n                \"border-color-t\",\n                \"border-color-b\"\n            ],\n            \"scroll-m\": [\n                \"scroll-mx\",\n                \"scroll-my\",\n                \"scroll-ms\",\n                \"scroll-me\",\n                \"scroll-mt\",\n                \"scroll-mr\",\n                \"scroll-mb\",\n                \"scroll-ml\"\n            ],\n            \"scroll-mx\": [\n                \"scroll-mr\",\n                \"scroll-ml\"\n            ],\n            \"scroll-my\": [\n                \"scroll-mt\",\n                \"scroll-mb\"\n            ],\n            \"scroll-p\": [\n                \"scroll-px\",\n                \"scroll-py\",\n                \"scroll-ps\",\n                \"scroll-pe\",\n                \"scroll-pt\",\n                \"scroll-pr\",\n                \"scroll-pb\",\n                \"scroll-pl\"\n            ],\n            \"scroll-px\": [\n                \"scroll-pr\",\n                \"scroll-pl\"\n            ],\n            \"scroll-py\": [\n                \"scroll-pt\",\n                \"scroll-pb\"\n            ],\n            touch: [\n                \"touch-x\",\n                \"touch-y\",\n                \"touch-pz\"\n            ],\n            \"touch-x\": [\n                \"touch\"\n            ],\n            \"touch-y\": [\n                \"touch\"\n            ],\n            \"touch-pz\": [\n                \"touch\"\n            ]\n        },\n        conflictingClassGroupModifiers: {\n            \"font-size\": [\n                \"leading\"\n            ]\n        }\n    };\n};\nvar twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);\n// src/web/utils/helpers.ts\nvar cn = (...inputs)=>{\n    return twMerge(clsx(inputs));\n};\nvar isFirefox = typeof navigator !== \"undefined\" && navigator.userAgent.includes(\"Firefox\");\nvar throttle = (callback, delay)=>{\n    let lastCall = 0;\n    return (e)=>{\n        const now = Date.now();\n        if (now - lastCall >= delay) {\n            lastCall = now;\n            return callback(e);\n        }\n        return void 0;\n    };\n};\nvar tryOrElse = (fn, defaultValue)=>{\n    try {\n        return fn();\n    } catch  {\n        return defaultValue;\n    }\n};\nvar readLocalStorage = (storageKey)=>{\n    if (true) return null;\n    try {\n        const stored = localStorage.getItem(storageKey);\n        return stored ? JSON.parse(stored) : null;\n    } catch  {\n        return null;\n    }\n};\nvar saveLocalStorage = (storageKey, state2)=>{\n    if (true) return;\n    try {\n        window.localStorage.setItem(storageKey, JSON.stringify(state2));\n    } catch  {}\n};\nvar removeLocalStorage = (storageKey)=>{\n    if (true) return;\n    try {\n        window.localStorage.removeItem(storageKey);\n    } catch  {}\n};\nvar toggleMultipleClasses = (element, classes)=>{\n    for (const cls of classes){\n        element.classList.toggle(cls);\n    }\n};\nvar LazyComponentTag = 24;\nvar ProfilerTag = 12;\nvar getExtendedDisplayName = (fiber)=>{\n    if (!fiber) {\n        return {\n            name: \"Unknown\",\n            wrappers: [],\n            wrapperTypes: []\n        };\n    }\n    const { tag, type, elementType } = fiber;\n    let name = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(type);\n    const wrappers = [];\n    const wrapperTypes = [];\n    if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.hasMemoCache)(fiber) || tag === bippy__WEBPACK_IMPORTED_MODULE_0__.SimpleMemoComponentTag || tag === bippy__WEBPACK_IMPORTED_MODULE_0__.MemoComponentTag || type?.$$typeof === Symbol.for(\"react.memo\") || elementType?.$$typeof === Symbol.for(\"react.memo\")) {\n        const compiler = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.hasMemoCache)(fiber);\n        wrapperTypes.push({\n            type: \"memo\",\n            title: compiler ? \"This component has been auto-memoized by the React Compiler.\" : \"Memoized component that skips re-renders if props are the same\",\n            compiler\n        });\n    }\n    if (tag === LazyComponentTag) {\n        wrapperTypes.push({\n            type: \"lazy\",\n            title: \"Lazily loaded component that supports code splitting\"\n        });\n    }\n    if (tag === bippy__WEBPACK_IMPORTED_MODULE_0__.SuspenseComponentTag) {\n        wrapperTypes.push({\n            type: \"suspense\",\n            title: \"Component that can suspend while content is loading\"\n        });\n    }\n    if (tag === ProfilerTag) {\n        wrapperTypes.push({\n            type: \"profiler\",\n            title: \"Component that measures rendering performance\"\n        });\n    }\n    if (typeof name === \"string\") {\n        const wrapperRegex = /^(\\w+)\\((.*)\\)$/;\n        let currentName = name;\n        while(wrapperRegex.test(currentName)){\n            const match = currentName.match(wrapperRegex);\n            if (match?.[1] && match?.[2]) {\n                wrappers.unshift(match[1]);\n                currentName = match[2];\n            } else {\n                break;\n            }\n        }\n        name = currentName;\n    }\n    return {\n        name: name || \"Unknown\",\n        wrappers,\n        wrapperTypes\n    };\n};\n// src/web/utils/lru.ts\nvar LRUNode = class {\n    constructor(key, value){\n        this.key = key;\n        this.value = value;\n    }\n};\nvar LRUMap = class {\n    constructor(limit){\n        this.limit = limit;\n        this.nodes = /* @__PURE__ */ new Map();\n    }\n    has(key) {\n        return this.nodes.has(key);\n    }\n    get(key) {\n        const result = this.nodes.get(key);\n        if (result) {\n            this.bubble(result);\n            return result.value;\n        }\n        return void 0;\n    }\n    set(key, value) {\n        if (this.nodes.has(key)) {\n            const result = this.nodes.get(key);\n            if (result) {\n                this.bubble(result);\n            }\n            return;\n        }\n        const node = new LRUNode(key, value);\n        this.insertHead(node);\n        if (this.nodes.size === this.limit && this.tail) {\n            this.delete(this.tail.key);\n        }\n        this.nodes.set(key, node);\n    }\n    delete(key) {\n        const result = this.nodes.get(key);\n        if (result) {\n            this.removeNode(result);\n            this.nodes.delete(key);\n        }\n    }\n    insertHead(node) {\n        if (this.head) {\n            node.next = this.head;\n            this.head.prev = node;\n        } else {\n            this.tail = node;\n            node.next = void 0;\n        }\n        node.prev = void 0;\n        this.head = node;\n    }\n    removeNode(node) {\n        if (node.prev) {\n            node.prev.next = node.next;\n        }\n        if (node.next) {\n            node.next.prev = node.prev;\n        }\n        if (node === this.tail) {\n            this.tail = node.prev;\n            if (this.tail) {\n                this.tail.next = void 0;\n            }\n        }\n    }\n    insertBefore(node, newNode) {\n        newNode.next = node;\n        if (node.prev) {\n            newNode.prev = node.prev;\n            node.prev.next = newNode;\n        } else {\n            newNode.prev = void 0;\n            this.head = newNode;\n        }\n        node.prev = newNode;\n    }\n    bubble(node) {\n        if (node.prev) {\n            this.removeNode(node);\n            this.insertBefore(node.prev, node);\n        }\n    }\n};\n// src/core/worker/deferred.ts\nfunction createDeferred() {\n    let resolve;\n    let reject;\n    return {\n        promise: new Promise((res, rej)=>{\n            resolve = res;\n            reject = rej;\n        }),\n        resolve (value) {\n            resolve(value);\n        },\n        reject (value) {\n            reject(value);\n        }\n    };\n}\n// src/core/worker/smol.ts\nfunction setupWorker(setup) {\n    const callback = setup();\n    function success(id, data) {\n        self.postMessage([\n            id,\n            true,\n            data\n        ]);\n    }\n    function failure(id, data) {\n        self.postMessage([\n            id,\n            false,\n            data\n        ]);\n    }\n    self.addEventListener(\"message\", (event)=>{\n        const [id, data] = event.data;\n        try {\n            Promise.resolve(callback(data)).then((res)=>success(id, res), (res)=>failure(id, res));\n        } catch (error) {\n            failure(id, error);\n        }\n    });\n}\nfunction createWorker(callback) {\n    const template = `(${setupWorker.toString()})(${callback.toString()})`;\n    const url = URL.createObjectURL(new Blob([\n        template\n    ]));\n    const worker2 = new Worker(url);\n    return worker2;\n}\nvar SmolWorker = class {\n    constructor(callback){\n        this.callback = callback;\n        this.deferredMap = /* @__PURE__ */ new Map();\n        this.count = 0;\n        this.sync = false;\n    }\n    setupWorker(worker2) {\n        worker2.addEventListener(\"message\", (event)=>{\n            const [id, flag, data] = event.data;\n            const deferred = this.deferredMap.get(id);\n            if (deferred) {\n                if (flag) {\n                    deferred.resolve(data);\n                } else {\n                    deferred.reject(data);\n                }\n                this.deferredMap.delete(id);\n            }\n        });\n    }\n    async call(data, options) {\n        if (this.sync) {\n            if (!this.setup) {\n                this.setup = this.callback();\n            }\n            return this.setup(data);\n        }\n        if (!this.worker) {\n            this.worker = createWorker(this.callback);\n            this.setupWorker(this.worker);\n        }\n        const deferred = createDeferred();\n        const id = this.count++;\n        this.deferredMap.set(id, deferred);\n        this.worker.postMessage([\n            id,\n            data\n        ], {\n            transfer: options?.transfer\n        });\n        return deferred.promise;\n    }\n    destroy() {\n        this.deferredMap.clear();\n        this.worker?.terminate();\n    }\n};\n// src/core/worker/smol-extension.ts\nvar SmolWorkerExtension = class {\n    constructor(callback){\n        this.callback = callback;\n        this.sync = true;\n    }\n    async call(data, _options) {\n        if (!this.setup) {\n            this.setup = this.callback();\n        }\n        return this.setup(data);\n    }\n    destroy() {}\n};\n// src/web/utils/outline-worker.ts\nfunction setupOutlineWorker() {\n    const MONO_FONT2 = \"Menlo,Consolas,Monaco,Liberation Mono,Lucida Console,monospace\";\n    let ctx2;\n    let Reason;\n    ((Reason2)=>{\n        Reason2[Reason2[\"Commit\"] = 1] = \"Commit\";\n        Reason2[Reason2[\"Unstable\"] = 2] = \"Unstable\";\n        Reason2[Reason2[\"Unnecessary\"] = 4] = \"Unnecessary\";\n    })(Reason || (Reason = {}));\n    return async (action)=>{\n        switch(action.type){\n            case \"set-canvas\":\n                {\n                    const current = action.payload.getContext(\"2d\");\n                    if (current) {\n                        ctx2 = current;\n                    }\n                }\n                break;\n            case \"resize\":\n                if (ctx2) {\n                    const { dpi, width, height } = action.payload;\n                    ctx2.canvas.width = width;\n                    ctx2.canvas.height = height;\n                    ctx2.resetTransform();\n                    ctx2.scale(dpi, dpi);\n                }\n                break;\n            case \"fade-out-outline\":\n                if (ctx2) {\n                    const { dpi, drawingQueue, mergedLabels } = action.payload;\n                    ctx2.clearRect(0, 0, ctx2.canvas.width / dpi, ctx2.canvas.height / dpi);\n                    ctx2.save();\n                    for(let i = 0, len = drawingQueue.length; i < len; i++){\n                        const { rect, color, alpha, fillAlpha } = drawingQueue[i];\n                        const rgb = `${color.r},${color.g},${color.b}`;\n                        ctx2.strokeStyle = `rgba(${rgb},${alpha})`;\n                        ctx2.lineWidth = 1;\n                        ctx2.fillStyle = `rgba(${rgb},${fillAlpha})`;\n                        ctx2.beginPath();\n                        ctx2.rect(rect.x, rect.y, rect.width, rect.height);\n                        ctx2.stroke();\n                        ctx2.fill();\n                    }\n                    ctx2.restore();\n                    for(let i = 0, len = mergedLabels.length; i < len; i++){\n                        const { alpha, rect, color, reasons, labelText } = mergedLabels[i];\n                        const conditionalText = reasons & 4 /* Unnecessary */  ? `${labelText}\\u26A0\\uFE0F` : labelText;\n                        ctx2.save();\n                        ctx2.font = `11px ${MONO_FONT2}`;\n                        const textMetrics = ctx2.measureText(conditionalText);\n                        const textWidth = textMetrics.width;\n                        const textHeight = 11;\n                        const labelX = rect.x;\n                        const labelY = rect.y - textHeight - 4;\n                        ctx2.fillStyle = `rgba(${color.r},${color.g},${color.b},${alpha})`;\n                        ctx2.fillRect(labelX, labelY, textWidth + 4, textHeight + 4);\n                        ctx2.fillStyle = `rgba(255,255,255,${alpha})`;\n                        ctx2.fillText(conditionalText, labelX + 2, labelY + textHeight);\n                    }\n                }\n                break;\n        }\n    };\n}\nvar createWorker2 = ()=>{\n    const useExtensionWorker = readLocalStorage(\"use-extension-worker\");\n    removeLocalStorage(\"use-extension-worker\");\n    if (useExtensionWorker) {\n        return new SmolWorkerExtension(setupOutlineWorker);\n    }\n    return new SmolWorker(setupOutlineWorker);\n};\nvar outlineWorker = createWorker2();\n// src/web/utils/outline.ts\nvar DEFAULT_THROTTLE_TIME = 32;\nfunction incrementFrameId() {\n    requestAnimationFrame(incrementFrameId);\n}\nif (false) {}\nvar recalcOutlines = throttle(async ()=>{\n    const { activeOutlines: activeOutlines2 } = ReactScanInternals;\n    const domNodes = [];\n    for (const activeOutline of activeOutlines2.values()){\n        domNodes.push(activeOutline.domNode);\n    }\n    const rectMap = await batchGetBoundingRects(domNodes);\n    for (const activeOutline of activeOutlines2.values()){\n        const rect = rectMap.get(activeOutline.domNode);\n        if (!rect) {\n            continue;\n        }\n        activeOutline.target = rect;\n    }\n}, DEFAULT_THROTTLE_TIME);\nvar batchGetBoundingRects = (elements)=>{\n    return new Promise((resolve)=>{\n        const results = /* @__PURE__ */ new Map();\n        const observer = new IntersectionObserver((entries)=>{\n            for (const entry of entries){\n                const element = entry.target;\n                const bounds = entry.boundingClientRect;\n                results.set(element, bounds);\n            }\n            observer.disconnect();\n            resolve(results);\n        });\n        for (const element of elements){\n            observer.observe(element);\n        }\n    });\n};\nvar RENDER_PHASE_STRING_TO_ENUM = {\n    mount: 1 /* Mount */ ,\n    update: 2 /* Update */ ,\n    unmount: 4 /* Unmount */ \n};\nvar textMeasurementCache = new LRUMap(100);\n// src/web/views/inspector/timeline/utils.ts\n\n// src/web/views/inspector/utils.ts\n\n// src/web/views/inspector/index.tsx\n\n\n// src/web/state.ts\n\n// src/web/constants.ts\nvar SAFE_AREA = 24;\nvar MIN_SIZE = {\n    width: 550,\n    height: 350,\n    initialHeight: 400\n};\nvar MIN_CONTAINER_WIDTH = 240;\nvar LOCALSTORAGE_KEY = \"react-scan-widget-settings-v2\";\n// src/web/views/widget/index.tsx\n\n\n// src/web/views/inspector/overlay/index.tsx\n\n\n\nvar ANIMATION_CONFIG = {\n    frameInterval: 1e3 / 60,\n    speeds: {\n        fast: 0.51,\n        slow: 0.1,\n        off: 0\n    }\n};\nvar OVERLAY_DPR =  false ? 0 : 1;\nvar ScanOverlay = ()=>{\n    const refCanvas = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refEventCatcher = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refCurrentRect = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refCurrentLockIconRect = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refLastHoveredElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refRafId = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const refTimeout = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const refCleanupMap = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(/* @__PURE__ */ new Map());\n    const refIsFadingOut = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const refLastFrameTime = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const drawLockIcon = (ctx2, x, y, size)=>{\n        ctx2.save();\n        ctx2.strokeStyle = \"white\";\n        ctx2.fillStyle = \"white\";\n        ctx2.lineWidth = 1.5;\n        const shackleWidth = size * 0.6;\n        const shackleHeight = size * 0.5;\n        const shackleX = x + (size - shackleWidth) / 2;\n        const shackleY = y;\n        ctx2.beginPath();\n        ctx2.arc(shackleX + shackleWidth / 2, shackleY + shackleHeight / 2, shackleWidth / 2, Math.PI, 0, false);\n        ctx2.stroke();\n        const bodyWidth = size * 0.8;\n        const bodyHeight = size * 0.5;\n        const bodyX = x + (size - bodyWidth) / 2;\n        const bodyY = y + shackleHeight / 2;\n        ctx2.fillRect(bodyX, bodyY, bodyWidth, bodyHeight);\n        ctx2.restore();\n    };\n    const drawStatsPill = (ctx2, rect, kind, fiber)=>{\n        if (!fiber) return;\n        const pillHeight = 24;\n        const pillPadding = 8;\n        const componentName = (fiber?.type && (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type)) ?? \"Unknown\";\n        const text = componentName;\n        ctx2.save();\n        ctx2.font = \"12px system-ui, -apple-system, sans-serif\";\n        const textMetrics = ctx2.measureText(text);\n        const textWidth = textMetrics.width;\n        const lockIconSize = kind === \"locked\" ? 14 : 0;\n        const lockIconPadding = kind === \"locked\" ? 6 : 0;\n        const pillWidth = textWidth + pillPadding * 2 + lockIconSize + lockIconPadding;\n        const pillX = rect.left;\n        const pillY = rect.top - pillHeight - 4;\n        ctx2.fillStyle = \"rgb(37, 37, 38, .75)\";\n        ctx2.beginPath();\n        ctx2.roundRect(pillX, pillY, pillWidth, pillHeight, 3);\n        ctx2.fill();\n        if (kind === \"locked\") {\n            const lockX = pillX + pillPadding;\n            const lockY = pillY + (pillHeight - lockIconSize) / 2 + 2;\n            drawLockIcon(ctx2, lockX, lockY, lockIconSize);\n            refCurrentLockIconRect.current = {\n                x: lockX,\n                y: lockY,\n                width: lockIconSize,\n                height: lockIconSize\n            };\n        } else {\n            refCurrentLockIconRect.current = null;\n        }\n        ctx2.fillStyle = \"white\";\n        ctx2.textBaseline = \"middle\";\n        const textX = pillX + pillPadding + (kind === \"locked\" ? lockIconSize + lockIconPadding : 0);\n        ctx2.fillText(text, textX, pillY + pillHeight / 2);\n        ctx2.restore();\n    };\n    const drawRect = (canvas2, ctx2, kind, fiber)=>{\n        if (!refCurrentRect.current) return;\n        const rect = refCurrentRect.current;\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n        ctx2.strokeStyle = \"rgba(142, 97, 227, 0.5)\";\n        ctx2.fillStyle = \"rgba(173, 97, 230, 0.10)\";\n        if (kind === \"locked\") {\n            ctx2.setLineDash([]);\n        } else {\n            ctx2.setLineDash([\n                4\n            ]);\n        }\n        ctx2.lineWidth = 1;\n        ctx2.fillRect(rect.left, rect.top, rect.width, rect.height);\n        ctx2.strokeRect(rect.left, rect.top, rect.width, rect.height);\n        drawStatsPill(ctx2, rect, kind, fiber);\n    };\n    const animate = (canvas2, ctx2, targetRect, kind, parentCompositeFiber, onComplete)=>{\n        const speed = ReactScanInternals.options.value.animationSpeed;\n        const t = ANIMATION_CONFIG.speeds[speed] ?? ANIMATION_CONFIG.speeds.off;\n        const animationFrame = (timestamp)=>{\n            if (timestamp - refLastFrameTime.current < ANIMATION_CONFIG.frameInterval) {\n                refRafId.current = requestAnimationFrame(animationFrame);\n                return;\n            }\n            refLastFrameTime.current = timestamp;\n            if (!refCurrentRect.current) {\n                cancelAnimationFrame(refRafId.current);\n                return;\n            }\n            refCurrentRect.current = {\n                left: lerp(refCurrentRect.current.left, targetRect.left, t),\n                top: lerp(refCurrentRect.current.top, targetRect.top, t),\n                width: lerp(refCurrentRect.current.width, targetRect.width, t),\n                height: lerp(refCurrentRect.current.height, targetRect.height, t)\n            };\n            drawRect(canvas2, ctx2, kind, parentCompositeFiber);\n            const stillMoving = Math.abs(refCurrentRect.current.left - targetRect.left) > 0.1 || Math.abs(refCurrentRect.current.top - targetRect.top) > 0.1 || Math.abs(refCurrentRect.current.width - targetRect.width) > 0.1 || Math.abs(refCurrentRect.current.height - targetRect.height) > 0.1;\n            if (stillMoving) {\n                refRafId.current = requestAnimationFrame(animationFrame);\n            } else {\n                refCurrentRect.current = targetRect;\n                drawRect(canvas2, ctx2, kind, parentCompositeFiber);\n                cancelAnimationFrame(refRafId.current);\n                ctx2.restore();\n                onComplete?.();\n            }\n        };\n        cancelAnimationFrame(refRafId.current);\n        clearTimeout(refTimeout.current);\n        refRafId.current = requestAnimationFrame(animationFrame);\n        refTimeout.current = setTimeout(()=>{\n            cancelAnimationFrame(refRafId.current);\n            refCurrentRect.current = targetRect;\n            drawRect(canvas2, ctx2, kind, parentCompositeFiber);\n            ctx2.restore();\n            onComplete?.();\n        }, 1e3);\n    };\n    const setupOverlayAnimation = (canvas2, ctx2, targetRect, kind, parentCompositeFiber)=>{\n        ctx2.save();\n        if (!refCurrentRect.current) {\n            refCurrentRect.current = targetRect;\n            drawRect(canvas2, ctx2, kind, parentCompositeFiber);\n            ctx2.restore();\n            return;\n        }\n        animate(canvas2, ctx2, targetRect, kind, parentCompositeFiber);\n    };\n    const drawHoverOverlay = async (overlayElement, canvas2, ctx2, kind)=>{\n        if (!overlayElement || !canvas2 || !ctx2) return;\n        const { parentCompositeFiber } = getCompositeComponentFromElement(overlayElement);\n        const targetRect = await getAssociatedFiberRect(overlayElement);\n        if (!parentCompositeFiber || !targetRect) return;\n        setupOverlayAnimation(canvas2, ctx2, targetRect, kind, parentCompositeFiber);\n    };\n    const unsubscribeAll = ()=>{\n        for (const cleanup2 of refCleanupMap.current.values()){\n            cleanup2?.();\n        }\n    };\n    const cleanupCanvas = (canvas2)=>{\n        const ctx2 = canvas2.getContext(\"2d\");\n        if (ctx2) {\n            ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n        }\n        refCurrentRect.current = null;\n        refCurrentLockIconRect.current = null;\n        refLastHoveredElement.current = null;\n        canvas2.classList.remove(\"fade-in\");\n        refIsFadingOut.current = false;\n    };\n    const startFadeOut = (onComplete)=>{\n        if (!refCanvas.current || refIsFadingOut.current) return;\n        const handleTransitionEnd = (e)=>{\n            if (!refCanvas.current || e.propertyName !== \"opacity\" || !refIsFadingOut.current) {\n                return;\n            }\n            refCanvas.current.removeEventListener(\"transitionend\", handleTransitionEnd);\n            cleanupCanvas(refCanvas.current);\n            onComplete?.();\n        };\n        const existingListener = refCleanupMap.current.get(\"fade-out\");\n        if (existingListener) {\n            existingListener();\n            refCleanupMap.current.delete(\"fade-out\");\n        }\n        refCanvas.current.addEventListener(\"transitionend\", handleTransitionEnd);\n        refCleanupMap.current.set(\"fade-out\", ()=>{\n            refCanvas.current?.removeEventListener(\"transitionend\", handleTransitionEnd);\n        });\n        refIsFadingOut.current = true;\n        refCanvas.current.classList.remove(\"fade-in\");\n        requestAnimationFrame(()=>{\n            refCanvas.current?.classList.add(\"fade-out\");\n        });\n    };\n    const startFadeIn = ()=>{\n        if (!refCanvas.current) return;\n        refIsFadingOut.current = false;\n        refCanvas.current.classList.remove(\"fade-out\");\n        requestAnimationFrame(()=>{\n            refCanvas.current?.classList.add(\"fade-in\");\n        });\n    };\n    const handleHoverableElement = (componentElement)=>{\n        if (componentElement === refLastHoveredElement.current) return;\n        refLastHoveredElement.current = componentElement;\n        if (nonVisualTags.has(componentElement.tagName)) {\n            startFadeOut();\n        } else {\n            startFadeIn();\n        }\n        Store.inspectState.value = {\n            kind: \"inspecting\",\n            hoveredDomElement: componentElement\n        };\n    };\n    const handleNonHoverableArea = ()=>{\n        if (!refCurrentRect.current || !refCanvas.current || refIsFadingOut.current) {\n            return;\n        }\n        startFadeOut();\n    };\n    const handleMouseMove = throttle((e)=>{\n        const state2 = Store.inspectState.peek();\n        if (state2.kind !== \"inspecting\" || !refEventCatcher.current) return;\n        refEventCatcher.current.style.pointerEvents = \"none\";\n        const element = document.elementFromPoint(e?.clientX ?? 0, e?.clientY ?? 0);\n        refEventCatcher.current.style.removeProperty(\"pointer-events\");\n        clearTimeout(refTimeout.current);\n        if (element && element !== refCanvas.current) {\n            const { parentCompositeFiber } = getCompositeComponentFromElement(element);\n            if (parentCompositeFiber) {\n                const componentElement = findComponentDOMNode(parentCompositeFiber);\n                if (componentElement) {\n                    handleHoverableElement(componentElement);\n                    return;\n                }\n            }\n        }\n        handleNonHoverableArea();\n    }, 32);\n    const isClickInLockIcon = (e, canvas2)=>{\n        const currentRect = refCurrentLockIconRect.current;\n        if (!currentRect) return false;\n        const rect = canvas2.getBoundingClientRect();\n        const scaleX = canvas2.width / rect.width;\n        const scaleY = canvas2.height / rect.height;\n        const x = (e.clientX - rect.left) * scaleX;\n        const y = (e.clientY - rect.top) * scaleY;\n        const adjustedX = x / OVERLAY_DPR;\n        const adjustedY = y / OVERLAY_DPR;\n        return adjustedX >= currentRect.x && adjustedX <= currentRect.x + currentRect.width && adjustedY >= currentRect.y && adjustedY <= currentRect.y + currentRect.height;\n    };\n    const handleLockIconClick = (state2)=>{\n        if (state2.kind === \"focused\") {\n            Store.inspectState.value = {\n                kind: \"inspecting\",\n                hoveredDomElement: state2.focusedDomElement\n            };\n        }\n    };\n    const handleElementClick = (e)=>{\n        const clickableElements = [\n            \"react-scan-inspect-element\",\n            \"react-scan-power\"\n        ];\n        if (e.target instanceof HTMLElement && clickableElements.includes(e.target.id)) {\n            return;\n        }\n        const tagName = refLastHoveredElement.current?.tagName;\n        if (tagName && nonVisualTags.has(tagName)) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        const element = refLastHoveredElement.current ?? document.elementFromPoint(e.clientX, e.clientY);\n        if (!element) return;\n        const clickedEl = e.composedPath().at(0);\n        if (clickedEl instanceof HTMLElement && clickableElements.includes(clickedEl.id)) {\n            const syntheticEvent = new MouseEvent(e.type, e);\n            syntheticEvent.__reactScanSyntheticEvent = true;\n            clickedEl.dispatchEvent(syntheticEvent);\n            return;\n        }\n        const { parentCompositeFiber } = getCompositeComponentFromElement(element);\n        if (!parentCompositeFiber) return;\n        const componentElement = findComponentDOMNode(parentCompositeFiber);\n        if (!componentElement) {\n            refLastHoveredElement.current = null;\n            Store.inspectState.value = {\n                kind: \"inspect-off\"\n            };\n            return;\n        }\n        Store.inspectState.value = {\n            kind: \"focused\",\n            focusedDomElement: componentElement,\n            fiber: parentCompositeFiber\n        };\n    };\n    const handleClick = (e)=>{\n        if (e.__reactScanSyntheticEvent) {\n            return;\n        }\n        const state2 = Store.inspectState.peek();\n        const canvas2 = refCanvas.current;\n        if (!canvas2 || !refEventCatcher.current) return;\n        if (isClickInLockIcon(e, canvas2)) {\n            e.preventDefault();\n            e.stopPropagation();\n            handleLockIconClick(state2);\n            return;\n        }\n        if (state2.kind === \"inspecting\") {\n            handleElementClick(e);\n        }\n    };\n    const handleKeyDown = (e)=>{\n        if (e.key !== \"Escape\") return;\n        const state2 = Store.inspectState.peek();\n        const canvas2 = refCanvas.current;\n        if (!canvas2) return;\n        if (document.activeElement?.id === \"react-scan-root\") {\n            return;\n        }\n        if (state2.kind === \"focused\" || state2.kind === \"inspecting\") {\n            e.preventDefault();\n            e.stopPropagation();\n            switch(state2.kind){\n                case \"focused\":\n                    {\n                        startFadeIn();\n                        refCurrentRect.current = null;\n                        refLastHoveredElement.current = state2.focusedDomElement;\n                        Store.inspectState.value = {\n                            kind: \"inspecting\",\n                            hoveredDomElement: state2.focusedDomElement\n                        };\n                        break;\n                    }\n                case \"inspecting\":\n                    {\n                        startFadeOut(()=>{\n                            signalIsSettingsOpen.value = false;\n                            Store.inspectState.value = {\n                                kind: \"inspect-off\"\n                            };\n                        });\n                        break;\n                    }\n            }\n        }\n    };\n    const handleStateChange = (state2, canvas2, ctx2)=>{\n        refCleanupMap.current.get(state2.kind)?.();\n        if (refEventCatcher.current) {\n            if (state2.kind !== \"inspecting\") {\n                refEventCatcher.current.style.pointerEvents = \"none\";\n            }\n        }\n        if (refRafId.current) {\n            cancelAnimationFrame(refRafId.current);\n        }\n        let unsubReport;\n        switch(state2.kind){\n            case \"inspect-off\":\n                startFadeOut();\n                return;\n            case \"inspecting\":\n                drawHoverOverlay(state2.hoveredDomElement, canvas2, ctx2, \"inspecting\");\n                break;\n            case \"focused\":\n                if (!state2.focusedDomElement) return;\n                if (refLastHoveredElement.current !== state2.focusedDomElement) {\n                    refLastHoveredElement.current = state2.focusedDomElement;\n                }\n                drawHoverOverlay(state2.focusedDomElement, canvas2, ctx2, \"locked\");\n                unsubReport = Store.lastReportTime.subscribe(()=>{\n                    if (refRafId.current && refCurrentRect.current) {\n                        const { parentCompositeFiber } = getCompositeComponentFromElement(state2.focusedDomElement);\n                        if (parentCompositeFiber) {\n                            drawHoverOverlay(state2.focusedDomElement, canvas2, ctx2, \"locked\");\n                        }\n                    }\n                });\n                if (unsubReport) {\n                    refCleanupMap.current.set(state2.kind, unsubReport);\n                }\n                break;\n        }\n    };\n    const updateCanvasSize = (canvas2, ctx2)=>{\n        const rect = canvas2.getBoundingClientRect();\n        canvas2.width = rect.width * OVERLAY_DPR;\n        canvas2.height = rect.height * OVERLAY_DPR;\n        ctx2.scale(OVERLAY_DPR, OVERLAY_DPR);\n        ctx2.save();\n    };\n    const handleResizeOrScroll = ()=>{\n        const state2 = Store.inspectState.peek();\n        const canvas2 = refCanvas.current;\n        if (!canvas2) return;\n        const ctx2 = canvas2?.getContext(\"2d\");\n        if (!ctx2) return;\n        cancelAnimationFrame(refRafId.current);\n        clearTimeout(refTimeout.current);\n        updateCanvasSize(canvas2, ctx2);\n        refCurrentRect.current = null;\n        if (state2.kind === \"focused\" && state2.focusedDomElement) {\n            drawHoverOverlay(state2.focusedDomElement, canvas2, ctx2, \"locked\");\n        } else if (state2.kind === \"inspecting\" && state2.hoveredDomElement) {\n            drawHoverOverlay(state2.hoveredDomElement, canvas2, ctx2, \"inspecting\");\n        }\n    };\n    const handlePointerDown = (e)=>{\n        const state2 = Store.inspectState.peek();\n        const canvas2 = refCanvas.current;\n        if (!canvas2) return;\n        if (state2.kind === \"inspecting\" || isClickInLockIcon(e, canvas2)) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    };\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ScanOverlay.useEffect\": ()=>{\n            const canvas2 = refCanvas.current;\n            if (!canvas2) return;\n            const ctx2 = canvas2?.getContext(\"2d\");\n            if (!ctx2) return;\n            updateCanvasSize(canvas2, ctx2);\n            const unSubState = Store.inspectState.subscribe({\n                \"ScanOverlay.useEffect.unSubState\": (state2)=>{\n                    handleStateChange(state2, canvas2, ctx2);\n                }\n            }[\"ScanOverlay.useEffect.unSubState\"]);\n            window.addEventListener(\"scroll\", handleResizeOrScroll, {\n                passive: true\n            });\n            window.addEventListener(\"resize\", handleResizeOrScroll, {\n                passive: true\n            });\n            document.addEventListener(\"mousemove\", handleMouseMove, {\n                passive: true,\n                capture: true\n            });\n            document.addEventListener(\"pointerdown\", handlePointerDown, {\n                capture: true\n            });\n            document.addEventListener(\"click\", handleClick, {\n                capture: true\n            });\n            document.addEventListener(\"keydown\", handleKeyDown, {\n                capture: true\n            });\n            return ({\n                \"ScanOverlay.useEffect\": ()=>{\n                    unsubscribeAll();\n                    unSubState();\n                    window.removeEventListener(\"scroll\", handleResizeOrScroll);\n                    window.removeEventListener(\"resize\", handleResizeOrScroll);\n                    document.removeEventListener(\"mousemove\", handleMouseMove, {\n                        capture: true\n                    });\n                    document.removeEventListener(\"click\", handleClick, {\n                        capture: true\n                    });\n                    document.removeEventListener(\"pointerdown\", handlePointerDown, {\n                        capture: true\n                    });\n                    document.removeEventListener(\"keydown\", handleKeyDown, {\n                        capture: true\n                    });\n                    if (refRafId.current) {\n                        cancelAnimationFrame(refRafId.current);\n                    }\n                    clearTimeout(refTimeout.current);\n                }\n            })[\"ScanOverlay.useEffect\"];\n        }\n    }[\"ScanOverlay.useEffect\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                ref: refEventCatcher,\n                className: cn(\"fixed inset-0 w-screen h-screen\", \"z-[214748365]\"),\n                style: {\n                    pointerEvents: \"none\"\n                }\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"canvas\", {\n                ref: refCanvas,\n                dir: \"ltr\",\n                className: cn(\"react-scan-inspector-overlay\", \"fixed inset-0 w-screen h-screen\", \"pointer-events-none\", \"z-[214748367]\")\n            })\n        ]\n    });\n};\n// src/web/views/notifications/notifications.tsx\n\n\n// src/core/monitor/constants.ts\n\nvar isTest =  false || /**\n * @see https://stackoverflow.com/a/60491322\n */ // @ts-expect-error jest is a global in test\ntypeof jest !== \"undefined\";\n// src/core/monitor/utils.ts\nvar not_globally_unique_generateId = ()=>{\n    if (true) {\n        return \"0\";\n    }\n    if (window.reactScanIdCounter === void 0) {\n        window.reactScanIdCounter = 0;\n    }\n    return `${++window.reactScanIdCounter}`;\n};\n// src/core/notifications/event-tracking.ts\n\n// src/core/create-store.ts\nvar createStoreImpl = (createState)=>{\n    let state2;\n    const listeners = /* @__PURE__ */ new Set();\n    const setState = (partial, replace)=>{\n        const nextState = typeof partial === \"function\" ? partial(state2) : partial;\n        if (!Object.is(nextState, state2)) {\n            const previousState = state2;\n            state2 = replace ?? (typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state2, nextState);\n            listeners.forEach((listener)=>listener(state2, previousState));\n        }\n    };\n    const getState = ()=>state2;\n    const getInitialState = ()=>initialState2;\n    const subscribe = (selectorOrListener, listener)=>{\n        let selector;\n        let actualListener;\n        if (listener) {\n            selector = selectorOrListener;\n            actualListener = listener;\n        } else {\n            actualListener = selectorOrListener;\n        }\n        let currentSlice = selector ? selector(state2) : void 0;\n        const wrappedListener = (newState, previousState)=>{\n            if (selector) {\n                const nextSlice = selector(newState);\n                const prevSlice = selector(previousState);\n                if (!Object.is(currentSlice, nextSlice)) {\n                    currentSlice = nextSlice;\n                    actualListener(nextSlice, prevSlice);\n                }\n            } else {\n                actualListener(newState, previousState);\n            }\n        };\n        listeners.add(wrappedListener);\n        return ()=>listeners.delete(wrappedListener);\n    };\n    const api = {\n        setState,\n        getState,\n        getInitialState,\n        subscribe\n    };\n    const initialState2 = state2 = createState(setState, getState, api);\n    return api;\n};\nvar createStore = (createState)=>createState ? createStoreImpl(createState) : createStoreImpl;\n// src/core/notifications/performance-utils.ts\nvar THROW_INVARIANTS = false;\nvar invariantError = (message)=>{\n    if (THROW_INVARIANTS) {\n        throw new Error(message);\n    }\n};\nvar iife = (fn)=>fn();\nvar BoundedArray = class _BoundedArray extends Array {\n    constructor(capacity = 25){\n        super();\n        this.capacity = capacity;\n    }\n    push(...items) {\n        const result = super.push(...items);\n        while(this.length > this.capacity){\n            this.shift();\n        }\n        return result;\n    }\n    // do not couple capacity with a default param, it must be explicit\n    static fromArray(array, capacity) {\n        const arr = new _BoundedArray(capacity);\n        arr.push(...array);\n        return arr;\n    }\n};\n// src/core/notifications/interaction-store.ts\nvar Store2 = class {\n    constructor(initialValue){\n        this.subscribers = /* @__PURE__ */ new Set();\n        this.currentValue = initialValue;\n    }\n    subscribe(subscriber) {\n        this.subscribers.add(subscriber);\n        subscriber(this.currentValue);\n        return ()=>{\n            this.subscribers.delete(subscriber);\n        };\n    }\n    setState(data) {\n        this.currentValue = data;\n        this.subscribers.forEach((subscriber)=>subscriber(data));\n    }\n    getCurrentState() {\n        return this.currentValue;\n    }\n};\nvar MAX_INTERACTION_BATCH = 150;\nvar interactionStore = new Store2(new BoundedArray(MAX_INTERACTION_BATCH));\n// src/core/notifications/performance.ts\n\n// src/core/notifications/performance-store.ts\nvar MAX_CHANNEL_SIZE = 50;\nvar PerformanceEntryChannels = class {\n    constructor(){\n        this.channels = {};\n    }\n    publish(item, to, createIfNoChannel = true) {\n        const existingChannel = this.channels[to];\n        if (!existingChannel) {\n            if (!createIfNoChannel) {\n                return;\n            }\n            this.channels[to] = {\n                callbacks: new BoundedArray(MAX_CHANNEL_SIZE),\n                state: new BoundedArray(MAX_CHANNEL_SIZE)\n            };\n            this.channels[to].state.push(item);\n            return;\n        }\n        existingChannel.state.push(item);\n        existingChannel.callbacks.forEach((cb)=>cb(item));\n    }\n    getAvailableChannels() {\n        return BoundedArray.fromArray(Object.keys(this.channels), MAX_CHANNEL_SIZE);\n    }\n    subscribe(to, cb, dropFirst = false) {\n        const defer = ()=>{\n            if (!dropFirst) {\n                this.channels[to].state.forEach((item)=>{\n                    cb(item);\n                });\n            }\n            return ()=>{\n                const filtered = this.channels[to].callbacks.filter((subscribed)=>subscribed !== cb);\n                this.channels[to].callbacks = BoundedArray.fromArray(filtered, MAX_CHANNEL_SIZE);\n            };\n        };\n        const existing = this.channels[to];\n        if (!existing) {\n            this.channels[to] = {\n                callbacks: new BoundedArray(MAX_CHANNEL_SIZE),\n                state: new BoundedArray(MAX_CHANNEL_SIZE)\n            };\n            this.channels[to].callbacks.push(cb);\n            return defer();\n        }\n        existing.callbacks.push(cb);\n        return defer();\n    }\n    updateChannelState(channel, updater, createIfNoChannel = true) {\n        const existingChannel = this.channels[channel];\n        if (!existingChannel) {\n            if (!createIfNoChannel) {\n                return;\n            }\n            const state2 = new BoundedArray(MAX_CHANNEL_SIZE);\n            const newChannel = {\n                callbacks: new BoundedArray(MAX_CHANNEL_SIZE),\n                state: state2\n            };\n            this.channels[channel] = newChannel;\n            newChannel.state = updater(state2);\n            return;\n        }\n        existingChannel.state = updater(existingChannel.state);\n    }\n    getChannelState(channel) {\n        return this.channels[channel].state ?? new BoundedArray(MAX_CHANNEL_SIZE);\n    }\n};\nvar performanceEntryChannels = new PerformanceEntryChannels();\n// src/core/notifications/performance.ts\nvar DEFAULT_FILTERS = {\n    skipProviders: true,\n    skipHocs: true,\n    skipContainers: true,\n    skipMinified: true,\n    skipUtilities: true,\n    skipBoundaries: true\n};\nvar FILTER_PATTERNS = {\n    providers: [\n        /Provider$/,\n        /^Provider$/,\n        /^Context$/\n    ],\n    hocs: [\n        /^with[A-Z]/,\n        /^forward(?:Ref)?$/i,\n        /^Forward(?:Ref)?\\(/\n    ],\n    containers: [\n        /^(?:App)?Container$/,\n        /^Root$/,\n        /^ReactDev/\n    ],\n    utilities: [\n        /^Fragment$/,\n        /^Suspense$/,\n        /^ErrorBoundary$/,\n        /^Portal$/,\n        /^Consumer$/,\n        /^Layout$/,\n        /^Router/,\n        /^Hydration/\n    ],\n    boundaries: [\n        /^Boundary$/,\n        /Boundary$/,\n        /^Provider$/,\n        /Provider$/\n    ]\n};\nvar shouldIncludeInPath = (name, filters = DEFAULT_FILTERS)=>{\n    const patternsToCheck = [];\n    if (filters.skipProviders) patternsToCheck.push(...FILTER_PATTERNS.providers);\n    if (filters.skipHocs) patternsToCheck.push(...FILTER_PATTERNS.hocs);\n    if (filters.skipContainers) patternsToCheck.push(...FILTER_PATTERNS.containers);\n    if (filters.skipUtilities) patternsToCheck.push(...FILTER_PATTERNS.utilities);\n    if (filters.skipBoundaries) patternsToCheck.push(...FILTER_PATTERNS.boundaries);\n    return !patternsToCheck.some((pattern)=>pattern.test(name));\n};\nvar minifiedPatterns = [\n    /^[a-z]$/,\n    // Single lowercase letter\n    /^[a-z][0-9]$/,\n    // Lowercase letter followed by number\n    /^_+$/,\n    // Just underscores\n    /^[A-Za-z][_$]$/,\n    // Letter followed by underscore or dollar\n    /^[a-z]{1,2}$/\n];\nvar isMinified = (name)=>{\n    if (!name || typeof name !== \"string\") {\n        return true;\n    }\n    for(let i = 0; i < minifiedPatterns.length; i++){\n        if (minifiedPatterns[i].test(name)) return true;\n    }\n    const hasNoVowels = !/[aeiou]/i.test(name);\n    const hasMostlyNumbers = (name.match(/\\d/g)?.length ?? 0) > name.length / 2;\n    const isSingleWordLowerCase = /^[a-z]+$/.test(name);\n    const hasRandomLookingChars = /[$_]{2,}/.test(name);\n    return Number(hasNoVowels) + Number(hasMostlyNumbers) + Number(isSingleWordLowerCase) + Number(hasRandomLookingChars) >= 2;\n};\nvar getInteractionPath = (fiber, filters = DEFAULT_FILTERS)=>{\n    if (!fiber) {\n        return [];\n    }\n    const stack = new Array();\n    let currentFiber = fiber;\n    while(currentFiber.return){\n        const name = getCleanComponentName(currentFiber.type);\n        if (name && !isMinified(name) && shouldIncludeInPath(name, filters)) {\n            stack.push(name);\n        }\n        currentFiber = currentFiber.return;\n    }\n    const fullPath = new Array(stack.length);\n    for(let i = 0; i < stack.length; i++){\n        fullPath[i] = stack[stack.length - i - 1];\n    }\n    return fullPath;\n};\nvar getCleanComponentName = (component)=>{\n    const name = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(component);\n    if (!name) return \"\";\n    return name.replace(/^(?:Memo|Forward(?:Ref)?|With.*?)\\((?<inner>.*?)\\)$/, \"$<inner>\");\n};\nvar getFirstNameFromAncestor = (fiber, accept = ()=>true)=>{\n    let curr = fiber;\n    while(curr){\n        const currName = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(curr.type);\n        if (currName && accept(currName)) {\n            return currName;\n        }\n        curr = curr.return;\n    }\n    return null;\n};\nvar unsubscribeTrackVisibilityChange;\nvar lastVisibilityHiddenAt = \"never-hidden\";\nvar trackVisibilityChange = ()=>{\n    unsubscribeTrackVisibilityChange?.();\n    const onVisibilityChange = ()=>{\n        if (document.hidden) {\n            lastVisibilityHiddenAt = Date.now();\n        }\n    };\n    document.addEventListener(\"visibilitychange\", onVisibilityChange);\n    unsubscribeTrackVisibilityChange = ()=>{\n        document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n};\nvar getInteractionType = (eventName)=>{\n    if ([\n        \"pointerup\",\n        \"click\"\n    ].includes(eventName)) {\n        return \"pointer\";\n    }\n    if (eventName.includes(\"key\")) {}\n    if ([\n        \"keydown\",\n        \"keyup\"\n    ].includes(eventName)) {\n        return \"keyboard\";\n    }\n    return null;\n};\nvar onEntryAnimationId = null;\nvar setupPerformanceListener = (onEntry)=>{\n    trackVisibilityChange();\n    const interactionMap = /* @__PURE__ */ new Map();\n    const interactionTargetMap = /* @__PURE__ */ new Map();\n    const processInteractionEntry = (entry)=>{\n        if (!entry.interactionId) return;\n        if (entry.interactionId && entry.target && !interactionTargetMap.has(entry.interactionId)) {\n            interactionTargetMap.set(entry.interactionId, entry.target);\n        }\n        if (entry.target) {\n            let current = entry.target;\n            while(current){\n                if (current.id === \"react-scan-toolbar-root\" || current.id === \"react-scan-root\") {\n                    return;\n                }\n                current = current.parentElement;\n            }\n        }\n        const existingInteraction = interactionMap.get(entry.interactionId);\n        if (existingInteraction) {\n            if (entry.duration > existingInteraction.latency) {\n                existingInteraction.entries = [\n                    entry\n                ];\n                existingInteraction.latency = entry.duration;\n            } else if (entry.duration === existingInteraction.latency && entry.startTime === existingInteraction.entries[0].startTime) {\n                existingInteraction.entries.push(entry);\n            }\n        } else {\n            const interactionType = getInteractionType(entry.name);\n            if (!interactionType) {\n                return;\n            }\n            const interaction = {\n                id: entry.interactionId,\n                latency: entry.duration,\n                entries: [\n                    entry\n                ],\n                target: entry.target,\n                type: interactionType,\n                startTime: entry.startTime,\n                endTime: Date.now(),\n                processingStart: entry.processingStart,\n                processingEnd: entry.processingEnd,\n                duration: entry.duration,\n                inputDelay: entry.processingStart - entry.startTime,\n                processingDuration: entry.processingEnd - entry.processingStart,\n                presentationDelay: entry.duration - (entry.processingEnd - entry.startTime),\n                // componentPath:\n                timestamp: Date.now(),\n                timeSinceTabInactive: lastVisibilityHiddenAt === \"never-hidden\" ? \"never-hidden\" : Date.now() - lastVisibilityHiddenAt,\n                visibilityState: document.visibilityState,\n                timeOrigin: performance.timeOrigin,\n                referrer: document.referrer\n            };\n            interactionMap.set(interaction.id, interaction);\n            if (!onEntryAnimationId) {\n                onEntryAnimationId = requestAnimationFrame(()=>{\n                    requestAnimationFrame(()=>{\n                        onEntry(interactionMap.get(interaction.id));\n                        onEntryAnimationId = null;\n                    });\n                });\n            }\n        }\n    };\n    const po = new PerformanceObserver((list)=>{\n        const entries = list.getEntries();\n        for(let i = 0, len = entries.length; i < len; i++){\n            const entry = entries[i];\n            processInteractionEntry(entry);\n        }\n    });\n    try {\n        po.observe({\n            type: \"event\",\n            buffered: true,\n            durationThreshold: 16\n        });\n        po.observe({\n            type: \"first-input\",\n            buffered: true\n        });\n    } catch  {}\n    return ()=>po.disconnect();\n};\nvar setupPerformancePublisher = ()=>{\n    return setupPerformanceListener((entry)=>{\n        performanceEntryChannels.publish({\n            kind: \"entry-received\",\n            entry\n        }, \"recording\");\n    });\n};\nvar MAX_INTERACTION_TASKS = 25;\nvar tasks = new BoundedArray(MAX_INTERACTION_TASKS);\nvar getAssociatedDetailedTimingInteraction = (entry, activeTasks)=>{\n    let closestTask = null;\n    for (const task of activeTasks){\n        if (task.type !== entry.type) {\n            continue;\n        }\n        if (closestTask === null) {\n            closestTask = task;\n            continue;\n        }\n        const getAbsoluteDiff = (task2, entry2)=>Math.abs(task2.startDateTime) - (entry2.startTime + entry2.timeOrigin);\n        if (getAbsoluteDiff(task, entry) < getAbsoluteDiff(closestTask, entry)) {\n            closestTask = task;\n        }\n    }\n    return closestTask;\n};\nvar listenForPerformanceEntryInteractions = (onComplete)=>{\n    const unsubscribe = performanceEntryChannels.subscribe(\"recording\", (event)=>{\n        const associatedDetailedInteraction = event.kind === \"auto-complete-race\" ? tasks.find((task)=>task.interactionUUID === event.interactionUUID) : getAssociatedDetailedTimingInteraction(event.entry, tasks);\n        if (!associatedDetailedInteraction) {\n            return;\n        }\n        const completedInteraction = associatedDetailedInteraction.completeInteraction(event);\n        onComplete(completedInteraction);\n    });\n    return unsubscribe;\n};\nvar trackDetailedTiming = ({ onMicroTask, onRAF, onTimeout, abort })=>{\n    queueMicrotask(()=>{\n        if (abort?.() === true) {\n            return;\n        }\n        if (!onMicroTask()) {\n            return;\n        }\n        requestAnimationFrame(()=>{\n            if (abort?.() === true) {\n                return;\n            }\n            if (!onRAF()) {\n                return;\n            }\n            setTimeout(()=>{\n                if (abort?.() === true) {\n                    return;\n                }\n                onTimeout();\n            }, 0);\n        });\n    });\n};\nvar getTargetInteractionDetails = (target)=>{\n    const associatedFiber = getFiberFromElement(target);\n    if (!associatedFiber) {\n        return;\n    }\n    let componentName = associatedFiber ? (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(associatedFiber?.type) : \"N/A\";\n    if (!componentName) {\n        componentName = getFirstNameFromAncestor(associatedFiber, (name)=>name.length > 2) ?? \"N/A\";\n    }\n    if (!componentName) {\n        return;\n    }\n    const componentPath = getInteractionPath(associatedFiber);\n    return {\n        componentPath,\n        childrenTree: {},\n        componentName\n    };\n};\nvar setupDetailedPointerTimingListener = (kind, options)=>{\n    let instrumentationIdInControl = null;\n    const getEvent = (info)=>{\n        switch(kind){\n            case \"pointer\":\n                {\n                    if (info.phase === \"start\") {\n                        return \"pointerup\";\n                    }\n                    if (info.target instanceof HTMLInputElement || info.target instanceof HTMLSelectElement) {\n                        return \"change\";\n                    }\n                    return \"click\";\n                }\n            case \"keyboard\":\n                {\n                    if (info.phase === \"start\") {\n                        return \"keydown\";\n                    }\n                    return \"change\";\n                }\n        }\n    };\n    const lastInteractionRef = {\n        current: {\n            kind: \"uninitialized-stage\",\n            interactionUUID: crypto.randomUUID(),\n            // the first interaction uses this\n            stageStart: Date.now(),\n            interactionType: kind\n        }\n    };\n    const onInteractionStart = (e)=>{\n        const path = e.composedPath();\n        if (path.some((el)=>el instanceof Element && el.id === \"react-scan-toolbar-root\")) {\n            return;\n        }\n        if (Date.now() - lastInteractionRef.current.stageStart > 2e3) {\n            lastInteractionRef.current = {\n                kind: \"uninitialized-stage\",\n                interactionUUID: crypto.randomUUID(),\n                stageStart: Date.now(),\n                interactionType: kind\n            };\n        }\n        if (lastInteractionRef.current.kind !== \"uninitialized-stage\") {\n            return;\n        }\n        const pointerUpStart = performance.now();\n        options?.onStart?.(lastInteractionRef.current.interactionUUID);\n        const details = getTargetInteractionDetails(e.target);\n        if (!details) {\n            options?.onError?.(lastInteractionRef.current.interactionUUID);\n            return;\n        }\n        const fiberRenders = {};\n        const stopListeningForRenders = listenForRenders(fiberRenders);\n        lastInteractionRef.current = {\n            ...lastInteractionRef.current,\n            interactionType: kind,\n            blockingTimeStart: Date.now(),\n            childrenTree: details.childrenTree,\n            componentName: details.componentName,\n            componentPath: details.componentPath,\n            fiberRenders,\n            kind: \"interaction-start\",\n            interactionStartDetail: pointerUpStart,\n            stopListeningForRenders\n        };\n        const event = getEvent({\n            phase: \"end\",\n            target: e.target\n        });\n        document.addEventListener(event, onLastJS, {\n            once: true\n        });\n        requestAnimationFrame(()=>{\n            document.removeEventListener(event, onLastJS);\n        });\n    };\n    document.addEventListener(getEvent({\n        phase: \"start\"\n    }), onInteractionStart, {\n        capture: true\n    });\n    const onLastJS = (e, instrumentationId, abort)=>{\n        if (lastInteractionRef.current.kind !== \"interaction-start\" && instrumentationId === instrumentationIdInControl) {\n            if (kind === \"pointer\" && e.target instanceof HTMLSelectElement) {\n                lastInteractionRef.current = {\n                    kind: \"uninitialized-stage\",\n                    interactionUUID: crypto.randomUUID(),\n                    stageStart: Date.now(),\n                    interactionType: kind\n                };\n                return;\n            }\n            options?.onError?.(lastInteractionRef.current.interactionUUID);\n            lastInteractionRef.current = {\n                kind: \"uninitialized-stage\",\n                interactionUUID: crypto.randomUUID(),\n                stageStart: Date.now(),\n                interactionType: kind\n            };\n            invariantError(\"pointer -> click\");\n            return;\n        }\n        instrumentationIdInControl = instrumentationId;\n        trackDetailedTiming({\n            abort,\n            onMicroTask: ()=>{\n                if (lastInteractionRef.current.kind === \"uninitialized-stage\") {\n                    return false;\n                }\n                lastInteractionRef.current = {\n                    ...lastInteractionRef.current,\n                    kind: \"js-end-stage\",\n                    jsEndDetail: performance.now()\n                };\n                return true;\n            },\n            onRAF: ()=>{\n                if (lastInteractionRef.current.kind !== \"js-end-stage\" && lastInteractionRef.current.kind !== \"raf-stage\") {\n                    options?.onError?.(lastInteractionRef.current.interactionUUID);\n                    invariantError(\"bad transition to raf\");\n                    lastInteractionRef.current = {\n                        kind: \"uninitialized-stage\",\n                        interactionUUID: crypto.randomUUID(),\n                        stageStart: Date.now(),\n                        interactionType: kind\n                    };\n                    return false;\n                }\n                lastInteractionRef.current = {\n                    ...lastInteractionRef.current,\n                    kind: \"raf-stage\",\n                    rafStart: performance.now()\n                };\n                return true;\n            },\n            onTimeout: ()=>{\n                if (lastInteractionRef.current.kind !== \"raf-stage\") {\n                    options?.onError?.(lastInteractionRef.current.interactionUUID);\n                    lastInteractionRef.current = {\n                        kind: \"uninitialized-stage\",\n                        interactionUUID: crypto.randomUUID(),\n                        stageStart: Date.now(),\n                        interactionType: kind\n                    };\n                    invariantError(\"raf->timeout\");\n                    return;\n                }\n                const now = Date.now();\n                const timeoutStage = Object.freeze({\n                    ...lastInteractionRef.current,\n                    kind: \"timeout-stage\",\n                    blockingTimeEnd: now,\n                    commitEnd: performance.now()\n                });\n                lastInteractionRef.current = {\n                    kind: \"uninitialized-stage\",\n                    interactionUUID: crypto.randomUUID(),\n                    stageStart: now,\n                    interactionType: kind\n                };\n                let completed = false;\n                const completeInteraction = (event)=>{\n                    completed = true;\n                    const latency = event.kind === \"auto-complete-race\" ? event.detailedTiming.commitEnd - event.detailedTiming.interactionStartDetail : event.entry.latency;\n                    const finalInteraction = {\n                        detailedTiming: timeoutStage,\n                        latency,\n                        completedAt: Date.now(),\n                        flushNeeded: true\n                    };\n                    options?.onComplete?.(timeoutStage.interactionUUID, finalInteraction, event);\n                    const newTasks = tasks.filter((task2)=>task2.interactionUUID !== timeoutStage.interactionUUID);\n                    tasks = BoundedArray.fromArray(newTasks, MAX_INTERACTION_TASKS);\n                    return finalInteraction;\n                };\n                const task = {\n                    completeInteraction,\n                    endDateTime: Date.now(),\n                    startDateTime: timeoutStage.blockingTimeStart,\n                    type: kind,\n                    interactionUUID: timeoutStage.interactionUUID\n                };\n                tasks.push(task);\n                if (!isPerformanceEventAvailable()) {\n                    const newTasks = tasks.filter((task2)=>task2.interactionUUID !== timeoutStage.interactionUUID);\n                    tasks = BoundedArray.fromArray(newTasks, MAX_INTERACTION_TASKS);\n                    completeInteraction({\n                        kind: \"auto-complete-race\",\n                        // redundant\n                        detailedTiming: timeoutStage,\n                        interactionUUID: timeoutStage.interactionUUID\n                    });\n                } else {\n                    setTimeout(()=>{\n                        if (completed) {\n                            return;\n                        }\n                        completeInteraction({\n                            kind: \"auto-complete-race\",\n                            // redundant\n                            detailedTiming: timeoutStage,\n                            interactionUUID: timeoutStage.interactionUUID\n                        });\n                        const newTasks = tasks.filter((task2)=>task2.interactionUUID !== timeoutStage.interactionUUID);\n                        tasks = BoundedArray.fromArray(newTasks, MAX_INTERACTION_TASKS);\n                    }, 1e3);\n                }\n            }\n        });\n    };\n    const onKeyPress = (e)=>{\n        const id = crypto.randomUUID();\n        onLastJS(e, id, ()=>id !== instrumentationIdInControl);\n    };\n    if (kind === \"keyboard\") {\n        document.addEventListener(\"keypress\", onKeyPress);\n    }\n    return ()=>{\n        document.removeEventListener(getEvent({\n            phase: \"start\"\n        }), onInteractionStart, {\n            capture: true\n        });\n        document.removeEventListener(\"keypress\", onKeyPress);\n    };\n};\nvar getHostFromFiber = (fiber)=>{\n    return (0,bippy__WEBPACK_IMPORTED_MODULE_0__.traverseFiber)(fiber, (node)=>{\n        if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isHostFiber)(node)) {\n            return true;\n        }\n    })?.stateNode;\n};\nvar isPerformanceEventAvailable = ()=>{\n    return \"PerformanceEventTiming\" in globalThis;\n};\nvar listenForRenders = (fiberRenders)=>{\n    const listener = (fiber)=>{\n        const displayName = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type);\n        if (!displayName) {\n            return;\n        }\n        const existing = fiberRenders[displayName];\n        if (!existing) {\n            const parents = /* @__PURE__ */ new Set();\n            const parentCompositeName = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(getParentCompositeFiber(fiber));\n            if (parentCompositeName) {\n                parents.add(parentCompositeName);\n            }\n            const { selfTime: selfTime2, totalTime: totalTime2 } = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber);\n            const newChanges2 = collectInspectorDataWithoutCounts(fiber);\n            const emptySection2 = {\n                current: [],\n                changes: /* @__PURE__ */ new Set(),\n                changesCounts: /* @__PURE__ */ new Map()\n            };\n            const changes = {\n                fiberProps: newChanges2.fiberProps || emptySection2,\n                fiberState: newChanges2.fiberState || emptySection2,\n                fiberContext: newChanges2.fiberContext || emptySection2\n            };\n            fiberRenders[displayName] = {\n                renderCount: 1,\n                parents,\n                selfTime: selfTime2,\n                totalTime: totalTime2,\n                nodeInfo: [\n                    {\n                        element: getHostFromFiber(fiber),\n                        name: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type) ?? \"Unknown\",\n                        selfTime: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber).selfTime\n                    }\n                ],\n                changes\n            };\n            return;\n        }\n        const parentType = getParentCompositeFiber(fiber)?.[0]?.type;\n        if (parentType) {\n            const parentCompositeName = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(parentType);\n            if (parentCompositeName) {\n                existing.parents.add(parentCompositeName);\n            }\n        }\n        const { selfTime, totalTime } = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber);\n        const newChanges = collectInspectorDataWithoutCounts(fiber);\n        if (!newChanges) return;\n        const emptySection = {\n            current: [],\n            changes: /* @__PURE__ */ new Set(),\n            changesCounts: /* @__PURE__ */ new Map()\n        };\n        existing.changes = {\n            fiberProps: mergeSectionData(existing.changes?.fiberProps || emptySection, newChanges.fiberProps || emptySection),\n            fiberState: mergeSectionData(existing.changes?.fiberState || emptySection, newChanges.fiberState || emptySection),\n            fiberContext: mergeSectionData(existing.changes?.fiberContext || emptySection, newChanges.fiberContext || emptySection)\n        };\n        existing.renderCount += 1;\n        existing.selfTime += selfTime;\n        existing.totalTime += totalTime;\n        existing.nodeInfo.push({\n            element: getHostFromFiber(fiber),\n            name: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type) ?? \"Unknown\",\n            selfTime: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber).selfTime\n        });\n    };\n    Store.monitor.value.interactionListeningForRenders = listener;\n    return ()=>{\n        if (Store.monitor.value?.interactionListeningForRenders === listener) {\n            Store.monitor.value.interactionListeningForRenders = null;\n        }\n    };\n};\nvar mergeSectionData = (existing, newData)=>{\n    const mergedSection = {\n        current: [\n            ...existing.current\n        ],\n        changes: /* @__PURE__ */ new Set(),\n        changesCounts: /* @__PURE__ */ new Map()\n    };\n    for (const value of newData.current){\n        if (!mergedSection.current.some((item)=>item.name === value.name)) {\n            mergedSection.current.push(value);\n        }\n    }\n    for (const change of newData.changes){\n        if (typeof change === \"string\" || typeof change === \"number\") {\n            mergedSection.changes.add(change);\n            const existingCount = existing.changesCounts.get(change) || 0;\n            const newCount = newData.changesCounts.get(change) || 0;\n            mergedSection.changesCounts.set(change, existingCount + newCount);\n        }\n    }\n    return mergedSection;\n};\n// src/core/notifications/event-tracking.ts\nvar accumulatedFiberRendersOverTask = null;\nvar debugEventStore = createStore()((set)=>({\n        state: {\n            events: []\n        },\n        actions: {\n            addEvent: (event)=>{\n                set((store)=>({\n                        state: {\n                            events: [\n                                ...store.state.events,\n                                event\n                            ]\n                        }\n                    }));\n            },\n            clear: ()=>{\n                set({\n                    state: {\n                        events: []\n                    }\n                });\n            }\n        }\n    }));\nvar toolbarEventStore = createStore()((set, get)=>{\n    const listeners = /* @__PURE__ */ new Set();\n    return {\n        state: {\n            events: []\n        },\n        actions: {\n            addEvent: (event)=>{\n                listeners.forEach((listener)=>listener(event));\n                const events = [\n                    ...get().state.events,\n                    event\n                ];\n                const applyOverlapCheckToLongRenderEvent = (longRenderEvent, onOverlap)=>{\n                    const overlapsWith = events.find((event2)=>{\n                        if (event2.kind === \"long-render\") {\n                            return;\n                        }\n                        if (event2.id === longRenderEvent.id) {\n                            return;\n                        }\n                        if (longRenderEvent.data.startAt <= event2.data.startAt && longRenderEvent.data.endAt <= event2.data.endAt && longRenderEvent.data.endAt >= event2.data.startAt) {\n                            return true;\n                        }\n                        if (event2.data.startAt <= longRenderEvent.data.startAt && event2.data.endAt >= longRenderEvent.data.startAt) {\n                            return true;\n                        }\n                        if (longRenderEvent.data.startAt <= event2.data.startAt && longRenderEvent.data.endAt >= event2.data.endAt) {\n                            return true;\n                        }\n                    });\n                    if (overlapsWith) {\n                        onOverlap(overlapsWith);\n                    }\n                };\n                const toRemove = /* @__PURE__ */ new Set();\n                events.forEach((event2)=>{\n                    if (event2.kind === \"interaction\") return;\n                    applyOverlapCheckToLongRenderEvent(event2, ()=>{\n                        toRemove.add(event2.id);\n                    });\n                });\n                const withRemovedEvents = events.filter((event2)=>!toRemove.has(event2.id));\n                set(()=>({\n                        state: {\n                            events: withRemovedEvents\n                        }\n                    }));\n            },\n            addListener: (listener)=>{\n                listeners.add(listener);\n                return ()=>{\n                    listeners.delete(listener);\n                };\n            },\n            clear: ()=>{\n                set({\n                    state: {\n                        events: []\n                    }\n                });\n            }\n        }\n    };\n});\nvar useToolbarEventLog = ()=>{\n    return (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useSyncExternalStore)(toolbarEventStore.subscribe, toolbarEventStore.getState);\n};\nvar isTaskDirty = false;\nvar startDirtyTaskTracking = ()=>{\n    document.addEventListener(\"visibilitychange\", ()=>{\n        if (document.visibilityState === \"visible\") {\n            return;\n        }\n        isTaskDirty = true;\n    });\n};\nvar framesDrawnInTheLastSecond = [];\nfunction startLongPipelineTracking() {\n    let rafHandle;\n    let timeoutHandle;\n    function measure() {\n        let unSub = null;\n        accumulatedFiberRendersOverTask = null;\n        accumulatedFiberRendersOverTask = {};\n        unSub = listenForRenders(accumulatedFiberRendersOverTask);\n        const startOrigin = performance.timeOrigin;\n        const startTime = performance.now();\n        rafHandle = requestAnimationFrame(()=>{\n            timeoutHandle = setTimeout(()=>{\n                const endNow = performance.now();\n                const duration = endNow - startTime;\n                const endOrigin = performance.timeOrigin;\n                framesDrawnInTheLastSecond.push(endNow);\n                const framesInTheLastSecond = framesDrawnInTheLastSecond.filter((frameAt)=>endNow - frameAt <= 1e3);\n                const fps2 = framesInTheLastSecond.length;\n                framesDrawnInTheLastSecond = framesInTheLastSecond;\n                if (duration > 200 && !isTaskDirty) {\n                    const endAt = endOrigin + endNow;\n                    const startAt = startTime + startOrigin;\n                    toolbarEventStore.getState().actions.addEvent({\n                        kind: \"long-render\",\n                        id: not_globally_unique_generateId(),\n                        data: {\n                            endAt,\n                            startAt,\n                            meta: {\n                                fiberRenders: accumulatedFiberRendersOverTask,\n                                latency: duration,\n                                fps: fps2\n                            }\n                        }\n                    });\n                }\n                isTaskDirty = false;\n                unSub?.();\n                measure();\n            }, 0);\n        });\n    }\n    measure();\n    return ()=>{\n        cancelAnimationFrame(rafHandle);\n        clearTimeout(timeoutHandle);\n    };\n}\nvar startTimingTracking = ()=>{\n    const unSubPerformance = setupPerformancePublisher();\n    startDirtyTaskTracking();\n    startLongPipelineTracking();\n    const onComplete = async (_, finalInteraction, event)=>{\n        toolbarEventStore.getState().actions.addEvent({\n            kind: \"interaction\",\n            id: crypto.randomUUID(),\n            data: {\n                startAt: finalInteraction.detailedTiming.blockingTimeStart,\n                endAt: performance.now() + performance.timeOrigin,\n                meta: {\n                    ...finalInteraction,\n                    kind: event.kind\n                }\n            }\n        });\n        const existingCompletedInteractions = performanceEntryChannels.getChannelState(\"recording\");\n        finalInteraction.detailedTiming.stopListeningForRenders();\n        if (existingCompletedInteractions.length) {\n            performanceEntryChannels.updateChannelState(\"recording\", ()=>new BoundedArray(MAX_CHANNEL_SIZE));\n        }\n    };\n    const unSubDetailedPointerTiming = setupDetailedPointerTimingListener(\"pointer\", {\n        onComplete\n    });\n    const unSubDetailedKeyboardTiming = setupDetailedPointerTimingListener(\"keyboard\", {\n        onComplete\n    });\n    const unSubInteractions = listenForPerformanceEntryInteractions((completedInteraction)=>{\n        interactionStore.setState(BoundedArray.fromArray(interactionStore.getCurrentState().concat(completedInteraction), MAX_INTERACTION_BATCH));\n    });\n    return ()=>{\n        unSubPerformance();\n        unSubDetailedPointerTiming();\n        unSubInteractions();\n        unSubDetailedKeyboardTiming();\n    };\n};\n// src/web/views/notifications/data.ts\n\n\nvar getComponentName = (path)=>{\n    const filteredPath = path.filter((item)=>item.length > 2);\n    if (filteredPath.length === 0) {\n        return path.at(-1) ?? \"Unknown\";\n    }\n    return filteredPath.at(-1);\n};\nvar getTotalTime = (timing)=>{\n    switch(timing.kind){\n        case \"interaction\":\n            {\n                const { renderTime, otherJSTime, framePreparation, frameConstruction, frameDraw } = timing;\n                return renderTime + otherJSTime + framePreparation + frameConstruction + (frameDraw ?? 0);\n            }\n        case \"dropped-frames\":\n            {\n                return timing.otherTime + timing.renderTime;\n            }\n    }\n};\nvar isRenderMemoizable = (gropedFiberRender)=>{\n    return gropedFiberRender.changes.context.length === 0 && gropedFiberRender.changes.props.length === 0 && gropedFiberRender.changes.state.length === 0;\n};\nvar getEventSeverity = (event)=>{\n    const totalTime = getTotalTime(event.timing);\n    switch(event.kind){\n        case \"interaction\":\n            {\n                if (totalTime < 200) return \"low\";\n                if (totalTime < 500) return \"needs-improvement\";\n                return \"high\";\n            }\n        case \"dropped-frames\":\n            {\n                if (totalTime < 50) return \"low\";\n                if (totalTime < 200) return \"needs-improvement\";\n                return \"high\";\n            }\n    }\n};\nvar useNotificationsContext = ()=>(0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useContext)(NotificationStateContext);\nvar NotificationStateContext = (0,preact__WEBPACK_IMPORTED_MODULE_2__.createContext)(null);\n// src/web/views/notifications/details-routes.tsx\n\n// src/web/views/notifications/icons.tsx\n\nvar ChevronRight = ({ size = 24, className })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className: cn([\n            \"lucide lucide-chevron-right\",\n            className\n        ]),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n            d: \"m9 18 6-6-6-6\"\n        })\n    });\nvar SHOW_DOT = false;\nvar Notification = ({ className = \"\", size = 24, events = [] })=>{\n    const hasHighSeverity = events.includes(true);\n    const totalSevere = events.filter((e)=>e).length;\n    const displayCount = totalSevere > 99 ? \">99\" : totalSevere;\n    const badgeSize = hasHighSeverity ? Math.max(size * 0.6, 14) : Math.max(size * 0.4, 6);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"relative\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                width: size,\n                height: size,\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                \"stroke-width\": \"2\",\n                \"stroke-linecap\": \"round\",\n                \"stroke-linejoin\": \"round\",\n                className: `lucide lucide-bell ${className}`,\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        d: \"M10.268 21a2 2 0 0 0 3.464 0\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        d: \"M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326\"\n                    })\n                ]\n            }),\n            events.length > 0 && (SHOW_DOT || totalSevere > 0) && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn([\n                    \"absolute\",\n                    hasHighSeverity ? \"-top-2.5 -right-2.5\" : \"-top-1 -right-1\",\n                    \"rounded-full\",\n                    \"flex items-center justify-center\",\n                    \"text-[8px] font-medium text-white\",\n                    \"aspect-square\",\n                    hasHighSeverity ? \"bg-red-500/90\" : \"bg-purple-500/90\"\n                ]),\n                style: {\n                    width: `${badgeSize}px`,\n                    height: `${badgeSize}px`,\n                    padding: hasHighSeverity ? \"0.5px\" : \"0\"\n                },\n                children: hasHighSeverity && displayCount\n            })\n        ]\n    });\n};\nvar CloseIcon = ({ className = \"\", size = 24 })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M18 6 6 18\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m6 6 12 12\"\n            })\n        ]\n    });\nvar VolumeOnIcon = ({ className = \"\", size = 24 })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M16 9a5 5 0 0 1 0 6\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M19.364 18.364a9 9 0 0 0 0-12.728\"\n            })\n        ]\n    });\nvar VolumeOffIcon = ({ className = \"\", size = 24 })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M16 9a5 5 0 0 1 .95 2.293\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M19.364 5.636a9 9 0 0 1 1.889 9.96\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m2 2 20 20\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M9.828 4.172A.686.686 0 0 1 11 4.657v.686\"\n            })\n        ]\n    });\nvar ArrowLeft = ({ size = 24, className })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className: cn([\n            \"lucide lucide-arrow-left\",\n            className\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m12 19-7-7 7-7\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M19 12H5\"\n            })\n        ]\n    });\nvar PointerIcon = ({ className = \"\", size = 24 })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M14 4.1 12 6\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m5.1 8-2.9-.8\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m6 12-1.9 2\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M7.2 2.2 8 5.1\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z\"\n            })\n        ]\n    });\nvar KeyboardIcon = ({ className = \"\", size = 24 })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M10 8h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M12 12h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M14 8h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M16 12h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M18 8h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M6 8h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M7 16h10\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"M8 12h.01\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"rect\", {\n                width: \"20\",\n                height: \"16\",\n                x: \"2\",\n                y: \"4\",\n                rx: \"2\"\n            })\n        ]\n    });\nvar ClearIcon = ({ className = \"\", size = 24 })=>{\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        className,\n        style: {\n            transform: \"rotate(180deg)\"\n        },\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"circle\", {\n                cx: \"12\",\n                cy: \"12\",\n                r: \"10\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m4.9 4.9 14.2 14.2\"\n            })\n        ]\n    });\n};\nvar TrendingDownIcon = ({ className = \"\", size = 24 })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"polyline\", {\n                points: \"22 17 13.5 8.5 8.5 13.5 2 7\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"polyline\", {\n                points: \"16 17 22 17 22 11\"\n            })\n        ]\n    });\n// src/web/views/notifications/popover.tsx\n\n\nvar Popover = ({ children, triggerContent, wrapperProps })=>{\n    const [popoverState, setPopoverState] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(\"closed\");\n    const [elBoundingRect, setElBoundingRect] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(null);\n    const [viewportSize, setViewportSize] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)({\n        width: window.innerWidth,\n        height: window.innerHeight\n    });\n    const triggerRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(null);\n    const popoverRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(null);\n    const portalEl = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useContext)(ToolbarElementContext);\n    const isHoveredRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(false);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"Popover.useEffect2\": ()=>{\n            const handleResize = {\n                \"Popover.useEffect2.handleResize\": ()=>{\n                    setViewportSize({\n                        width: window.innerWidth,\n                        height: window.innerHeight\n                    });\n                    updateRect();\n                }\n            }[\"Popover.useEffect2.handleResize\"];\n            window.addEventListener(\"resize\", handleResize);\n            return ({\n                \"Popover.useEffect2\": ()=>window.removeEventListener(\"resize\", handleResize)\n            })[\"Popover.useEffect2\"];\n        }\n    }[\"Popover.useEffect2\"], []);\n    const updateRect = ()=>{\n        if (triggerRef.current && portalEl) {\n            const triggerRect = triggerRef.current.getBoundingClientRect();\n            const portalRect = portalEl.getBoundingClientRect();\n            const centerX = triggerRect.left + triggerRect.width / 2;\n            const centerY = triggerRect.top;\n            const rect = new DOMRect(centerX - portalRect.left, centerY - portalRect.top, triggerRect.width, triggerRect.height);\n            setElBoundingRect(rect);\n        }\n    };\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"Popover.useEffect2\": ()=>{\n            updateRect();\n        }\n    }[\"Popover.useEffect2\"], [\n        triggerRef.current\n    ]);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"Popover.useEffect2\": ()=>{\n            if (popoverState === \"opening\") {\n                const timer = setTimeout({\n                    \"Popover.useEffect2.timer\": ()=>setPopoverState(\"open\")\n                }[\"Popover.useEffect2.timer\"], 120);\n                return ({\n                    \"Popover.useEffect2\": ()=>clearTimeout(timer)\n                })[\"Popover.useEffect2\"];\n            } else if (popoverState === \"closing\") {\n                const timer = setTimeout({\n                    \"Popover.useEffect2.timer\": ()=>setPopoverState(\"closed\")\n                }[\"Popover.useEffect2.timer\"], 120);\n                return ({\n                    \"Popover.useEffect2\": ()=>clearTimeout(timer)\n                })[\"Popover.useEffect2\"];\n            }\n        }\n    }[\"Popover.useEffect2\"], [\n        popoverState\n    ]);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"Popover.useEffect2\": ()=>{\n            const interval = setInterval({\n                \"Popover.useEffect2.interval\": ()=>{\n                    if (!isHoveredRef.current && popoverState !== \"closed\") {\n                        setPopoverState(\"closing\");\n                    }\n                }\n            }[\"Popover.useEffect2.interval\"], 1e3);\n            return ({\n                \"Popover.useEffect2\": ()=>clearInterval(interval)\n            })[\"Popover.useEffect2\"];\n        }\n    }[\"Popover.useEffect2\"], [\n        popoverState\n    ]);\n    const handleMouseEnter = ()=>{\n        isHoveredRef.current = true;\n        updateRect();\n        setPopoverState(\"opening\");\n    };\n    const handleMouseLeave = ()=>{\n        isHoveredRef.current = false;\n        updateRect();\n        setPopoverState(\"closing\");\n    };\n    const getPopoverPosition = ()=>{\n        if (!elBoundingRect || !portalEl) return {\n            top: 0,\n            left: 0\n        };\n        const portalRect = portalEl.getBoundingClientRect();\n        const popoverWidth = 175;\n        const popoverHeight = popoverRef.current?.offsetHeight || 40;\n        const safeArea = 5;\n        const viewportX = elBoundingRect.x + portalRect.left;\n        const viewportY = elBoundingRect.y + portalRect.top;\n        let left = viewportX;\n        let top = viewportY - 4;\n        if (left - popoverWidth / 2 < safeArea) {\n            left = safeArea + popoverWidth / 2;\n        } else if (left + popoverWidth / 2 > viewportSize.width - safeArea) {\n            left = viewportSize.width - safeArea - popoverWidth / 2;\n        }\n        if (top - popoverHeight < safeArea) {\n            top = viewportY + elBoundingRect.height + 4;\n        }\n        return {\n            top: top - portalRect.top,\n            left: left - portalRect.left\n        };\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            portalEl && elBoundingRect && popoverState !== \"closed\" && (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.createPortal)(/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                ref: popoverRef,\n                className: cn([\n                    \"absolute z-100 bg-white text-black rounded-lg px-3 py-2 shadow-lg\",\n                    \"transform transition-all duration-120 ease-[cubic-bezier(0.23,1,0.32,1)]\",\n                    'after:content-[\"\"] after:absolute after:top-[100%]',\n                    \"after:left-1/2 after:-translate-x-1/2\",\n                    \"after:w-[10px] after:h-[6px]\",\n                    \"after:border-l-[5px] after:border-l-transparent\",\n                    \"after:border-r-[5px] after:border-r-transparent\",\n                    \"after:border-t-[6px] after:border-t-white\",\n                    \"pointer-events-none\",\n                    popoverState === \"opening\" || popoverState === \"closing\" ? \"opacity-0 translate-y-1\" : \"opacity-100 translate-y-0\"\n                ]),\n                style: {\n                    top: getPopoverPosition().top + \"px\",\n                    left: getPopoverPosition().left + \"px\",\n                    transform: \"translate(-50%, -100%)\",\n                    minWidth: \"175px\"\n                },\n                children\n            }), portalEl),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                ref: triggerRef,\n                onMouseEnter: handleMouseEnter,\n                onMouseLeave: handleMouseLeave,\n                ...wrapperProps,\n                children: triggerContent\n            })\n        ]\n    });\n};\n// src/web/views/notifications/notification-tabs.tsx\n\nvar NotificationTabs = ({ selectedEvent: _ })=>{\n    const { notificationState, setNotificationState, setRoute } = useNotificationsContext();\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            \"flex w-full justify-between items-center px-3 py-2 text-xs\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"bg-[#18181B] flex items-center gap-x-1 p-1 rounded-sm\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            setRoute({\n                                route: \"render-visualization\",\n                                routeMessage: null\n                            });\n                        },\n                        className: cn([\n                            \"w-1/2 flex items-center justify-center whitespace-nowrap py-[5px] px-1 gap-x-1\",\n                            notificationState.route === \"render-visualization\" || notificationState.route === \"render-explanation\" ? \"text-white bg-[#7521c8] rounded-sm\" : \"text-[#6E6E77] bg-[#18181B] rounded-sm\"\n                        ]),\n                        children: \"Ranked\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            setRoute({\n                                route: \"other-visualization\",\n                                routeMessage: null\n                            });\n                        },\n                        className: cn([\n                            \"w-1/2 flex items-center justify-center whitespace-nowrap py-[5px] px-1 gap-x-1\",\n                            notificationState.route === \"other-visualization\" ? \"text-white bg-[#7521c8] rounded-sm\" : \"text-[#6E6E77] bg-[#18181B] rounded-sm\"\n                        ]),\n                        children: \"Overview\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            setRoute({\n                                route: \"optimize\",\n                                routeMessage: null\n                            });\n                        },\n                        className: cn([\n                            \"w-1/2 flex items-center justify-center whitespace-nowrap py-[5px] px-1 gap-x-1\",\n                            notificationState.route === \"optimize\" ? \"text-white bg-[#7521c8] rounded-sm\" : \"text-[#6E6E77] bg-[#18181B] rounded-sm\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            children: \"Prompts\"\n                        })\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Popover, {\n                triggerContent: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                    onClick: ()=>{\n                        setNotificationState((prev)=>{\n                            if (prev.audioNotificationsOptions.enabled && prev.audioNotificationsOptions.audioContext.state !== \"closed\") {\n                                prev.audioNotificationsOptions.audioContext.close();\n                            }\n                            const audioContext = new AudioContext();\n                            if (!prev.audioNotificationsOptions.enabled) {\n                                playNotificationSound(audioContext);\n                            }\n                            return {\n                                ...prev,\n                                audioNotificationsOptions: prev.audioNotificationsOptions.enabled ? {\n                                    audioContext: null,\n                                    enabled: false\n                                } : {\n                                    audioContext,\n                                    enabled: true\n                                }\n                            };\n                        });\n                    },\n                    className: \"ml-auto\",\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex gap-x-2 justify-center items-center text-[#6E6E77]\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                children: \"Alerts\"\n                            }),\n                            notificationState.audioNotificationsOptions.enabled ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(VolumeOnIcon, {\n                                size: 16,\n                                className: \"text-[#6E6E77]\"\n                            }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(VolumeOffIcon, {\n                                size: 16,\n                                className: \"text-[#6E6E77]\"\n                            })\n                        ]\n                    })\n                }),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                    children: \"Play a chime when a slowdown is recorded\"\n                })\n            })\n        ]\n    });\n};\n// src/web/views/notifications/optimize.tsx\n\n\nvar formatReactData = (groupedFiberRenders)=>{\n    let text = \"\";\n    const filteredFibers = groupedFiberRenders.toSorted((a, b)=>b.totalTime - a.totalTime).slice(0, 30).filter((fiber)=>fiber.totalTime > 5);\n    filteredFibers.forEach((fiberRender)=>{\n        let localText = \"\";\n        localText += \"Component Name:\";\n        localText += fiberRender.name;\n        localText += \"\\n\";\n        localText += `Rendered: ${fiberRender.count} times\n`;\n        localText += `Sum of self times for ${fiberRender.name} is ${fiberRender.totalTime.toFixed(0)}ms\n`;\n        if (fiberRender.changes.props.length > 0) {\n            localText += `Changed props for all ${fiberRender.name} instances (\"name:count\" pairs)\n`;\n            fiberRender.changes.props.forEach((change)=>{\n                localText += `${change.name}:${change.count}x\n`;\n            });\n        }\n        if (fiberRender.changes.state.length > 0) {\n            localText += `Changed state for all ${fiberRender.name} instances (\"hook index:count\" pairs)\n`;\n            fiberRender.changes.state.forEach((change)=>{\n                localText += `${change.index}:${change.count}x\n`;\n            });\n        }\n        if (fiberRender.changes.context.length > 0) {\n            localText += `Changed context for all ${fiberRender.name} instances (\"context display name (if exists):count\" pairs)\n`;\n            fiberRender.changes.context.forEach((change)=>{\n                localText += `${change.name}:${change.count}x\n`;\n            });\n        }\n        text += localText;\n        text += \"\\n\";\n    });\n    return text;\n};\nvar generateInteractionDataPrompt = ({ renderTime, eHandlerTimeExcludingRenders, toRafTime, commitTime, framePresentTime, formattedReactData })=>{\n    return `I will provide you with a set of high level, and low level performance data about an interaction in a React App:\n### High level\n- react component render time: ${renderTime.toFixed(0)}ms\n- how long it took to run javascript event handlers (EXCLUDING REACT RENDERS): ${eHandlerTimeExcludingRenders.toFixed(0)}ms\n- how long it took from the last event handler time, to the last request animation frame: ${toRafTime.toFixed(0)}ms\n\t- things like prepaint, style recalculations, layerization, async web API's like observers may occur during this time\n- how long it took from the last request animation frame to when the dom was committed: ${commitTime.toFixed(0)}ms\n\t- during this period you will see paint, commit, potential style recalcs, and other misc browser activity. Frequently high times here imply css that makes the browser do a lot of work, or mutating expensive dom properties during the event handler stage. This can be many things, but it narrows the problem scope significantly when this is high\n${framePresentTime && `- how long it took from dom commit for the frame to be presented: ${framePresentTime.toFixed(0)}ms. This is when information about how to paint the next frame is sent to the compositor threads, and when the GPU does work. If this is high, look for issues that may be a bottleneck for operations occurring during this time`}\n\n### Low level\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\n${formattedReactData}`;\n};\nvar generateInteractionOptimizationPrompt = ({ interactionType, name, componentPath, time, renderTime, eHandlerTimeExcludingRenders, toRafTime, commitTime, framePresentTime, formattedReactData })=>`You will attempt to implement a performance improvement to a user interaction in a React app. You will be provided with data about the interaction, and the slow down.\n\nYour should split your goals into 2 parts:\n- identifying the problem\n- fixing the problem\n\t- it is okay to implement a fix even if you aren't 100% sure the fix solves the performance problem. When you aren't sure, you should tell the user to try repeating the interaction, and feeding the \"Formatted Data\" in the React Scan notifications optimize tab. This allows you to start a debugging flow with the user, where you attempt a fix, and observe the result. The user may make a mistake when they pass you the formatted data, so must make sure, given the data passed to you, that the associated data ties to the same interaction you were trying to debug.\n\n\nMake sure to check if the user has the react compiler enabled (project dependent, configured through build tool), so you don't unnecessarily memoize components. If it is, you do not need to worry about memoizing user components\n\nOne challenge you may face is the performance problem lies in a node_module, not in user code. If you are confident the problem originates because of a node_module, there are multiple strategies, which are context dependent:\n- you can try to work around the problem, knowing which module is slow\n- you can determine if its possible to resolve the problem in the node_module by modifying non node_module code\n- you can monkey patch the node_module to experiment and see if it's really the problem (you can modify a functions properties to hijack the call for example)\n- you can determine if it's feasible to replace whatever node_module is causing the problem with a performant option (this is an extreme)\n\nThe interaction was a ${interactionType} on the component named ${name}. This component has the following ancestors ${componentPath}. This is the path from the component, to the root. This should be enough information to figure out where this component is in the user's code base\n\nThis path is the component that was clicked, so it should tell you roughly where component had an event handler that triggered a state change.\n\nPlease note that the leaf node of this path might not be user code (if they use a UI library), and they may contain many wrapper components that just pass through children that aren't relevant to the actual click. So make you sure analyze the path and understand what the user code is doing\n\nWe have a set of high level, and low level data about the performance issue.\n\nThe click took ${time.toFixed(0)}ms from interaction start, to when a new frame was presented to a user.\n\nWe also provide you with a breakdown of what the browser spent time on during the period of interaction start to frame presentation.\n\n- react component render time: ${renderTime.toFixed(0)}ms\n- how long it took to run javascript event handlers (EXCLUDING REACT RENDERS): ${eHandlerTimeExcludingRenders.toFixed(0)}ms\n- how long it took from the last event handler time, to the last request animation frame: ${toRafTime.toFixed(0)}ms\n\t- things like prepaint, style recalculations, layerization, async web API's like observers may occur during this time\n- how long it took from the last request animation frame to when the dom was committed: ${commitTime.toFixed(0)}ms\n\t- during this period you will see paint, commit, potential style recalcs, and other misc browser activity. Frequently high times here imply css that makes the browser do a lot of work, or mutating expensive dom properties during the event handler stage. This can be many things, but it narrows the problem scope significantly when this is high\n${framePresentTime && `- how long it took from dom commit for the frame to be presented: ${framePresentTime.toFixed(0)}ms. This is when information about how to paint the next frame is sent to the compositor threads, and when the GPU does work. If this is high, look for issues that may be a bottleneck for operations occurring during this time`}\n\n\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\n\n${formattedReactData}\n\nYou may notice components have many renders, but much fewer props/state/context changes. This normally implies most of the components could of been memoized to avoid computation\n\nIt's also important to remember if a component had no props/state/context change, and it was memoized, it would not render. So the flow should be:\n- find the most expensive components\n- see what's causing them to render\n- determine how you can make those state/props/context not change for a large set of the renders\n- once there are no more changes left, you can memoize the component so it no longer unnecessarily re-renders. \n\nAn important thing to note is that if you see a lot of react renders (some components with very high render counts), but javascript excluding renders is much higher than render time, it is possible that the components with lots of renders run hooks like useEffect/useLayoutEffect, which run during the JS event handler period.\n\nIt's also good to note that react profiles hook times in development, and if many hooks are called (lets say 5,000 components all called a useEffect), it will have to profile every single one. And it may also be the case the comparison of the hooks dependency can be expensive, and that would not be tracked in render time.\n\nIf a node_module is the component with high renders, you can experiment to see if that component is the root issue (because of hooks). You should use the same instructions for node_module debugging mentioned previously.\n\n`;\nvar generateFrameDropOptimizationPrompt = ({ renderTime, otherTime, formattedReactData })=>`You will attempt to implement a performance improvement to a large slowdown in a react app\n\nYour should split your goals into 2 parts:\n- identifying the problem\n- fixing the problem\n\t- it is okay to implement a fix even if you aren't 100% sure the fix solves the performance problem. When you aren't sure, you should tell the user to try repeating the interaction, and feeding the \"Formatted Data\" in the React Scan notifications optimize tab. This allows you to start a debugging flow with the user, where you attempt a fix, and observe the result. The user may make a mistake when they pass you the formatted data, so must make sure, given the data passed to you, that the associated data ties to the same interaction you were trying to debug.\n\nMake sure to check if the user has the react compiler enabled (project dependent, configured through build tool), so you don't unnecessarily memoize components. If it is, you do not need to worry about memoizing user components\n\nOne challenge you may face is the performance problem lies in a node_module, not in user code. If you are confident the problem originates because of a node_module, there are multiple strategies, which are context dependent:\n- you can try to work around the problem, knowing which module is slow\n- you can determine if its possible to resolve the problem in the node_module by modifying non node_module code\n- you can monkey patch the node_module to experiment and see if it's really the problem (you can modify a functions properties to hijack the call for example)\n- you can determine if it's feasible to replace whatever node_module is causing the problem with a performant option (this is an extreme)\n\n\nWe have the high level time of how much react spent rendering, and what else the browser spent time on during this slowdown\n\n- react component render time: ${renderTime.toFixed(0)}ms\n- other time: ${otherTime}ms\n\n\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\n\n${formattedReactData}\n\nYou may notice components have many renders, but much fewer props/state/context changes. This normally implies most of the components could of been memoized to avoid computation\n\nIt's also important to remember if a component had no props/state/context change, and it was memoized, it would not render. So the flow should be:\n- find the most expensive components\n- see what's causing them to render\n- determine how you can make those state/props/context not change for a large set of the renders\n- once there are no more changes left, you can memoize the component so it no longer unnecessarily re-renders. \n\nAn important thing to note is that if you see a lot of react renders (some components with very high render counts), but other time is much higher than render time, it is possible that the components with lots of renders run hooks like useEffect/useLayoutEffect, which run outside of what we profile (just react render time).\n\nIt's also good to note that react profiles hook times in development, and if many hooks are called (lets say 5,000 components all called a useEffect), it will have to profile every single one. And it may also be the case the comparison of the hooks dependency can be expensive, and that would not be tracked in render time.\n\nIf a node_module is the component with high renders, you can experiment to see if that component is the root issue (because of hooks). You should use the same instructions for node_module debugging mentioned previously.\n\nIf renders don't seem to be the problem, see if there are any expensive CSS properties being added/mutated, or any expensive DOM Element mutations/new elements being created that could cause this slowdown. \n`;\nvar generateFrameDropExplanationPrompt = ({ renderTime, otherTime, formattedReactData })=>`Your goal will be to help me find the source of a performance problem in a React App. I collected a large dataset about this specific performance problem.\n\nWe have the high level time of how much react spent rendering, and what else the browser spent time on during this slowdown\n\n- react component render time: ${renderTime.toFixed(0)}ms\n- other time (other JavaScript, hooks like useEffect, style recalculations, layerization, paint & commit and everything else the browser might do to draw a new frame after javascript mutates the DOM): ${otherTime}ms\n\n\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\n\n${formattedReactData}\n\nYou may notice components have many renders, but much fewer props/state/context changes. This normally implies most of the components could of been memoized to avoid computation\n\nIt's also important to remember if a component had no props/state/context change, and it was memoized, it would not render. So a flow we can go through is:\n- find the most expensive components\n- see what's causing them to render\n- determine how you can make those state/props/context not change for a large set of the renders\n- once there are no more changes left, you can memoize the component so it no longer unnecessarily re-renders. \n\n\nAn important thing to note is that if you see a lot of react renders (some components with very high render counts), but other time is much higher than render time, it is possible that the components with lots of renders run hooks like useEffect/useLayoutEffect, which run outside of what we profile (just react render time).\n\nIt's also good to note that react profiles hook times in development, and if many hooks are called (lets say 5,000 components all called a useEffect), it will have to profile every single one, and this can add significant overhead when thousands of effects ran.\n\nIf it's not possible to explain the root problem from this data, please ask me for more data explicitly, and what we would need to know to find the source of the performance problem.\n`;\nvar generateFrameDropDataPrompt = ({ renderTime, otherTime, formattedReactData })=>`I will provide you with a set of high level, and low level performance data about a large frame drop in a React App:\n### High level\n- react component render time: ${renderTime.toFixed(0)}ms\n- how long it took to run everything else (other JavaScript, hooks like useEffect, style recalculations, layerization, paint & commit and everything else the browser might do to draw a new frame after javascript mutates the DOM): ${otherTime}ms\n\n### Low level\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\n${formattedReactData}`;\nvar generateInteractionExplanationPrompt = ({ interactionType, name, componentPath, time, renderTime, eHandlerTimeExcludingRenders, toRafTime, commitTime, framePresentTime, formattedReactData })=>`Your goal will be to help me find the source of a performance problem. I collected a large dataset about this specific performance problem.\n\nThere was a ${interactionType} on a component named ${name}. This means, roughly, the component that handled the ${interactionType} event was named ${name}.\n\nWe have a set of high level, and low level data about the performance issue.\n\nThe click took ${time.toFixed(0)}ms from interaction start, to when a new frame was presented to a user.\n\nWe also provide you with a breakdown of what the browser spent time on during the period of interaction start to frame presentation.\n\n- react component render time: ${renderTime.toFixed(0)}ms\n- how long it took to run javascript event handlers (EXCLUDING REACT RENDERS): ${eHandlerTimeExcludingRenders.toFixed(0)}ms\n- how long it took from the last event handler time, to the last request animation frame: ${toRafTime.toFixed(0)}ms\n\t- things like prepaint, style recalculations, layerization, async web API's like observers may occur during this time\n- how long it took from the last request animation frame to when the dom was committed: ${commitTime.toFixed(0)}ms\n\t- during this period you will see paint, commit, potential style recalcs, and other misc browser activity. Frequently high times here imply css that makes the browser do a lot of work, or mutating expensive dom properties during the event handler stage. This can be many things, but it narrows the problem scope significantly when this is high\n${framePresentTime && `- how long it took from dom commit for the frame to be presented: ${framePresentTime.toFixed(0)}ms. This is when information about how to paint the next frame is sent to the compositor threads, and when the GPU does work. If this is high, look for issues that may be a bottleneck for operations occurring during this time`}\n\nWe also have lower level information about react components, such as their render time, and which props/state/context changed when they re-rendered.\n\n${formattedReactData}\n\n\nYou may notice components have many renders, but much fewer props/state/context changes. This normally implies most of the components could of been memoized to avoid computation\n\nIt's also important to remember if a component had no props/state/context change, and it was memoized, it would not render. So a flow we can go through is:\n- find the most expensive components\n- see what's causing them to render\n- determine how you can make those state/props/context not change for a large set of the renders\n- once there are no more changes left, you can memoize the component so it no longer unnecessarily re-renders. \n\n\nAn important thing to note is that if you see a lot of react renders (some components with very high render counts), but javascript excluding renders is much higher than render time, it is possible that the components with lots of renders run hooks like useEffect/useLayoutEffect, which run during the JS event handler period.\n\nIt's also good to note that react profiles hook times in development, and if many hooks are called (lets say 5,000 components all called a useEffect), it will have to profile every single one. And it may also be the case the comparison of the hooks dependency can be expensive, and that would not be tracked in render time.\n\nIf it's not possible to explain the root problem from this data, please ask me for more data explicitly, and what we would need to know to find the source of the performance problem.\n`;\nvar getLLMPrompt = (activeTab, selectedEvent)=>iife(()=>{\n        switch(activeTab){\n            case \"data\":\n                {\n                    switch(selectedEvent.kind){\n                        case \"dropped-frames\":\n                            {\n                                return generateFrameDropDataPrompt({\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    otherTime: selectedEvent.timing.otherTime\n                                });\n                            }\n                        case \"interaction\":\n                            {\n                                return generateInteractionDataPrompt({\n                                    commitTime: selectedEvent.timing.frameConstruction,\n                                    eHandlerTimeExcludingRenders: selectedEvent.timing.otherJSTime,\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    framePresentTime: selectedEvent.timing.frameDraw,\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    toRafTime: selectedEvent.timing.framePreparation\n                                });\n                            }\n                    }\n                }\n            case \"explanation\":\n                {\n                    switch(selectedEvent.kind){\n                        case \"dropped-frames\":\n                            {\n                                return generateFrameDropExplanationPrompt({\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    otherTime: selectedEvent.timing.otherTime\n                                });\n                            }\n                        case \"interaction\":\n                            {\n                                return generateInteractionExplanationPrompt({\n                                    commitTime: selectedEvent.timing.frameConstruction,\n                                    componentPath: selectedEvent.componentPath.join(\">\"),\n                                    eHandlerTimeExcludingRenders: selectedEvent.timing.otherJSTime,\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    framePresentTime: selectedEvent.timing.frameDraw,\n                                    interactionType: selectedEvent.type,\n                                    name: getComponentName(selectedEvent.componentPath),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    time: getTotalTime(selectedEvent.timing),\n                                    toRafTime: selectedEvent.timing.framePreparation\n                                });\n                            }\n                    }\n                }\n            case \"fix\":\n                {\n                    switch(selectedEvent.kind){\n                        case \"dropped-frames\":\n                            {\n                                return generateFrameDropOptimizationPrompt({\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    otherTime: selectedEvent.timing.otherTime\n                                });\n                            }\n                        case \"interaction\":\n                            {\n                                return generateInteractionOptimizationPrompt({\n                                    commitTime: selectedEvent.timing.frameConstruction,\n                                    componentPath: selectedEvent.componentPath.join(\">\"),\n                                    eHandlerTimeExcludingRenders: selectedEvent.timing.otherJSTime,\n                                    formattedReactData: formatReactData(selectedEvent.groupedFiberRenders),\n                                    framePresentTime: selectedEvent.timing.frameDraw,\n                                    interactionType: selectedEvent.type,\n                                    name: getComponentName(selectedEvent.componentPath),\n                                    renderTime: selectedEvent.groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0),\n                                    time: getTotalTime(selectedEvent.timing),\n                                    toRafTime: selectedEvent.timing.framePreparation\n                                });\n                            }\n                    }\n                }\n        }\n    });\nvar Optimize = ({ selectedEvent })=>{\n    const [activeTab, setActiveTab] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(\"fix\");\n    const [copying, setCopying] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            \"w-full h-full\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"border border-[#27272A] rounded-sm h-4/5 text-xs overflow-hidden\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"bg-[#18181B] p-1 rounded-t-sm\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"flex items-center gap-x-1\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    onClick: ()=>setActiveTab(\"fix\"),\n                                    className: cn([\n                                        \"flex items-center justify-center whitespace-nowrap py-1.5 px-3 rounded-sm\",\n                                        activeTab === \"fix\" ? \"text-white bg-[#7521c8]\" : \"text-[#6E6E77] hover:text-white\"\n                                    ]),\n                                    children: \"Fix\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    onClick: ()=>setActiveTab(\"explanation\"),\n                                    className: cn([\n                                        \"flex items-center justify-center whitespace-nowrap py-1.5 px-3 rounded-sm\",\n                                        activeTab === \"explanation\" ? \"text-white bg-[#7521c8]\" : \"text-[#6E6E77] hover:text-white\"\n                                    ]),\n                                    children: \"Explanation\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    onClick: ()=>setActiveTab(\"data\"),\n                                    className: cn([\n                                        \"flex items-center justify-center whitespace-nowrap py-1.5 px-3 rounded-sm\",\n                                        activeTab === \"data\" ? \"text-white bg-[#7521c8]\" : \"text-[#6E6E77] hover:text-white\"\n                                    ]),\n                                    children: \"Data\"\n                                })\n                            ]\n                        })\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"overflow-y-auto h-full\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"pre\", {\n                            className: cn([\n                                \"p-2 h-full\",\n                                \"whitespace-pre-wrap break-words\",\n                                \"text-gray-300 font-mono \"\n                            ]),\n                            children: getLLMPrompt(activeTab, selectedEvent)\n                        })\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                onClick: async ()=>{\n                    const text = getLLMPrompt(activeTab, selectedEvent);\n                    await navigator.clipboard.writeText(text);\n                    setCopying(true);\n                    setTimeout(()=>setCopying(false), 1e3);\n                },\n                className: cn([\n                    \"mt-4 px-4 py-2 bg-[#18181B] text-[#6E6E77] rounded-sm\",\n                    \"hover:text-white transition-colors duration-200\",\n                    \"flex items-center justify-center gap-x-2 text-xs\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        children: copying ? \"Copied!\" : \"Copy Prompt\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n                        xmlns: \"http://www.w3.org/2000/svg\",\n                        width: \"16\",\n                        height: \"16\",\n                        viewBox: \"0 0 24 24\",\n                        fill: \"none\",\n                        stroke: \"currentColor\",\n                        strokeWidth: \"2\",\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        className: cn([\n                            \"transition-transform duration-200\",\n                            copying && \"scale-110\"\n                        ]),\n                        children: copying ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                            d: \"M20 6L9 17l-5-5\"\n                        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"rect\", {\n                                    width: \"14\",\n                                    height: \"14\",\n                                    x: \"8\",\n                                    y: \"8\",\n                                    rx: \"2\",\n                                    ry: \"2\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                                    d: \"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n};\n// src/web/views/notifications/other-visualization.tsx\n\n\nvar getTimeData = (selectedEvent, isProduction2)=>{\n    switch(selectedEvent.kind){\n        // todo: push instead of conditional spread\n        case \"dropped-frames\":\n            {\n                const timeData = [\n                    ...isProduction2 ? [\n                        {\n                            name: \"Total Processing Time\",\n                            time: getTotalTime(selectedEvent.timing),\n                            color: \"bg-red-500\",\n                            kind: \"total-processing-time\"\n                        }\n                    ] : [\n                        {\n                            name: \"Renders\",\n                            time: selectedEvent.timing.renderTime,\n                            color: \"bg-purple-500\",\n                            kind: \"render\"\n                        },\n                        {\n                            name: \"JavaScript, DOM updates, Draw Frame\",\n                            time: selectedEvent.timing.otherTime,\n                            color: \"bg-[#4b4b4b]\",\n                            kind: \"other-frame-drop\"\n                        }\n                    ]\n                ];\n                return timeData;\n            }\n        case \"interaction\":\n            {\n                const timeData = [\n                    ...!isProduction2 ? [\n                        {\n                            name: \"Renders\",\n                            time: selectedEvent.timing.renderTime,\n                            color: \"bg-purple-500\",\n                            kind: \"render\"\n                        }\n                    ] : [],\n                    {\n                        name: isProduction2 ? \"React Renders, Hooks, Other JavaScript\" : \"JavaScript/React Hooks \",\n                        time: selectedEvent.timing.otherJSTime,\n                        color: \"bg-[#EFD81A]\",\n                        kind: \"other-javascript\"\n                    },\n                    {\n                        name: \"Update DOM and Draw New Frame\",\n                        time: getTotalTime(selectedEvent.timing) - selectedEvent.timing.renderTime - selectedEvent.timing.otherJSTime,\n                        color: \"bg-[#1D3A66]\",\n                        kind: \"other-not-javascript\"\n                    }\n                ];\n                return timeData;\n            }\n    }\n};\nvar OtherVisualization = ({ selectedEvent })=>{\n    const [isProduction2] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(getIsProduction() ?? false);\n    const { notificationState } = useNotificationsContext();\n    const [expandedItems, setExpandedItems] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(notificationState.routeMessage?.name ? [\n        notificationState.routeMessage.name\n    ] : []);\n    const root = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useContext)(ToolbarElementContext);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"OtherVisualization.useEffect3\": ()=>{\n            if (notificationState.routeMessage?.name) {\n                const container = root?.querySelector(\"#overview-scroll-container\");\n                const element = root?.querySelector(`#react-scan-overview-bar-${notificationState.routeMessage.name}`);\n                if (container && element) {\n                    const elementTop = element.getBoundingClientRect().top;\n                    const containerTop = container.getBoundingClientRect().top;\n                    const scrollOffset = elementTop - containerTop;\n                    container.scrollTop = container.scrollTop + scrollOffset;\n                }\n            }\n        }\n    }[\"OtherVisualization.useEffect3\"], [\n        notificationState.route\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"OtherVisualization.useEffect3\": ()=>{\n            if (notificationState.route === \"other-visualization\") {\n                setExpandedItems({\n                    \"OtherVisualization.useEffect3\": (prev)=>notificationState.routeMessage?.name ? [\n                            notificationState.routeMessage.name\n                        ] : prev\n                }[\"OtherVisualization.useEffect3\"]);\n            }\n        }\n    }[\"OtherVisualization.useEffect3\"], [\n        notificationState.route\n    ]);\n    const timeData = getTimeData(selectedEvent, isProduction2);\n    const totalTime = timeData.reduce((acc, item)=>acc + item.time, 0);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"rounded-sm border border-zinc-800 text-xs\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"p-2 border-b border-zinc-800 bg-zinc-900/50\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"flex items-center justify-between\",\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h3\", {\n                            className: \"text-xs font-medium\",\n                            children: \"What was time spent on?\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                            className: \"text-xs text-zinc-400\",\n                            children: [\n                                \"Total: \",\n                                totalTime.toFixed(0),\n                                \"ms\"\n                            ]\n                        })\n                    ]\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"divide-y divide-zinc-800\",\n                children: timeData.map((entry)=>{\n                    const isExpanded = expandedItems.includes(entry.kind);\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        id: `react-scan-overview-bar-${entry.kind}`,\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                onClick: ()=>setExpandedItems((prev)=>prev.includes(entry.kind) ? prev.filter((item)=>item !== entry.kind) : [\n                                            ...prev,\n                                            entry.kind\n                                        ]),\n                                className: \"w-full px-3 py-2 flex items-center gap-4 hover:bg-zinc-800/50 transition-colors\",\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: \"flex-1\",\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: \"flex items-center justify-between mb-2\",\n                                            children: [\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                                    className: \"flex items-center gap-0.5\",\n                                                    children: [\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n                                                            className: `h-4 w-4 text-zinc-400 transition-transform ${isExpanded ? \"rotate-90\" : \"\"}`,\n                                                            fill: \"none\",\n                                                            stroke: \"currentColor\",\n                                                            viewBox: \"0 0 24 24\",\n                                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                                                                strokeLinecap: \"round\",\n                                                                strokeLinejoin: \"round\",\n                                                                strokeWidth: 2,\n                                                                d: \"M9 5l7 7-7 7\"\n                                                            })\n                                                        }),\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                            className: \"font-medium flex items-center text-left\",\n                                                            children: entry.name\n                                                        })\n                                                    ]\n                                                }),\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                                    className: \" text-zinc-400\",\n                                                    children: [\n                                                        entry.time.toFixed(0),\n                                                        \"ms\"\n                                                    ]\n                                                })\n                                            ]\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                            className: \"h-1 bg-zinc-800 rounded-full overflow-hidden\",\n                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                                className: `h-full ${entry.color} transition-all`,\n                                                style: {\n                                                    width: `${entry.time / totalTime * 100}%`\n                                                }\n                                            })\n                                        })\n                                    ]\n                                })\n                            }),\n                            isExpanded && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"bg-zinc-900/30 border-t border-zinc-800 px-2.5 py-3\",\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                    className: \" text-zinc-400 mb-4 text-xs\",\n                                    children: iife(()=>{\n                                        switch(selectedEvent.kind){\n                                            case \"interaction\":\n                                                {\n                                                    switch(entry.kind){\n                                                        case \"render\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: getRenderInput(selectedEvent)\n                                                                });\n                                                            }\n                                                        case \"other-javascript\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: getJSInput(selectedEvent)\n                                                                });\n                                                            }\n                                                        case \"other-not-javascript\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: getDrawInput(selectedEvent)\n                                                                });\n                                                            }\n                                                    }\n                                                }\n                                            case \"dropped-frames\":\n                                                {\n                                                    switch(entry.kind){\n                                                        case \"total-processing-time\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: {\n                                                                        kind: \"total-processing\",\n                                                                        data: {\n                                                                            time: getTotalTime(selectedEvent.timing)\n                                                                        }\n                                                                    }\n                                                                });\n                                                            }\n                                                        case \"render\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                        input: {\n                                                                            kind: \"render\",\n                                                                            data: {\n                                                                                topByTime: selectedEvent.groupedFiberRenders.toSorted((a, b)=>b.totalTime - a.totalTime).slice(0, 3).map((render2)=>({\n                                                                                        name: render2.name,\n                                                                                        percentage: render2.totalTime / getTotalTime(selectedEvent.timing)\n                                                                                    }))\n                                                                            }\n                                                                        }\n                                                                    })\n                                                                });\n                                                            }\n                                                        case \"other-frame-drop\":\n                                                            {\n                                                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Explanation, {\n                                                                    input: {\n                                                                        kind: \"other\"\n                                                                    }\n                                                                });\n                                                            }\n                                                    }\n                                                }\n                                        }\n                                    })\n                                })\n                            })\n                        ]\n                    }, entry.kind);\n                })\n            })\n        ]\n    });\n};\nvar getDrawInput = (event)=>{\n    const renderCount = event.groupedFiberRenders.reduce((prev, curr)=>prev + curr.count, 0);\n    const renderTime = event.timing.renderTime;\n    const totalTime = getTotalTime(event.timing);\n    const renderPercentage = renderTime / totalTime * 100;\n    if (renderCount > 100) {\n        return {\n            kind: \"high-render-count-update-dom-draw-frame\",\n            data: {\n                count: renderCount,\n                percentageOfTotal: renderPercentage,\n                copyButton: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyPromptButton, {})\n            }\n        };\n    }\n    return {\n        kind: \"update-dom-draw-frame\",\n        data: {\n            copyButton: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyPromptButton, {})\n        }\n    };\n};\nvar CopyPromptButton = ()=>{\n    const [copying, setCopying] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const { notificationState } = useNotificationsContext();\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        onClick: async ()=>{\n            if (!notificationState.selectedEvent) {\n                return;\n            }\n            await navigator.clipboard.writeText(getLLMPrompt(\"explanation\", notificationState.selectedEvent));\n            setCopying(true);\n            setTimeout(()=>setCopying(false), 1e3);\n        },\n        className: \"bg-zinc-800 flex hover:bg-zinc-700 text-zinc-200 px-2 py-1 rounded gap-x-3\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                children: copying ? \"Copied!\" : \"Copy Prompt\"\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                width: \"16\",\n                height: \"16\",\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                strokeWidth: \"2\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                className: cn([\n                    \"transition-transform duration-200\",\n                    copying && \"scale-110\"\n                ]),\n                children: copying ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                    d: \"M20 6L9 17l-5-5\"\n                }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"rect\", {\n                            width: \"14\",\n                            height: \"14\",\n                            x: \"8\",\n                            y: \"8\",\n                            rx: \"2\",\n                            ry: \"2\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                            d: \"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\nvar getRenderInput = (event)=>{\n    if (event.timing.renderTime / getTotalTime(event.timing) > 0.3) {\n        return {\n            kind: \"render\",\n            data: {\n                topByTime: event.groupedFiberRenders.toSorted((a, b)=>b.totalTime - a.totalTime).slice(0, 3).map((e)=>({\n                        percentage: e.totalTime / getTotalTime(event.timing),\n                        name: e.name\n                    }))\n            }\n        };\n    }\n    return {\n        kind: \"other\"\n    };\n};\nvar getJSInput = (event)=>{\n    const renderCount = event.groupedFiberRenders.reduce((prev, curr)=>prev + curr.count, 0);\n    if (event.timing.otherJSTime / getTotalTime(event.timing) < 0.2) {\n        return {\n            kind: \"js-explanation-base\"\n        };\n    }\n    if (event.groupedFiberRenders.find((render2)=>render2.count > 200) || event.groupedFiberRenders.reduce((prev, curr)=>prev + curr.count, 0) > 500) {\n        return {\n            kind: \"high-render-count-high-js\",\n            data: {\n                renderCount,\n                topByCount: event.groupedFiberRenders.filter((groupedRender)=>groupedRender.count > 100).toSorted((a, b)=>b.count - a.count).slice(0, 3)\n            }\n        };\n    }\n    if (event.timing.otherJSTime / getTotalTime(event.timing) > 0.3) {\n        if (event.timing.renderTime > 0.2) {\n            return {\n                kind: \"js-explanation-base\"\n            };\n        }\n        return {\n            kind: \"low-render-count-high-js\",\n            data: {\n                renderCount\n            }\n        };\n    }\n    return {\n        kind: \"js-explanation-base\"\n    };\n};\nvar Explanation = ({ input })=>{\n    switch(input.kind){\n        case \"total-processing\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"This is the time it took to draw the entire frame that was presented to the user. To be at 60FPS, this number needs to be \",\n                                \"<=16ms\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'To debug the issue, check the \"Ranked\" tab to see if there are significant component renders'\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"On a production React build, React Scan can't access the time it took for component to render. To get that information, run React Scan on a development build\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"To understand precisely what caused the slowdown while in production, use the \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: \"Chrome profiler\"\n                                }),\n                                \" and analyze the function call times.\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {})\n                    ]\n                });\n            }\n        case \"render\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This is the time it took React to run components, and internal logic to handle the output of your component.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"flex flex-col\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                    children: \"The slowest components for this time period were:\"\n                                }),\n                                input.data.topByTime.map((item)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                                children: item.name\n                                            }),\n                                            \":\",\n                                            \" \",\n                                            (item.percentage * 100).toFixed(0),\n                                            \"% of total\"\n                                        ]\n                                    }, item.name))\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'To view the render times of all your components, and what caused them to render, go to the \"Ranked\" tab'\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'The \"Ranked\" tab shows the render times of every component.'\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"The render times of the same components are grouped together into one bar.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"Clicking the component will show you what props, state, or context caused the component to re-render.\"\n                        })\n                    ]\n                });\n            }\n        case \"js-explanation-base\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This is the period when JavaScript hooks and other JavaScript outside of React Renders run.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"The most common culprit for high JS time is expensive hooks, like expensive callbacks inside of \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"useEffect\"\n                                }),\n                                \"'s or a large number of useEffect's called, but this can also be JavaScript event handlers (\",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"'onclick'\"\n                                }),\n                                \", \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"'onchange'\"\n                                }),\n                                \") that performed expensive computation.\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"If you have lots of components rendering that call hooks, like useEffect, it can add significant overhead even if the callbacks are not expensive. If this is the case, you can try optimizing the renders of those components to avoid the hook from having to run.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"You should profile your app using the\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: \"Chrome DevTools profiler\"\n                                }),\n                                \" to learn exactly which functions took the longest to execute.\"\n                            ]\n                        })\n                    ]\n                });\n            }\n        case \"high-render-count-high-js\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This is the period when JavaScript hooks and other JavaScript outside of React Renders run.\"\n                        }),\n                        input.data.renderCount === 0 ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                    children: \"There were no renders, which means nothing related to React caused this slowdown. The most likely cause of the slowdown is a slow JavaScript event handler, or code related to a Web API\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                                    children: [\n                                        \"You should try to reproduce the slowdown while profiling your website with the\",\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                            children: \"Chrome DevTools profiler\"\n                                        }),\n                                        \" to see exactly what functions took the longest to execute.\"\n                                    ]\n                                })\n                            ]\n                        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                            children: [\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                                    children: [\n                                        \"There were \",\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                            children: input.data.renderCount\n                                        }),\n                                        \" renders, which could have contributed to the high JavaScript/Hook time if they ran lots of hooks, like \",\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                            children: \"useEffects\"\n                                        }),\n                                        \".\"\n                                    ]\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"flex flex-col\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                            children: \"You should try optimizing the renders of:\"\n                                        }),\n                                        input.data.topByCount.map((item)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                                children: [\n                                                    \"- \",\n                                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                                        children: item.name\n                                                    }),\n                                                    \" (rendered \",\n                                                    item.count,\n                                                    \"x)\"\n                                                ]\n                                            }, item.name))\n                                    ]\n                                }),\n                                \"and then checking if the problem still exists.\",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                                    children: [\n                                        \"You can also try profiling your app using the\",\n                                        \" \",\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                            children: \"Chrome DevTools profiler\"\n                                        }),\n                                        \" to see exactly what functions took the longest to execute.\"\n                                    ]\n                                })\n                            ]\n                        })\n                    ]\n                });\n            }\n        case \"low-render-count-high-js\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This is the period when JavaScript hooks and other JavaScript outside of React Renders run.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"There were only \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: input.data.renderCount\n                                }),\n                                \" renders detected, which means either you had very expensive hooks like\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"useEffect\"\n                                }),\n                                \"/\",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"useLayoutEffect\"\n                                }),\n                                \", or there is other JavaScript running during this interaction that took up the majority of the time.\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"To understand precisely what caused the slowdown, use the\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: \"Chrome profiler\"\n                                }),\n                                \" and analyze the function call times.\"\n                            ]\n                        })\n                    ]\n                });\n            }\n        case \"high-render-count-update-dom-draw-frame\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"These are the calculations the browser is forced to do in response to the JavaScript that ran during the interaction.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This can be caused by CSS updates/CSS recalculations, or new DOM elements/DOM mutations.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"During this interaction, there were\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: input.data.count\n                                }),\n                                \" renders, which was\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"strong\", {\n                                    children: [\n                                        input.data.percentageOfTotal.toFixed(0),\n                                        \"%\"\n                                    ]\n                                }),\n                                \" of the time spent processing\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"The work performed as a result of the renders may have forced the browser to spend a lot of time to draw the next frame.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'You can try optimizing the renders to see if the performance problem still exists using the \"Ranked\" tab.'\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"If you use an AI-based code editor, you can export the performance data collected as a prompt.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: input.data.copyButton\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"Provide this formatted data to the model and ask it to find, or fix, what could be causing this performance problem.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'For a larger selection of prompts, try the \"Prompts\" tab'\n                        })\n                    ]\n                });\n            }\n        case \"update-dom-draw-frame\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"These are the calculations the browser is forced to do in response to the JavaScript that ran during the interaction.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"This can be caused by CSS updates/CSS recalculations, or new DOM elements/DOM mutations.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"If you use an AI-based code editor, you can export the performance data collected as a prompt.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: input.data.copyButton\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: \"Provide this formatted data to the model and ask it to find, or fix, what could be causing this performance problem.\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                            children: 'For a larger selection of prompts, try the \"Prompts\" tab'\n                        })\n                    ]\n                });\n            }\n        case \"other\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn([\n                        \"text-[#E4E4E7] text-[10px] leading-6 flex flex-col gap-y-2\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"This is the time it took to run everything other than React renders. This can be hooks like \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                                    children: \"useEffect\"\n                                }),\n                                \", other JavaScript not part of React, or work the browser has to do to update the DOM and draw the next frame.\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                            children: [\n                                \"To get a better picture of what happened, profile your app using the\",\n                                \" \",\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", {\n                                    children: \"Chrome profiler\"\n                                }),\n                                \" when the performance problem arises.\"\n                            ]\n                        })\n                    ]\n                });\n            }\n    }\n};\n// src/web/views/notifications/render-bar-chart.tsx\n\n// src/core/heatmap-overlay.ts\n\nvar highlightCanvas = null;\nvar highlightCtx = null;\nvar initialState = {\n    rects: [],\n    highlightedName: null,\n    opacity: 0,\n    isAnimating: false,\n    phase: \"idle\",\n    pendingHighlight: null\n};\nvar state = {\n    ...initialState\n};\nvar HighlightStore = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)({\n    kind: \"idle\",\n    current: null\n});\nvar currFrame = null;\nvar drawHighlights = ()=>{\n    if (currFrame) {\n        cancelAnimationFrame(currFrame);\n    }\n    currFrame = requestAnimationFrame(()=>{\n        if (!highlightCanvas || !highlightCtx) {\n            return;\n        }\n        highlightCtx.clearRect(0, 0, highlightCanvas.width, highlightCanvas.height);\n        const color = \"hsl(271, 76%, 53%)\";\n        const state2 = HighlightStore.value;\n        const { alpha, current } = iife(()=>{\n            switch(state2.kind){\n                case \"transition\":\n                    {\n                        const current2 = state2.current?.alpha && state2.current.alpha > 0 ? state2.current : state2.transitionTo;\n                        return {\n                            alpha: current2 ? current2.alpha : 0,\n                            current: current2\n                        };\n                    }\n                case \"move-out\":\n                    {\n                        return {\n                            alpha: state2.current?.alpha ?? 0,\n                            current: state2.current\n                        };\n                    }\n                case \"idle\":\n                    {\n                        return {\n                            alpha: 1,\n                            current: state2.current\n                        };\n                    }\n            }\n            state2;\n        });\n        current?.rects.forEach((rect)=>{\n            if (!highlightCtx) {\n                return;\n            }\n            highlightCtx.shadowColor = color;\n            highlightCtx.shadowBlur = 6;\n            highlightCtx.strokeStyle = color;\n            highlightCtx.lineWidth = 2;\n            highlightCtx.globalAlpha = alpha;\n            highlightCtx.beginPath();\n            highlightCtx.rect(rect.left, rect.top, rect.width, rect.height);\n            highlightCtx.stroke();\n            highlightCtx.shadowBlur = 0;\n            highlightCtx.beginPath();\n            highlightCtx.rect(rect.left, rect.top, rect.width, rect.height);\n            highlightCtx.stroke();\n        });\n        switch(state2.kind){\n            case \"move-out\":\n                {\n                    if (state2.current.alpha === 0) {\n                        HighlightStore.value = {\n                            kind: \"idle\",\n                            current: null\n                        };\n                        return;\n                    }\n                    if (state2.current.alpha <= 0.01) {\n                        state2.current.alpha = 0;\n                    }\n                    state2.current.alpha = Math.max(0, state2.current.alpha - 0.03);\n                    drawHighlights();\n                    return;\n                }\n            case \"transition\":\n                {\n                    if (state2.current && state2.current.alpha > 0) {\n                        state2.current.alpha = Math.max(0, state2.current.alpha - 0.03);\n                        drawHighlights();\n                        return;\n                    }\n                    if (state2.transitionTo.alpha === 1) {\n                        HighlightStore.value = {\n                            kind: \"idle\",\n                            current: state2.transitionTo\n                        };\n                        return;\n                    }\n                    state2.transitionTo.alpha = Math.min(state2.transitionTo.alpha + 0.03, 1);\n                    drawHighlights();\n                }\n            case \"idle\":\n                {\n                    return;\n                }\n        }\n    });\n};\nvar handleResizeListener = null;\nvar createHighlightCanvas = (root)=>{\n    highlightCanvas = document.createElement(\"canvas\");\n    highlightCtx = highlightCanvas.getContext(\"2d\", {\n        alpha: true\n    });\n    if (!highlightCtx) return null;\n    const dpr2 = window.devicePixelRatio || 1;\n    const { innerWidth, innerHeight } = window;\n    highlightCanvas.style.width = `${innerWidth}px`;\n    highlightCanvas.style.height = `${innerHeight}px`;\n    highlightCanvas.width = innerWidth * dpr2;\n    highlightCanvas.height = innerHeight * dpr2;\n    highlightCanvas.style.position = \"fixed\";\n    highlightCanvas.style.left = \"0\";\n    highlightCanvas.style.top = \"0\";\n    highlightCanvas.style.pointerEvents = \"none\";\n    highlightCanvas.style.zIndex = \"2147483600\";\n    highlightCtx.scale(dpr2, dpr2);\n    root.appendChild(highlightCanvas);\n    if (handleResizeListener) {\n        window.removeEventListener(\"resize\", handleResizeListener);\n    }\n    const handleResize = ()=>{\n        if (!highlightCanvas || !highlightCtx) return;\n        const dpr3 = window.devicePixelRatio || 1;\n        const { innerWidth: innerWidth2, innerHeight: innerHeight2 } = window;\n        highlightCanvas.style.width = `${innerWidth2}px`;\n        highlightCanvas.style.height = `${innerHeight2}px`;\n        highlightCanvas.width = innerWidth2 * dpr3;\n        highlightCanvas.height = innerHeight2 * dpr3;\n        highlightCtx.scale(dpr3, dpr3);\n        drawHighlights();\n    };\n    handleResizeListener = handleResize;\n    window.addEventListener(\"resize\", handleResize);\n    HighlightStore.subscribe(()=>{\n        requestAnimationFrame(()=>{\n            drawHighlights();\n        });\n    });\n};\n// src/web/views/notifications/render-bar-chart.tsx\n\nvar fadeOutHighlights = ()=>{\n    const curr = HighlightStore.value.current ? HighlightStore.value.current : HighlightStore.value.kind === \"transition\" ? HighlightStore.value.transitionTo : null;\n    if (!curr) {\n        return;\n    }\n    if (HighlightStore.value.kind === \"transition\") {\n        HighlightStore.value = {\n            kind: \"move-out\",\n            // because we want to dynamically fade this value\n            current: HighlightStore.value.current?.alpha === 0 ? // we want to only start fading from transition if current is done animating out\n            HighlightStore.value.transitionTo : // if current doesn't exist then transition must exist\n            HighlightStore.value.current ?? HighlightStore.value.transitionTo\n        };\n        return;\n    }\n    HighlightStore.value = {\n        kind: \"move-out\",\n        current: {\n            alpha: 0,\n            ...curr\n        }\n    };\n};\nvar RenderBarChart = ({ selectedEvent })=>{\n    const { setNotificationState, setRoute } = useNotificationsContext();\n    const totalInteractionTime = getTotalTime(selectedEvent.timing);\n    const nonRender = totalInteractionTime - selectedEvent.timing.renderTime;\n    const [isProduction2] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(getIsProduction());\n    const events = selectedEvent.groupedFiberRenders;\n    const bars = events.map((event)=>({\n            event,\n            kind: \"render\",\n            totalTime: isProduction2 ? event.count : event.totalTime\n        }));\n    const isShowingExtraInfo = iife(()=>{\n        switch(selectedEvent.kind){\n            case \"dropped-frames\":\n                {\n                    return selectedEvent.timing.renderTime / totalInteractionTime < 0.1;\n                }\n            case \"interaction\":\n                {\n                    return (selectedEvent.timing.otherJSTime + selectedEvent.timing.renderTime) / totalInteractionTime < 0.2;\n                }\n        }\n    });\n    if (selectedEvent.kind === \"interaction\" && !isProduction2) {\n        bars.push({\n            kind: \"other-javascript\",\n            totalTime: selectedEvent.timing.otherJSTime\n        });\n    }\n    if (isShowingExtraInfo && !isProduction2) {\n        if (selectedEvent.kind === \"interaction\") {\n            bars.push({\n                kind: \"other-not-javascript\",\n                totalTime: getTotalTime(selectedEvent.timing) - selectedEvent.timing.renderTime - selectedEvent.timing.otherJSTime\n            });\n        } else {\n            bars.push({\n                kind: \"other-frame-drop\",\n                totalTime: nonRender\n            });\n        }\n    }\n    const debouncedMouseEnter = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)({\n        lastCallAt: null,\n        timer: null\n    });\n    const totalBarTime = bars.reduce((prev, curr)=>prev + curr.totalTime, 0);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        onMouseLeave: ()=>{\n            fadeOutHighlights();\n        },\n        className: cn([\n            \"flex flex-col h-full w-full gap-y-1\"\n        ]),\n        children: [\n            iife(()=>{\n                if (isProduction2 && bars.length === 0) {\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"flex flex-col items-center justify-center h-full text-zinc-400\",\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: \"text-sm w-full text-left text-white mb-1.5\",\n                                children: \"No data available\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: \"text-x w-full text-lefts\",\n                                children: \"No data was collected during this period\"\n                            })\n                        ]\n                    });\n                }\n                if (bars.length === 0) {\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"flex flex-col items-center justify-center h-full text-zinc-400\",\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: \"text-sm w-full text-left text-white mb-1.5\",\n                                children: \"No renders collected\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: \"text-x w-full text-lefts\",\n                                children: \"There were no renders during this period\"\n                            })\n                        ]\n                    });\n                }\n            }),\n            bars.toSorted((a, b)=>b.totalTime - a.totalTime).map((bar, index)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onMouseLeave: ()=>{\n                        debouncedMouseEnter.current.timer && clearTimeout(debouncedMouseEnter.current.timer);\n                    },\n                    onMouseEnter: async ()=>{\n                        const highlightBars = async ()=>{\n                            debouncedMouseEnter.current.lastCallAt = Date.now();\n                            if (bar.kind !== \"render\") {\n                                const curr = HighlightStore.value.current ? HighlightStore.value.current : HighlightStore.value.kind === \"transition\" ? HighlightStore.value.transitionTo : null;\n                                if (!curr) {\n                                    HighlightStore.value = {\n                                        kind: \"idle\",\n                                        current: null\n                                    };\n                                    return;\n                                }\n                                HighlightStore.value = {\n                                    kind: \"move-out\",\n                                    current: {\n                                        alpha: 0,\n                                        ...curr\n                                    }\n                                };\n                                return;\n                            }\n                            const state2 = HighlightStore.value;\n                            const currentState = iife(()=>{\n                                switch(state2.kind){\n                                    case \"transition\":\n                                        {\n                                            return state2.transitionTo;\n                                        }\n                                    case \"idle\":\n                                    case \"move-out\":\n                                        {\n                                            return state2.current;\n                                        }\n                                }\n                            });\n                            const stateRects = [];\n                            if (state2.kind === \"transition\") {\n                                const transitionState = getTransitionState(state2);\n                                iife(()=>{\n                                    switch(transitionState){\n                                        case \"fading-in\":\n                                            {\n                                                HighlightStore.value = {\n                                                    kind: \"transition\",\n                                                    current: state2.transitionTo,\n                                                    transitionTo: {\n                                                        rects: stateRects,\n                                                        alpha: 0,\n                                                        name: bar.event.name\n                                                    }\n                                                };\n                                                return;\n                                            }\n                                        case \"fading-out\":\n                                            {\n                                                HighlightStore.value = {\n                                                    kind: \"transition\",\n                                                    current: HighlightStore.value.current ? {\n                                                        alpha: 0,\n                                                        ...HighlightStore.value.current\n                                                    } : null,\n                                                    transitionTo: {\n                                                        rects: stateRects,\n                                                        alpha: 0,\n                                                        name: bar.event.name\n                                                    }\n                                                };\n                                                return;\n                                            }\n                                    }\n                                });\n                            } else {\n                                HighlightStore.value = {\n                                    kind: \"transition\",\n                                    transitionTo: {\n                                        rects: stateRects,\n                                        alpha: 0,\n                                        name: bar.event.name\n                                    },\n                                    current: currentState ? {\n                                        alpha: 0,\n                                        ...currentState\n                                    } : null\n                                };\n                            }\n                            const trueElements = bar.event.elements.filter((element)=>element instanceof Element);\n                            for await (const entries of getBatchedRectMap(trueElements)){\n                                entries.forEach(({ boundingClientRect })=>{\n                                    stateRects.push(boundingClientRect);\n                                });\n                                drawHighlights();\n                            }\n                        };\n                        if (debouncedMouseEnter.current.lastCallAt && Date.now() - debouncedMouseEnter.current.lastCallAt < 200) {\n                            debouncedMouseEnter.current.timer && clearTimeout(debouncedMouseEnter.current.timer);\n                            debouncedMouseEnter.current.timer = setTimeout(()=>{\n                                highlightBars();\n                            }, 200);\n                            return;\n                        }\n                        highlightBars();\n                    },\n                    onClick: ()=>{\n                        if (bar.kind !== \"render\") {\n                            setRoute({\n                                route: \"other-visualization\",\n                                routeMessage: {\n                                    kind: \"auto-open-overview-accordion\",\n                                    name: bar.kind\n                                }\n                            });\n                            return;\n                        }\n                        setNotificationState((prev)=>({\n                                ...prev,\n                                selectedFiber: bar.event\n                            }));\n                        setRoute({\n                            route: \"render-explanation\",\n                            routeMessage: null\n                        });\n                    },\n                    className: cn([\n                        \"w-full flex items-center group hover:bg-[#0f0f0f] rounded-md relative transition-colors text-xs\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"h-full w-[90%]\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                style: {\n                                    minWidth: \"fit-content\",\n                                    width: `${bar.totalTime / totalBarTime * 100}%`\n                                },\n                                className: cn([\n                                    \"group-hover:bg-[#5b2d89]  flex items-center bg-[#412162] rounded-sm text-white text-xs relative h-[28px] transition-all\",\n                                    bar.kind === \"other-frame-drop\" && \"bg-[#18181B] group-hover:bg-[#272727]\",\n                                    bar.kind === \"other-javascript\" && \"bg-[#efd81a6b] group-hover:bg-[#efda1a2f]\",\n                                    bar.kind === \"other-not-javascript\" && \"bg-[#214379d4] group-hover:bg-[#21437982]\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"absolute left-2 top-1/2 -translate-y-1/2 flex gap-x-2\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: cn([\n                                                \"flex items-center whitespace-nowrap\"\n                                            ]),\n                                            children: iife(()=>{\n                                                switch(bar.kind){\n                                                    case \"other-frame-drop\":\n                                                        {\n                                                            return \"JavaScript, DOM updates, Draw Frame\";\n                                                        }\n                                                    case \"other-javascript\":\n                                                        {\n                                                            return \"JavaScript/React Hooks\";\n                                                        }\n                                                    case \"other-not-javascript\":\n                                                        {\n                                                            return \"Update DOM and Draw New Frame\";\n                                                        }\n                                                    case \"render\":\n                                                        {\n                                                            return bar.event.name;\n                                                        }\n                                                }\n                                            })\n                                        }),\n                                        bar.kind === \"render\" && isRenderMemoizable(bar.event) && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                            style: {\n                                                lineHeight: \"10px\"\n                                            },\n                                            className: cn([\n                                                \"px-1 py-0.5 bg-[#6a369e] flex items-center  rounded-sm font-semibold text-[8px] w-fit\"\n                                            ]),\n                                            children: \"Memoizable\"\n                                        })\n                                    ]\n                                })\n                            })\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"w-[5%] min-w-fit h-full flex items-center justify-end text-[10px] pr-1 gap-x-1\"\n                            ]),\n                            children: bar.kind === \"render\" && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                className: cn([\n                                    \"\"\n                                ]),\n                                children: [\n                                    \"x\",\n                                    bar.event.count\n                                ]\n                            })\n                        }),\n                        (bar.kind !== \"render\" || !isProduction2) && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"w-[5%] min-w-fit text-[#7346a0] h-full flex items-center justify-end text-[10px] pr-1 gap-x-1\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                children: [\n                                    bar.totalTime < 1 ? \"<1\" : bar.totalTime.toFixed(0),\n                                    \"ms\"\n                                ]\n                            })\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"absolute right-0 top-1/2 transition-none  -translate-y-1/2 bg-white text-black px-2 py-1 rounded text-xs opacity-0 group-hover:opacity-100 transition-opacity mr-16\",\n                                \"pointer-events-none\"\n                            ]),\n                            children: \"Click to learn more\"\n                        })\n                    ]\n                }, index))\n        ]\n    });\n};\nvar getTransitionState = (state2)=>{\n    if (!state2.current) {\n        return \"fading-in\";\n    }\n    if (state2.current.alpha > 0) {\n        return \"fading-out\";\n    }\n    return \"fading-in\";\n};\n// src/web/views/notifications/render-explanation.tsx\n\n\nvar RenderExplanation = ({ selectedEvent: _, selectedFiber })=>{\n    const { setRoute } = useNotificationsContext();\n    const [tipisShown, setTipIsShown] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const [isProduction2] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(getIsProduction());\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)({\n        \"RenderExplanation.useLayoutEffect\": ()=>{\n            const res = localStorage.getItem(\"react-scan-tip-shown\");\n            const asBool = res === \"true\" ? true : res === \"false\" ? false : null;\n            if (asBool === null) {\n                setTipIsShown(true);\n                localStorage.setItem(\"react-scan-tip-is-shown\", \"true\");\n                return;\n            }\n            if (!asBool) {\n                setTipIsShown(false);\n            }\n        }\n    }[\"RenderExplanation.useLayoutEffect\"], []);\n    const isMemoizable = selectedFiber.changes.context.length === 0 && selectedFiber.changes.props.length === 0 && selectedFiber.changes.state.length === 0;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            \"w-full min-h-fit h-full flex flex-col py-4 pt-0 rounded-sm\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"flex items-start gap-x-4 \"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                        onClick: ()=>{\n                            setRoute({\n                                route: \"render-visualization\",\n                                routeMessage: null\n                            });\n                        },\n                        className: cn([\n                            \"text-white hover:bg-[#34343b] flex gap-x-1 justify-center items-center mb-4 w-fit px-2.5 py-1.5 text-xs rounded-sm bg-[#18181B]\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ArrowLeft, {\n                                size: 14\n                            }),\n                            \" \",\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                children: \"Overview\"\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col gap-y-1\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"text-sm font-bold text-white overflow-x-hidden\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: \"flex items-center gap-x-2 truncate\",\n                                    children: selectedFiber.name\n                                })\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: cn([\n                                    \"flex gap-x-2\"\n                                ]),\n                                children: [\n                                    !isProduction2 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn([\n                                                \"text-xs text-gray-400\"\n                                            ]),\n                                            children: [\n                                                \"\\u2022 Render time: \",\n                                                selectedFiber.totalTime.toFixed(0),\n                                                \"ms\"\n                                            ]\n                                        })\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"text-xs text-gray-400 mb-4\"\n                                        ]),\n                                        children: [\n                                            \"\\u2022 Renders: \",\n                                            selectedFiber.count,\n                                            \"x\"\n                                        ]\n                                    })\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            tipisShown && !isMemoizable && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-full mb-4 bg-[#0A0A0A] border border-[#27272A] rounded-sm overflow-hidden flex relative\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            setTipIsShown(false);\n                            localStorage.setItem(\"react-scan-tip-shown\", \"false\");\n                        },\n                        className: cn([\n                            \"absolute right-2 top-2 rounded-sm p-1 hover:bg-[#18181B]\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CloseIcon, {\n                            size: 12\n                        })\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"w-1 bg-[#d36cff]\"\n                        ])\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex-1\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"px-3 py-2 text-gray-100 text-xs font-semibold\"\n                                ]),\n                                children: \"How to stop renders\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"px-3 pb-2 text-gray-400 text-[10px]\"\n                                ]),\n                                children: \"Stop the following props, state and context from changing between renders, and wrap the component in React.memo if not already\"\n                            })\n                        ]\n                    })\n                ]\n            }),\n            isMemoizable && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-full mb-4 bg-[#0A0A0A] border border-[#27272A] rounded-sm overflow-hidden flex\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"w-1 bg-[#d36cff]\"\n                        ])\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex-1\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"px-3 py-2 text-gray-100 text-sm font-semibold\"\n                                ]),\n                                children: \"No changes detected\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"px-3 pb-2 text-gray-400 text-xs\"\n                                ]),\n                                children: \"This component would not of rendered if it was memoized\"\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"flex w-full\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col border border-[#27272A] rounded-l-sm overflow-hidden w-1/3\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"text-[14px] font-semibold px-2 py-2 bg-[#18181B] text-white flex justify-center\"\n                                ]),\n                                children: \"Changed Props\"\n                            }),\n                            selectedFiber.changes.props.length > 0 ? selectedFiber.changes.props.toSorted((a, b)=>b.count - a.count).map((change)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"flex flex-col justify-between items-center border-t overflow-x-auto border-[#27272A] px-1 py-1 text-wrap bg-[#0A0A0A] text-[10px]\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: cn([\n                                                \"text-white \"\n                                            ]),\n                                            children: change.name\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn([\n                                                \" text-[8px]  text-[#d36cff] pl-1 py-1 \"\n                                            ]),\n                                            children: [\n                                                change.count,\n                                                \"/\",\n                                                selectedFiber.count,\n                                                \"x\"\n                                            ]\n                                        })\n                                    ]\n                                }, change.name)) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center justify-center h-full bg-[#0A0A0A] text-[#A1A1AA] border-t border-[#27272A]\"\n                                ]),\n                                children: \"No changes\"\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col border border-[#27272A] border-l-0 overflow-hidden w-1/3\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \" text-[14px] font-semibold px-2 py-2 bg-[#18181B] text-white flex justify-center\"\n                                ]),\n                                children: \"Changed State\"\n                            }),\n                            selectedFiber.changes.state.length > 0 ? selectedFiber.changes.state.toSorted((a, b)=>b.count - a.count).map((change)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"flex flex-col justify-between items-center border-t overflow-x-auto border-[#27272A] px-1 py-1 text-wrap bg-[#0A0A0A] text-[10px]\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                            className: cn([\n                                                \"text-white \"\n                                            ]),\n                                            children: [\n                                                \"index \",\n                                                change.index\n                                            ]\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn([\n                                                \"rounded-full  text-[#d36cff] pl-1 py-1 text-[8px]\"\n                                            ]),\n                                            children: [\n                                                change.count,\n                                                \"/\",\n                                                selectedFiber.count,\n                                                \"x\"\n                                            ]\n                                        })\n                                    ]\n                                }, change.index)) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center justify-center h-full bg-[#0A0A0A] text-[#A1A1AA] border-t border-[#27272A]\"\n                                ]),\n                                children: \"No changes\"\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col border border-[#27272A] border-l-0 rounded-r-sm overflow-hidden w-1/3\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \" text-[14px] font-semibold px-2 py-2 bg-[#18181B] text-white flex justify-center\"\n                                ]),\n                                children: \"Changed Context\"\n                            }),\n                            selectedFiber.changes.context.length > 0 ? selectedFiber.changes.context.toSorted((a, b)=>b.count - a.count).map((change)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: cn([\n                                        \"flex flex-col justify-between items-center border-t  border-[#27272A] px-1 py-1 bg-[#0A0A0A] text-[10px] overflow-x-auto\"\n                                    ]),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: cn([\n                                                \"text-white \"\n                                            ]),\n                                            children: change.name\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn([\n                                                \"rounded-full text-[#d36cff] pl-1 py-1 text-[8px] text-wrap\"\n                                            ]),\n                                            children: [\n                                                change.count,\n                                                \"/\",\n                                                selectedFiber.count,\n                                                \"x\"\n                                            ]\n                                        })\n                                    ]\n                                }, change.name)) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center justify-center h-full bg-[#0A0A0A] text-[#A1A1AA] border-t border-[#27272A] py-2\"\n                                ]),\n                                children: \"No changes\"\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n};\n// src/web/views/notifications/details-routes.tsx\n\nvar DetailsRoutes = ()=>{\n    const { notificationState, setNotificationState } = useNotificationsContext();\n    const [dots, setDots] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(\"...\");\n    const containerRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(null);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"DetailsRoutes.useEffect4\": ()=>{\n            const interval = setInterval({\n                \"DetailsRoutes.useEffect4.interval\": ()=>{\n                    setDots({\n                        \"DetailsRoutes.useEffect4.interval\": (prev)=>{\n                            if (prev === \"...\") return \"\";\n                            return prev + \".\";\n                        }\n                    }[\"DetailsRoutes.useEffect4.interval\"]);\n                }\n            }[\"DetailsRoutes.useEffect4.interval\"], 500);\n            return ({\n                \"DetailsRoutes.useEffect4\": ()=>clearInterval(interval)\n            })[\"DetailsRoutes.useEffect4\"];\n        }\n    }[\"DetailsRoutes.useEffect4\"], []);\n    if (!notificationState.selectedEvent) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            ref: containerRef,\n            className: cn([\n                \"h-full w-full flex flex-col items-center justify-center relative py-2 px-4\"\n            ]),\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        \"p-2 flex justify-center items-center border-[#27272A] absolute top-0 right-0\"\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        onClick: ()=>{\n                            signalSettingsOpen.value = false;\n                            signalNotificationsOpen.value = false;\n                        },\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CloseIcon, {\n                            size: 18,\n                            className: \"text-[#6F6F78]\"\n                        })\n                    })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        \"flex flex-col items-start pt-5 bg-[#0A0A0A] p-5 rounded-sm max-w-md\",\n                        \" shadow-lg\"\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"flex flex-col items-start gap-y-4\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                    className: cn([\n                                        \"text-zinc-400 font-medium text-[17px]\"\n                                    ]),\n                                    children: [\n                                        \"Scanning for slowdowns\",\n                                        dots\n                                    ]\n                                })\n                            }),\n                            notificationState.events.length !== 0 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                                className: cn([\n                                    \"text-xs\"\n                                ]),\n                                children: [\n                                    \"Click on an item in the\",\n                                    \" \",\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: cn([\n                                            \"text-purple-400\"\n                                        ]),\n                                        children: \"History\"\n                                    }),\n                                    \" list to get started\"\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: cn([\n                                    \"text-zinc-600 text-xs\"\n                                ]),\n                                children: \"You don't need to keep this panel open for React Scan to record slowdowns\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                className: cn([\n                                    \"text-zinc-600 text-xs\"\n                                ]),\n                                children: \"Enable audio alerts to hear a delightful ding every time a large slowdown is recorded\"\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                onClick: ()=>{\n                                    if (notificationState.audioNotificationsOptions.enabled) {\n                                        setNotificationState((prev)=>{\n                                            if (prev.audioNotificationsOptions.audioContext?.state !== \"closed\") {\n                                                prev.audioNotificationsOptions.audioContext?.close();\n                                            }\n                                            return {\n                                                ...prev,\n                                                audioNotificationsOptions: {\n                                                    audioContext: null,\n                                                    enabled: false\n                                                }\n                                            };\n                                        });\n                                        return;\n                                    }\n                                    localStorage.setItem(\"react-scan-notifications-audio\", \"true\");\n                                    const audioContext = new AudioContext();\n                                    playNotificationSound(audioContext);\n                                    setNotificationState((prev)=>({\n                                            ...prev,\n                                            audioNotificationsOptions: {\n                                                enabled: true,\n                                                audioContext\n                                            }\n                                        }));\n                                },\n                                className: cn([\n                                    \"px-4 py-2 bg-zinc-800 hover:bg-zinc-700 rounded-sm w-full\",\n                                    \" text-sm flex items-center gap-x-2 justify-center\"\n                                ]),\n                                children: notificationState.audioNotificationsOptions.enabled ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"flex items-center gap-x-1\",\n                                        children: \"Disable audio alerts\"\n                                    })\n                                }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"flex items-center gap-x-1\",\n                                        children: \"Enable audio alerts\"\n                                    })\n                                })\n                            })\n                        ]\n                    })\n                })\n            ]\n        });\n    }\n    switch(notificationState.route){\n        case \"render-visualization\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TabLayout, {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(RenderBarChart, {\n                        selectedEvent: notificationState.selectedEvent\n                    })\n                });\n            }\n        case \"render-explanation\":\n            {\n                if (!notificationState.selectedFiber) {\n                    throw new Error(\"Invariant: must have selected fiber when viewing render explanation\");\n                }\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TabLayout, {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(RenderExplanation, {\n                        selectedFiber: notificationState.selectedFiber,\n                        selectedEvent: notificationState.selectedEvent\n                    })\n                });\n            }\n        case \"other-visualization\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TabLayout, {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(OtherVisualization, {\n                        selectedEvent: notificationState.selectedEvent\n                    })\n                });\n            }\n        case \"optimize\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TabLayout, {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Optimize, {\n                        selectedEvent: notificationState.selectedEvent\n                    })\n                });\n            }\n    }\n    notificationState.route;\n};\nvar TabLayout = ({ children })=>{\n    const { notificationState } = useNotificationsContext();\n    if (!notificationState.selectedEvent) {\n        throw new Error(\"Invariant: d must have selected event when viewing render explanation\");\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            `w-full h-full flex flex-col gap-y-2`\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn([\n                    \"h-[50px] w-full\"\n                ]),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(NotificationTabs, {\n                    selectedEvent: notificationState.selectedEvent\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                id: \"overview-scroll-container\",\n                className: cn([\n                    \"h-calc(100%-50px) flex flex-col overflow-y-auto px-3\"\n                ]),\n                children\n            })\n        ]\n    });\n};\n// src/web/views/notifications/notification-header.tsx\n\nvar NotificationHeader = ({ selectedEvent })=>{\n    const severity = getEventSeverity(selectedEvent);\n    switch(selectedEvent.kind){\n        case \"interaction\":\n            {\n                return(// h-[48px] is a hack to adjust for header size\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        `w-full flex border-b border-[#27272A] min-h-[48px]`\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"min-w-fit w-full justify-start flex items-center border-r border-[#27272A] pl-5 pr-2 text-sm gap-x-4\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: cn([\n                                    \"flex items-center gap-x-2 \"\n                                ]),\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: cn([\n                                            \"text-[#5a5a5a] mr-0.5\"\n                                        ]),\n                                        children: selectedEvent.type === \"click\" ? \"Clicked \" : \"Typed in \"\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        children: getComponentName(selectedEvent.componentPath)\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"w-fit flex items-center justify-center h-fit text-white px-1 rounded-sm font-semibold text-[10px] whitespace-nowrap\",\n                                            severity === \"low\" && \"bg-green-500/50\",\n                                            severity === \"needs-improvement\" && \"bg-[#b77116]\",\n                                            severity === \"high\" && \"bg-[#b94040]\"\n                                        ]),\n                                        children: [\n                                            getTotalTime(selectedEvent.timing).toFixed(0),\n                                            \"ms processing time\"\n                                        ]\n                                    })\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center gap-x-2  justify-end ml-auto\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: cn([\n                                        \"p-2 flex justify-center items-center border-[#27272A]\"\n                                    ]),\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                        onClick: ()=>{\n                                            signalSettingsOpen.value = false;\n                                            signalNotificationsOpen.value = false;\n                                        },\n                                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CloseIcon, {\n                                            size: 18,\n                                            className: \"text-[#6F6F78]\"\n                                        })\n                                    })\n                                })\n                            })\n                        ]\n                    })\n                }));\n            }\n        case \"dropped-frames\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        `w-full flex border-b border-[#27272A] min-h-[48px]`\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn([\n                            \"min-w-fit w-full justify-start flex items-center border-r border-[#27272A] pl-5 pr-2 text-sm gap-x-4\"\n                        ]),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: cn([\n                                    \"flex items-center gap-x-2 \"\n                                ]),\n                                children: [\n                                    \"FPS Drop\",\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"w-fit flex items-center justify-center h-fit text-white px-1 rounded-sm font-semibold text-[10px] whitespace-nowrap\",\n                                            severity === \"low\" && \"bg-green-500/50\",\n                                            severity === \"needs-improvement\" && \"bg-[#b77116]\",\n                                            severity === \"high\" && \"bg-[#b94040]\"\n                                        ]),\n                                        children: [\n                                            \"dropped to \",\n                                            selectedEvent.fps,\n                                            \" FPS\"\n                                        ]\n                                    })\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn([\n                                    \"flex items-center gap-x-2 w-2/4 justify-end ml-auto\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: cn([\n                                        \"p-2 flex justify-center items-center border-[#27272A]\"\n                                    ]),\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                        onClick: ()=>{\n                                            signalSettingsOpen.value = false;\n                                            signalNotificationsOpen.value = false;\n                                        },\n                                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CloseIcon, {\n                                            size: 18,\n                                            className: \"text-[#6F6F78]\"\n                                        })\n                                    })\n                                })\n                            })\n                        ]\n                    })\n                });\n            }\n    }\n};\n// src/web/views/notifications/slowdown-history.tsx\n\n\nvar useFlashManager = (events)=>{\n    const prevEventsRef = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)([]);\n    const [newEventIds, setNewEventIds] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(/* @__PURE__ */ new Set());\n    const isInitialMount = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(true);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"useFlashManager.useEffect5\": ()=>{\n            if (isInitialMount.current) {\n                isInitialMount.current = false;\n                prevEventsRef.current = events;\n                return;\n            }\n            const currentIds = new Set(events.map({\n                \"useFlashManager.useEffect5\": (e)=>e.id\n            }[\"useFlashManager.useEffect5\"]));\n            const prevIds = new Set(prevEventsRef.current.map({\n                \"useFlashManager.useEffect5\": (e)=>e.id\n            }[\"useFlashManager.useEffect5\"]));\n            const newIds = /* @__PURE__ */ new Set();\n            currentIds.forEach({\n                \"useFlashManager.useEffect5\": (id)=>{\n                    if (!prevIds.has(id)) {\n                        newIds.add(id);\n                    }\n                }\n            }[\"useFlashManager.useEffect5\"]);\n            if (newIds.size > 0) {\n                setNewEventIds(newIds);\n                setTimeout({\n                    \"useFlashManager.useEffect5\": ()=>{\n                        setNewEventIds(/* @__PURE__ */ new Set());\n                    }\n                }[\"useFlashManager.useEffect5\"], 2e3);\n            }\n            prevEventsRef.current = events;\n        }\n    }[\"useFlashManager.useEffect5\"], [\n        events\n    ]);\n    return (id)=>newEventIds.has(id);\n};\nvar useFlash = ({ shouldFlash })=>{\n    const [isFlashing, setIsFlashing] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(shouldFlash);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"useFlash.useEffect5\": ()=>{\n            if (shouldFlash) {\n                setIsFlashing(true);\n                const timer = setTimeout({\n                    \"useFlash.useEffect5.timer\": ()=>{\n                        setIsFlashing(false);\n                    }\n                }[\"useFlash.useEffect5.timer\"], 1e3);\n                return ({\n                    \"useFlash.useEffect5\": ()=>clearTimeout(timer)\n                })[\"useFlash.useEffect5\"];\n            }\n        }\n    }[\"useFlash.useEffect5\"], [\n        shouldFlash\n    ]);\n    return isFlashing;\n};\nvar SlowdownHistoryItem = ({ event, shouldFlash })=>{\n    const { notificationState, setNotificationState } = useNotificationsContext();\n    const severity = getEventSeverity(event);\n    const isFlashing = useFlash({\n        shouldFlash\n    });\n    switch(event.kind){\n        case \"interaction\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onClick: ()=>{\n                        setNotificationState((prev)=>({\n                                ...prev,\n                                selectedEvent: event,\n                                route: prev.route === \"other-visualization\" || prev.route === \"optimize\" ? \"other-visualization\" : \"render-visualization\",\n                                selectedFiber: null\n                            }));\n                    },\n                    className: cn([\n                        \"pl-2 py-1.5  text-sm flex w-full items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\",\n                        event.id === notificationState.selectedEvent?.id && \"bg-[#18181B]\",\n                        isFlashing && \"after:absolute after:inset-0 after:bg-purple-500/30 after:animate-[fadeOut_1s_ease-out_forwards]\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"w-4/5 flex items-center justify-start h-full gap-x-1.5\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"min-w-fit text-xs\"\n                                    ]),\n                                    children: iife(()=>{\n                                        switch(event.type){\n                                            case \"click\":\n                                                {\n                                                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PointerIcon, {\n                                                        size: 14\n                                                    });\n                                                }\n                                            case \"keyboard\":\n                                                {\n                                                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(KeyboardIcon, {\n                                                        size: 14\n                                                    });\n                                                }\n                                        }\n                                    })\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"text-xs pr-1 truncate\"\n                                    ]),\n                                    children: getComponentName(event.componentPath)\n                                })\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \" min-w-fit flex justify-end items-center ml-auto\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                style: {\n                                    lineHeight: \"10px\"\n                                },\n                                className: cn([\n                                    \"gap-x-0.5 w-fit flex items-end justify-center h-full text-white px-1 py-1 rounded-sm font-semibold text-[10px]\",\n                                    severity === \"low\" && \"bg-green-500/50\",\n                                    severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                                    severity === \"high\" && \"bg-[#b94040]\"\n                                ]),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    style: {\n                                        lineHeight: \"10px\"\n                                    },\n                                    className: cn([\n                                        \"text-[10px] text-white flex items-end\"\n                                    ]),\n                                    children: [\n                                        getTotalTime(event.timing).toFixed(0),\n                                        \"ms\"\n                                    ]\n                                })\n                            })\n                        })\n                    ]\n                });\n            }\n        case \"dropped-frames\":\n            {\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onClick: ()=>{\n                        setNotificationState((prev)=>({\n                                ...prev,\n                                selectedEvent: event,\n                                route: prev.route === \"other-visualization\" || prev.route === \"optimize\" ? \"other-visualization\" : \"render-visualization\",\n                                selectedFiber: null\n                            }));\n                    },\n                    className: cn([\n                        \"pl-2 py-1.5  w-full text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\",\n                        event.id === notificationState.selectedEvent?.id && \"bg-[#18181B]\",\n                        isFlashing && \"after:absolute after:inset-0 after:bg-purple-500/30 after:animate-[fadeOut_1s_ease-out_forwards]\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"w-4/5 flex items-center justify-start h-full text-xs truncate\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TrendingDownIcon, {\n                                    size: 14,\n                                    className: \"mr-1.5\"\n                                }),\n                                \" FPS Drop\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \" min-w-fit flex justify-end items-center ml-auto\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                style: {\n                                    lineHeight: \"10px\"\n                                },\n                                className: cn([\n                                    \"w-fit flex items-center justify-center h-full text-white px-1 py-1 rounded-sm text-[10px] font-bold\",\n                                    severity === \"low\" && \"bg-green-500/60\",\n                                    severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                                    severity === \"high\" && \"bg-[#b94040]\"\n                                ]),\n                                children: [\n                                    event.fps,\n                                    \" FPS\"\n                                ]\n                            })\n                        })\n                    ]\n                });\n            }\n    }\n};\nvar collapseEvents = (events)=>{\n    const newEvents = events.reduce((prev, curr)=>{\n        const lastEvent = prev.at(-1);\n        if (!lastEvent) {\n            return [\n                {\n                    kind: \"single\",\n                    event: curr,\n                    timestamp: curr.timestamp\n                }\n            ];\n        }\n        switch(lastEvent.kind){\n            case \"collapsed-keyboard\":\n                {\n                    if (curr.kind === \"interaction\" && curr.type === \"keyboard\" && // must be on the same semantic component, it would be ideal to compare on fiberId, but i digress\n                    curr.componentPath.join(\"-\") === lastEvent.events[0].componentPath.join(\"-\")) {\n                        const eventsWithoutLast = prev.filter((e)=>e !== lastEvent);\n                        return [\n                            ...eventsWithoutLast,\n                            {\n                                kind: \"collapsed-keyboard\",\n                                events: [\n                                    ...lastEvent.events,\n                                    curr\n                                ],\n                                timestamp: Math.max(...[\n                                    ...lastEvent.events,\n                                    curr\n                                ].map((e)=>e.timestamp))\n                            }\n                        ];\n                    }\n                    return [\n                        ...prev,\n                        {\n                            kind: \"single\",\n                            event: curr,\n                            timestamp: curr.timestamp\n                        }\n                    ];\n                }\n            case \"single\":\n                {\n                    if (lastEvent.event.kind === \"interaction\" && lastEvent.event.type === \"keyboard\" && curr.kind === \"interaction\" && curr.type === \"keyboard\" && lastEvent.event.componentPath.join(\"-\") === curr.componentPath.join(\"-\")) {\n                        const eventsWithoutLast = prev.filter((e)=>e !== lastEvent);\n                        return [\n                            ...eventsWithoutLast,\n                            {\n                                kind: \"collapsed-keyboard\",\n                                events: [\n                                    lastEvent.event,\n                                    curr\n                                ],\n                                timestamp: Math.max(lastEvent.event.timestamp, curr.timestamp)\n                            }\n                        ];\n                    }\n                    if (lastEvent.event.kind === \"dropped-frames\" && curr.kind === \"dropped-frames\") {\n                        const eventsWithoutLast = prev.filter((e)=>e !== lastEvent);\n                        return [\n                            ...eventsWithoutLast,\n                            {\n                                kind: \"multiple\",\n                                events: [\n                                    lastEvent.event,\n                                    curr\n                                ],\n                                timestamp: Math.max(lastEvent.event.timestamp, curr.timestamp)\n                            }\n                        ];\n                    }\n                    return [\n                        ...prev,\n                        {\n                            kind: \"single\",\n                            event: curr,\n                            timestamp: curr.timestamp\n                        }\n                    ];\n                }\n            case \"multiple\":\n                {\n                    if (curr.kind === \"dropped-frames\") {\n                        const eventsWithoutLast = prev.filter((e)=>e !== lastEvent);\n                        return [\n                            ...eventsWithoutLast,\n                            {\n                                kind: \"multiple\",\n                                events: [\n                                    ...lastEvent.events,\n                                    curr\n                                ],\n                                timestamp: Math.max(...[\n                                    ...lastEvent.events,\n                                    curr\n                                ].map((e)=>e.timestamp))\n                            }\n                        ];\n                    }\n                    return [\n                        ...prev,\n                        {\n                            kind: \"single\",\n                            event: curr,\n                            timestamp: curr.timestamp\n                        }\n                    ];\n                }\n        }\n    }, []);\n    return newEvents;\n};\nvar useLaggedEvents = (lagMs = 150)=>{\n    const { notificationState } = useNotificationsContext();\n    const [laggedEvents, setLaggedEvents] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(notificationState.events);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"useLaggedEvents.useEffect5\": ()=>{\n            setTimeout({\n                \"useLaggedEvents.useEffect5\": ()=>{\n                    setLaggedEvents(notificationState.events);\n                }\n            }[\"useLaggedEvents.useEffect5\"], lagMs);\n        }\n    }[\"useLaggedEvents.useEffect5\"], [\n        notificationState.events\n    ]);\n    return [\n        laggedEvents,\n        setLaggedEvents\n    ];\n};\nvar SlowdownHistory = ()=>{\n    const { notificationState, setNotificationState } = useNotificationsContext();\n    const shouldFlash = useFlashManager(notificationState.events);\n    const [laggedEvents, setLaggedEvents] = useLaggedEvents();\n    const collapsedEvents = collapseEvents(laggedEvents).toSorted((a, b)=>b.timestamp - a.timestamp);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn([\n            `w-full h-full gap-y-2 flex flex-col border-r border-[#27272A] pt-2 overflow-y-auto`\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"text-sm text-[#65656D] pl-3 pr-1 w-full flex items-center justify-between\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        children: \"History\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Popover, {\n                        wrapperProps: {\n                            className: \"h-full flex items-center justify-center ml-auto\"\n                        },\n                        triggerContent: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                            className: cn([\n                                \"hover:bg-[#18181B] rounded-full p-2\"\n                            ]),\n                            onClick: ()=>{\n                                toolbarEventStore.getState().actions.clear();\n                                setNotificationState((prev)=>({\n                                        ...prev,\n                                        selectedEvent: null,\n                                        selectedFiber: null,\n                                        route: prev.route === \"other-visualization\" ? \"other-visualization\" : \"render-visualization\"\n                                    }));\n                                setLaggedEvents([]);\n                            },\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ClearIcon, {\n                                className: cn([\n                                    \"\"\n                                ]),\n                                size: 16\n                            })\n                        }),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"w-full flex justify-center\"\n                            ]),\n                            children: \"Clear all events\"\n                        })\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"flex flex-col px-1 gap-y-1\"\n                ]),\n                children: [\n                    collapsedEvents.length === 0 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"flex items-center justify-center text-zinc-500 text-sm py-4\"\n                        ]),\n                        children: \"No Events\"\n                    }),\n                    collapsedEvents.map((historyItem)=>iife(()=>{\n                            switch(historyItem.kind){\n                                case \"collapsed-keyboard\":\n                                    {\n                                        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CollapsedKeyboard, {\n                                            shouldFlash,\n                                            collapsedKeyboardInput: historyItem\n                                        });\n                                    }\n                                case \"single\":\n                                    {\n                                        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlowdownHistoryItem, {\n                                            event: historyItem.event,\n                                            shouldFlash: shouldFlash(historyItem.event.id)\n                                        }, historyItem.event.id);\n                                    }\n                                case \"multiple\":\n                                    {\n                                        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CollapsedItem, {\n                                            shouldFlash,\n                                            historyItem\n                                        });\n                                    }\n                            }\n                        }))\n                ]\n            })\n        ]\n    });\n};\nvar IndentedContent = ({ children })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"relative pl-6 flex flex-col gap-y-1\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"absolute left-3 top-0 bottom-0 w-px bg-[#27272A]\"\n            }),\n            children\n        ]\n    });\nvar CollapsedKeyboard = ({ collapsedKeyboardInput, shouldFlash })=>{\n    const [expanded, setExpanded] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(false);\n    const severity = collapsedKeyboardInput.events.map(getEventSeverity).reduce((prev, curr)=>{\n        switch(curr){\n            case \"high\":\n                {\n                    return \"high\";\n                }\n            case \"needs-improvement\":\n                {\n                    return prev === \"high\" ? \"high\" : \"needs-improvement\";\n                }\n            case \"low\":\n                {\n                    return prev;\n                }\n        }\n    }, \"low\");\n    const flashingItemsCount = collapsedKeyboardInput.events.reduce((prev, curr)=>shouldFlash(curr.id) ? prev + 1 : prev, 0);\n    const newFlash = useNestedFlash({\n        flashingItemsCount,\n        totalEvents: collapsedKeyboardInput.events.length\n    });\n    if (expanded) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: cn([\n                \"flex flex-col gap-y-1 object-contain\"\n            ]),\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onClick: ()=>setExpanded(false),\n                    className: cn([\n                        \"pl-1.5 py-1.5 text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"w-4/5 flex items-center justify-start h-full text-xs truncate gap-x-1.5 min-w-fit\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChevronRight, {\n                                    className: \"rotate-90 text-[#A1A1AA] transition-transform\",\n                                    size: 10\n                                }, `chevron-${collapsedKeyboardInput.timestamp}`),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"text-xs\"\n                                    ]),\n                                    children: getComponentName(collapsedKeyboardInput.events[0].componentPath)\n                                })\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \" min-w-fit flex justify-end items-center ml-auto\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                style: {\n                                    lineHeight: \"10px\"\n                                },\n                                className: cn([\n                                    \"w-fit flex text-[10px] items-center justify-center h-full text-white px-1 py-1 rounded-sm font-semibold\",\n                                    severity === \"low\" && \"bg-green-500/50\",\n                                    severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                                    severity === \"high\" && \"bg-[#b94040]\"\n                                ]),\n                                children: [\n                                    \"x\",\n                                    collapsedKeyboardInput.events.length\n                                ]\n                            })\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(IndentedContent, {\n                    children: collapsedKeyboardInput.events.toSorted((a, b)=>b.timestamp - a.timestamp).map((event)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlowdownHistoryItem, {\n                            event,\n                            shouldFlash: false\n                        }, event.id))\n                })\n            ]\n        });\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        onClick: ()=>setExpanded(true),\n        className: cn([\n            \"pl-1.5 py-1.5 text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\",\n            newFlash && \"after:absolute after:inset-0 after:bg-purple-500/30 after:animate-[fadeOut_1s_ease-out_forwards]\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-4/5 flex items-center justify-start h-full text-xs truncate gap-x-1.5\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChevronRight, {\n                        className: \"text-[#A1A1AA] transition-transform min-w-fit\",\n                        size: 10\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: cn([\n                            \"text-xs\"\n                        ]),\n                        children: getComponentName(collapsedKeyboardInput.events[0].componentPath)\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn([\n                    \"min-w-fit flex justify-end items-center ml-auto\"\n                ]),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    style: {\n                        lineHeight: \"10px\"\n                    },\n                    className: cn([\n                        \"w-fit flex text-[10px] items-center justify-center h-full text-white px-1 py-1 rounded-sm font-semibold\",\n                        severity === \"low\" && \"bg-green-500/50\",\n                        severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                        severity === \"high\" && \"bg-[#b94040]\"\n                    ]),\n                    children: [\n                        \"x\",\n                        collapsedKeyboardInput.events.length\n                    ]\n                })\n            })\n        ]\n    });\n};\nvar useNestedFlash = ({ flashingItemsCount, totalEvents })=>{\n    const [newFlash, setNewFlash] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(false);\n    const flashedFor = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(0);\n    const lastFlashTime = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useRef)(0);\n    (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useEffect)({\n        \"useNestedFlash.useEffect5\": ()=>{\n            if (flashedFor.current >= totalEvents) {\n                return;\n            }\n            const now = Date.now();\n            const debounceTime = 250;\n            const timeSinceLastFlash = now - lastFlashTime.current;\n            if (timeSinceLastFlash >= debounceTime) {\n                setNewFlash(false);\n                const timeout2 = setTimeout({\n                    \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                        flashedFor.current = totalEvents;\n                        lastFlashTime.current = Date.now();\n                        setNewFlash(true);\n                        setTimeout({\n                            \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                                setNewFlash(false);\n                            }\n                        }[\"useNestedFlash.useEffect5.timeout2\"], 2e3);\n                    }\n                }[\"useNestedFlash.useEffect5.timeout2\"], 50);\n                return ({\n                    \"useNestedFlash.useEffect5\": ()=>clearTimeout(timeout2)\n                })[\"useNestedFlash.useEffect5\"];\n            } else {\n                const delayNeeded = debounceTime - timeSinceLastFlash;\n                const timeout2 = setTimeout({\n                    \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                        setNewFlash(false);\n                        setTimeout({\n                            \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                                flashedFor.current = totalEvents;\n                                lastFlashTime.current = Date.now();\n                                setNewFlash(true);\n                                setTimeout({\n                                    \"useNestedFlash.useEffect5.timeout2\": ()=>{\n                                        setNewFlash(false);\n                                    }\n                                }[\"useNestedFlash.useEffect5.timeout2\"], 2e3);\n                            }\n                        }[\"useNestedFlash.useEffect5.timeout2\"], 50);\n                    }\n                }[\"useNestedFlash.useEffect5.timeout2\"], delayNeeded);\n                return ({\n                    \"useNestedFlash.useEffect5\": ()=>clearTimeout(timeout2)\n                })[\"useNestedFlash.useEffect5\"];\n            }\n        }\n    }[\"useNestedFlash.useEffect5\"], [\n        flashingItemsCount\n    ]);\n    return newFlash;\n};\nvar CollapsedItem = ({ historyItem, shouldFlash })=>{\n    useNotificationsContext();\n    const [expanded, setExpanded] = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useState)(false);\n    const severity = historyItem.events.map(getEventSeverity).reduce((prev, curr)=>{\n        switch(curr){\n            case \"high\":\n                {\n                    return \"high\";\n                }\n            case \"needs-improvement\":\n                {\n                    return prev === \"high\" ? \"high\" : \"needs-improvement\";\n                }\n            case \"low\":\n                {\n                    return prev;\n                }\n        }\n    }, \"low\");\n    const flashingItemsCount = historyItem.events.reduce((prev, curr)=>shouldFlash(curr.id) ? prev + 1 : prev, 0);\n    const newFlash = useNestedFlash({\n        flashingItemsCount,\n        totalEvents: historyItem.events.length\n    });\n    if (expanded) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: cn([\n                \"flex flex-col gap-y-0.5\"\n            ]),\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    onClick: ()=>setExpanded(false),\n                    className: cn([\n                        \"pl-2 py-1.5  text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\"\n                    ]),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn([\n                                \"w-4/5 flex items-center justify-start h-full text-xs truncate gap-x-1.5\"\n                            ]),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"min-w-fit\"\n                                    ]),\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChevronRight, {\n                                        className: \"rotate-90 text-[#A1A1AA] transition-transform\",\n                                        size: 14\n                                    }, `chevron-${historyItem.timestamp}`)\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn([\n                                        \"text-xs\"\n                                    ]),\n                                    children: \"FPS Drops\"\n                                })\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: cn([\n                                \"ml-auto min-w-fit flex justify-end items-center\"\n                            ]),\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                style: {\n                                    lineHeight: \"10px\"\n                                },\n                                className: cn([\n                                    \"w-fit flex items-center text-[10px] justify-center h-full text-white px-1 py-1 rounded-sm font-semibold\",\n                                    severity === \"low\" && \"bg-green-500/60\",\n                                    severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                                    severity === \"high\" && \"bg-[#b94040]\"\n                                ]),\n                                children: [\n                                    \"x\",\n                                    historyItem.events.length\n                                ]\n                            })\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(IndentedContent, {\n                    children: historyItem.events.toSorted((a, b)=>b.timestamp - a.timestamp).map((event)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlowdownHistoryItem, {\n                            event,\n                            shouldFlash: shouldFlash(event.id)\n                        }))\n                })\n            ]\n        });\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        onClick: ()=>setExpanded(true),\n        className: cn([\n            \"pl-2  py-1.5 text-sm flex items-center rounded-sm hover:bg-[#18181B] relative overflow-hidden\",\n            \"group\",\n            newFlash && \"after:absolute after:inset-0 after:bg-purple-500/30 after:animate-[fadeOut_1s_ease-out_forwards]\"\n        ]),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-4/5 flex items-center justify-start h-full text-xs truncate gap-x-1.5\"\n                ]),\n                children: [\n                    \" \",\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChevronRight, {\n                        className: \"text-[#A1A1AA] transition-transform\",\n                        size: 14\n                    }, `chevron-${historyItem.timestamp}`),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: cn([\n                            \"text-xs\"\n                        ]),\n                        children: \"FPS Drops\"\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn([\n                    \"ml-auto min-w-fit flex justify-end items-center\"\n                ]),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    style: {\n                        lineHeight: \"10px\"\n                    },\n                    className: cn([\n                        \"w-fit flex items-center text-[10px] justify-center h-full text-white px-1 py-1 rounded-sm font-semibold\",\n                        severity === \"low\" && \"bg-green-500/60\",\n                        severity === \"needs-improvement\" && \"bg-[#b77116] text-[10px]\",\n                        severity === \"high\" && \"bg-[#b94040]\"\n                    ]),\n                    children: [\n                        \"x\",\n                        historyItem.events.length\n                    ]\n                })\n            })\n        ]\n    });\n};\n// src/web/views/notifications/notifications.tsx\n\nvar getGroupedFiberRenders = (fiberRenders)=>{\n    const res = Object.values(fiberRenders).map((render2)=>({\n            id: not_globally_unique_generateId(),\n            totalTime: render2.nodeInfo.reduce((prev, curr)=>prev + curr.selfTime, 0),\n            count: render2.nodeInfo.length,\n            name: render2.nodeInfo[0].name,\n            // invariant, at least one exists,\n            deletedAll: false,\n            // it would be nice if we calculated the % of components memoizable, but this would have to be calculated downstream before it got aggregated\n            elements: render2.nodeInfo.map((node)=>node.element),\n            changes: {\n                context: render2.changes.fiberContext.current.filter((change)=>render2.changes.fiberContext.changesCounts.get(change.name)).map((change)=>({\n                        name: String(change.name),\n                        count: render2.changes.fiberContext.changesCounts.get(change.name) ?? 0\n                    })),\n                props: render2.changes.fiberProps.current.filter((change)=>render2.changes.fiberProps.changesCounts.get(change.name)).map((change)=>({\n                        name: String(change.name),\n                        count: render2.changes.fiberProps.changesCounts.get(change.name) ?? 0\n                    })),\n                state: render2.changes.fiberState.current.filter((change)=>render2.changes.fiberState.changesCounts.get(Number(change.name))).map((change)=>({\n                        index: change.name,\n                        count: render2.changes.fiberState.changesCounts.get(Number(change.name)) ?? 0\n                    }))\n            }\n        }));\n    return res;\n};\nvar useGarbageCollectElements = (notificationEvents)=>{\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"useGarbageCollectElements.useEffect6\": ()=>{\n            const checkElementsExistence = {\n                \"useGarbageCollectElements.useEffect6.checkElementsExistence\": ()=>{\n                    notificationEvents.forEach({\n                        \"useGarbageCollectElements.useEffect6.checkElementsExistence\": (event)=>{\n                            if (!event.groupedFiberRenders) return;\n                            event.groupedFiberRenders.forEach({\n                                \"useGarbageCollectElements.useEffect6.checkElementsExistence\": (render2)=>{\n                                    if (render2.deletedAll) return;\n                                    if (!render2.elements || render2.elements.length === 0) {\n                                        render2.deletedAll = true;\n                                        return;\n                                    }\n                                    const initialLength = render2.elements.length;\n                                    render2.elements = render2.elements.filter({\n                                        \"useGarbageCollectElements.useEffect6.checkElementsExistence\": (element)=>{\n                                            return element && element.isConnected;\n                                        }\n                                    }[\"useGarbageCollectElements.useEffect6.checkElementsExistence\"]);\n                                    if (render2.elements.length === 0 && initialLength > 0) {\n                                        render2.deletedAll = true;\n                                    }\n                                }\n                            }[\"useGarbageCollectElements.useEffect6.checkElementsExistence\"]);\n                        }\n                    }[\"useGarbageCollectElements.useEffect6.checkElementsExistence\"]);\n                }\n            }[\"useGarbageCollectElements.useEffect6.checkElementsExistence\"];\n            const intervalId = setInterval(checkElementsExistence, 5e3);\n            return ({\n                \"useGarbageCollectElements.useEffect6\": ()=>{\n                    clearInterval(intervalId);\n                }\n            })[\"useGarbageCollectElements.useEffect6\"];\n        }\n    }[\"useGarbageCollectElements.useEffect6\"], [\n        notificationEvents\n    ]);\n};\nvar useAppNotifications = ()=>{\n    const log2 = useToolbarEventLog();\n    const notificationEvents = [];\n    useGarbageCollectElements(notificationEvents);\n    log2.state.events.forEach((event)=>{\n        const fiberRenders = event.kind === \"interaction\" ? event.data.meta.detailedTiming.fiberRenders : event.data.meta.fiberRenders;\n        const groupedFiberRenders = getGroupedFiberRenders(fiberRenders);\n        const renderTime = groupedFiberRenders.reduce((prev, curr)=>prev + curr.totalTime, 0);\n        switch(event.kind){\n            case \"interaction\":\n                {\n                    const { commitEnd, jsEndDetail, interactionStartDetail, rafStart } = event.data.meta.detailedTiming;\n                    if (jsEndDetail - interactionStartDetail - renderTime < 0) {\n                        invariantError(\"js time must be longer than render time\");\n                    }\n                    const otherJSTime = Math.max(0, jsEndDetail - interactionStartDetail - renderTime);\n                    const frameDraw = Math.max(event.data.meta.latency - (commitEnd - interactionStartDetail), 0);\n                    notificationEvents.push({\n                        componentPath: event.data.meta.detailedTiming.componentPath,\n                        groupedFiberRenders,\n                        id: event.id,\n                        kind: \"interaction\",\n                        memory: null,\n                        timestamp: event.data.startAt,\n                        type: event.data.meta.detailedTiming.interactionType === \"keyboard\" ? \"keyboard\" : \"click\",\n                        timing: {\n                            renderTime,\n                            kind: \"interaction\",\n                            otherJSTime,\n                            framePreparation: rafStart - jsEndDetail,\n                            frameConstruction: commitEnd - rafStart,\n                            frameDraw\n                        }\n                    });\n                    return;\n                }\n            case \"long-render\":\n                {\n                    notificationEvents.push({\n                        kind: \"dropped-frames\",\n                        id: event.id,\n                        memory: null,\n                        timing: {\n                            kind: \"dropped-frames\",\n                            renderTime,\n                            otherTime: event.data.meta.latency\n                        },\n                        groupedFiberRenders,\n                        timestamp: event.data.startAt,\n                        fps: event.data.meta.fps\n                    });\n                    return;\n                }\n        }\n    });\n    return notificationEvents;\n};\nvar timeout = 1e3;\nvar NotificationAudio = ()=>{\n    const { notificationState, setNotificationState } = useNotificationsContext();\n    const playedFor = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const debounceTimeout = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const lastPlayedTime = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const [laggedEvents] = useLaggedEvents();\n    const alertEventsCount = laggedEvents.filter(// todo: make this configurable\n    (event)=>getEventSeverity(event) === \"high\").length;\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"NotificationAudio.useEffect6\": ()=>{\n            const audioEnabledString = localStorage.getItem(\"react-scan-notifications-audio\");\n            if (audioEnabledString !== \"false\" && audioEnabledString !== \"true\") {\n                localStorage.setItem(\"react-scan-notifications-audio\", \"false\");\n                return;\n            }\n            const audioEnabled = audioEnabledString === \"false\" ? false : true;\n            if (audioEnabled) {\n                setNotificationState({\n                    \"NotificationAudio.useEffect6\": (prev)=>{\n                        if (prev.audioNotificationsOptions.enabled) {\n                            return prev;\n                        }\n                        return {\n                            ...prev,\n                            audioNotificationsOptions: {\n                                enabled: true,\n                                audioContext: new AudioContext()\n                            }\n                        };\n                    }\n                }[\"NotificationAudio.useEffect6\"]);\n                return;\n            }\n        }\n    }[\"NotificationAudio.useEffect6\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"NotificationAudio.useEffect6\": ()=>{\n            const { audioNotificationsOptions } = notificationState;\n            if (!audioNotificationsOptions.enabled) {\n                return;\n            }\n            if (alertEventsCount === 0) {\n                return;\n            }\n            if (playedFor.current && playedFor.current >= alertEventsCount) {\n                return;\n            }\n            if (debounceTimeout.current) {\n                clearTimeout(debounceTimeout.current);\n            }\n            const now = Date.now();\n            const timeSinceLastPlay = now - lastPlayedTime.current;\n            const remainingDebounceTime = Math.max(0, timeout - timeSinceLastPlay);\n            debounceTimeout.current = setTimeout({\n                \"NotificationAudio.useEffect6\": ()=>{\n                    playNotificationSound(audioNotificationsOptions.audioContext);\n                    playedFor.current = alertEventsCount;\n                    lastPlayedTime.current = Date.now();\n                    debounceTimeout.current = null;\n                }\n            }[\"NotificationAudio.useEffect6\"], remainingDebounceTime);\n        }\n    }[\"NotificationAudio.useEffect6\"], [\n        alertEventsCount\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"NotificationAudio.useEffect6\": ()=>{\n            if (alertEventsCount !== 0) {\n                return;\n            }\n            playedFor.current = null;\n        }\n    }[\"NotificationAudio.useEffect6\"], [\n        alertEventsCount\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"NotificationAudio.useEffect6\": ()=>{\n            return ({\n                \"NotificationAudio.useEffect6\": ()=>{\n                    if (debounceTimeout.current) {\n                        clearTimeout(debounceTimeout.current);\n                    }\n                }\n            })[\"NotificationAudio.useEffect6\"];\n        }\n    }[\"NotificationAudio.useEffect6\"], []);\n    return null;\n};\nvar NotificationWrapper = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.forwardRef)((_, ref)=>{\n    const events = useAppNotifications();\n    const [notificationState, setNotificationState] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        detailsExpanded: false,\n        events,\n        filterBy: \"latest\",\n        moreInfoExpanded: false,\n        route: \"render-visualization\",\n        selectedEvent: events.toSorted({\n            \"NotificationWrapper.useState8\": (a, b)=>a.timestamp - b.timestamp\n        }[\"NotificationWrapper.useState8\"]).at(-1) ?? null,\n        selectedFiber: null,\n        routeMessage: null,\n        audioNotificationsOptions: {\n            enabled: false,\n            audioContext: null\n        }\n    });\n    notificationState.events = events;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(NotificationStateContext.Provider, {\n        value: {\n            notificationState,\n            setNotificationState,\n            setRoute: ({ route, routeMessage })=>{\n                setNotificationState((prev)=>{\n                    const newState = {\n                        ...prev,\n                        route,\n                        routeMessage\n                    };\n                    switch(route){\n                        case \"render-visualization\":\n                            {\n                                fadeOutHighlights();\n                                return {\n                                    ...newState,\n                                    selectedFiber: null\n                                };\n                            }\n                        case \"optimize\":\n                            {\n                                fadeOutHighlights();\n                                return {\n                                    ...newState,\n                                    selectedFiber: null\n                                };\n                            }\n                        case \"other-visualization\":\n                            {\n                                fadeOutHighlights();\n                                return {\n                                    ...newState,\n                                    selectedFiber: null\n                                };\n                            }\n                        case \"render-explanation\":\n                            {\n                                fadeOutHighlights();\n                                return newState;\n                            }\n                    }\n                    route;\n                });\n            }\n        },\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(NotificationAudio, {}),\n            signalNotificationsOpen.value && Store.inspectState.value.kind === \"inspect-off\" && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Notifications, {\n                ref\n            })\n        ]\n    });\n});\nvar Notifications = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.forwardRef)((_, ref)=>{\n    const { notificationState } = useNotificationsContext();\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        ref,\n        className: cn([\n            \"h-full w-full flex flex-col\"\n        ]),\n        children: [\n            notificationState.selectedEvent && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"w-full h-[48px] flex flex-col\",\n                    notificationState.moreInfoExpanded && \"h-[235px]\",\n                    notificationState.moreInfoExpanded && notificationState.selectedEvent.kind === \"dropped-frames\" && \"h-[150px]\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(NotificationHeader, {\n                        selectedEvent: notificationState.selectedEvent\n                    }),\n                    notificationState.moreInfoExpanded && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(MoreInfo, {})\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn([\n                    \"flex \",\n                    notificationState.selectedEvent ? \"h-[calc(100%-48px)]\" : \"h-full\",\n                    notificationState.moreInfoExpanded && \"h-[calc(100%-200px)]\",\n                    notificationState.moreInfoExpanded && notificationState.selectedEvent?.kind === \"dropped-frames\" && \"h-[calc(100%-150px)]\"\n                ]),\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"h-full min-w-[200px]\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlowdownHistory, {})\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn([\n                            \"w-[calc(100%-200px)] h-full overflow-y-auto\"\n                        ]),\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DetailsRoutes, {})\n                    })\n                ]\n            })\n        ]\n    });\n});\nvar MoreInfo = ()=>{\n    const { notificationState } = useNotificationsContext();\n    if (!notificationState.selectedEvent) {\n        throw new Error(\"Invariant must have selected event for more info\");\n    }\n    const event = notificationState.selectedEvent;\n    const date = new Date(event.timestamp);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: cn([\n            \"px-4 py-2 border-b border-[#27272A] bg-[#18181B]/50 h-[calc(100%-40px)]\",\n            event.kind === \"dropped-frames\" && `h-[calc(100%-25px)]`\n        ]),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: cn([\n                \"flex flex-col gap-y-4 h-full\"\n            ]),\n            children: iife(()=>{\n                switch(event.kind){\n                    case \"interaction\":\n                        {\n                            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: event.type === \"click\" ? \"Clicked component location\" : \"Typed in component location\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                                className: \"font-mono text-[#E4E4E7] flex items-center bg-[#27272A] pl-2 py-1 rounded-sm overflow-x-auto\",\n                                                children: event.componentPath.toReversed().map((part, i)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                        children: [\n                                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                                style: {\n                                                                    lineHeight: \"14px\"\n                                                                },\n                                                                className: \"text-[10px] whitespace-nowrap\",\n                                                                children: part\n                                                            }, part),\n                                                            i < event.componentPath.length - 1 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                                className: \"text-[#6F6F78] mx-0.5\",\n                                                                children: \"\\u2039\"\n                                                            })\n                                                        ]\n                                                    }))\n                                            })\n                                        ]\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: \"Total Time\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                                className: \"text-[#E4E4E7] bg-[#27272A] px-1.5 py-1 rounded-sm text-xs\",\n                                                children: [\n                                                    getTotalTime(event.timing).toFixed(0),\n                                                    \"ms\"\n                                                ]\n                                            })\n                                        ]\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: \"Occurred\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#E4E4E7] bg-[#27272A] px-1.5 py-1 rounded-sm text-xs\",\n                                                children: `${((Date.now() - event.timestamp) / 1e3).toFixed(0)}s ago`\n                                            })\n                                        ]\n                                    })\n                                ]\n                            });\n                        }\n                    case \"dropped-frames\":\n                        {\n                            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: \"Total Time\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                                className: \"text-[#E4E4E7] bg-[#27272A] px-1.5 py-1 rounded-sm text-xs\",\n                                                children: [\n                                                    getTotalTime(event.timing).toFixed(0),\n                                                    \"ms\"\n                                                ]\n                                            })\n                                        ]\n                                    }),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: cn([\n                                            \"flex items-center gap-x-3\"\n                                        ]),\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#6F6F78] text-xs font-medium\",\n                                                children: \"Occurred\"\n                                            }),\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"text-[#E4E4E7] bg-[#27272A] px-1.5 py-1 rounded-sm text-xs\",\n                                                children: `${((Date.now() - event.timestamp) / 1e3).toFixed(0)}s ago`\n                                            })\n                                        ]\n                                    })\n                                ]\n                            });\n                        }\n                }\n            })\n        })\n    });\n};\n// src/web/views/widget/components-tree/index.tsx\n\n// src/web/hooks/use-virtual-list.ts\n\nvar useVirtualList = (options)=>{\n    const { count, getScrollElement, estimateSize, overscan = 5 } = options;\n    const [scrollTop, setScrollTop] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [containerHeight, setContainerHeight] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const refResizeObserver = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const refScrollElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refRafId = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const itemHeight = estimateSize();\n    const updateContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"useVirtualList.useCallback[updateContainer]\": (entries)=>{\n            if (!refScrollElement.current) return;\n            const height = entries?.[0]?.contentRect.height ?? refScrollElement.current.getBoundingClientRect().height;\n            setContainerHeight(height);\n        }\n    }[\"useVirtualList.useCallback[updateContainer]\"], []);\n    const debouncedUpdateContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"useVirtualList.useCallback[debouncedUpdateContainer]\": ()=>{\n            if (refRafId.current !== null) {\n                cancelAnimationFrame(refRafId.current);\n            }\n            refRafId.current = requestAnimationFrame({\n                \"useVirtualList.useCallback[debouncedUpdateContainer]\": ()=>{\n                    updateContainer();\n                    refRafId.current = null;\n                }\n            }[\"useVirtualList.useCallback[debouncedUpdateContainer]\"]);\n        }\n    }[\"useVirtualList.useCallback[debouncedUpdateContainer]\"], [\n        updateContainer\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"useVirtualList.useEffect7\": ()=>{\n            const element = getScrollElement();\n            if (!element) return;\n            refScrollElement.current = element;\n            const handleScroll = {\n                \"useVirtualList.useEffect7.handleScroll\": ()=>{\n                    if (!refScrollElement.current) return;\n                    setScrollTop(refScrollElement.current.scrollTop);\n                }\n            }[\"useVirtualList.useEffect7.handleScroll\"];\n            updateContainer();\n            if (!refResizeObserver.current) {\n                refResizeObserver.current = new ResizeObserver({\n                    \"useVirtualList.useEffect7\": ()=>{\n                        debouncedUpdateContainer();\n                    }\n                }[\"useVirtualList.useEffect7\"]);\n            }\n            refResizeObserver.current.observe(element);\n            element.addEventListener(\"scroll\", handleScroll, {\n                passive: true\n            });\n            const mutationObserver = new MutationObserver(debouncedUpdateContainer);\n            mutationObserver.observe(element, {\n                attributes: true,\n                childList: true,\n                subtree: true\n            });\n            return ({\n                \"useVirtualList.useEffect7\": ()=>{\n                    element.removeEventListener(\"scroll\", handleScroll);\n                    if (refResizeObserver.current) {\n                        refResizeObserver.current.disconnect();\n                    }\n                    mutationObserver.disconnect();\n                    if (refRafId.current !== null) {\n                        cancelAnimationFrame(refRafId.current);\n                    }\n                }\n            })[\"useVirtualList.useEffect7\"];\n        }\n    }[\"useVirtualList.useEffect7\"], [\n        getScrollElement,\n        updateContainer,\n        debouncedUpdateContainer\n    ]);\n    const visibleRange = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"useVirtualList.useMemo[visibleRange]\": ()=>{\n            const start2 = Math.floor(scrollTop / itemHeight);\n            const visibleCount = Math.ceil(containerHeight / itemHeight);\n            return {\n                start: Math.max(0, start2 - overscan),\n                end: Math.min(count, start2 + visibleCount + overscan)\n            };\n        }\n    }[\"useVirtualList.useMemo[visibleRange]\"], [\n        scrollTop,\n        itemHeight,\n        containerHeight,\n        count,\n        overscan\n    ]);\n    const items = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"useVirtualList.useMemo[items]\": ()=>{\n            const virtualItems = [];\n            for(let index = visibleRange.start; index < visibleRange.end; index++){\n                virtualItems.push({\n                    key: index,\n                    index,\n                    start: index * itemHeight\n                });\n            }\n            return virtualItems;\n        }\n    }[\"useVirtualList.useMemo[items]\"], [\n        visibleRange,\n        itemHeight\n    ]);\n    return {\n        virtualItems: items,\n        totalSize: count * itemHeight,\n        scrollTop,\n        containerHeight\n    };\n};\n// src/web/utils/pin.ts\nvar metadata = readLocalStorage(\"react-scann-pinned\");\nvar getFiberPath = (fiber)=>{\n    const pathSegments = [];\n    let currentFiber = fiber;\n    while(currentFiber){\n        const elementType = currentFiber.elementType;\n        const name = typeof elementType === \"function\" ? elementType.displayName || elementType.name : typeof elementType === \"string\" ? elementType : \"Unknown\";\n        const index = currentFiber.index !== void 0 ? `[${currentFiber.index}]` : \"\";\n        pathSegments.unshift(`${name}${index}`);\n        currentFiber = currentFiber.return ?? null;\n    }\n    return pathSegments.join(\"::\");\n};\n// src/web/views/icon/index.tsx\n\n\nvar Icon = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.forwardRef)(({ size = 15, name, fill = \"currentColor\", stroke = \"currentColor\", className, externalURL = \"\", style }, ref)=>{\n    const width = Array.isArray(size) ? size[0] : size;\n    const height = Array.isArray(size) ? size[1] || size[0] : size;\n    const path = `${externalURL}#${name}`;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        ref,\n        width: `${width}px`,\n        height: `${height}px`,\n        fill,\n        stroke,\n        className,\n        style: {\n            ...style,\n            minWidth: `${width}px`,\n            maxWidth: `${width}px`,\n            minHeight: `${height}px`,\n            maxHeight: `${height}px`\n        },\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"title\", {\n                children: name\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"use\", {\n                href: path\n            })\n        ]\n    });\n});\n// src/web/views/inspector/states.ts\n\n// src/web/views/inspector/flash-overlay.ts\nvar fadeOutTimers = /* @__PURE__ */ new WeakMap();\nvar trackElementPosition = (element, callback)=>{\n    const handleScroll = callback.bind(null, element);\n    document.addEventListener(\"scroll\", handleScroll, {\n        passive: true,\n        capture: true\n    });\n    return ()=>{\n        document.removeEventListener(\"scroll\", handleScroll, {\n            capture: true\n        });\n    };\n};\nvar flashManager = {\n    activeFlashes: /* @__PURE__ */ new Map(),\n    create (container) {\n        const existingOverlay = container.querySelector(\".react-scan-flash-overlay\");\n        const overlay = existingOverlay instanceof HTMLElement ? existingOverlay : (()=>{\n            const newOverlay = document.createElement(\"div\");\n            newOverlay.className = \"react-scan-flash-overlay\";\n            container.appendChild(newOverlay);\n            const scrollCleanup = trackElementPosition(container, ()=>{\n                if (container.querySelector(\".react-scan-flash-overlay\")) {\n                    this.create(container);\n                }\n            });\n            this.activeFlashes.set(container, {\n                element: container,\n                overlay: newOverlay,\n                scrollCleanup\n            });\n            return newOverlay;\n        })();\n        const existingTimer = fadeOutTimers.get(overlay);\n        if (existingTimer) {\n            clearTimeout(existingTimer);\n            fadeOutTimers.delete(overlay);\n        }\n        requestAnimationFrame(()=>{\n            overlay.style.transition = \"none\";\n            overlay.style.opacity = \"0.9\";\n            const timerId = setTimeout(()=>{\n                overlay.style.transition = \"opacity 150ms ease-out\";\n                overlay.style.opacity = \"0\";\n                const cleanupTimer = setTimeout(()=>{\n                    if (overlay.parentNode) {\n                        overlay.parentNode.removeChild(overlay);\n                    }\n                    const entry = this.activeFlashes.get(container);\n                    if (entry?.scrollCleanup) {\n                        entry.scrollCleanup();\n                    }\n                    this.activeFlashes.delete(container);\n                    fadeOutTimers.delete(overlay);\n                }, 150);\n                fadeOutTimers.set(overlay, cleanupTimer);\n            }, 300);\n            fadeOutTimers.set(overlay, timerId);\n        });\n    },\n    cleanup (container) {\n        const entry = this.activeFlashes.get(container);\n        if (entry) {\n            const existingTimer = fadeOutTimers.get(entry.overlay);\n            if (existingTimer) {\n                clearTimeout(existingTimer);\n                fadeOutTimers.delete(entry.overlay);\n            }\n            if (entry.overlay.parentNode) {\n                entry.overlay.parentNode.removeChild(entry.overlay);\n            }\n            if (entry.scrollCleanup) {\n                entry.scrollCleanup();\n            }\n            this.activeFlashes.delete(container);\n        }\n    },\n    cleanupAll () {\n        for (const [, entry] of this.activeFlashes){\n            this.cleanup(entry.element);\n        }\n    }\n};\n// src/web/views/inspector/states.ts\nvar TIMELINE_MAX_UPDATES = 1e3;\nvar timelineStateDefault = {\n    updates: [],\n    currentFiber: null,\n    totalUpdates: 0,\n    windowOffset: 0,\n    currentIndex: 0,\n    isViewingHistory: false,\n    latestFiber: null,\n    isVisible: false,\n    playbackSpeed: 1\n};\nvar timelineState = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(timelineStateDefault);\nvar inspectorUpdateSignal = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(0);\nvar pendingUpdates = [];\nvar batchTimeout = null;\nvar batchUpdates = ()=>{\n    if (pendingUpdates.length === 0) return;\n    const batchedUpdates = [\n        ...pendingUpdates\n    ];\n    const { updates, totalUpdates, currentIndex, isViewingHistory } = timelineState.value;\n    const newUpdates = [\n        ...updates\n    ];\n    let newTotalUpdates = totalUpdates;\n    for (const { update } of batchedUpdates){\n        if (newUpdates.length >= TIMELINE_MAX_UPDATES) {\n            newUpdates.shift();\n        }\n        newUpdates.push(update);\n        newTotalUpdates++;\n    }\n    const newWindowOffset = Math.max(0, newTotalUpdates - TIMELINE_MAX_UPDATES);\n    let newCurrentIndex;\n    if (isViewingHistory) {\n        if (currentIndex === totalUpdates - 1) {\n            newCurrentIndex = newUpdates.length - 1;\n        } else if (currentIndex === 0) {\n            newCurrentIndex = 0;\n        } else {\n            if (newWindowOffset === 0) {\n                newCurrentIndex = currentIndex;\n            } else {\n                newCurrentIndex = currentIndex - 1;\n            }\n        }\n    } else {\n        newCurrentIndex = newUpdates.length - 1;\n    }\n    const lastUpdate = batchedUpdates[batchedUpdates.length - 1];\n    timelineState.value = {\n        ...timelineState.value,\n        latestFiber: lastUpdate.fiber,\n        updates: newUpdates,\n        totalUpdates: newTotalUpdates,\n        windowOffset: newWindowOffset,\n        currentIndex: newCurrentIndex,\n        isViewingHistory\n    };\n    pendingUpdates = pendingUpdates.slice(batchedUpdates.length);\n};\nvar timelineActions = {\n    showTimeline: ()=>{\n        timelineState.value = {\n            ...timelineState.value,\n            isVisible: true\n        };\n    },\n    hideTimeline: ()=>{\n        timelineState.value = {\n            ...timelineState.value,\n            isVisible: false,\n            currentIndex: timelineState.value.updates.length - 1\n        };\n    },\n    updateFrame: (index, isViewingHistory)=>{\n        timelineState.value = {\n            ...timelineState.value,\n            currentIndex: index,\n            isViewingHistory\n        };\n    },\n    updatePlaybackSpeed: (speed)=>{\n        timelineState.value = {\n            ...timelineState.value,\n            playbackSpeed: speed\n        };\n    },\n    addUpdate: (update, latestFiber)=>{\n        pendingUpdates.push({\n            update,\n            fiber: latestFiber\n        });\n        if (!batchTimeout) {\n            const processBatch = ()=>{\n                batchUpdates();\n                batchTimeout = null;\n                if (pendingUpdates.length > 0) {\n                    batchTimeout = setTimeout(processBatch, 96);\n                }\n            };\n            batchTimeout = setTimeout(processBatch, 96);\n        }\n    },\n    reset: ()=>{\n        if (batchTimeout) {\n            clearTimeout(batchTimeout);\n            batchTimeout = null;\n        }\n        pendingUpdates = [];\n        timelineState.value = timelineStateDefault;\n    }\n};\n// src/web/views/widget/components-tree/breadcrumb.tsx\n\n// src/web/views/widget/components-tree/state.ts\n\nvar searchState = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)({\n    query: \"\",\n    matches: [],\n    currentMatchIndex: -1\n});\nvar signalSkipTreeUpdate = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n// src/web/views/widget/components-tree/breadcrumb.tsx\n\nvar Breadcrumb = ({ selectedElement })=>{\n    const refContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refPaths = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const [path, setPath] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [areAllItemsVisible, setAreAllItemsVisible] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Breadcrumb.useEffect8\": ()=>{\n            if (!selectedElement) return;\n            const ancestors = getInspectableAncestors(selectedElement);\n            setPath(ancestors);\n        }\n    }[\"Breadcrumb.useEffect8\"], [\n        selectedElement\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Breadcrumb.useEffect8\": ()=>{\n            let timeoutId;\n            const checkVisibility = {\n                \"Breadcrumb.useEffect8.checkVisibility\": ()=>{\n                    clearTimeout(timeoutId);\n                    timeoutId = setTimeout({\n                        \"Breadcrumb.useEffect8.checkVisibility\": ()=>{\n                            if (refContainer.current && refPaths.current) {\n                                const isFullyVisible = refContainer.current.offsetHeight >= refPaths.current.offsetHeight;\n                                setAreAllItemsVisible(isFullyVisible);\n                            }\n                        }\n                    }[\"Breadcrumb.useEffect8.checkVisibility\"], 16);\n                }\n            }[\"Breadcrumb.useEffect8.checkVisibility\"];\n            const resizeObserver = new ResizeObserver(checkVisibility);\n            if (refContainer.current && refPaths.current) {\n                resizeObserver.observe(refPaths.current);\n                checkVisibility();\n            }\n            return ({\n                \"Breadcrumb.useEffect8\": ()=>resizeObserver.disconnect()\n            })[\"Breadcrumb.useEffect8\"];\n        }\n    }[\"Breadcrumb.useEffect8\"], []);\n    const handleElementClick = (element)=>{\n        const { parentCompositeFiber } = getCompositeFiberFromElement(element);\n        if (!parentCompositeFiber) return;\n        signalSkipTreeUpdate.value = false;\n        Store.inspectState.value = {\n            kind: \"focused\",\n            focusedDomElement: element,\n            fiber: parentCompositeFiber\n        };\n    };\n    const firstItem = path[0];\n    const restItems = path.slice(1).reverse();\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        ref: refContainer,\n        className: cn(\"flex items-center gap-x-1\", \"px-2\", \"text-xs text-neutral-400\", \"border-b border-white/10\", \"overflow-hidden whitespace-nowrap\"),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                className: \"hover:text-neutral-300 transition-colors\",\n                onClick: ()=>{\n                    handleElementClick(firstItem.element);\n                },\n                children: firstItem?.name\n            }),\n            !areAllItemsVisible && restItems.length > 1 ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"text-sm w-2.5 h-2.5 flex items-center justify-center\",\n                children: \"\\u2026\"\n            }) : restItems.length > 0 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"w-2.5 h-2.5 flex items-center justify-center text-neutral-400\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-chevron-right\",\n                    size: 10\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"h-7 overflow-hidden\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    ref: refPaths,\n                    className: cn(\"flex-1 flex flex-wrap flex-row-reverse justify-end gap-x-1\"),\n                    children: restItems.map((item, index)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn(\"flex-1 flex items-center gap-x-1\", \"flex-[0_0_auto]\", \"h-7\", \"hover:text-neutral-300 transition-colors\", \"overflow-hidden\"),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    type: \"button\",\n                                    title: item.name,\n                                    style: {\n                                        maxWidth: \"160px\"\n                                    },\n                                    className: \"truncate\",\n                                    onClick: ()=>{\n                                        handleElementClick(item.element);\n                                    },\n                                    children: item.name\n                                }),\n                                index > 0 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: \"w-2.5 h-2.5 flex items-center justify-center text-neutral-400\",\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                        name: \"icon-chevron-right\",\n                                        size: 10\n                                    })\n                                })\n                            ]\n                        }, `${item.name}-${index}`))\n                })\n            })\n        ]\n    });\n};\n// src/web/views/widget/components-tree/index.tsx\n\nvar flattenTree = (nodes, depth = 0, parentPath = null)=>{\n    return nodes.reduce((acc, node, index)=>{\n        const nodePath = node.element ? getFiberPath(node.fiber) : `${parentPath}-${index}`;\n        const flatNode = {\n            ...node,\n            depth,\n            nodeId: nodePath,\n            parentId: parentPath,\n            fiber: node.fiber\n        };\n        acc.push(flatNode);\n        if (node.children?.length) {\n            acc.push(...flattenTree(node.children, depth + 1, nodePath));\n        }\n        return acc;\n    }, []);\n};\nvar getMaxDepth = (nodes)=>{\n    return nodes.reduce((max, node)=>Math.max(max, node.depth), 0);\n};\nvar calculateIndentSize = (containerWidth, maxDepth)=>{\n    const MIN_INDENT = 0;\n    const MAX_INDENT = 24;\n    const MIN_TOTAL_INDENT = 24;\n    if (maxDepth <= 0) return MAX_INDENT;\n    const availableSpace = Math.max(0, containerWidth - MIN_CONTAINER_WIDTH);\n    if (availableSpace < MIN_TOTAL_INDENT) return MIN_INDENT;\n    const targetTotalIndent = Math.min(availableSpace * 0.3, maxDepth * MAX_INDENT);\n    const baseIndent = targetTotalIndent / maxDepth;\n    return Math.max(MIN_INDENT, Math.min(MAX_INDENT, baseIndent));\n};\nvar VALID_TYPES = [\n    \"memo\",\n    \"forwardRef\",\n    \"lazy\",\n    \"suspense\"\n];\nvar parseTypeSearch = (query)=>{\n    const typeMatch = query.match(/\\[(.*?)\\]/);\n    if (!typeMatch) return null;\n    const typeSearches = [];\n    const parts = typeMatch[1].split(\",\");\n    for (const part of parts){\n        const trimmed = part.trim().toLowerCase();\n        if (trimmed) typeSearches.push(trimmed);\n    }\n    return typeSearches;\n};\nvar isValidTypeSearch = (typeSearches)=>{\n    if (typeSearches.length === 0) return false;\n    for (const search of typeSearches){\n        let isValid = false;\n        for (const validType of VALID_TYPES){\n            if (validType.toLowerCase().includes(search)) {\n                isValid = true;\n                break;\n            }\n        }\n        if (!isValid) return false;\n    }\n    return true;\n};\nvar matchesTypeSearch = (typeSearches, wrapperTypes)=>{\n    if (typeSearches.length === 0) return true;\n    if (!wrapperTypes.length) return false;\n    for (const search of typeSearches){\n        let foundMatch = false;\n        for (const wrapper of wrapperTypes){\n            if (wrapper.type.toLowerCase().includes(search)) {\n                foundMatch = true;\n                break;\n            }\n        }\n        if (!foundMatch) return false;\n    }\n    return true;\n};\nvar useNodeHighlighting = (node, searchValue)=>{\n    return (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"useNodeHighlighting.useMemo2\": ()=>{\n            const { query, matches } = searchValue;\n            const isMatch = matches.some({\n                \"useNodeHighlighting.useMemo2.isMatch\": (match)=>match.nodeId === node.nodeId\n            }[\"useNodeHighlighting.useMemo2.isMatch\"]);\n            const typeSearches = parseTypeSearch(query) || [];\n            const searchQuery = query ? query.replace(/\\[.*?\\]/, \"\").trim() : \"\";\n            if (!query || !isMatch) {\n                return {\n                    highlightedText: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"truncate\",\n                        children: node.label\n                    }),\n                    typeHighlight: false\n                };\n            }\n            let matchesType = true;\n            if (typeSearches.length > 0) {\n                if (!node.fiber) {\n                    matchesType = false;\n                } else {\n                    const { wrapperTypes } = getExtendedDisplayName(node.fiber);\n                    matchesType = matchesTypeSearch(typeSearches, wrapperTypes);\n                }\n            }\n            let textContent = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"truncate\",\n                children: node.label\n            });\n            if (searchQuery) {\n                try {\n                    if (searchQuery.startsWith(\"/\") && searchQuery.endsWith(\"/\")) {\n                        const pattern = searchQuery.slice(1, -1);\n                        const regex = new RegExp(`(${pattern})`, \"i\");\n                        const parts = node.label.split(regex);\n                        textContent = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"tree-node-search-highlight\",\n                            children: parts.map({\n                                \"useNodeHighlighting.useMemo2\": (part, index)=>regex.test(part) ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: cn(\"regex\", {\n                                            start: regex.test(part) && index === 0,\n                                            middle: regex.test(part) && index % 2 === 1,\n                                            end: regex.test(part) && index === parts.length - 1,\n                                            \"!ml-0\": index === 1\n                                        }),\n                                        children: part\n                                    }, `${node.nodeId}-${part}`) : part\n                            }[\"useNodeHighlighting.useMemo2\"])\n                        });\n                    } else {\n                        const lowerLabel = node.label.toLowerCase();\n                        const lowerQuery = searchQuery.toLowerCase();\n                        const index = lowerLabel.indexOf(lowerQuery);\n                        if (index >= 0) {\n                            textContent = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                className: \"tree-node-search-highlight\",\n                                children: [\n                                    node.label.slice(0, index),\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"single\",\n                                        children: node.label.slice(index, index + searchQuery.length)\n                                    }),\n                                    node.label.slice(index + searchQuery.length)\n                                ]\n                            });\n                        }\n                    }\n                } catch  {}\n            }\n            return {\n                highlightedText: textContent,\n                typeHighlight: matchesType && typeSearches.length > 0\n            };\n        }\n    }[\"useNodeHighlighting.useMemo2\"], [\n        node.label,\n        node.nodeId,\n        node.fiber,\n        searchValue\n    ]);\n};\nvar TreeNodeItem = ({ node, onElementClick, collapsedNodes, onToggle, searchValue })=>{\n    const hasChildren = node.children && node.children.length > 0;\n    const isCollapsed = collapsedNodes.has(node.nodeId);\n    const handleClick = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"TreeNodeItem.useCallback2[handleClick]\": ()=>{\n            if (node.element) {\n                onElementClick?.(node.element);\n            }\n        }\n    }[\"TreeNodeItem.useCallback2[handleClick]\"], [\n        node.element,\n        onElementClick\n    ]);\n    const handleToggle = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"TreeNodeItem.useCallback2[handleToggle]\": ()=>{\n            if (hasChildren) {\n                onToggle(node.nodeId);\n            }\n        }\n    }[\"TreeNodeItem.useCallback2[handleToggle]\"], [\n        hasChildren,\n        node.nodeId,\n        onToggle\n    ]);\n    const { highlightedText, typeHighlight } = useNodeHighlighting(node, searchValue);\n    const componentTypes = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"TreeNodeItem.useMemo2[componentTypes]\": ()=>{\n            if (!node.fiber) return null;\n            const { wrapperTypes } = getExtendedDisplayName(node.fiber);\n            const firstWrapperType = wrapperTypes[0];\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                className: cn(\"flex items-center gap-x-1\", \"text-[10px] text-neutral-400 tracking-wide\", \"overflow-hidden\"),\n                children: [\n                    firstWrapperType && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                title: firstWrapperType?.title,\n                                className: cn(\"rounded py-[1px] px-1\", \"bg-neutral-700 text-neutral-300\", \"truncate\", {\n                                    \"bg-[#8e61e3] text-white\": firstWrapperType.type === \"memo\",\n                                    \"bg-yellow-300 text-black\": typeHighlight\n                                }),\n                                children: firstWrapperType.type\n                            }, firstWrapperType.type),\n                            firstWrapperType.compiler && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                className: \"text-yellow-300 ml-1\",\n                                children: \"\\u2728\"\n                            })\n                        ]\n                    }),\n                    wrapperTypes.length > 1 && `\\xD7${wrapperTypes.length}`\n                ]\n            });\n        }\n    }[\"TreeNodeItem.useMemo2[componentTypes]\"], [\n        node.fiber,\n        typeHighlight\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        type: \"button\",\n        title: node.title,\n        className: cn(\"flex items-center gap-x-1\", \"px-2\", \"w-full h-7\", \"text-left\", \"rounded\", \"cursor-pointer select-none\"),\n        onClick: handleClick,\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                onClick: handleToggle,\n                className: cn(\"w-4 h-4 flex items-center justify-center\", \"text-left\"),\n                children: hasChildren && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-chevron-right\",\n                    size: 12,\n                    className: cn(\"w-4 h-4\", \"transition-transform\", {\n                        \"rotate-90\": !isCollapsed\n                    })\n                })\n            }),\n            highlightedText,\n            componentTypes\n        ]\n    });\n};\nvar ComponentsTree = ()=>{\n    const refContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refBreadcrumbContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refMainContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refSearchInputContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refSearchInput = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refSelectedElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refMaxTreeDepth = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const refIsHovering = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const refIsResizing = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const [flattenedNodes, setFlattenedNodes] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [collapsedNodes, setCollapsedNodes] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(/* @__PURE__ */ new Set());\n    const [selectedIndex, setSelectedIndex] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [searchValue, setSearchValue] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(searchState.value);\n    const visibleNodes = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"ComponentsTree.useMemo2[visibleNodes]\": ()=>{\n            const visible = [];\n            const nodes = flattenedNodes;\n            const nodeMap = new Map(nodes.map({\n                \"ComponentsTree.useMemo2[visibleNodes]\": (node)=>[\n                        node.nodeId,\n                        node\n                    ]\n            }[\"ComponentsTree.useMemo2[visibleNodes]\"]));\n            for (const node of nodes){\n                let isVisible = true;\n                let currentNode = node;\n                while(currentNode.parentId){\n                    const parent = nodeMap.get(currentNode.parentId);\n                    if (!parent) break;\n                    if (collapsedNodes.has(parent.nodeId)) {\n                        isVisible = false;\n                        break;\n                    }\n                    currentNode = parent;\n                }\n                if (isVisible) {\n                    visible.push(node);\n                }\n            }\n            return visible;\n        }\n    }[\"ComponentsTree.useMemo2[visibleNodes]\"], [\n        collapsedNodes,\n        flattenedNodes\n    ]);\n    const ITEM_HEIGHT = 28;\n    const { virtualItems, totalSize } = useVirtualList({\n        count: visibleNodes.length,\n        getScrollElement: {\n            \"ComponentsTree.useVirtualList\": ()=>refContainer.current\n        }[\"ComponentsTree.useVirtualList\"],\n        estimateSize: {\n            \"ComponentsTree.useVirtualList\": ()=>ITEM_HEIGHT\n        }[\"ComponentsTree.useVirtualList\"],\n        overscan: 5\n    });\n    const handleElementClick = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleElementClick]\": (element)=>{\n            refIsHovering.current = true;\n            refSearchInput.current?.blur();\n            signalSkipTreeUpdate.value = true;\n            const { parentCompositeFiber } = getCompositeComponentFromElement(element);\n            if (!parentCompositeFiber) return;\n            Store.inspectState.value = {\n                kind: \"focused\",\n                focusedDomElement: element,\n                fiber: parentCompositeFiber\n            };\n            const nodeIndex = visibleNodes.findIndex({\n                \"ComponentsTree.useCallback2[handleElementClick].nodeIndex\": (node)=>node.element === element\n            }[\"ComponentsTree.useCallback2[handleElementClick].nodeIndex\"]);\n            if (nodeIndex !== -1) {\n                setSelectedIndex(nodeIndex);\n                const itemTop = nodeIndex * ITEM_HEIGHT;\n                const container = refContainer.current;\n                if (container) {\n                    const containerHeight = container.clientHeight;\n                    const scrollTop = container.scrollTop;\n                    const breadcrumbHeight = 32;\n                    if (itemTop < scrollTop || itemTop + ITEM_HEIGHT > scrollTop + containerHeight) {\n                        container.scrollTo({\n                            top: Math.max(0, itemTop - (containerHeight - breadcrumbHeight) / 2),\n                            behavior: \"instant\"\n                        });\n                    }\n                }\n            }\n        }\n    }[\"ComponentsTree.useCallback2[handleElementClick]\"], [\n        visibleNodes\n    ]);\n    const handleToggle = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleToggle]\": (nodeId)=>{\n            setCollapsedNodes({\n                \"ComponentsTree.useCallback2[handleToggle]\": (prev)=>{\n                    const next = new Set(prev);\n                    if (next.has(nodeId)) {\n                        next.delete(nodeId);\n                    } else {\n                        next.add(nodeId);\n                    }\n                    return next;\n                }\n            }[\"ComponentsTree.useCallback2[handleToggle]\"]);\n        }\n    }[\"ComponentsTree.useCallback2[handleToggle]\"], []);\n    const handleOnChangeSearch = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleOnChangeSearch]\": (query)=>{\n            refSearchInputContainer.current?.classList.remove(\"!border-red-500\");\n            const matches = [];\n            if (!query) {\n                searchState.value = {\n                    query,\n                    matches,\n                    currentMatchIndex: -1\n                };\n                return;\n            }\n            if (query.includes(\"[\") && !query.includes(\"]\")) {\n                if (query.length > query.indexOf(\"[\") + 1) {\n                    refSearchInputContainer.current?.classList.add(\"!border-red-500\");\n                    return;\n                }\n            }\n            const typeSearches = parseTypeSearch(query) || [];\n            if (query.includes(\"[\")) {\n                if (!isValidTypeSearch(typeSearches)) {\n                    refSearchInputContainer.current?.classList.add(\"!border-red-500\");\n                    return;\n                }\n            }\n            const searchQuery = query.replace(/\\[.*?\\]/, \"\").trim();\n            const isRegex = /^\\/.*\\/$/.test(searchQuery);\n            let matchesLabel = {\n                \"ComponentsTree.useCallback2[handleOnChangeSearch].matchesLabel\": (_label)=>false\n            }[\"ComponentsTree.useCallback2[handleOnChangeSearch].matchesLabel\"];\n            if (searchQuery.startsWith(\"/\") && !isRegex) {\n                if (searchQuery.length > 1) {\n                    refSearchInputContainer.current?.classList.add(\"!border-red-500\");\n                    return;\n                }\n            }\n            if (isRegex) {\n                try {\n                    const pattern = searchQuery.slice(1, -1);\n                    const regex = new RegExp(pattern, \"i\");\n                    matchesLabel = ({\n                        \"ComponentsTree.useCallback2[handleOnChangeSearch]\": (label)=>regex.test(label)\n                    })[\"ComponentsTree.useCallback2[handleOnChangeSearch]\"];\n                } catch  {\n                    refSearchInputContainer.current?.classList.add(\"!border-red-500\");\n                    return;\n                }\n            } else if (searchQuery) {\n                const lowerQuery = searchQuery.toLowerCase();\n                matchesLabel = ({\n                    \"ComponentsTree.useCallback2[handleOnChangeSearch]\": (label)=>label.toLowerCase().includes(lowerQuery)\n                })[\"ComponentsTree.useCallback2[handleOnChangeSearch]\"];\n            }\n            for (const node of flattenedNodes){\n                let matchesSearch = true;\n                if (searchQuery) {\n                    matchesSearch = matchesLabel(node.label);\n                }\n                if (matchesSearch && typeSearches.length > 0) {\n                    if (!node.fiber) {\n                        matchesSearch = false;\n                    } else {\n                        const { wrapperTypes } = getExtendedDisplayName(node.fiber);\n                        matchesSearch = matchesTypeSearch(typeSearches, wrapperTypes);\n                    }\n                }\n                if (matchesSearch) {\n                    matches.push(node);\n                }\n            }\n            searchState.value = {\n                query,\n                matches,\n                currentMatchIndex: matches.length > 0 ? 0 : -1\n            };\n            if (matches.length > 0) {\n                const firstMatch = matches[0];\n                const nodeIndex = visibleNodes.findIndex({\n                    \"ComponentsTree.useCallback2[handleOnChangeSearch].nodeIndex\": (node)=>node.nodeId === firstMatch.nodeId\n                }[\"ComponentsTree.useCallback2[handleOnChangeSearch].nodeIndex\"]);\n                if (nodeIndex !== -1) {\n                    const itemTop = nodeIndex * ITEM_HEIGHT;\n                    const container = refContainer.current;\n                    if (container) {\n                        const containerHeight = container.clientHeight;\n                        container.scrollTo({\n                            top: Math.max(0, itemTop - containerHeight / 2),\n                            behavior: \"instant\"\n                        });\n                    }\n                }\n            }\n        }\n    }[\"ComponentsTree.useCallback2[handleOnChangeSearch]\"], [\n        flattenedNodes,\n        visibleNodes\n    ]);\n    const handleInputChange = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleInputChange]\": (e)=>{\n            const target = e.currentTarget;\n            if (!target) return;\n            handleOnChangeSearch(target.value);\n        }\n    }[\"ComponentsTree.useCallback2[handleInputChange]\"], [\n        handleOnChangeSearch\n    ]);\n    const navigateSearch = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[navigateSearch]\": (direction)=>{\n            const { matches, currentMatchIndex } = searchState.value;\n            if (matches.length === 0) return;\n            const newIndex = direction === \"next\" ? (currentMatchIndex + 1) % matches.length : (currentMatchIndex - 1 + matches.length) % matches.length;\n            searchState.value = {\n                ...searchState.value,\n                currentMatchIndex: newIndex\n            };\n            const currentMatch = matches[newIndex];\n            const nodeIndex = visibleNodes.findIndex({\n                \"ComponentsTree.useCallback2[navigateSearch].nodeIndex\": (node)=>node.nodeId === currentMatch.nodeId\n            }[\"ComponentsTree.useCallback2[navigateSearch].nodeIndex\"]);\n            if (nodeIndex !== -1) {\n                setSelectedIndex(nodeIndex);\n                const itemTop = nodeIndex * ITEM_HEIGHT;\n                const container = refContainer.current;\n                if (container) {\n                    const containerHeight = container.clientHeight;\n                    container.scrollTo({\n                        top: Math.max(0, itemTop - containerHeight / 2),\n                        behavior: \"instant\"\n                    });\n                }\n            }\n        }\n    }[\"ComponentsTree.useCallback2[navigateSearch]\"], [\n        visibleNodes\n    ]);\n    const updateContainerWidths = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[updateContainerWidths]\": (width)=>{\n            if (refMainContainer.current) {\n                refMainContainer.current.style.width = `${width}px`;\n            }\n            if (refContainer.current) {\n                refContainer.current.style.width = `${width}px`;\n                const indentSize = calculateIndentSize(width, refMaxTreeDepth.current);\n                refContainer.current.style.setProperty(\"--indentation-size\", `${indentSize}px`);\n            }\n        }\n    }[\"ComponentsTree.useCallback2[updateContainerWidths]\"], []);\n    const handleResize = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[handleResize]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            if (!refContainer.current) return;\n            refContainer.current.style.setProperty(\"pointer-events\", \"none\");\n            refIsResizing.current = true;\n            const startX = e.clientX;\n            const startWidth = refContainer.current.offsetWidth;\n            const parentWidth = signalWidget.value.dimensions.width;\n            const maxWidth = Math.floor(parentWidth - MIN_SIZE.width / 2);\n            const handleMouseMove = {\n                \"ComponentsTree.useCallback2[handleResize].handleMouseMove\": (e2)=>{\n                    const delta = startX - e2.clientX;\n                    const newWidth = Math.min(maxWidth, Math.max(MIN_CONTAINER_WIDTH, startWidth + delta));\n                    updateContainerWidths(newWidth);\n                }\n            }[\"ComponentsTree.useCallback2[handleResize].handleMouseMove\"];\n            const handleMouseUp = {\n                \"ComponentsTree.useCallback2[handleResize].handleMouseUp\": ()=>{\n                    if (!refContainer.current) return;\n                    refContainer.current.style.removeProperty(\"pointer-events\");\n                    document.removeEventListener(\"mousemove\", handleMouseMove);\n                    document.removeEventListener(\"mouseup\", handleMouseUp);\n                    signalWidget.value = {\n                        ...signalWidget.value,\n                        componentsTree: {\n                            ...signalWidget.value.componentsTree,\n                            width: refContainer.current.offsetWidth\n                        }\n                    };\n                    saveLocalStorage(LOCALSTORAGE_KEY, signalWidget.value);\n                    refIsResizing.current = false;\n                }\n            }[\"ComponentsTree.useCallback2[handleResize].handleMouseUp\"];\n            document.addEventListener(\"mousemove\", handleMouseMove);\n            document.addEventListener(\"mouseup\", handleMouseUp);\n        }\n    }[\"ComponentsTree.useCallback2[handleResize]\"], []);\n    const onMouseLeave = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ComponentsTree.useCallback2[onMouseLeave]\": ()=>{\n            refIsHovering.current = false;\n        }\n    }[\"ComponentsTree.useCallback2[onMouseLeave]\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ComponentsTree.useEffect9\": ()=>{\n            const buildTreeFromElements = {\n                \"ComponentsTree.useEffect9.buildTreeFromElements\": (elements)=>{\n                    const nodeMap = /* @__PURE__ */ new Map();\n                    const rootNodes = [];\n                    for (const { element, name, fiber } of elements){\n                        if (!element) continue;\n                        let title = name;\n                        const { name: componentName, wrappers } = getExtendedDisplayName(fiber);\n                        if (componentName) {\n                            if (wrappers.length > 0) {\n                                title = `${wrappers.join(\"(\")}(${componentName})${\")\".repeat(wrappers.length)}`;\n                            } else {\n                                title = componentName;\n                            }\n                        }\n                        nodeMap.set(element, {\n                            label: componentName || name,\n                            title,\n                            children: [],\n                            element,\n                            fiber\n                        });\n                    }\n                    for (const { element, depth } of elements){\n                        if (!element) continue;\n                        const node = nodeMap.get(element);\n                        if (!node) continue;\n                        if (depth === 0) {\n                            rootNodes.push(node);\n                        } else {\n                            let parent = element.parentElement;\n                            while(parent){\n                                const parentNode = nodeMap.get(parent);\n                                if (parentNode) {\n                                    parentNode.children = parentNode.children || [];\n                                    parentNode.children.push(node);\n                                    break;\n                                }\n                                parent = parent.parentElement;\n                            }\n                        }\n                    }\n                    return rootNodes;\n                }\n            }[\"ComponentsTree.useEffect9.buildTreeFromElements\"];\n            const updateTree = {\n                \"ComponentsTree.useEffect9.updateTree\": ()=>{\n                    const element = refSelectedElement.current;\n                    if (!element) return;\n                    const inspectableElements = getInspectableElements(element);\n                    const tree = buildTreeFromElements(inspectableElements);\n                    if (tree.length > 0) {\n                        const flattened = flattenTree(tree);\n                        const newMaxDepth = getMaxDepth(flattened);\n                        refMaxTreeDepth.current = newMaxDepth;\n                        updateContainerWidths(signalWidget.value.componentsTree.width);\n                        setFlattenedNodes(flattened);\n                    }\n                }\n            }[\"ComponentsTree.useEffect9.updateTree\"];\n            const unsubscribeStore = Store.inspectState.subscribe({\n                \"ComponentsTree.useEffect9.unsubscribeStore\": (state2)=>{\n                    if (state2.kind === \"focused\") {\n                        if (signalSkipTreeUpdate.value) {\n                            return;\n                        }\n                        handleOnChangeSearch(\"\");\n                        setSelectedIndex(0);\n                        refSelectedElement.current = state2.focusedDomElement;\n                        updateTree();\n                    }\n                }\n            }[\"ComponentsTree.useEffect9.unsubscribeStore\"]);\n            let rafId = 0;\n            const unsubscribeUpdates = inspectorUpdateSignal.subscribe({\n                \"ComponentsTree.useEffect9.unsubscribeUpdates\": ()=>{\n                    if (Store.inspectState.value.kind === \"focused\") {\n                        cancelAnimationFrame(rafId);\n                        if (refIsResizing.current) return;\n                        rafId = requestAnimationFrame({\n                            \"ComponentsTree.useEffect9.unsubscribeUpdates\": ()=>{\n                                signalSkipTreeUpdate.value = false;\n                                updateTree();\n                            }\n                        }[\"ComponentsTree.useEffect9.unsubscribeUpdates\"]);\n                    }\n                }\n            }[\"ComponentsTree.useEffect9.unsubscribeUpdates\"]);\n            return ({\n                \"ComponentsTree.useEffect9\": ()=>{\n                    unsubscribeStore();\n                    unsubscribeUpdates();\n                    searchState.value = {\n                        query: \"\",\n                        matches: [],\n                        currentMatchIndex: -1\n                    };\n                }\n            })[\"ComponentsTree.useEffect9\"];\n        }\n    }[\"ComponentsTree.useEffect9\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ComponentsTree.useEffect9\": ()=>{\n            const handleKeyDown = {\n                \"ComponentsTree.useEffect9.handleKeyDown\": (e)=>{\n                    if (!refIsHovering.current) return;\n                    switch(e.key){\n                        case \"ArrowUp\":\n                            {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                if (selectedIndex > 0) {\n                                    const currentNode = visibleNodes[selectedIndex - 1];\n                                    if (currentNode?.element) {\n                                        handleElementClick(currentNode.element);\n                                    }\n                                }\n                                return;\n                            }\n                        case \"ArrowDown\":\n                            {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                if (selectedIndex < visibleNodes.length - 1) {\n                                    const currentNode = visibleNodes[selectedIndex + 1];\n                                    if (currentNode?.element) {\n                                        handleElementClick(currentNode.element);\n                                    }\n                                }\n                                return;\n                            }\n                        case \"ArrowLeft\":\n                            {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                const currentNode = visibleNodes[selectedIndex];\n                                if (currentNode?.nodeId) {\n                                    handleToggle(currentNode.nodeId);\n                                }\n                                return;\n                            }\n                        case \"ArrowRight\":\n                            {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                const currentNode = visibleNodes[selectedIndex];\n                                if (currentNode?.nodeId) {\n                                    handleToggle(currentNode.nodeId);\n                                }\n                                return;\n                            }\n                    }\n                }\n            }[\"ComponentsTree.useEffect9.handleKeyDown\"];\n            document.addEventListener(\"keydown\", handleKeyDown);\n            return ({\n                \"ComponentsTree.useEffect9\": ()=>{\n                    document.removeEventListener(\"keydown\", handleKeyDown);\n                }\n            })[\"ComponentsTree.useEffect9\"];\n        }\n    }[\"ComponentsTree.useEffect9\"], [\n        selectedIndex,\n        visibleNodes,\n        handleElementClick,\n        handleToggle\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ComponentsTree.useEffect9\": ()=>{\n            return searchState.subscribe(setSearchValue);\n        }\n    }[\"ComponentsTree.useEffect9\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ComponentsTree.useEffect9\": ()=>{\n            const unsubscribe = signalWidget.subscribe({\n                \"ComponentsTree.useEffect9.unsubscribe\": (state2)=>{\n                    updateContainerWidths(state2.componentsTree.width);\n                }\n            }[\"ComponentsTree.useEffect9.unsubscribe\"]);\n            return ({\n                \"ComponentsTree.useEffect9\": ()=>{\n                    unsubscribe();\n                }\n            })[\"ComponentsTree.useEffect9\"];\n        }\n    }[\"ComponentsTree.useEffect9\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                onMouseDown: handleResize,\n                className: \"relative resize-v-line\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                        name: \"icon-ellipsis\",\n                        size: 18\n                    })\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                ref: refMainContainer,\n                className: \"flex flex-col h-full\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        ref: refBreadcrumbContainer,\n                        className: \"overflow-hidden\",\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Breadcrumb, {\n                                selectedElement: refSelectedElement.current\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"py-2 pr-2 border-b border-[#1e1e1e]\",\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    ref: refSearchInputContainer,\n                                    title: `Search components by:\n\n\\u2022 Name (e.g., \"Button\") \\u2014 Case insensitive, matches any part\n\n\\u2022 Regular Expression (e.g., \"/^Button/\") \\u2014 Use forward slashes\n\n\\u2022 Wrapper Type (e.g., \"[memo,forwardRef]\"):\n   - Available types: memo, forwardRef, lazy, suspense\n   - Matches any part of type name (e.g., \"mo\" matches \"memo\")\n   - Use commas for multiple types\n\n\\u2022 Combined Search:\n   - Mix name/regex with type: \"button [for]\"\n   - Will match components satisfying both conditions\n\n\\u2022 Navigation:\n   - Enter \\u2192 Next match\n   - Shift + Enter \\u2192 Previous match\n   - Cmd/Ctrl + Enter \\u2192 Select and focus match (keeps search active)\n`,\n                                    className: cn(\"relative\", \"flex items-center gap-x-1 px-2\", \"rounded\", \"border border-transparent\", \"focus-within:border-[#454545]\", \"bg-[#1e1e1e] text-neutral-300\", \"transition-colors\", \"whitespace-nowrap\", \"overflow-hidden\"),\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                            name: \"icon-search\",\n                                            size: 12,\n                                            className: \" text-neutral-500\"\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                            className: \"relative flex-1 h-7 overflow-hidden\",\n                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n                                                ref: refSearchInput,\n                                                type: \"text\",\n                                                value: searchState.value.query,\n                                                onClick: (e)=>{\n                                                    e.stopPropagation();\n                                                    e.currentTarget.focus();\n                                                },\n                                                onMouseDown: (e)=>{\n                                                    e.stopPropagation();\n                                                },\n                                                onKeyDown: (e)=>{\n                                                    if (e.key === \"Escape\") {\n                                                        e.currentTarget.blur();\n                                                    }\n                                                    if (searchState.value.matches.length) {\n                                                        if (e.key === \"Enter\" && e.shiftKey) {\n                                                            navigateSearch(\"prev\");\n                                                        } else if (e.key === \"Enter\") {\n                                                            if (e.metaKey || e.ctrlKey) {\n                                                                e.preventDefault();\n                                                                e.stopPropagation();\n                                                                handleElementClick(searchState.value.matches[searchState.value.currentMatchIndex].element);\n                                                                e.currentTarget.focus();\n                                                            } else {\n                                                                navigateSearch(\"next\");\n                                                            }\n                                                        }\n                                                    }\n                                                },\n                                                onChange: handleInputChange,\n                                                className: \"absolute inset-y-0 inset-x-1\",\n                                                placeholder: \"Component name, /regex/, or [type]\"\n                                            })\n                                        }),\n                                        searchState.value.query ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                            children: [\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                                    className: \"flex items-center gap-x-0.5 text-xs text-neutral-500\",\n                                                    children: [\n                                                        searchState.value.currentMatchIndex + 1,\n                                                        \"|\",\n                                                        searchState.value.matches.length\n                                                    ]\n                                                }),\n                                                !!searchState.value.matches.length && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                    children: [\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                                            type: \"button\",\n                                                            onClick: (e)=>{\n                                                                e.stopPropagation();\n                                                                navigateSearch(\"prev\");\n                                                            },\n                                                            className: \"button rounded w-4 h-4 flex items-center justify-center text-neutral-400 hover:text-neutral-300\",\n                                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                                                name: \"icon-chevron-right\",\n                                                                className: \"-rotate-90\",\n                                                                size: 12\n                                                            })\n                                                        }),\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                                            type: \"button\",\n                                                            onClick: (e)=>{\n                                                                e.stopPropagation();\n                                                                navigateSearch(\"next\");\n                                                            },\n                                                            className: \"button rounded w-4 h-4 flex items-center justify-center text-neutral-400 hover:text-neutral-300\",\n                                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                                                name: \"icon-chevron-right\",\n                                                                className: \"rotate-90\",\n                                                                size: 12\n                                                            })\n                                                        })\n                                                    ]\n                                                }),\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                                    type: \"button\",\n                                                    onClick: (e)=>{\n                                                        e.stopPropagation();\n                                                        handleOnChangeSearch(\"\");\n                                                    },\n                                                    className: \"button rounded w-4 h-4 flex items-center justify-center text-neutral-400 hover:text-neutral-300\",\n                                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                                        name: \"icon-close\",\n                                                        size: 12\n                                                    })\n                                                })\n                                            ]\n                                        }) : !!flattenedNodes.length && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: \"text-xs text-neutral-500\",\n                                            children: flattenedNodes.length\n                                        })\n                                    ]\n                                })\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"flex-1 overflow-hidden\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            ref: refContainer,\n                            onMouseLeave,\n                            className: \"h-full overflow-auto will-change-transform\",\n                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"relative w-full\",\n                                style: {\n                                    height: totalSize\n                                },\n                                children: virtualItems.map((virtualItem)=>{\n                                    const node = visibleNodes[virtualItem.index];\n                                    if (!node) return null;\n                                    const isSelected = Store.inspectState.value.kind === \"focused\" && node.element === Store.inspectState.value.focusedDomElement;\n                                    const isKeyboardSelected = virtualItem.index === selectedIndex;\n                                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                        className: cn(\"absolute left-0 w-full overflow-hidden\", \"text-neutral-400 hover:text-neutral-300\", \"bg-transparent hover:bg-[#5f3f9a]/20\", {\n                                            \"text-neutral-300 bg-[#5f3f9a]/40 hover:bg-[#5f3f9a]/40\": isSelected || isKeyboardSelected\n                                        }),\n                                        style: {\n                                            top: virtualItem.start,\n                                            height: ITEM_HEIGHT\n                                        },\n                                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                            className: \"w-full h-full\",\n                                            style: {\n                                                paddingLeft: `calc(${node.depth} * var(--indentation-size))`\n                                            },\n                                            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TreeNodeItem, {\n                                                node,\n                                                onElementClick: handleElementClick,\n                                                collapsedNodes,\n                                                onToggle: handleToggle,\n                                                searchValue\n                                            })\n                                        })\n                                    }, node.nodeId);\n                                })\n                            })\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n};\n// src/web/views/widget/header.tsx\n\n\nvar HeaderInspect = ()=>{\n    const refReRenders = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refTiming = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const isSettingsOpen = signalIsSettingsOpen.value;\n    const [currentFiber, setCurrentFiber] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"HeaderInspect.useEffect10\": ()=>{\n            const unSubState = Store.inspectState.subscribe({\n                \"HeaderInspect.useEffect10.unSubState\": (state2)=>{\n                    if (state2.kind !== \"focused\") return;\n                    const fiber = state2.fiber;\n                    if (!fiber) return;\n                    setCurrentFiber(fiber);\n                }\n            }[\"HeaderInspect.useEffect10.unSubState\"]);\n            return unSubState;\n        }\n    }[\"HeaderInspect.useEffect10\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"HeaderInspect.useEffect10\": ()=>{\n            const unSubTimeline = timelineState.subscribe({\n                \"HeaderInspect.useEffect10.unSubTimeline\": (state2)=>{\n                    if (Store.inspectState.value.kind !== \"focused\") return;\n                    if (!refReRenders.current || !refTiming.current) return;\n                    const { totalUpdates, currentIndex, updates, isVisible, windowOffset } = state2;\n                    const reRenders = Math.max(0, totalUpdates - 1);\n                    const headerText = isVisible ? `#${windowOffset + currentIndex} Re-render since selected` : `${reRenders === 0 ? \"No renders since selected\" : `${reRenders} Re-renders since selected`}`;\n                    let formattedTime;\n                    if (reRenders > 0 && currentIndex >= 0 && currentIndex < updates.length) {\n                        const time = updates[currentIndex]?.fiberInfo?.selfTime;\n                        formattedTime = time > 0 ? time < 0.1 - Number.EPSILON ? \"< 0.1ms\" : `${Number(time.toFixed(1))}ms` : void 0;\n                    }\n                    refReRenders.current.dataset.text = `${headerText}${reRenders > 0 && formattedTime ? \" \\u2022\" : \"\"}`;\n                    if (formattedTime) {\n                        refTiming.current.dataset.text = formattedTime;\n                    }\n                }\n            }[\"HeaderInspect.useEffect10.unSubTimeline\"]);\n            return unSubTimeline;\n        }\n    }[\"HeaderInspect.useEffect10\"], []);\n    const componentName = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"HeaderInspect.useMemo3[componentName]\": ()=>{\n            if (!currentFiber) return null;\n            const { name, wrappers, wrapperTypes } = getExtendedDisplayName(currentFiber);\n            const title = wrappers.length ? `${wrappers.join(\"(\")}(${name})${\")\".repeat(wrappers.length)}` : name ?? \"\";\n            const firstWrapperType = wrapperTypes[0];\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                title,\n                className: \"flex items-center gap-x-1\",\n                children: [\n                    name ?? \"Unknown\",\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        title: firstWrapperType?.title,\n                        className: \"flex items-center gap-x-1 text-[10px] text-purple-400\",\n                        children: !!firstWrapperType && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: cn(\"rounded py-[1px] px-1\", \"truncate\", {\n                                        \"bg-purple-800 text-neutral-400\": firstWrapperType.compiler,\n                                        \"bg-neutral-700 text-neutral-300\": !firstWrapperType.compiler,\n                                        \"bg-[#5f3f9a] text-white\": firstWrapperType.type === \"memo\"\n                                    }),\n                                    children: firstWrapperType.type\n                                }, firstWrapperType.type),\n                                firstWrapperType.compiler && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: \"text-yellow-300\",\n                                    children: \"\\u2728\"\n                                })\n                            ]\n                        })\n                    }),\n                    wrapperTypes.length > 1 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                        className: \"text-[10px] text-neutral-400\",\n                        children: [\n                            \"\\xD7\",\n                            wrapperTypes.length - 1\n                        ]\n                    })\n                ]\n            });\n        }\n    }[\"HeaderInspect.useMemo3[componentName]\"], [\n        currentFiber\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(\"absolute inset-0 flex items-center gap-x-2\", \"translate-y-0\", \"transition-transform duration-300\", {\n            \"-translate-y-[200%]\": isSettingsOpen\n        }),\n        children: [\n            componentName,\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"flex items-center gap-x-2 mr-auto text-xs text-[#888]\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                    ref: refReRenders,\n                    className: \"with-data-text cursor-pointer !overflow-visible\",\n                    title: \"Click to toggle between rerenders and total renders\"\n                })\n            })\n        ]\n    });\n};\nvar HeaderSettings = ()=>{\n    const isSettingsOpen = signalIsSettingsOpen.value;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n        \"data-text\": \"Settings\",\n        className: cn(\"absolute inset-0 flex items-center\", \"with-data-text\", \"-translate-y-[200%]\", \"transition-transform duration-300\", {\n            \"translate-y-0\": isSettingsOpen\n        })\n    });\n};\nvar Header = ()=>{\n    const handleClose = ()=>{\n        if (signalIsSettingsOpen.value) {\n            signalIsSettingsOpen.value = false;\n            return;\n        }\n        Store.inspectState.value = {\n            kind: \"inspect-off\"\n        };\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"react-scan-header\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"relative flex-1 h-full\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(HeaderSettings, {}),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(HeaderInspect, {})\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                title: \"Close\",\n                className: \"react-scan-close-button\",\n                onClick: handleClose,\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-close\"\n                })\n            })\n        ]\n    });\n};\n// src/web/views/widget/helpers.ts\nvar WindowDimensions = class {\n    constructor(width, height){\n        this.width = width;\n        this.height = height;\n        this.maxWidth = width - SAFE_AREA * 2;\n        this.maxHeight = height - SAFE_AREA * 2;\n    }\n    rightEdge(width) {\n        return this.width - width - SAFE_AREA;\n    }\n    bottomEdge(height) {\n        return this.height - height - SAFE_AREA;\n    }\n    isFullWidth(width) {\n        return width >= this.maxWidth;\n    }\n    isFullHeight(height) {\n        return height >= this.maxHeight;\n    }\n};\nvar cachedWindowDimensions;\nvar getWindowDimensions = ()=>{\n    const currentWidth = window.innerWidth;\n    const currentHeight = window.innerHeight;\n    if (cachedWindowDimensions && cachedWindowDimensions.width === currentWidth && cachedWindowDimensions.height === currentHeight) {\n        return cachedWindowDimensions;\n    }\n    cachedWindowDimensions = new WindowDimensions(currentWidth, currentHeight);\n    return cachedWindowDimensions;\n};\nvar getOppositeCorner = (position, currentCorner, isFullScreen, isFullWidth, isFullHeight)=>{\n    if (isFullScreen) {\n        if (position === \"top-left\") return \"bottom-right\";\n        if (position === \"top-right\") return \"bottom-left\";\n        if (position === \"bottom-left\") return \"top-right\";\n        if (position === \"bottom-right\") return \"top-left\";\n        const [vertical, horizontal] = currentCorner.split(\"-\");\n        if (position === \"left\") return `${vertical}-right`;\n        if (position === \"right\") return `${vertical}-left`;\n        if (position === \"top\") return `bottom-${horizontal}`;\n        if (position === \"bottom\") return `top-${horizontal}`;\n    }\n    if (isFullWidth) {\n        if (position === \"left\") return `${currentCorner.split(\"-\")[0]}-right`;\n        if (position === \"right\") return `${currentCorner.split(\"-\")[0]}-left`;\n    }\n    if (isFullHeight) {\n        if (position === \"top\") return `bottom-${currentCorner.split(\"-\")[1]}`;\n        if (position === \"bottom\") return `top-${currentCorner.split(\"-\")[1]}`;\n    }\n    return currentCorner;\n};\nvar calculatePosition = (corner, width, height)=>{\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    const isMinimized = width === MIN_SIZE.width;\n    const effectiveWidth = isMinimized ? width : Math.min(width, windowWidth - SAFE_AREA * 2);\n    const effectiveHeight = isMinimized ? height : Math.min(height, windowHeight - SAFE_AREA * 2);\n    let x;\n    let y;\n    switch(corner){\n        case \"top-right\":\n            x = windowWidth - effectiveWidth - SAFE_AREA;\n            y = SAFE_AREA;\n            break;\n        case \"bottom-right\":\n            x = windowWidth - effectiveWidth - SAFE_AREA;\n            y = windowHeight - effectiveHeight - SAFE_AREA;\n            break;\n        case \"bottom-left\":\n            x = SAFE_AREA;\n            y = windowHeight - effectiveHeight - SAFE_AREA;\n            break;\n        case \"top-left\":\n            x = SAFE_AREA;\n            y = SAFE_AREA;\n            break;\n        default:\n            x = SAFE_AREA;\n            y = SAFE_AREA;\n            break;\n    }\n    if (isMinimized) {\n        x = Math.max(SAFE_AREA, Math.min(x, windowWidth - effectiveWidth - SAFE_AREA));\n        y = Math.max(SAFE_AREA, Math.min(y, windowHeight - effectiveHeight - SAFE_AREA));\n    }\n    return {\n        x,\n        y\n    };\n};\nvar positionMatchesCorner = (position, corner)=>{\n    const [vertical, horizontal] = corner.split(\"-\");\n    return position !== vertical && position !== horizontal;\n};\nvar getHandleVisibility = (position, corner, isFullWidth, isFullHeight)=>{\n    if (isFullWidth && isFullHeight) {\n        return true;\n    }\n    if (!isFullWidth && !isFullHeight) {\n        return positionMatchesCorner(position, corner);\n    }\n    if (isFullWidth) {\n        return position !== corner.split(\"-\")[0];\n    }\n    if (isFullHeight) {\n        return position !== corner.split(\"-\")[1];\n    }\n    return false;\n};\nvar calculateBoundedSize = (currentSize, delta, isWidth)=>{\n    const min = isWidth ? MIN_SIZE.width : MIN_SIZE.initialHeight;\n    const max = isWidth ? getWindowDimensions().maxWidth : getWindowDimensions().maxHeight;\n    const newSize = currentSize + delta;\n    return Math.min(Math.max(min, newSize), max);\n};\nvar calculateNewSizeAndPosition = (position, initialSize, initialPosition, deltaX, deltaY)=>{\n    const maxWidth = window.innerWidth - SAFE_AREA * 2;\n    const maxHeight = window.innerHeight - SAFE_AREA * 2;\n    let newWidth = initialSize.width;\n    let newHeight = initialSize.height;\n    let newX = initialPosition.x;\n    let newY = initialPosition.y;\n    if (position.includes(\"right\")) {\n        const availableWidth = window.innerWidth - initialPosition.x - SAFE_AREA;\n        const proposedWidth = Math.min(initialSize.width + deltaX, availableWidth);\n        newWidth = Math.min(maxWidth, Math.max(MIN_SIZE.width, proposedWidth));\n    }\n    if (position.includes(\"left\")) {\n        const availableWidth = initialPosition.x + initialSize.width - SAFE_AREA;\n        const proposedWidth = Math.min(initialSize.width - deltaX, availableWidth);\n        newWidth = Math.min(maxWidth, Math.max(MIN_SIZE.width, proposedWidth));\n        newX = initialPosition.x - (newWidth - initialSize.width);\n    }\n    if (position.includes(\"bottom\")) {\n        const availableHeight = window.innerHeight - initialPosition.y - SAFE_AREA;\n        const proposedHeight = Math.min(initialSize.height + deltaY, availableHeight);\n        newHeight = Math.min(maxHeight, Math.max(MIN_SIZE.initialHeight, proposedHeight));\n    }\n    if (position.includes(\"top\")) {\n        const availableHeight = initialPosition.y + initialSize.height - SAFE_AREA;\n        const proposedHeight = Math.min(initialSize.height - deltaY, availableHeight);\n        newHeight = Math.min(maxHeight, Math.max(MIN_SIZE.initialHeight, proposedHeight));\n        newY = initialPosition.y - (newHeight - initialSize.height);\n    }\n    newX = Math.max(SAFE_AREA, Math.min(newX, window.innerWidth - SAFE_AREA - newWidth));\n    newY = Math.max(SAFE_AREA, Math.min(newY, window.innerHeight - SAFE_AREA - newHeight));\n    return {\n        newSize: {\n            width: newWidth,\n            height: newHeight\n        },\n        newPosition: {\n            x: newX,\n            y: newY\n        }\n    };\n};\nvar getClosestCorner = (position)=>{\n    const windowDims = getWindowDimensions();\n    const distances = {\n        \"top-left\": Math.hypot(position.x, position.y),\n        \"top-right\": Math.hypot(windowDims.maxWidth - position.x, position.y),\n        \"bottom-left\": Math.hypot(position.x, windowDims.maxHeight - position.y),\n        \"bottom-right\": Math.hypot(windowDims.maxWidth - position.x, windowDims.maxHeight - position.y)\n    };\n    let closest = \"top-left\";\n    for(const key in distances){\n        if (distances[key] < distances[closest]) {\n            closest = key;\n        }\n    }\n    return closest;\n};\nvar getBestCorner = (mouseX, mouseY, initialMouseX, initialMouseY, threshold = 100)=>{\n    const deltaX = initialMouseX !== void 0 ? mouseX - initialMouseX : 0;\n    const deltaY = initialMouseY !== void 0 ? mouseY - initialMouseY : 0;\n    const windowCenterX = window.innerWidth / 2;\n    const windowCenterY = window.innerHeight / 2;\n    const movingRight = deltaX > threshold;\n    const movingLeft = deltaX < -threshold;\n    const movingDown = deltaY > threshold;\n    const movingUp = deltaY < -threshold;\n    if (movingRight || movingLeft) {\n        const isBottom = mouseY > windowCenterY;\n        return movingRight ? isBottom ? \"bottom-right\" : \"top-right\" : isBottom ? \"bottom-left\" : \"top-left\";\n    }\n    if (movingDown || movingUp) {\n        const isRight = mouseX > windowCenterX;\n        return movingDown ? isRight ? \"bottom-right\" : \"bottom-left\" : isRight ? \"top-right\" : \"top-left\";\n    }\n    return mouseX > windowCenterX ? mouseY > windowCenterY ? \"bottom-right\" : \"top-right\" : mouseY > windowCenterY ? \"bottom-left\" : \"top-left\";\n};\n// src/web/views/widget/resize-handle.tsx\n\n\nvar ResizeHandle = ({ position })=>{\n    const refContainer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const prevWidth = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const prevHeight = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const prevCorner = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"ResizeHandle.useEffect11\": ()=>{\n            const container = refContainer.current;\n            if (!container) return;\n            const updateVisibility = {\n                \"ResizeHandle.useEffect11.updateVisibility\": (isFocused)=>{\n                    const isVisible = (isFocused || signalNotificationsOpen.value) && getHandleVisibility(position, signalWidget.value.corner, signalWidget.value.dimensions.isFullWidth, signalWidget.value.dimensions.isFullHeight);\n                    if (isVisible) {\n                        container.classList.remove(\"hidden\", \"pointer-events-none\", \"opacity-0\");\n                    } else {\n                        container.classList.add(\"hidden\", \"pointer-events-none\", \"opacity-0\");\n                    }\n                }\n            }[\"ResizeHandle.useEffect11.updateVisibility\"];\n            const unsubscribeSignalWidget = signalWidget.subscribe({\n                \"ResizeHandle.useEffect11.unsubscribeSignalWidget\": (state2)=>{\n                    if (prevWidth.current !== null && prevHeight.current !== null && prevCorner.current !== null && state2.dimensions.width === prevWidth.current && state2.dimensions.height === prevHeight.current && state2.corner === prevCorner.current) {\n                        return;\n                    }\n                    updateVisibility(Store.inspectState.value.kind === \"focused\");\n                    prevWidth.current = state2.dimensions.width;\n                    prevHeight.current = state2.dimensions.height;\n                    prevCorner.current = state2.corner;\n                }\n            }[\"ResizeHandle.useEffect11.unsubscribeSignalWidget\"]);\n            const unsubscribeStoreInspectState = Store.inspectState.subscribe({\n                \"ResizeHandle.useEffect11.unsubscribeStoreInspectState\": (state2)=>{\n                    updateVisibility(state2.kind === \"focused\");\n                }\n            }[\"ResizeHandle.useEffect11.unsubscribeStoreInspectState\"]);\n            const unsubscribeNotificationClicked = signalNotificationsOpen.subscribe({\n                \"ResizeHandle.useEffect11.unsubscribeNotificationClicked\": ()=>{\n                    updateVisibility(Store.inspectState.value.kind === \"focused\");\n                }\n            }[\"ResizeHandle.useEffect11.unsubscribeNotificationClicked\"]);\n            return ({\n                \"ResizeHandle.useEffect11\": ()=>{\n                    unsubscribeSignalWidget();\n                    unsubscribeStoreInspectState();\n                    unsubscribeNotificationClicked();\n                    prevWidth.current = null;\n                    prevHeight.current = null;\n                    prevCorner.current = null;\n                }\n            })[\"ResizeHandle.useEffect11\"];\n        }\n    }[\"ResizeHandle.useEffect11\"], []);\n    const handleResize = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ResizeHandle.useCallback3[handleResize]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            const widget = signalRefWidget.value;\n            if (!widget) return;\n            const containerStyle = widget.style;\n            const { dimensions } = signalWidget.value;\n            const initialX = e.clientX;\n            const initialY = e.clientY;\n            const initialWidth = dimensions.width;\n            const initialHeight = dimensions.height;\n            const initialPosition = dimensions.position;\n            signalWidget.value = {\n                ...signalWidget.value,\n                dimensions: {\n                    ...dimensions,\n                    isFullWidth: false,\n                    isFullHeight: false,\n                    width: initialWidth,\n                    height: initialHeight,\n                    position: initialPosition\n                }\n            };\n            let rafId = null;\n            const handleMouseMove = {\n                \"ResizeHandle.useCallback3[handleResize].handleMouseMove\": (e2)=>{\n                    if (rafId) return;\n                    containerStyle.transition = \"none\";\n                    rafId = requestAnimationFrame({\n                        \"ResizeHandle.useCallback3[handleResize].handleMouseMove\": ()=>{\n                            const { newSize, newPosition } = calculateNewSizeAndPosition(position, {\n                                width: initialWidth,\n                                height: initialHeight\n                            }, initialPosition, e2.clientX - initialX, e2.clientY - initialY);\n                            containerStyle.transform = `translate3d(${newPosition.x}px, ${newPosition.y}px, 0)`;\n                            containerStyle.width = `${newSize.width}px`;\n                            containerStyle.height = `${newSize.height}px`;\n                            const maxTreeWidth = Math.floor(newSize.width - MIN_SIZE.width / 2);\n                            const currentTreeWidth = signalWidget.value.componentsTree.width;\n                            const newTreeWidth = Math.min(maxTreeWidth, Math.max(MIN_CONTAINER_WIDTH, currentTreeWidth));\n                            signalWidget.value = {\n                                ...signalWidget.value,\n                                dimensions: {\n                                    isFullWidth: false,\n                                    isFullHeight: false,\n                                    width: newSize.width,\n                                    height: newSize.height,\n                                    position: newPosition\n                                },\n                                componentsTree: {\n                                    ...signalWidget.value.componentsTree,\n                                    width: newTreeWidth\n                                }\n                            };\n                            rafId = null;\n                        }\n                    }[\"ResizeHandle.useCallback3[handleResize].handleMouseMove\"]);\n                }\n            }[\"ResizeHandle.useCallback3[handleResize].handleMouseMove\"];\n            const handleMouseUp = {\n                \"ResizeHandle.useCallback3[handleResize].handleMouseUp\": ()=>{\n                    if (rafId) {\n                        cancelAnimationFrame(rafId);\n                        rafId = null;\n                    }\n                    document.removeEventListener(\"mousemove\", handleMouseMove);\n                    document.removeEventListener(\"mouseup\", handleMouseUp);\n                    const { dimensions: dimensions2, corner } = signalWidget.value;\n                    const windowDims = getWindowDimensions();\n                    const isCurrentFullWidth = windowDims.isFullWidth(dimensions2.width);\n                    const isCurrentFullHeight = windowDims.isFullHeight(dimensions2.height);\n                    const isFullScreen = isCurrentFullWidth && isCurrentFullHeight;\n                    let newCorner = corner;\n                    if (isFullScreen || isCurrentFullWidth || isCurrentFullHeight) {\n                        newCorner = getClosestCorner(dimensions2.position);\n                    }\n                    const newPosition = calculatePosition(newCorner, dimensions2.width, dimensions2.height);\n                    const onTransitionEnd = {\n                        \"ResizeHandle.useCallback3[handleResize].handleMouseUp.onTransitionEnd\": ()=>{\n                            widget.removeEventListener(\"transitionend\", onTransitionEnd);\n                        }\n                    }[\"ResizeHandle.useCallback3[handleResize].handleMouseUp.onTransitionEnd\"];\n                    widget.addEventListener(\"transitionend\", onTransitionEnd);\n                    containerStyle.transform = `translate3d(${newPosition.x}px, ${newPosition.y}px, 0)`;\n                    signalWidget.value = {\n                        ...signalWidget.value,\n                        corner: newCorner,\n                        dimensions: {\n                            isFullWidth: isCurrentFullWidth,\n                            isFullHeight: isCurrentFullHeight,\n                            width: dimensions2.width,\n                            height: dimensions2.height,\n                            position: newPosition\n                        },\n                        lastDimensions: {\n                            isFullWidth: isCurrentFullWidth,\n                            isFullHeight: isCurrentFullHeight,\n                            width: dimensions2.width,\n                            height: dimensions2.height,\n                            position: newPosition\n                        }\n                    };\n                    saveLocalStorage(LOCALSTORAGE_KEY, {\n                        corner: newCorner,\n                        dimensions: signalWidget.value.dimensions,\n                        lastDimensions: signalWidget.value.lastDimensions,\n                        componentsTree: signalWidget.value.componentsTree\n                    });\n                }\n            }[\"ResizeHandle.useCallback3[handleResize].handleMouseUp\"];\n            document.addEventListener(\"mousemove\", handleMouseMove, {\n                passive: true\n            });\n            document.addEventListener(\"mouseup\", handleMouseUp);\n        }\n    }[\"ResizeHandle.useCallback3[handleResize]\"], []);\n    const handleDoubleClick = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"ResizeHandle.useCallback3[handleDoubleClick]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            const widget = signalRefWidget.value;\n            if (!widget) return;\n            const containerStyle = widget.style;\n            const { dimensions, corner } = signalWidget.value;\n            const windowDims = getWindowDimensions();\n            const isCurrentFullWidth = windowDims.isFullWidth(dimensions.width);\n            const isCurrentFullHeight = windowDims.isFullHeight(dimensions.height);\n            const isFullScreen = isCurrentFullWidth && isCurrentFullHeight;\n            const isPartiallyMaximized = (isCurrentFullWidth || isCurrentFullHeight) && !isFullScreen;\n            let newWidth = dimensions.width;\n            let newHeight = dimensions.height;\n            const newCorner = getOppositeCorner(position, corner, isFullScreen, isCurrentFullWidth, isCurrentFullHeight);\n            if (position === \"left\" || position === \"right\") {\n                newWidth = isCurrentFullWidth ? dimensions.width : windowDims.maxWidth;\n                if (isPartiallyMaximized) {\n                    newWidth = isCurrentFullWidth ? MIN_SIZE.width : windowDims.maxWidth;\n                }\n            } else {\n                newHeight = isCurrentFullHeight ? dimensions.height : windowDims.maxHeight;\n                if (isPartiallyMaximized) {\n                    newHeight = isCurrentFullHeight ? MIN_SIZE.initialHeight : windowDims.maxHeight;\n                }\n            }\n            if (isFullScreen) {\n                if (position === \"left\" || position === \"right\") {\n                    newWidth = MIN_SIZE.width;\n                } else {\n                    newHeight = MIN_SIZE.initialHeight;\n                }\n            }\n            const newPosition = calculatePosition(newCorner, newWidth, newHeight);\n            const newDimensions = {\n                isFullWidth: windowDims.isFullWidth(newWidth),\n                isFullHeight: windowDims.isFullHeight(newHeight),\n                width: newWidth,\n                height: newHeight,\n                position: newPosition\n            };\n            const maxTreeWidth = Math.floor(newWidth - MIN_SIZE.width / 2);\n            const currentTreeWidth = signalWidget.value.componentsTree.width;\n            const defaultWidth = Math.floor(newWidth * 0.3);\n            const newTreeWidth = isCurrentFullWidth ? MIN_CONTAINER_WIDTH : (position === \"left\" || position === \"right\") && !isCurrentFullWidth ? Math.min(maxTreeWidth, Math.max(MIN_CONTAINER_WIDTH, defaultWidth)) : Math.min(maxTreeWidth, Math.max(MIN_CONTAINER_WIDTH, currentTreeWidth));\n            requestAnimationFrame({\n                \"ResizeHandle.useCallback3[handleDoubleClick]\": ()=>{\n                    signalWidget.value = {\n                        corner: newCorner,\n                        dimensions: newDimensions,\n                        lastDimensions: dimensions,\n                        componentsTree: {\n                            ...signalWidget.value.componentsTree,\n                            width: newTreeWidth\n                        }\n                    };\n                    containerStyle.transition = \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\";\n                    containerStyle.width = `${newWidth}px`;\n                    containerStyle.height = `${newHeight}px`;\n                    containerStyle.transform = `translate3d(${newPosition.x}px, ${newPosition.y}px, 0)`;\n                }\n            }[\"ResizeHandle.useCallback3[handleDoubleClick]\"]);\n            saveLocalStorage(LOCALSTORAGE_KEY, {\n                corner: newCorner,\n                dimensions: newDimensions,\n                lastDimensions: dimensions,\n                componentsTree: {\n                    ...signalWidget.value.componentsTree,\n                    width: newTreeWidth\n                }\n            });\n        }\n    }[\"ResizeHandle.useCallback3[handleDoubleClick]\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        ref: refContainer,\n        onMouseDown: handleResize,\n        onDblClick: handleDoubleClick,\n        className: cn(\"absolute z-50\", \"flex items-center justify-center\", \"group\", \"transition-colors select-none\", \"peer\", {\n            \"resize-left peer/left\": position === \"left\",\n            \"resize-right peer/right z-10\": position === \"right\",\n            \"resize-top peer/top\": position === \"top\",\n            \"resize-bottom peer/bottom\": position === \"bottom\"\n        }),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n            className: \"resize-line-wrapper\",\n            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"resize-line\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-ellipsis\",\n                    size: 18,\n                    className: cn(\"text-neutral-400\", {\n                        \"rotate-90\": position === \"left\" || position === \"right\"\n                    })\n                })\n            })\n        })\n    });\n};\n// src/web/views/widget/toolbar/index.tsx\n\n// src/web/views/toggle/index.tsx\n\nvar Toggle = ({ checked, onChange, class: className, ...props })=>{\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(\"react-scan-toggle\", className),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n                type: \"checkbox\",\n                checked,\n                onChange,\n                ...props\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {})\n        ]\n    });\n};\n// src/web/views/widget/fps-meter.tsx\n\nvar FpsMeter = ({ fps: fps2 })=>{\n    const getColor = (fps3)=>{\n        if (fps3 < 30) return \"#EF4444\";\n        if (fps3 < 50) return \"#F59E0B\";\n        return \"rgb(214,132,245)\";\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(\"flex items-center gap-x-1 px-2 w-full\", \"h-6\", \"rounded-md\", \"font-mono leading-none\", \"bg-[#141414]\", \"ring-1 ring-white/[0.08]\"),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                style: {\n                    color: getColor(fps2)\n                },\n                className: \"text-sm font-semibold tracking-wide transition-colors ease-in-out w-full flex justify-center items-center\",\n                children: fps2\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"text-white/30 text-[11px] font-medium tracking-wide ml-auto min-w-fit\",\n                children: \"FPS\"\n            })\n        ]\n    });\n};\n// src/web/views/widget/toolbar/index.tsx\n\nvar Toolbar = ()=>{\n    const refSettingsButton = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const events = useAppNotifications();\n    const [laggedEvents, setLaggedEvents] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(events);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Toolbar.useEffect12\": ()=>{\n            const timeout2 = setTimeout({\n                \"Toolbar.useEffect12.timeout2\": ()=>{\n                    setLaggedEvents(events);\n                }\n            }[\"Toolbar.useEffect12.timeout2\"], 500 + 100);\n            return ({\n                \"Toolbar.useEffect12\": ()=>{\n                    clearTimeout(timeout2);\n                }\n            })[\"Toolbar.useEffect12\"];\n        }\n    }[\"Toolbar.useEffect12\"], [\n        events.length\n    ]);\n    const inspectState = Store.inspectState;\n    const isInspectActive = inspectState.value.kind === \"inspecting\";\n    const isInspectFocused = inspectState.value.kind === \"focused\";\n    const onToggleActive = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Toolbar.useCallback4[onToggleActive]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            if (!ReactScanInternals.instrumentation) {\n                return;\n            }\n            const isPaused = !ReactScanInternals.instrumentation.isPaused.value;\n            ReactScanInternals.instrumentation.isPaused.value = isPaused;\n            const existingLocalStorageOptions = readLocalStorage(\"react-scan-options\");\n            saveLocalStorage(\"react-scan-options\", {\n                ...existingLocalStorageOptions,\n                enabled: !isPaused\n            });\n        }\n    }[\"Toolbar.useCallback4[onToggleActive]\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Toolbar.useEffect12\": ()=>{\n            const unSubState = Store.inspectState.subscribe({\n                \"Toolbar.useEffect12.unSubState\": (state2)=>{\n                    if (state2.kind === \"uninitialized\") {\n                        Store.inspectState.value = {\n                            kind: \"inspect-off\"\n                        };\n                    }\n                }\n            }[\"Toolbar.useEffect12.unSubState\"]);\n            const unSubSettings = signalIsSettingsOpen.subscribe({\n                \"Toolbar.useEffect12.unSubSettings\": (state2)=>{\n                    refSettingsButton.current?.classList.toggle(\"text-inspect\", state2);\n                }\n            }[\"Toolbar.useEffect12.unSubSettings\"]);\n            return ({\n                \"Toolbar.useEffect12\": ()=>{\n                    unSubState();\n                    unSubSettings();\n                }\n            })[\"Toolbar.useEffect12\"];\n        }\n    }[\"Toolbar.useEffect12\"], []);\n    let inspectIcon = null;\n    let inspectColor = \"#999\";\n    if (isInspectActive) {\n        inspectIcon = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n            name: \"icon-inspect\"\n        });\n        inspectColor = \"#8e61e3\";\n    } else if (isInspectFocused) {\n        inspectIcon = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n            name: \"icon-focus\"\n        });\n        inspectColor = \"#8e61e3\";\n    } else {\n        inspectIcon = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n            name: \"icon-inspect\"\n        });\n        inspectColor = \"#999\";\n    }\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Toolbar.useEffect12\": ()=>{\n            return signalNotificationsOpen.subscribe({\n                \"Toolbar.useEffect12\": (value)=>{\n                    if (!value) {\n                        fadeOutHighlights();\n                    }\n                }\n            }[\"Toolbar.useEffect12\"]);\n        }\n    }[\"Toolbar.useEffect12\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"flex max-h-9 min-h-9 flex-1 items-stretch overflow-hidden gap-x-[6px]\",\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: \"h-full flex items-center min-w-fit\",\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: \"h-full flex items-center justify-center\",\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        type: \"button\",\n                        id: \"react-scan-inspect-element\",\n                        onClick: ()=>{\n                            const currentState = Store.inspectState.value;\n                            switch(currentState.kind){\n                                case \"inspecting\":\n                                    Store.inspectState.value = {\n                                        kind: \"inspect-off\"\n                                    };\n                                    break;\n                                case \"focused\":\n                                    Store.inspectState.value = {\n                                        kind: \"inspecting\",\n                                        hoveredDomElement: null\n                                    };\n                                    break;\n                                case \"inspect-off\":\n                                    signalNotificationsOpen.value = false;\n                                    Store.inspectState.value = {\n                                        kind: \"inspecting\",\n                                        hoveredDomElement: null\n                                    };\n                                    break;\n                                case \"uninitialized\":\n                                    break;\n                            }\n                        },\n                        className: \"button flex items-center justify-center h-full w-full pl-3 pr-2.5\",\n                        style: {\n                            color: inspectColor\n                        },\n                        children: inspectIcon\n                    })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: \"h-full flex items-center justify-center\",\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        type: \"button\",\n                        id: \"react-scan-notifications\",\n                        onClick: ()=>{\n                            Store.inspectState.value = {\n                                kind: \"inspect-off\"\n                            };\n                            signalNotificationsOpen.value = !signalNotificationsOpen.value;\n                        },\n                        className: \"button flex items-center justify-center h-full pl-2.5 pr-2.5\",\n                        style: {\n                            color: inspectColor\n                        },\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Notification, {\n                            events: laggedEvents.map((event)=>getEventSeverity(event) === \"high\"),\n                            size: 16,\n                            className: cn([\n                                \"text-[#999]\",\n                                signalNotificationsOpen.value && \"text-[#8E61E3]\"\n                            ])\n                        })\n                    })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn([\n                        \"min-w-fit flex flex-col items-center pl-1\"\n                    ]),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"h-full flex items-center justify-center\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Toggle, {\n                            checked: !ReactScanInternals.instrumentation?.isPaused.value,\n                            onChange: onToggleActive\n                        })\n                    })\n                }),\n                ReactScanInternals.options.value.showFPS && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(FPSWrapper, {})\n            ]\n        })\n    });\n};\nvar FPSWrapper = ()=>{\n    const [fps2, setFps] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"FPSWrapper.useEffect12\": ()=>{\n            const intervalId = setInterval({\n                \"FPSWrapper.useEffect12.intervalId\": ()=>{\n                    setFps(getFPS());\n                }\n            }[\"FPSWrapper.useEffect12.intervalId\"], 200);\n            return ({\n                \"FPSWrapper.useEffect12\": ()=>clearInterval(intervalId)\n            })[\"FPSWrapper.useEffect12\"];\n        }\n    }[\"FPSWrapper.useEffect12\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: cn(\"flex items-center justify-end gap-x-2 px-1 ml-1 w-[72px]\", \"whitespace-nowrap text-sm text-white\"),\n        children: fps2 === null ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n            children: \"\\uFE0F\"\n        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(FpsMeter, {\n            fps: fps2\n        })\n    });\n};\n// src/web/views/widget/index.tsx\n\nvar DEBUG = false;\nvar Widget = ()=>{\n    const refWidget = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refContent = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refInitialMinimizedWidth = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const refInitialMinimizedHeight = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const updateWidgetPosition = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Widget.useCallback5[updateWidgetPosition]\": (shouldSave = true)=>{\n            if (!refWidget.current) return;\n            const inspectState = Store.inspectState.value;\n            const isInspectFocused = inspectState.kind === \"focused\";\n            const { corner } = signalWidget.value;\n            let newWidth;\n            let newHeight;\n            if (isInspectFocused || signalIsSettingsOpen.value || signalNotificationsOpen.value) {\n                const lastDims = signalWidget.value.lastDimensions;\n                newWidth = calculateBoundedSize(lastDims.width, 0, true);\n                newHeight = calculateBoundedSize(lastDims.height, 0, false);\n            } else {\n                const currentDims = signalWidget.value.dimensions;\n                if (currentDims.width > refInitialMinimizedWidth.current) {\n                    signalWidget.value = {\n                        ...signalWidget.value,\n                        lastDimensions: {\n                            isFullWidth: currentDims.isFullWidth,\n                            isFullHeight: currentDims.isFullHeight,\n                            width: currentDims.width,\n                            height: currentDims.height,\n                            position: currentDims.position\n                        }\n                    };\n                }\n                newWidth = refInitialMinimizedWidth.current;\n                newHeight = refInitialMinimizedHeight.current;\n            }\n            const newPosition = calculatePosition(corner, newWidth, newHeight);\n            const isTooSmall = newWidth < MIN_SIZE.width || newHeight < MIN_SIZE.initialHeight;\n            const shouldPersist = shouldSave && !isTooSmall;\n            const container = refWidget.current;\n            const containerStyle = container.style;\n            let rafId = null;\n            const onTransitionEnd = {\n                \"Widget.useCallback5[updateWidgetPosition].onTransitionEnd\": ()=>{\n                    updateDimensions();\n                    container.removeEventListener(\"transitionend\", onTransitionEnd);\n                    if (rafId) {\n                        cancelAnimationFrame(rafId);\n                        rafId = null;\n                    }\n                }\n            }[\"Widget.useCallback5[updateWidgetPosition].onTransitionEnd\"];\n            container.addEventListener(\"transitionend\", onTransitionEnd);\n            containerStyle.transition = \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\";\n            rafId = requestAnimationFrame({\n                \"Widget.useCallback5[updateWidgetPosition]\": ()=>{\n                    containerStyle.width = `${newWidth}px`;\n                    containerStyle.height = `${newHeight}px`;\n                    containerStyle.transform = `translate3d(${newPosition.x}px, ${newPosition.y}px, 0)`;\n                    rafId = null;\n                }\n            }[\"Widget.useCallback5[updateWidgetPosition]\"]);\n            const newDimensions = {\n                isFullWidth: newWidth >= window.innerWidth - SAFE_AREA * 2,\n                isFullHeight: newHeight >= window.innerHeight - SAFE_AREA * 2,\n                width: newWidth,\n                height: newHeight,\n                position: newPosition\n            };\n            signalWidget.value = {\n                corner,\n                dimensions: newDimensions,\n                lastDimensions: isInspectFocused ? signalWidget.value.lastDimensions : newWidth > refInitialMinimizedWidth.current ? newDimensions : signalWidget.value.lastDimensions,\n                componentsTree: signalWidget.value.componentsTree\n            };\n            if (shouldPersist) {\n                saveLocalStorage(LOCALSTORAGE_KEY, {\n                    corner: signalWidget.value.corner,\n                    dimensions: signalWidget.value.dimensions,\n                    lastDimensions: signalWidget.value.lastDimensions,\n                    componentsTree: signalWidget.value.componentsTree\n                });\n            }\n            updateDimensions();\n        }\n    }[\"Widget.useCallback5[updateWidgetPosition]\"], []);\n    const handleDrag = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Widget.useCallback5[handleDrag]\": (e)=>{\n            e.preventDefault();\n            if (!refWidget.current || e.target.closest(\"button\")) return;\n            const container = refWidget.current;\n            const containerStyle = container.style;\n            const { dimensions } = signalWidget.value;\n            const initialMouseX = e.clientX;\n            const initialMouseY = e.clientY;\n            const initialX = dimensions.position.x;\n            const initialY = dimensions.position.y;\n            let currentX = initialX;\n            let currentY = initialY;\n            let rafId = null;\n            let hasMoved = false;\n            let lastMouseX = initialMouseX;\n            let lastMouseY = initialMouseY;\n            const handleMouseMove = {\n                \"Widget.useCallback5[handleDrag].handleMouseMove\": (e2)=>{\n                    if (rafId) return;\n                    hasMoved = true;\n                    lastMouseX = e2.clientX;\n                    lastMouseY = e2.clientY;\n                    rafId = requestAnimationFrame({\n                        \"Widget.useCallback5[handleDrag].handleMouseMove\": ()=>{\n                            const deltaX = lastMouseX - initialMouseX;\n                            const deltaY = lastMouseY - initialMouseY;\n                            currentX = Number(initialX) + deltaX;\n                            currentY = Number(initialY) + deltaY;\n                            containerStyle.transition = \"none\";\n                            containerStyle.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;\n                            rafId = null;\n                        }\n                    }[\"Widget.useCallback5[handleDrag].handleMouseMove\"]);\n                }\n            }[\"Widget.useCallback5[handleDrag].handleMouseMove\"];\n            const handleMouseUp = {\n                \"Widget.useCallback5[handleDrag].handleMouseUp\": ()=>{\n                    if (!container) return;\n                    if (rafId) {\n                        cancelAnimationFrame(rafId);\n                        rafId = null;\n                    }\n                    document.removeEventListener(\"mousemove\", handleMouseMove);\n                    document.removeEventListener(\"mouseup\", handleMouseUp);\n                    const totalDeltaX = Math.abs(lastMouseX - initialMouseX);\n                    const totalDeltaY = Math.abs(lastMouseY - initialMouseY);\n                    const totalMovement = Math.sqrt(totalDeltaX * totalDeltaX + totalDeltaY * totalDeltaY);\n                    if (!hasMoved || totalMovement < 60) return;\n                    const newCorner = getBestCorner(lastMouseX, lastMouseY, initialMouseX, initialMouseY, Store.inspectState.value.kind === \"focused\" ? 80 : 40);\n                    if (newCorner === signalWidget.value.corner) {\n                        containerStyle.transition = \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\";\n                        const currentPosition = signalWidget.value.dimensions.position;\n                        requestAnimationFrame({\n                            \"Widget.useCallback5[handleDrag].handleMouseUp\": ()=>{\n                                containerStyle.transform = `translate3d(${currentPosition.x}px, ${currentPosition.y}px, 0)`;\n                            }\n                        }[\"Widget.useCallback5[handleDrag].handleMouseUp\"]);\n                        return;\n                    }\n                    const snappedPosition = calculatePosition(newCorner, dimensions.width, dimensions.height);\n                    if (currentX === initialX && currentY === initialY) return;\n                    const onTransitionEnd = {\n                        \"Widget.useCallback5[handleDrag].handleMouseUp.onTransitionEnd\": ()=>{\n                            containerStyle.transition = \"none\";\n                            updateDimensions();\n                            container.removeEventListener(\"transitionend\", onTransitionEnd);\n                            if (rafId) {\n                                cancelAnimationFrame(rafId);\n                                rafId = null;\n                            }\n                        }\n                    }[\"Widget.useCallback5[handleDrag].handleMouseUp.onTransitionEnd\"];\n                    container.addEventListener(\"transitionend\", onTransitionEnd);\n                    containerStyle.transition = \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\";\n                    requestAnimationFrame({\n                        \"Widget.useCallback5[handleDrag].handleMouseUp\": ()=>{\n                            containerStyle.transform = `translate3d(${snappedPosition.x}px, ${snappedPosition.y}px, 0)`;\n                        }\n                    }[\"Widget.useCallback5[handleDrag].handleMouseUp\"]);\n                    signalWidget.value = {\n                        corner: newCorner,\n                        dimensions: {\n                            isFullWidth: dimensions.isFullWidth,\n                            isFullHeight: dimensions.isFullHeight,\n                            width: dimensions.width,\n                            height: dimensions.height,\n                            position: snappedPosition\n                        },\n                        lastDimensions: signalWidget.value.lastDimensions,\n                        componentsTree: signalWidget.value.componentsTree\n                    };\n                    saveLocalStorage(LOCALSTORAGE_KEY, {\n                        corner: newCorner,\n                        dimensions: signalWidget.value.dimensions,\n                        lastDimensions: signalWidget.value.lastDimensions,\n                        componentsTree: signalWidget.value.componentsTree\n                    });\n                }\n            }[\"Widget.useCallback5[handleDrag].handleMouseUp\"];\n            document.addEventListener(\"mousemove\", handleMouseMove, {\n                passive: true\n            });\n            document.addEventListener(\"mouseup\", handleMouseUp);\n        }\n    }[\"Widget.useCallback5[handleDrag]\"], []);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Widget.useEffect13\": ()=>{\n            if (!refWidget.current) return;\n            refWidget.current.style.width = \"min-content\";\n            refInitialMinimizedHeight.current = 36;\n            refInitialMinimizedWidth.current = refWidget.current.offsetWidth;\n            refWidget.current.style.maxWidth = `calc(100vw - ${SAFE_AREA * 2}px)`;\n            refWidget.current.style.maxHeight = `calc(100vh - ${SAFE_AREA * 2}px)`;\n            if (Store.inspectState.value.kind !== \"focused\") {\n                signalWidget.value = {\n                    ...signalWidget.value,\n                    dimensions: {\n                        isFullWidth: false,\n                        isFullHeight: false,\n                        width: refInitialMinimizedWidth.current,\n                        height: refInitialMinimizedHeight.current,\n                        position: signalWidget.value.dimensions.position\n                    }\n                };\n            }\n            signalRefWidget.value = refWidget.current;\n            const unsubscribeSignalWidget = signalWidget.subscribe({\n                \"Widget.useEffect13.unsubscribeSignalWidget\": (widget)=>{\n                    if (!refWidget.current) return;\n                    const { x, y } = widget.dimensions.position;\n                    const { width, height } = widget.dimensions;\n                    const container = refWidget.current;\n                    requestAnimationFrame({\n                        \"Widget.useEffect13.unsubscribeSignalWidget\": ()=>{\n                            container.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n                            container.style.width = `${width}px`;\n                            container.style.height = `${height}px`;\n                        }\n                    }[\"Widget.useEffect13.unsubscribeSignalWidget\"]);\n                }\n            }[\"Widget.useEffect13.unsubscribeSignalWidget\"]);\n            signalIsSettingsOpen.subscribe({\n                \"Widget.useEffect13\": ()=>{\n                    updateWidgetPosition();\n                }\n            }[\"Widget.useEffect13\"]);\n            signalNotificationsOpen.subscribe({\n                \"Widget.useEffect13\": ()=>{\n                    updateWidgetPosition(false);\n                }\n            }[\"Widget.useEffect13\"]);\n            signalNotificationDismissed.subscribe({\n                \"Widget.useEffect13\": ()=>{\n                    updateWidgetPosition();\n                }\n            }[\"Widget.useEffect13\"]);\n            signalSettingsOpen.subscribe({\n                \"Widget.useEffect13\": ()=>{\n                    updateWidgetPosition();\n                }\n            }[\"Widget.useEffect13\"]);\n            const unsubscribeStoreInspectState = Store.inspectState.subscribe({\n                \"Widget.useEffect13.unsubscribeStoreInspectState\": (state2)=>{\n                    if (!refContent.current) return;\n                    if (state2.kind === \"inspecting\") {\n                        toggleMultipleClasses(refContent.current, [\n                            \"opacity-0\",\n                            \"duration-0\",\n                            \"delay-0\"\n                        ]);\n                    }\n                    updateWidgetPosition();\n                }\n            }[\"Widget.useEffect13.unsubscribeStoreInspectState\"]);\n            const handleWindowResize = {\n                \"Widget.useEffect13.handleWindowResize\": ()=>{\n                    updateWidgetPosition(true);\n                }\n            }[\"Widget.useEffect13.handleWindowResize\"];\n            window.addEventListener(\"resize\", handleWindowResize, {\n                passive: true\n            });\n            return ({\n                \"Widget.useEffect13\": ()=>{\n                    window.removeEventListener(\"resize\", handleWindowResize);\n                    unsubscribeStoreInspectState();\n                    unsubscribeSignalWidget();\n                    saveLocalStorage(LOCALSTORAGE_KEY, {\n                        ...defaultWidgetConfig,\n                        corner: signalWidget.value.corner\n                    });\n                }\n            })[\"Widget.useEffect13\"];\n        }\n    }[\"Widget.useEffect13\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ScanOverlay, {}),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ToolbarElementContext.Provider, {\n                value: refWidget.current,\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    id: \"react-scan-toolbar\",\n                    dir: \"ltr\",\n                    ref: refWidget,\n                    onMouseDown: handleDrag,\n                    className: cn(\"fixed inset-0 rounded-lg shadow-lg\", \"flex flex-col\", \"font-mono text-[13px]\", \"user-select-none\", \"opacity-0\", \"cursor-move\", \"z-[124124124124]\", \"animate-fade-in animation-duration-300 animation-delay-300\", \"will-change-transform\"),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ResizeHandle, {\n                            position: \"top\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ResizeHandle, {\n                            position: \"bottom\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ResizeHandle, {\n                            position: \"left\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ResizeHandle, {\n                            position: \"right\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn(\"flex flex-1 flex-col\", \"overflow-hidden z-10\", \"rounded-lg\", \"bg-black\", \"opacity-100\", \"transition-[border-radius]\", \"peer-hover/left:rounded-l-none\", \"peer-hover/right:rounded-r-none\", \"peer-hover/top:rounded-t-none\", \"peer-hover/bottom:rounded-b-none\"),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    ref: refContent,\n                                    className: cn(\"relative\", \"flex-1\", \"flex flex-col\", \"rounded-t-lg\", \"overflow-hidden\", \"opacity-100\", \"transition-[opacity]\"),\n                                    children: [\n                                        Store.inspectState.value.kind === \"focused\" && !signalNotificationsOpen.value && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Header, {}),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: cn(\"relative\", \"flex-1 flex\", \"text-white\", \"bg-[#0A0A0A]\", \"transition-opacity delay-150\", \"overflow-hidden\", \"border-b border-white/10\"),\n                                            children: [\n                                                Store.inspectState.value.kind === \"focused\" && !signalNotificationsOpen.value && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                    children: [\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Inspector, {}),\n                                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ComponentsTree, {})\n                                                    ]\n                                                }),\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(NotificationWrapper, {})\n                                            ]\n                                        })\n                                    ]\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Toolbar, {})\n                            ]\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\nvar ToolbarElementContext = (0,preact__WEBPACK_IMPORTED_MODULE_2__.createContext)(null);\n// src/web/state.ts\nvar signalIsSettingsOpen = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\nvar signalRefWidget = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\nvar signalNotificationsOpen = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(DEBUG);\nvar signalNotificationDismissed = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\nvar signalLastDismissTime = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(0);\nvar signalSettingsOpen = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\nvar defaultWidgetConfig = {\n    corner: \"top-left\",\n    dimensions: {\n        isFullWidth: false,\n        isFullHeight: false,\n        width: MIN_SIZE.width,\n        height: MIN_SIZE.height,\n        position: {\n            x: SAFE_AREA,\n            y: SAFE_AREA\n        }\n    },\n    lastDimensions: {\n        isFullWidth: false,\n        isFullHeight: false,\n        width: MIN_SIZE.width,\n        height: MIN_SIZE.height,\n        position: {\n            x: SAFE_AREA,\n            y: SAFE_AREA\n        }\n    },\n    componentsTree: {\n        width: MIN_CONTAINER_WIDTH\n    }\n};\nvar getInitialWidgetConfig = ()=>{\n    const stored = readLocalStorage(LOCALSTORAGE_KEY);\n    if (!stored) {\n        saveLocalStorage(LOCALSTORAGE_KEY, {\n            corner: defaultWidgetConfig.corner,\n            dimensions: defaultWidgetConfig.dimensions,\n            lastDimensions: defaultWidgetConfig.lastDimensions,\n            componentsTree: defaultWidgetConfig.componentsTree\n        });\n        return defaultWidgetConfig;\n    }\n    return {\n        corner: stored.corner ?? defaultWidgetConfig.corner,\n        dimensions: {\n            isFullWidth: false,\n            isFullHeight: false,\n            width: MIN_SIZE.width,\n            height: MIN_SIZE.height,\n            position: stored.dimensions.position ?? defaultWidgetConfig.dimensions.position\n        },\n        lastDimensions: stored.dimensions ?? defaultWidgetConfig.dimensions,\n        componentsTree: stored.componentsTree ?? defaultWidgetConfig.componentsTree\n    };\n};\nvar signalWidget = (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(getInitialWidgetConfig());\nvar updateDimensions = ()=>{\n    if (true) return;\n    const { dimensions } = signalWidget.value;\n    const { width, height, position } = dimensions;\n    signalWidget.value = {\n        ...signalWidget.value,\n        dimensions: {\n            isFullWidth: width >= window.innerWidth - SAFE_AREA * 2,\n            isFullHeight: height >= window.innerHeight - SAFE_AREA * 2,\n            width,\n            height,\n            position\n        }\n    };\n};\n// src/web/utils/preact/constant.ts\n\nfunction CONSTANT_UPDATE() {\n    return false;\n}\nfunction constant(Component3) {\n    function Memoed(props) {\n        this.shouldComponentUpdate = CONSTANT_UPDATE;\n        return (0,preact__WEBPACK_IMPORTED_MODULE_2__.createElement)(Component3, props);\n    }\n    Memoed.displayName = `Memo(${Component3.displayName || Component3.name})`;\n    Memoed.prototype.isReactComponent = true;\n    Memoed._forwarded = true;\n    return Memoed;\n}\n// src/web/views/sticky-section/index.tsx\n\n\nvar StickySection = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(({ children })=>{\n    const refScrollableElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refScrollAtTop = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const [isSticky, setIsSticky] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const refRafId = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const calculateStickyTop = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"StickySection.useCallback6[calculateStickyTop]\": (removeSticky = false)=>{\n            const stickyElements = Array.from(refScrollableElement.current?.children || []);\n            if (!stickyElements.length) return;\n            let cumulativeHeight = 0;\n            for (const element of stickyElements){\n                const sticky = element;\n                if (sticky.dataset.sticky) {\n                    if (removeSticky) {\n                        sticky.style.removeProperty(\"top\");\n                    } else {\n                        sticky.style.setProperty(\"top\", `${cumulativeHeight}px`);\n                    }\n                    cumulativeHeight += sticky.offsetHeight;\n                }\n            }\n        }\n    }[\"StickySection.useCallback6[calculateStickyTop]\"], []);\n    const refSticky = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"StickySection.useCallback6[refSticky]\": (node)=>{\n            if (!node) {\n                requestAnimationFrame({\n                    \"StickySection.useCallback6[refSticky]\": ()=>{\n                        calculateStickyTop();\n                    }\n                }[\"StickySection.useCallback6[refSticky]\"]);\n                return;\n            }\n            refElement.current = node;\n            refScrollableElement.current = node.parentElement;\n            node.dataset.sticky = \"true\";\n            const handleClick = {\n                \"StickySection.useCallback6[refSticky].handleClick\": ()=>{\n                    if (!node.dataset.disableScroll) {\n                        refScrollableElement.current?.scrollTo({\n                            top: Number(node.style.top) ?? 0,\n                            behavior: \"smooth\"\n                        });\n                    }\n                }\n            }[\"StickySection.useCallback6[refSticky].handleClick\"];\n            node.onclick = handleClick;\n            calculateStickyTop();\n            const handleScroll = {\n                \"StickySection.useCallback6[refSticky].handleScroll\": ()=>{\n                    cancelAnimationFrame(refRafId.current);\n                    refRafId.current = requestAnimationFrame({\n                        \"StickySection.useCallback6[refSticky].handleScroll\": ()=>{\n                            if (!node || !refScrollableElement.current) return;\n                            const refRect = node.getBoundingClientRect();\n                            const containerRect = refScrollableElement.current.getBoundingClientRect();\n                            const stickyOffset = Number.parseInt(getComputedStyle(node).top);\n                            refScrollAtTop.current = refScrollableElement.current.scrollTop > 0;\n                            const stickyActive = refScrollAtTop.current && refRect.top <= containerRect.top + stickyOffset;\n                            if (stickyActive !== isSticky) {\n                                setIsSticky(stickyActive);\n                            }\n                            calculateStickyTop();\n                        }\n                    }[\"StickySection.useCallback6[refSticky].handleScroll\"]);\n                }\n            }[\"StickySection.useCallback6[refSticky].handleScroll\"];\n            refScrollableElement.current?.addEventListener(\"scroll\", handleScroll, {\n                passive: true\n            });\n        }\n    }[\"StickySection.useCallback6[refSticky]\"], [\n        isSticky,\n        calculateStickyTop\n    ]);\n    return children({\n        refSticky,\n        isSticky,\n        calculateStickyTop\n    });\n});\n// src/web/views/inspector/properties.tsx\n\n\n// src/web/hooks/use-merged-refs.ts\n\nvar assignRef = (ref, value)=>{\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref !== null) {\n        ref.current = value;\n    }\n};\nvar mergeRefs = (...refs)=>{\n    return (node)=>{\n        for (const ref of refs){\n            if (ref) {\n                assignRef(ref, node);\n            }\n        }\n    };\n};\nvar useMergedRefs = (...refs)=>{\n    return (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.useCallback)(mergeRefs(...refs), [\n        ...refs\n    ]);\n};\n// src/web/views/copy-to-clipboard/index.tsx\n\n\n\nvar CopyToClipboard = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(({ text, children, onCopy, className, iconSize = 14 })=>{\n    const refTimeout = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const [isCopied, setIsCopied] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"CopyToClipboard.useEffect14\": ()=>{\n            if (isCopied) {\n                refTimeout.current = setTimeout({\n                    \"CopyToClipboard.useEffect14\": ()=>setIsCopied(false)\n                }[\"CopyToClipboard.useEffect14\"], 600);\n                return ({\n                    \"CopyToClipboard.useEffect14\": ()=>{\n                        clearTimeout(refTimeout.current);\n                    }\n                })[\"CopyToClipboard.useEffect14\"];\n            }\n        }\n    }[\"CopyToClipboard.useEffect14\"], [\n        isCopied\n    ]);\n    const copyToClipboard = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"CopyToClipboard.useCallback8[copyToClipboard]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            navigator.clipboard.writeText(text).then({\n                \"CopyToClipboard.useCallback8[copyToClipboard]\": ()=>{\n                    setIsCopied(true);\n                    onCopy?.(true, text);\n                }\n            }[\"CopyToClipboard.useCallback8[copyToClipboard]\"], {\n                \"CopyToClipboard.useCallback8[copyToClipboard]\": ()=>{\n                    onCopy?.(false, text);\n                }\n            }[\"CopyToClipboard.useCallback8[copyToClipboard]\"]);\n        }\n    }[\"CopyToClipboard.useCallback8[copyToClipboard]\"], [\n        text,\n        onCopy\n    ]);\n    const ClipboardIcon = /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n        onClick: copyToClipboard,\n        type: \"button\",\n        className: cn(\"z-10\", \"flex items-center justify-center\", \"hover:text-dev-pink-400\", \"transition-colors duration-200 ease-in-out\", \"cursor-pointer\", `size-[${iconSize}px]`, className),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n            name: `icon-${isCopied ? \"check\" : \"copy\"}`,\n            size: [\n                iconSize\n            ],\n            className: cn({\n                \"text-green-500\": isCopied\n            })\n        })\n    });\n    if (!children) {\n        return ClipboardIcon;\n    }\n    return children({\n        ClipboardIcon,\n        onClick: copyToClipboard\n    });\n});\n// src/web/views/inspector/properties.tsx\n\nvar EditableValue = ({ value, onSave, onCancel })=>{\n    const refInput = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const [editValue, setEditValue] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(\"\");\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"EditableValue.useEffect15\": ()=>{\n            let initialValue = \"\";\n            try {\n                if (value instanceof Date) {\n                    initialValue = value.toISOString().slice(0, 16);\n                } else if (value instanceof Map || value instanceof Set || value instanceof RegExp || value instanceof Error || value instanceof ArrayBuffer || ArrayBuffer.isView(value) || typeof value === \"object\" && value !== null) {\n                    initialValue = formatValue(value);\n                } else {\n                    initialValue = formatInitialValue(value);\n                }\n            } catch  {\n                initialValue = String(value);\n            }\n            const sanitizedValue = sanitizeString(initialValue);\n            setEditValue(sanitizedValue);\n            requestAnimationFrame({\n                \"EditableValue.useEffect15\": ()=>{\n                    if (!refInput.current) return;\n                    refInput.current.focus();\n                    if (typeof value === \"string\") {\n                        refInput.current.setSelectionRange(1, sanitizedValue.length - 1);\n                    } else {\n                        refInput.current.select();\n                    }\n                }\n            }[\"EditableValue.useEffect15\"]);\n        }\n    }[\"EditableValue.useEffect15\"], [\n        value\n    ]);\n    const handleChange = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"EditableValue.useCallback9[handleChange]\": (e)=>{\n            const target = e.target;\n            if (target) {\n                setEditValue(target.value);\n            }\n        }\n    }[\"EditableValue.useCallback9[handleChange]\"], []);\n    const handleKeyDown = (e)=>{\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            try {\n                let newValue;\n                if (value instanceof Date) {\n                    const date = new Date(editValue);\n                    if (Number.isNaN(date.getTime())) {\n                        throw new Error(\"Invalid date\");\n                    }\n                    newValue = date;\n                } else {\n                    const detected = detectValueType(editValue);\n                    newValue = detected.value;\n                }\n                onSave(newValue);\n            } catch  {\n                onCancel();\n            }\n        } else if (e.key === \"Escape\") {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n            onCancel();\n        }\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n        ref: refInput,\n        type: value instanceof Date ? \"datetime-local\" : \"text\",\n        className: \"react-scan-input flex-1\",\n        value: editValue,\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: onCancel,\n        step: value instanceof Date ? 1 : void 0\n    });\n};\nvar PropertyElement = ({ name, value, section, level, parentPath, objectPathMap = /* @__PURE__ */ new WeakMap(), changedKeys = /* @__PURE__ */ new Set(), allowEditing = true })=>{\n    const { updates, currentIndex } = timelineState.value;\n    const currentUpdate = updates[currentIndex];\n    const fiberInfo = currentUpdate?.fiberInfo;\n    const refElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const currentPath = getPath(fiberInfo.displayName, section, parentPath ?? \"\", name);\n    const [isExpanded, setIsExpanded] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(globalInspectorState.expandedPaths.has(currentPath));\n    const [isEditing, setIsEditing] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const prevValue = globalInspectorState.lastRendered.get(currentPath);\n    const isChanged = !isEqual(prevValue, value);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"PropertyElement.useEffect15\": ()=>{\n            if (name === \"children\") {\n                return;\n            }\n            if (section === \"context\") {\n                return;\n            }\n            const isFirstRender = !globalInspectorState.lastRendered.has(currentPath);\n            const shouldFlash = isChanged && refElement.current && !isFirstRender;\n            globalInspectorState.lastRendered.set(currentPath, value);\n            if (shouldFlash && refElement.current && level === 0) {\n                flashManager.create(refElement.current);\n            }\n        }\n    }[\"PropertyElement.useEffect15\"], [\n        value,\n        isChanged,\n        currentPath,\n        level,\n        name,\n        section\n    ]);\n    const handleToggleExpand = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"PropertyElement.useCallback9[handleToggleExpand]\": ()=>{\n            setIsExpanded({\n                \"PropertyElement.useCallback9[handleToggleExpand]\": (prevState)=>{\n                    const newIsExpanded = !prevState;\n                    if (newIsExpanded) {\n                        globalInspectorState.expandedPaths.add(currentPath);\n                    } else {\n                        globalInspectorState.expandedPaths.delete(currentPath);\n                    }\n                    return newIsExpanded;\n                }\n            }[\"PropertyElement.useCallback9[handleToggleExpand]\"]);\n        }\n    }[\"PropertyElement.useCallback9[handleToggleExpand]\"], [\n        currentPath\n    ]);\n    const valuePreview = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[valuePreview]\": ()=>{\n            if (typeof value === \"object\" && value !== null) {\n                if (\"displayValue\" in value) {\n                    return String(value.displayValue);\n                }\n            }\n            return formatValue(value);\n        }\n    }[\"PropertyElement.useMemo4[valuePreview]\"], [\n        value\n    ]);\n    const clipboardText = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[clipboardText]\": ()=>{\n            if (typeof value === \"object\" && value !== null) {\n                if (\"value\" in value) {\n                    return String(formatForClipboard(value.value));\n                }\n                if (\"displayValue\" in value) {\n                    return String(value.displayValue);\n                }\n            }\n            return String(formatForClipboard(value));\n        }\n    }[\"PropertyElement.useMemo4[clipboardText]\"], [\n        value\n    ]);\n    const isExpandableValue = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[isExpandableValue]\": ()=>{\n            if (!value || typeof value !== \"object\") return false;\n            if (\"type\" in value) {\n                const metadata2 = value;\n                switch(metadata2.type){\n                    case \"array\":\n                    case \"Map\":\n                    case \"Set\":\n                        return (metadata2.size ?? metadata2.length ?? 0) > 0;\n                    case \"object\":\n                        return (metadata2.size ?? 0) > 0;\n                    case \"ArrayBuffer\":\n                    case \"DataView\":\n                        return (metadata2.byteLength ?? 0) > 0;\n                    case \"circular\":\n                    case \"promise\":\n                    case \"function\":\n                    case \"error\":\n                        return false;\n                    default:\n                        if (\"entries\" in metadata2 || \"items\" in metadata2) {\n                            return true;\n                        }\n                        return false;\n                }\n            }\n            return isExpandable(value);\n        }\n    }[\"PropertyElement.useMemo4[isExpandableValue]\"], [\n        value\n    ]);\n    const { overrideProps, overrideHookState } = getOverrideMethods();\n    const canEdit = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[canEdit]\": ()=>{\n            if (!allowEditing) return false;\n            if (section === \"props\") return !!overrideProps && name !== \"children\";\n            if (section === \"state\") return !!overrideHookState;\n            return false;\n        }\n    }[\"PropertyElement.useMemo4[canEdit]\"], [\n        section,\n        overrideProps,\n        overrideHookState,\n        allowEditing,\n        name\n    ]);\n    const handleEdit = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"PropertyElement.useCallback9[handleEdit]\": ()=>{\n            if (canEdit) {\n                setIsEditing(true);\n            }\n        }\n    }[\"PropertyElement.useCallback9[handleEdit]\"], [\n        canEdit\n    ]);\n    const handleSave = (section2, name2, value2)=>{\n        const { updates: updates2, currentIndex: currentIndex2, latestFiber } = timelineState.value;\n        const currentUpdate2 = updates2[currentIndex2];\n        if (!latestFiber) return;\n        const { overrideProps: overrideProps2, overrideHookState: overrideHookState2 } = getOverrideMethods();\n        if (!overrideProps2 || !overrideHookState2) return;\n        if (section2 === \"props\") {\n            tryOrElse(()=>{\n                const currentProps = latestFiber.memoizedProps || {};\n                let currentValue;\n                let path;\n                if (parentPath) {\n                    const parts = parentPath.split(\".\");\n                    path = parts.filter((part)=>part !== \"props\" && part !== (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(latestFiber.type));\n                    path.push(name2);\n                    currentValue = path.reduce((obj, key)=>obj && typeof obj === \"object\" ? obj[key] : {}, currentProps);\n                } else {\n                    path = [\n                        name2\n                    ];\n                    currentValue = currentProps[name2];\n                }\n                if (!isEqual(currentValue, value2)) {\n                    overrideProps2(latestFiber, path, value2);\n                    if (latestFiber.alternate) {\n                        overrideProps2(latestFiber.alternate, path, value2);\n                    }\n                }\n            }, null);\n        } else if (section2 === \"state\") {\n            tryOrElse(()=>{\n                if (!parentPath) {\n                    const stateNames = currentUpdate2.stateNames;\n                    const namedStateIndex = stateNames.indexOf(name2);\n                    const hookId = namedStateIndex !== -1 ? namedStateIndex.toString() : name2;\n                    overrideHookState2(latestFiber, hookId, [], value2);\n                } else {\n                    const fullPathParts = parentPath.split(\".\");\n                    const stateIndex = fullPathParts.indexOf(\"state\");\n                    if (stateIndex === -1) return;\n                    const statePath = fullPathParts.slice(stateIndex + 1);\n                    const baseStateKey = statePath[0];\n                    const stateNames = currentUpdate2.stateNames;\n                    const namedStateIndex = stateNames.indexOf(baseStateKey);\n                    const hookId = namedStateIndex !== -1 ? namedStateIndex.toString() : \"0\";\n                    const currentState = currentUpdate2.state.current;\n                    if (!currentState || !currentState.find((item)=>item.name === Number(baseStateKey))) {\n                        return;\n                    }\n                    const updatedState = updateNestedValue(currentState.find((item)=>item.name === Number(baseStateKey))?.value, statePath.slice(1).concat(name2), value2);\n                    overrideHookState2(latestFiber, hookId, [], updatedState);\n                }\n            }, null);\n        }\n        setIsEditing(false);\n    };\n    const checkCircularInValue = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertyElement.useMemo4[checkCircularInValue]\": ()=>{\n            if (!value || typeof value !== \"object\" || isPromise(value)) return false;\n            return \"type\" in value && value.type === \"circular\";\n        }\n    }[\"PropertyElement.useMemo4[checkCircularInValue]\"], [\n        value\n    ]);\n    const renderNestedProperties = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"PropertyElement.useCallback9[renderNestedProperties]\": (obj)=>{\n            if (!obj || typeof obj !== \"object\") return null;\n            if (\"type\" in obj) {\n                const metadata2 = obj;\n                if (\"entries\" in metadata2 && metadata2.entries) {\n                    const entries2 = Object.entries(metadata2.entries);\n                    if (entries2.length === 0) return null;\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"react-scan-nested\",\n                        children: entries2.map({\n                            \"PropertyElement.useCallback9[renderNestedProperties]\": ([key, val])=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                                    name: key,\n                                    value: val,\n                                    section,\n                                    level: level + 1,\n                                    parentPath: currentPath,\n                                    objectPathMap,\n                                    changedKeys,\n                                    allowEditing\n                                }, `${currentPath}-entry-${key}`)\n                        }[\"PropertyElement.useCallback9[renderNestedProperties]\"])\n                    });\n                }\n                if (\"items\" in metadata2 && Array.isArray(metadata2.items)) {\n                    if (metadata2.items.length === 0) return null;\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"react-scan-nested\",\n                        children: metadata2.items.map({\n                            \"PropertyElement.useCallback9[renderNestedProperties]\": (item, i)=>{\n                                const itemKey = `${currentPath}-item-${item.type}-${i}`;\n                                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                                    name: `${i}`,\n                                    value: item,\n                                    section,\n                                    level: level + 1,\n                                    parentPath: currentPath,\n                                    objectPathMap,\n                                    changedKeys,\n                                    allowEditing\n                                }, itemKey);\n                            }\n                        }[\"PropertyElement.useCallback9[renderNestedProperties]\"])\n                    });\n                }\n                return null;\n            }\n            let entries;\n            if (obj instanceof ArrayBuffer) {\n                const view = new Uint8Array(obj);\n                entries = Array.from(view).map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (v, i)=>[\n                            i,\n                            v\n                        ]\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else if (obj instanceof DataView) {\n                const view = new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength);\n                entries = Array.from(view).map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (v, i)=>[\n                            i,\n                            v\n                        ]\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else if (ArrayBuffer.isView(obj)) {\n                if (obj instanceof BigInt64Array || obj instanceof BigUint64Array) {\n                    entries = Array.from({\n                        length: obj.length\n                    }, {\n                        \"PropertyElement.useCallback9[renderNestedProperties]\": (_, i)=>[\n                                i,\n                                obj[i]\n                            ]\n                    }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n                } else {\n                    const typedArray = obj;\n                    entries = Array.from(typedArray).map({\n                        \"PropertyElement.useCallback9[renderNestedProperties]\": (v, i)=>[\n                                i,\n                                v\n                            ]\n                    }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n                }\n            } else if (obj instanceof Map) {\n                entries = Array.from(obj.entries()).map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": ([k, v])=>[\n                            String(k),\n                            v\n                        ]\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else if (obj instanceof Set) {\n                entries = Array.from(obj).map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (v, i)=>[\n                            i,\n                            v\n                        ]\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else if (Array.isArray(obj)) {\n                entries = obj.map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": (value2, index)=>[\n                            `${index}`,\n                            value2\n                        ]\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"]);\n            } else {\n                entries = Object.entries(obj);\n            }\n            if (entries.length === 0) return null;\n            const canEditChildren = !(obj instanceof DataView || obj instanceof ArrayBuffer || ArrayBuffer.isView(obj));\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"react-scan-nested\",\n                children: entries.map({\n                    \"PropertyElement.useCallback9[renderNestedProperties]\": ([key, val])=>{\n                        const itemKey = `${currentPath}-${typeof key === \"number\" ? `item-${key}` : key}`;\n                        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                            name: String(key),\n                            value: val,\n                            section,\n                            level: level + 1,\n                            parentPath: currentPath,\n                            objectPathMap,\n                            changedKeys,\n                            allowEditing: canEditChildren\n                        }, itemKey);\n                    }\n                }[\"PropertyElement.useCallback9[renderNestedProperties]\"])\n            });\n        }\n    }[\"PropertyElement.useCallback9[renderNestedProperties]\"], [\n        section,\n        level,\n        currentPath,\n        objectPathMap,\n        changedKeys,\n        allowEditing\n    ]);\n    if (checkCircularInValue) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: \"react-scan-property\",\n            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"react-scan-property-content\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"react-scan-preview-line\",\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"react-scan-key\",\n                            children: [\n                                name,\n                                \":\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"text-yellow-500\",\n                            children: \"[Circular Reference]\"\n                        })\n                    ]\n                })\n            })\n        });\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        ref: refElement,\n        className: \"react-scan-property\",\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: \"react-scan-property-content\",\n            children: [\n                isExpandableValue && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                    type: \"button\",\n                    onClick: handleToggleExpand,\n                    className: \"react-scan-arrow\",\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                        name: \"icon-chevron-right\",\n                        size: 12,\n                        className: cn({\n                            \"rotate-90\": isExpanded\n                        })\n                    })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn(\"group\", \"react-scan-preview-line\", {\n                        \"react-scan-highlight\": isChanged\n                    }),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"react-scan-key\",\n                            children: [\n                                name,\n                                \":\"\n                            ]\n                        }),\n                        isEditing && isEditableValue(value, parentPath) ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(EditableValue, {\n                            value,\n                            onSave: (newValue)=>handleSave(section, name, newValue),\n                            onCancel: ()=>setIsEditing(false)\n                        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                            type: \"button\",\n                            className: \"truncate\",\n                            onClick: handleEdit,\n                            children: valuePreview\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyToClipboard, {\n                            text: clipboardText,\n                            className: \"opacity-0 transition-opacity group-hover:opacity-100\",\n                            children: ({ ClipboardIcon })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                    children: ClipboardIcon\n                                })\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn(\"react-scan-expandable\", {\n                        \"react-scan-expanded\": isExpanded\n                    }),\n                    children: isExpandableValue && isExpanded && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"react-scan-nested\",\n                        children: renderNestedProperties(value)\n                    })\n                })\n            ]\n        })\n    });\n};\nvar PropertySection = ({ refSticky, isSticky, section })=>{\n    const refStickyElement = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refSection = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const { updates, currentIndex } = timelineState.value;\n    const [isExpanded, setIsExpanded] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const refs = useMergedRefs(refStickyElement, refSticky);\n    const pathMap = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertySection.useMemo4[pathMap]\": ()=>/* @__PURE__ */ new WeakMap()\n    }[\"PropertySection.useMemo4[pathMap]\"], []);\n    const { currentData, changedKeys } = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"PropertySection.useMemo4\": ()=>{\n            const data = updates[currentIndex] ?? {\n                props: {\n                    current: {},\n                    changes: /* @__PURE__ */ new Set()\n                },\n                state: {\n                    current: {},\n                    changes: /* @__PURE__ */ new Set()\n                },\n                context: {\n                    current: {},\n                    changes: /* @__PURE__ */ new Set()\n                }\n            };\n            switch(section){\n                case \"props\":\n                    return {\n                        currentData: data.props.current,\n                        changedKeys: data.props.changes\n                    };\n                case \"state\":\n                    return {\n                        currentData: data.state.current,\n                        changedKeys: data.state.changes\n                    };\n                case \"context\":\n                    return {\n                        currentData: data.context.current,\n                        changedKeys: data.context.changes\n                    };\n                default:\n                    return {\n                        currentData: {},\n                        changedKeys: /* @__PURE__ */ new Set()\n                    };\n            }\n        }\n    }[\"PropertySection.useMemo4\"], [\n        section,\n        currentIndex,\n        updates\n    ]);\n    const toggleExpanded = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"PropertySection.useCallback9[toggleExpanded]\": ()=>{\n            setIsExpanded({\n                \"PropertySection.useCallback9[toggleExpanded]\": (state2)=>{\n                    if (isSticky && isExpanded) {\n                        return state2;\n                    }\n                    return !state2;\n                }\n            }[\"PropertySection.useCallback9[toggleExpanded]\"]);\n        }\n    }[\"PropertySection.useCallback9[toggleExpanded]\"], [\n        isExpanded,\n        isSticky\n    ]);\n    if (!currentData || (Array.isArray(currentData) ? currentData.length === 0 : Object.keys(currentData).length === 0)) {\n        return null;\n    }\n    const propertyCount = Array.isArray(currentData) ? currentData.length : Object.keys(currentData).length;\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                ref: refs,\n                type: \"button\",\n                onClick: toggleExpanded,\n                \"data-sticky\": true,\n                className: \"react-section-header\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"w-4 h-4 flex items-center justify-center\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                            name: \"icon-chevron-right\",\n                            size: 12,\n                            className: cn({\n                                \"rotate-90\": isExpanded,\n                                \"rotate-0\": isSticky && isExpanded\n                            })\n                        })\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                        className: \"capitalize\",\n                        children: [\n                            section,\n                            \" \",\n                            !isExpanded && propertyCount > 0 && `(${propertyCount})`\n                        ]\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                ref: refSection,\n                className: \"react-scan-section\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn(\"react-scan-expandable\", {\n                        \"react-scan-expanded py-0.5\": isExpanded\n                    }),\n                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"overflow-hidden\",\n                        children: Array.isArray(currentData) ? currentData.map(({ name, value })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                                name,\n                                value,\n                                section,\n                                level: 0,\n                                objectPathMap: pathMap,\n                                changedKeys\n                            }, name)) : Object.entries(currentData).map(([key, value])=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertyElement, {\n                                name: key,\n                                value,\n                                section,\n                                level: 0,\n                                objectPathMap: pathMap,\n                                changedKeys\n                            }, key))\n                    })\n                })\n            })\n        ]\n    });\n};\n// src/web/views/inspector/what-changed.tsx\n\n\n// src/web/views/inspector/diff-value.tsx\n\n\nvar DiffValueView = ({ value, expanded, onToggle, isNegative })=>{\n    const { value: safeValue, error } = safeGetValue(value);\n    const pathPrefix = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"DiffValueView.useMemo5[pathPrefix]\": ()=>Math.random().toString(36).slice(2)\n    }[\"DiffValueView.useMemo5[pathPrefix]\"], []);\n    const [expandedPaths, setExpandedPaths] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(/* @__PURE__ */ new Set());\n    if (error) {\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n            className: \"text-gray-500 font-italic\",\n            children: error\n        });\n    }\n    const isExpandable2 = safeValue !== null && typeof safeValue === \"object\" && !(safeValue instanceof Promise);\n    const renderExpandedValue = (obj, path = \"\")=>{\n        if (obj === null || typeof obj !== \"object\") {\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                children: formatValuePreview(obj)\n            });\n        }\n        const entries = Object.entries(obj);\n        const seenObjects = /* @__PURE__ */ new WeakSet();\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            children: entries.map(([key, val], i)=>{\n                const currentPath = path ? `${path}.${key}` : key;\n                const fullPath = `${pathPrefix}.${currentPath}`;\n                const isExpanded = expandedPaths.has(fullPath);\n                const canExpand = val !== null && typeof val === \"object\";\n                let isCircular = false;\n                if (canExpand) {\n                    if (seenObjects.has(val)) {\n                        isCircular = true;\n                    } else {\n                        seenObjects.add(val);\n                    }\n                }\n                return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: cn({\n                        \"mt-1\": i > 0\n                    }),\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"flex items-center gap-1\",\n                            children: [\n                                canExpand && !isCircular && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                    type: \"button\",\n                                    onClick: ()=>{\n                                        setExpandedPaths((prev)=>{\n                                            const next = new Set(prev);\n                                            if (next.has(fullPath)) {\n                                                next.delete(fullPath);\n                                            } else {\n                                                next.add(fullPath);\n                                            }\n                                            return next;\n                                        });\n                                    },\n                                    className: cn(\"flex items-center\", \"p-0 mr-1\", \"opacity-50\"),\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                        name: \"icon-chevron-right\",\n                                        size: 12,\n                                        className: cn(\"transition-[transform,color]\", \"text-[#4ade80]\", {\n                                            \"transform rotate-90\": isExpanded,\n                                            \"text-[#f87171]\": isNegative\n                                        })\n                                    })\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                    className: \"text-gray-500\",\n                                    children: [\n                                        key,\n                                        \":\"\n                                    ]\n                                }),\n                                isCircular ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: \"text-gray-500 font-italic\",\n                                    children: \"[Circular]\"\n                                }) : !canExpand || !isExpanded ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    children: formatValuePreview(val)\n                                }) : null\n                            ]\n                        }),\n                        canExpand && isExpanded && !isCircular && renderExpandedValue(val, currentPath)\n                    ]\n                }, key);\n            })\n        });\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"flex items-start gap-1\",\n        children: [\n            isExpandable2 && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                onClick: onToggle,\n                className: cn(\"flex items-center\", \"p-0 mt-0.5 mr-1\", \"opacity-50\"),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-chevron-right\",\n                    size: 12,\n                    className: cn(\"transition-[transform,color]\", \"text-[#4ade80]\", {\n                        \"transform rotate-90\": expanded,\n                        \"text-[#f87171]\": isNegative\n                    })\n                })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"flex-1\",\n                children: !expanded ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                    children: formatValuePreview(safeValue)\n                }) : renderExpandedValue(safeValue)\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyToClipboard, {\n                text: formatForClipboard(safeValue),\n                className: \"opacity-0 transition-opacity group-hover:opacity-100\",\n                children: ({ ClipboardIcon })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                        children: ClipboardIcon\n                    })\n            })\n        ]\n    });\n};\n// src/web/views/inspector/timeline/index.tsx\n\n\n\n// src/web/views/slider/index.tsx\n\n\nvar Slider = ({ value, min, max, onChange, className, totalUpdates = max + 1 })=>{\n    const refThumb = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refLastValue = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(value);\n    const updateThumbPosition = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Slider.useCallback10[updateThumbPosition]\": (value2)=>{\n            if (!refThumb.current) return;\n            const range = Math.max(1, max - min);\n            const valueOffset = value2 - min;\n            const percentage = min === max ? 0 : Math.min(100, Math.round(valueOffset / range * 100));\n            refThumb.current.style.setProperty(\"left\", `${percentage}%`);\n        }\n    }[\"Slider.useCallback10[updateThumbPosition]\"], [\n        min,\n        max\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Slider.useEffect16\": ()=>{\n            updateThumbPosition(value);\n        }\n    }[\"Slider.useEffect16\"], [\n        min,\n        max,\n        value\n    ]);\n    const handleChange = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Slider.useCallback10[handleChange]\": (e)=>{\n            const target = e.target;\n            const newValue = Number.parseInt(target.value, 10);\n            if (newValue >= totalUpdates) {\n                return;\n            }\n            if (refLastValue.current !== newValue) {\n                refLastValue.current = newValue;\n                updateThumbPosition(newValue);\n                onChange(e);\n            }\n        }\n    }[\"Slider.useCallback10[handleChange]\"], [\n        onChange,\n        updateThumbPosition,\n        totalUpdates\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        onMouseDown: (e)=>{\n            e.stopPropagation();\n        },\n        className: cn(\"react-scan-slider relative\", \"flex-1\", className),\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n                type: \"range\",\n                value,\n                min,\n                max,\n                onChange: handleChange,\n                className: cn(\"react-scan-slider\", \"flex-1\", \"h-1.5\", \"bg-gray-200\", \"rounded-lg\", \"appearance-none\", \"cursor-pointer\", className)\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn(\"absolute inset-0 right-2\", \"pointer-events-none\"),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                    ref: refThumb\n                })\n            })\n        ]\n    });\n};\n// src/web/views/inspector/timeline/index.tsx\n\nvar Timeline = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(({ refSticky })=>{\n    const refPlayInterval = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refChangeInterval = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const { currentIndex, isVisible, totalUpdates, updates } = timelineState.value;\n    const sliderValues = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"Timeline.useMemo6[sliderValues]\": ()=>{\n            return calculateSliderValues(totalUpdates, currentIndex);\n        }\n    }[\"Timeline.useMemo6[sliderValues]\"], [\n        totalUpdates,\n        currentIndex\n    ]);\n    const handleSliderChange = async (e)=>{\n        const target = e.target;\n        const value = Number.parseInt(target.value, 10);\n        const newIndex = Math.min(updates.length - 1, Math.max(0, value));\n        let isViewingHistory = false;\n        if (newIndex > 0 && newIndex < updates.length - 1) {\n            isViewingHistory = true;\n        }\n        timelineActions.updateFrame(newIndex, isViewingHistory);\n    };\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Timeline.useEffect17\": ()=>{\n            return ({\n                \"Timeline.useEffect17\": ()=>{\n                    if (refPlayInterval.current) {\n                        clearInterval(refPlayInterval.current);\n                    }\n                    if (refChangeInterval.current) {\n                        cancelAnimationFrame(refChangeInterval.current);\n                    }\n                }\n            })[\"Timeline.useEffect17\"];\n        }\n    }[\"Timeline.useEffect17\"], []);\n    const handleShowTimeline = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Timeline.useCallback11[handleShowTimeline]\": ()=>{\n            if (!isVisible) {\n                timelineActions.showTimeline();\n            }\n        }\n    }[\"Timeline.useCallback11[handleShowTimeline]\"], [\n        isVisible\n    ]);\n    const handleHideTimeline = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Timeline.useCallback11[handleHideTimeline]\": (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            if (refPlayInterval.current) {\n                clearInterval(refPlayInterval.current);\n                refPlayInterval.current = null;\n            }\n            timelineActions.hideTimeline();\n        }\n    }[\"Timeline.useCallback11[handleHideTimeline]\"], []);\n    if (!(0,bippy__WEBPACK_IMPORTED_MODULE_0__.isInstrumentationActive)()) {\n        return null;\n    }\n    if (totalUpdates <= 1) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n        ref: refSticky,\n        type: \"button\",\n        onClick: handleShowTimeline,\n        className: \"react-section-header\",\n        \"data-disable-scroll\": \"true\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                type: \"button\",\n                onClick: isVisible ? handleHideTimeline : void 0,\n                title: isVisible ? \"Hide Re-renders History\" : \"View Re-renders History\",\n                className: \"w-4 h-4 flex items-center justify-center\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                    name: \"icon-gallery-horizontal-end\",\n                    size: 12\n                })\n            }),\n            isVisible ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"text-xs text-gray-500\",\n                        children: sliderValues.leftValue\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Slider, {\n                        min: sliderValues.min,\n                        max: sliderValues.max,\n                        value: sliderValues.value,\n                        onChange: handleSliderChange,\n                        className: \"flex-1\",\n                        totalUpdates: sliderValues.rightValue + 1\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"text-xs text-gray-500\",\n                        children: sliderValues.rightValue\n                    })\n                ]\n            }) : \"View Change History\"\n        ]\n    });\n});\n// src/web/views/inspector/what-changed.tsx\n\nvar safeGetValue2 = (value)=>{\n    if (value === null || value === void 0) return {\n        value\n    };\n    if (typeof value === \"function\") return {\n        value\n    };\n    if (typeof value !== \"object\") return {\n        value\n    };\n    if (isPromise(value)) {\n        return {\n            value: \"Promise\"\n        };\n    }\n    try {\n        const proto = Object.getPrototypeOf(value);\n        if (proto === Promise.prototype || proto?.constructor?.name === \"Promise\") {\n            return {\n                value: \"Promise\"\n            };\n        }\n        return {\n            value\n        };\n    } catch  {\n        return {\n            value: null,\n            error: \"Error accessing value\"\n        };\n    }\n};\nvar WhatChangedSection = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(()=>{\n    const refShowTimeline = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const [shouldShowChanges, setShouldShowChanges] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"WhatChangedSection.useEffect18\": ()=>{\n            const rafId = 0;\n            const unsubscribe = timelineState.subscribe({\n                \"WhatChangedSection.useEffect18.unsubscribe\": async (state2)=>{\n                    cancelAnimationFrame(rafId);\n                    const { currentIndex, updates } = state2;\n                    if (currentIndex === 0) {\n                        setShouldShowChanges(false);\n                        return;\n                    }\n                    if (updates.length > 0) {\n                        if (!refShowTimeline.current) {\n                            refShowTimeline.current = true;\n                        }\n                        setShouldShowChanges(true);\n                    }\n                }\n            }[\"WhatChangedSection.useEffect18.unsubscribe\"]);\n            return ({\n                \"WhatChangedSection.useEffect18\": ()=>{\n                    unsubscribe();\n                    cancelAnimationFrame(rafId);\n                }\n            })[\"WhatChangedSection.useEffect18\"];\n        }\n    }[\"WhatChangedSection.useEffect18\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            refShowTimeline.current && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Timeline, {\n                        ...props\n                    })\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(WhatChanged, {\n                        ...props,\n                        shouldShowChanges\n                    })\n            })\n        ]\n    });\n});\nvar WhatChanged = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(({ isSticky, refSticky, calculateStickyTop, shouldShowChanges })=>{\n    const [isExpanded, setIsExpanded] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(WhatsChangedHeader, {\n                refSticky,\n                isSticky,\n                calculateStickyTop,\n                isExpanded,\n                shouldShowChanges,\n                setIsExpanded\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn(\"react-scan-expandable\", {\n                    \"react-scan-expanded\": isExpanded\n                }),\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: \"overflow-hidden\",\n                    children: shouldShowChanges && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: cn(\"relative\", \"flex flex-col gap-y-2\", \"pl-9 pr-2\", 'before:content-[\"\"] before:absolute before:inset-x-0 before:bottom-0 before:h-[1px] before:bg-[#333]'),\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Section, {\n                                title: \"Props\",\n                                isExpanded\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Section, {\n                                title: \"State\",\n                                isExpanded\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Section, {\n                                title: \"Context\",\n                                isExpanded\n                            })\n                        ]\n                    })\n                })\n            })\n        ]\n    });\n});\nvar renderStateName = (key, componentName)=>{\n    if (Number.isNaN(Number(key))) {\n        return key;\n    }\n    const n = Number.parseInt(key);\n    const getOrdinalSuffix = (num)=>{\n        const lastDigit = num % 10;\n        const lastTwoDigits = num % 100;\n        if (lastTwoDigits >= 11 && lastTwoDigits <= 13) {\n            return \"th\";\n        }\n        switch(lastDigit){\n            case 1:\n                return \"st\";\n            case 2:\n                return \"nd\";\n            case 3:\n                return \"rd\";\n            default:\n                return \"th\";\n        }\n    };\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n        children: [\n            n,\n            getOrdinalSuffix(n),\n            \" hook\",\n            \" \",\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                style: {\n                    color: \"#666\"\n                },\n                children: [\n                    \"called in \",\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"i\", {\n                        className: \"text-[#A855F7] truncate\",\n                        children: componentName\n                    })\n                ]\n            })\n        ]\n    });\n};\nvar WhatsChangedHeader = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(({ refSticky, isSticky, calculateStickyTop, isExpanded, shouldShowChanges, setIsExpanded })=>{\n    const refProps = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refState = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refContext = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refStats = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)({\n        isPropsChanged: false,\n        isStateChanged: false,\n        isContextChanged: false\n    });\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"WhatsChangedHeader.useEffect18\": ()=>{\n            const flash = throttle({\n                \"WhatsChangedHeader.useEffect18.flash\": ()=>{\n                    const flashElements = [];\n                    if (refProps.current?.dataset.flash === \"true\") {\n                        flashElements.push(refProps.current);\n                    }\n                    if (refState.current?.dataset.flash === \"true\") {\n                        flashElements.push(refState.current);\n                    }\n                    if (refContext.current?.dataset.flash === \"true\") {\n                        flashElements.push(refContext.current);\n                    }\n                    for (const element of flashElements){\n                        element.classList.remove(\"count-flash-white\");\n                        void element.offsetWidth;\n                        element.classList.add(\"count-flash-white\");\n                    }\n                }\n            }[\"WhatsChangedHeader.useEffect18.flash\"], 400);\n            const unsubscribe = timelineState.subscribe({\n                \"WhatsChangedHeader.useEffect18.unsubscribe\": (state2)=>{\n                    if (!refProps.current || !refState.current || !refContext.current) {\n                        return;\n                    }\n                    const { currentIndex, updates } = state2;\n                    const currentUpdate = updates[currentIndex];\n                    if (!currentUpdate || currentIndex === 0) {\n                        return;\n                    }\n                    flash();\n                    refStats.current = {\n                        isPropsChanged: (currentUpdate.props?.changes?.size ?? 0) > 0,\n                        isStateChanged: (currentUpdate.state?.changes?.size ?? 0) > 0,\n                        isContextChanged: (currentUpdate.context?.changes?.size ?? 0) > 0\n                    };\n                    if (refProps.current.dataset.flash !== \"true\") {\n                        refProps.current.dataset.flash = refStats.current.isPropsChanged.toString();\n                    }\n                    if (refState.current.dataset.flash !== \"true\") {\n                        refState.current.dataset.flash = refStats.current.isStateChanged.toString();\n                    }\n                    if (refContext.current.dataset.flash !== \"true\") {\n                        refContext.current.dataset.flash = refStats.current.isContextChanged.toString();\n                    }\n                }\n            }[\"WhatsChangedHeader.useEffect18.unsubscribe\"]);\n            return unsubscribe;\n        }\n    }[\"WhatsChangedHeader.useEffect18\"], []);\n    const toggleExpanded = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"WhatsChangedHeader.useCallback12[toggleExpanded]\": ()=>{\n            setIsExpanded({\n                \"WhatsChangedHeader.useCallback12[toggleExpanded]\": (state2)=>{\n                    if (isSticky && isExpanded) {\n                        return state2;\n                    }\n                    return !state2;\n                }\n            }[\"WhatsChangedHeader.useCallback12[toggleExpanded]\"]);\n        }\n    }[\"WhatsChangedHeader.useCallback12[toggleExpanded]\"], [\n        setIsExpanded,\n        isExpanded,\n        isSticky\n    ]);\n    const onTransitionStart = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"WhatsChangedHeader.useCallback12[onTransitionStart]\": (e)=>{\n            if (e.propertyName === \"max-height\") {\n                calculateStickyTop(true);\n            }\n        }\n    }[\"WhatsChangedHeader.useCallback12[onTransitionStart]\"], [\n        calculateStickyTop\n    ]);\n    const onTransitionEnd = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"WhatsChangedHeader.useCallback12[onTransitionEnd]\": (e)=>{\n            if (e.propertyName === \"max-height\") {\n                calculateStickyTop(false);\n            }\n        }\n    }[\"WhatsChangedHeader.useCallback12[onTransitionEnd]\"], [\n        calculateStickyTop\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n        ref: refSticky,\n        type: \"button\",\n        onClick: toggleExpanded,\n        onTransitionStart,\n        onTransitionEnd,\n        className: cn(\"react-section-header\", \"overflow-hidden\", \"max-h-0\", \"transition-[max-height]\", {\n            \"max-h-8\": shouldShowChanges\n        }),\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: cn(\"flex-1 react-scan-expandable\", {\n                \"react-scan-expanded\": shouldShowChanges\n            }),\n            children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"overflow-hidden\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"flex items-center whitespace-nowrap\",\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"flex items-center gap-x-2\",\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: \"w-4 h-4 flex items-center justify-center\",\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                        name: \"icon-chevron-right\",\n                                        size: 12,\n                                        className: cn({\n                                            \"rotate-90\": isExpanded,\n                                            \"rotate-0\": isSticky && isExpanded\n                                        })\n                                    })\n                                }),\n                                \"What changed?\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: cn(\"ml-auto\", \"change-scope\", \"opacity-0\", \"transition-opacity duration-300 delay-150\", {\n                                \"opacity-100\": !isExpanded\n                            }),\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    ref: refProps,\n                                    children: \"props\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    ref: refState,\n                                    children: \"state\"\n                                }),\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    ref: refContext,\n                                    children: \"context\"\n                                })\n                            ]\n                        })\n                    ]\n                })\n            })\n        })\n    });\n});\nvar Section = (0,preact_compat__WEBPACK_IMPORTED_MODULE_5__.memo)(({ title, isExpanded })=>{\n    const refFiberInfo = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refLastUpdated = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(/* @__PURE__ */ new Set());\n    const refChangesValues = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(/* @__PURE__ */ new Map());\n    const refLatestChanges = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const [changes, setChanges] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [expandedFns, setExpandedFns] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(/* @__PURE__ */ new Set());\n    const [expandedEntries, setExpandedEntries] = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useState)(/* @__PURE__ */ new Set());\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Section.useEffect18\": ()=>{\n            const unsubscribe = timelineState.subscribe({\n                \"Section.useEffect18.unsubscribe\": (state2)=>{\n                    const { currentIndex, updates } = state2;\n                    const currentUpdate = currentIndex >= 0 ? updates[currentIndex] : null;\n                    const prevUpdate = currentIndex > 0 ? updates[currentIndex - 1] : null;\n                    const currentData = currentUpdate?.[title.toLowerCase()];\n                    const prevData = prevUpdate?.[title.toLowerCase()];\n                    if (!currentData) {\n                        return;\n                    }\n                    refFiberInfo.current = currentUpdate?.fiberInfo;\n                    refLastUpdated.current.clear();\n                    const changesMap = new Map(refLatestChanges.current.map({\n                        \"Section.useEffect18.unsubscribe\": (c)=>[\n                                c.name,\n                                c\n                            ]\n                    }[\"Section.useEffect18.unsubscribe\"]));\n                    for (const { name, value } of currentData.current){\n                        const currentCount = currentData.changesCounts?.get(name) ?? 0;\n                        const prevCount = prevData?.changesCounts?.get(name) ?? 0;\n                        const count = Math.max(currentCount, prevCount);\n                        const prevValue = prevData?.current.find({\n                            \"Section.useEffect18.unsubscribe\": (p)=>p.name === name\n                        }[\"Section.useEffect18.unsubscribe\"])?.value;\n                        const hasValueChange = !isEqual(value, prevValue);\n                        if (count > 0 || hasValueChange) {\n                            const { value: safePrevValue, error: prevError } = safeGetValue2(prevValue);\n                            const { value: safeCurrValue, error: currError } = safeGetValue2(value);\n                            const diff = getObjectDiff(safePrevValue, safeCurrValue);\n                            refChangesValues.current.set(name, {\n                                name,\n                                prevValue,\n                                currValue: value,\n                                prevError,\n                                currError,\n                                diff,\n                                isFunction: typeof value === \"function\"\n                            });\n                            const change = {\n                                name,\n                                value,\n                                prevValue,\n                                count\n                            };\n                            const existingChange = changesMap.get(name);\n                            if (!existingChange || existingChange.count !== count || !isEqual(existingChange.value, value)) {\n                                refLastUpdated.current.add(name);\n                            }\n                            changesMap.set(name, change);\n                        }\n                    }\n                    refLatestChanges.current = Array.from(changesMap.values());\n                    setChanges(refLatestChanges.current);\n                }\n            }[\"Section.useEffect18.unsubscribe\"]);\n            return unsubscribe;\n        }\n    }[\"Section.useEffect18\"], [\n        title\n    ]);\n    const handleExpandEntry = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Section.useCallback12[handleExpandEntry]\": (entryKey)=>{\n            setExpandedEntries({\n                \"Section.useCallback12[handleExpandEntry]\": (prev)=>{\n                    const next = new Set(prev);\n                    if (next.has(String(entryKey))) {\n                        next.delete(String(entryKey));\n                    } else {\n                        next.add(String(entryKey));\n                    }\n                    return next;\n                }\n            }[\"Section.useCallback12[handleExpandEntry]\"]);\n        }\n    }[\"Section.useCallback12[handleExpandEntry]\"], []);\n    const memoizedRenderStateName = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n        \"Section.useCallback12[memoizedRenderStateName]\": (name)=>{\n            if (!refFiberInfo.current) return name;\n            return renderStateName(name, refFiberInfo.current.displayName);\n        }\n    }[\"Section.useCallback12[memoizedRenderStateName]\"], []);\n    if (changes.length === 0) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"pb-2\",\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"text-xs text-[#888] mb-1.5\",\n                children: title\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"flex flex-col gap-2\",\n                children: changes.map((change)=>{\n                    const isEntryExpanded = expandedEntries.has(String(change.name));\n                    const values = refChangesValues.current.get(change.name);\n                    if (!values) return null;\n                    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                                type: \"button\",\n                                onClick: ()=>handleExpandEntry(String(change.name)),\n                                className: cn(\"relative\", \"flex items-center gap-2\", \"w-full p-0 cursor-pointer text-white text-xs\"),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                    className: \"flex items-center gap-1.5 flex-1\",\n                                    children: [\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                            name: \"icon-chevron-right\",\n                                            size: 12,\n                                            className: cn(\"text-[#666] transition-transform duration-200 ease-[cubic-bezier(0.25,0.1,0.25,1)]\", {\n                                                \"rotate-90\": isEntryExpanded\n                                            })\n                                        }),\n                                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                            className: \"whitespace-nowrap break-words text-left font-medium flex items-center gap-x-1.5\",\n                                            children: [\n                                                memoizedRenderStateName(String(change.name)),\n                                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CountBadge, {\n                                                    forceFlash: isExpanded && refLastUpdated.current.has(change.name),\n                                                    count: change.count,\n                                                    isFunction: values.isFunction,\n                                                    showWarning: values.diff.changes.length === 0\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                })\n                            }),\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: cn(\"react-scan-expandable\", \"overflow-hidden\", {\n                                    \"react-scan-expanded\": isEntryExpanded\n                                }),\n                                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                    className: \"pl-3 text-xs font-mono border-l-1 border-[#333] overflow-hidden\",\n                                    children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                        className: \"flex flex-col gap-0.5\",\n                                        children: values.prevError || values.currError ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(AccessError, {\n                                            currError: values.currError,\n                                            prevError: values.prevError\n                                        }) : values.diff.changes.length > 0 ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffChange, {\n                                            title,\n                                            change,\n                                            diff: values.diff,\n                                            expandedFns,\n                                            renderName: memoizedRenderStateName,\n                                            setExpandedFns\n                                        }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ReferenceOnlyChange, {\n                                            currValue: values.currValue,\n                                            entryKey: change.name,\n                                            expandedFns,\n                                            prevValue: values.prevValue,\n                                            setExpandedFns\n                                        })\n                                    })\n                                })\n                            })\n                        ]\n                    }, change.name);\n                })\n            })\n        ]\n    });\n});\nvar AccessError = ({ prevError, currError })=>{\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            prevError && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"text-[#f87171] bg-[#2a1515] px-1.5 py-[3px] rounded-[2px] italic\",\n                children: prevError\n            }),\n            currError && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"text-[#4ade80] bg-[#1a2a1a] px-1.5 py-[3px] rounded-[2px] italic mt-0.5\",\n                children: currError\n            })\n        ]\n    });\n};\nvar DiffChange = ({ diff, title, renderName, change, expandedFns, setExpandedFns })=>{\n    return diff.changes.map((diffChange, i)=>{\n        const { value: prevDiffValue, error: prevDiffError } = safeGetValue2(diffChange.prevValue);\n        const { value: currDiffValue, error: currDiffError } = safeGetValue2(diffChange.currentValue);\n        const isFunction = typeof prevDiffValue === \"function\" || typeof currDiffValue === \"function\";\n        let path;\n        if (title === \"Props\") {\n            path = diffChange.path.length > 0 ? `${renderName(String(change.name))}.${formatPath(diffChange.path)}` : void 0;\n        }\n        if (title === \"State\" && diffChange.path.length > 0) {\n            path = `state.${formatPath(diffChange.path)}`;\n        }\n        if (!path) {\n            path = formatPath(diffChange.path);\n        }\n        return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: cn(\"flex flex-col gap-y-1\", {\n                \"mb-4\": i < diff.changes.length - 1\n            }),\n            children: [\n                path && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: \"text-[#666] text-[10px]\",\n                    children: path\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    type: \"button\",\n                    className: cn(\"group\", \"flex items-start\", \"py-[3px] px-1.5\", \"text-left text-[#f87171] bg-[#2a1515]\", \"rounded-[2px]\", \"overflow-hidden break-all\", isFunction && \"cursor-pointer\"),\n                    onClick: isFunction ? ()=>{\n                        const fnKey = `${formatPath(diffChange.path)}-prev`;\n                        setExpandedFns((prev)=>{\n                            const next = new Set(prev);\n                            if (next.has(fnKey)) {\n                                next.delete(fnKey);\n                            } else {\n                                next.add(fnKey);\n                            }\n                            return next;\n                        });\n                    } : void 0,\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"w-3 opacity-50\",\n                            children: \"-\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"flex-1 whitespace-nowrap font-mono\",\n                            children: prevDiffError ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                className: \"italic text-[#f87171]\",\n                                children: prevDiffError\n                            }) : isFunction ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: \"flex gap-1 items-start flex-col\",\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: \"flex gap-1 items-start w-full\",\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"flex-1 max-h-40\",\n                                                children: formatFunctionPreview(prevDiffValue, expandedFns.has(`${formatPath(diffChange.path)}-prev`))\n                                            }),\n                                            typeof prevDiffValue === \"function\" && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyToClipboard, {\n                                                text: prevDiffValue.toString(),\n                                                className: \"opacity-0 transition-opacity group-hover:opacity-100\",\n                                                children: ({ ClipboardIcon })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                        children: ClipboardIcon\n                                                    })\n                                            })\n                                        ]\n                                    }),\n                                    prevDiffValue?.toString() === currDiffValue?.toString() && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                        className: \"text-[10px] text-[#666] italic\",\n                                        children: \"Function reference changed\"\n                                    })\n                                ]\n                            }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffValueView, {\n                                value: prevDiffValue,\n                                expanded: expandedFns.has(`${formatPath(diffChange.path)}-prev`),\n                                onToggle: ()=>{\n                                    const key = `${formatPath(diffChange.path)}-prev`;\n                                    setExpandedFns((prev)=>{\n                                        const next = new Set(prev);\n                                        if (next.has(key)) {\n                                            next.delete(key);\n                                        } else {\n                                            next.add(key);\n                                        }\n                                        return next;\n                                    });\n                                },\n                                isNegative: true\n                            })\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"button\", {\n                    type: \"button\",\n                    className: cn(\"group\", \"flex items-start\", \"py-[3px] px-1.5\", \"text-left text-[#4ade80] bg-[#1a2a1a]\", \"rounded-[2px]\", \"overflow-hidden break-all\", isFunction && \"cursor-pointer\"),\n                    onClick: isFunction ? ()=>{\n                        const fnKey = `${formatPath(diffChange.path)}-current`;\n                        setExpandedFns((prev)=>{\n                            const next = new Set(prev);\n                            if (next.has(fnKey)) {\n                                next.delete(fnKey);\n                            } else {\n                                next.add(fnKey);\n                            }\n                            return next;\n                        });\n                    } : void 0,\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"w-3 opacity-50\",\n                            children: \"+\"\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"flex-1 whitespace-pre-wrap font-mono\",\n                            children: currDiffError ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                className: \"italic text-[#4ade80]\",\n                                children: currDiffError\n                            }) : isFunction ? /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: \"flex gap-1 items-start flex-col\",\n                                children: [\n                                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: \"flex gap-1 items-start w-full\",\n                                        children: [\n                                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                className: \"flex-1\",\n                                                children: formatFunctionPreview(currDiffValue, expandedFns.has(`${formatPath(diffChange.path)}-current`))\n                                            }),\n                                            typeof currDiffValue === \"function\" && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CopyToClipboard, {\n                                                text: currDiffValue.toString(),\n                                                className: \"opacity-0 transition-opacity group-hover:opacity-100\",\n                                                children: ({ ClipboardIcon })=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                                        children: ClipboardIcon\n                                                    })\n                                            })\n                                        ]\n                                    }),\n                                    prevDiffValue?.toString() === currDiffValue?.toString() && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                        className: \"text-[10px] text-[#666] italic\",\n                                        children: \"Function reference changed\"\n                                    })\n                                ]\n                            }) : /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffValueView, {\n                                value: currDiffValue,\n                                expanded: expandedFns.has(`${formatPath(diffChange.path)}-current`),\n                                onToggle: ()=>{\n                                    const key = `${formatPath(diffChange.path)}-current`;\n                                    setExpandedFns((prev)=>{\n                                        const next = new Set(prev);\n                                        if (next.has(key)) {\n                                            next.delete(key);\n                                        } else {\n                                            next.add(key);\n                                        }\n                                        return next;\n                                    });\n                                },\n                                isNegative: false\n                            })\n                        })\n                    ]\n                })\n            ]\n        }, `${path}-${change.name}-${i}`);\n    });\n};\nvar ReferenceOnlyChange = ({ prevValue, currValue, entryKey, expandedFns, setExpandedFns })=>{\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"group flex items-start text-[#f87171] bg-[#2a1515] py-[3px] px-1.5 rounded-[2px]\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"w-3 opacity-50\",\n                        children: \"-\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"flex-1 whitespace-pre-wrap font-mono\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffValueView, {\n                            value: prevValue,\n                            expanded: expandedFns.has(`${String(entryKey)}-prev`),\n                            onToggle: ()=>{\n                                const key = `${String(entryKey)}-prev`;\n                                setExpandedFns((prev)=>{\n                                    const next = new Set(prev);\n                                    if (next.has(key)) {\n                                        next.delete(key);\n                                    } else {\n                                        next.add(key);\n                                    }\n                                    return next;\n                                });\n                            },\n                            isNegative: true\n                        })\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"group flex items-start text-[#4ade80] bg-[#1a2a1a] py-[3px] px-1.5 rounded-[2px] mt-0.5\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"w-3 opacity-50\",\n                        children: \"+\"\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"flex-1 whitespace-pre-wrap font-mono\",\n                        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DiffValueView, {\n                            value: currValue,\n                            expanded: expandedFns.has(`${String(entryKey)}-current`),\n                            onToggle: ()=>{\n                                const key = `${String(entryKey)}-current`;\n                                setExpandedFns((prev)=>{\n                                    const next = new Set(prev);\n                                    if (next.has(key)) {\n                                        next.delete(key);\n                                    } else {\n                                        next.add(key);\n                                    }\n                                    return next;\n                                });\n                            },\n                            isNegative: false\n                        })\n                    })\n                ]\n            }),\n            typeof currValue === \"object\" && currValue !== null && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"text-[#666] text-[10px] italic mt-1\",\n                children: \"Reference changed but objects are the same\"\n            })\n        ]\n    });\n};\nvar CountBadge = ({ count, forceFlash, isFunction, showWarning })=>{\n    const refTimer = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const refIsFirstRender = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(true);\n    const refBadge = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refPrevCount = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(count);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"CountBadge.useEffect18\": ()=>{\n            const element = refBadge.current;\n            if (!element || refPrevCount.current === count) {\n                return;\n            }\n            element.classList.remove(\"count-flash\");\n            void element.offsetWidth;\n            element.classList.add(\"count-flash\");\n            refPrevCount.current = count;\n        }\n    }[\"CountBadge.useEffect18\"], [\n        count\n    ]);\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"CountBadge.useEffect18\": ()=>{\n            if (refIsFirstRender.current) {\n                refIsFirstRender.current = false;\n                return;\n            }\n            if (forceFlash) {\n                refTimer.current = setTimeout({\n                    \"CountBadge.useEffect18\": ()=>{\n                        refBadge.current?.classList.add(\"count-flash-white\");\n                        refTimer.current = setTimeout({\n                            \"CountBadge.useEffect18\": ()=>{\n                                refBadge.current?.classList.remove(\"count-flash-white\");\n                            }\n                        }[\"CountBadge.useEffect18\"], 300);\n                    }\n                }[\"CountBadge.useEffect18\"], 500);\n            }\n            return ({\n                \"CountBadge.useEffect18\": ()=>{\n                    clearTimeout(refTimer.current);\n                }\n            })[\"CountBadge.useEffect18\"];\n        }\n    }[\"CountBadge.useEffect18\"], [\n        forceFlash\n    ]);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        ref: refBadge,\n        className: \"count-badge\",\n        children: [\n            showWarning && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                name: \"icon-triangle-alert\",\n                className: \"text-yellow-500 mb-px\",\n                size: 14\n            }),\n            isFunction && /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                name: \"icon-function\",\n                className: \"text-[#A855F7] mb-px\",\n                size: 14\n            }),\n            \"x\",\n            count\n        ]\n    });\n};\n// src/web/views/inspector/index.tsx\n\nvar globalInspectorState = {\n    lastRendered: /* @__PURE__ */ new Map(),\n    expandedPaths: /* @__PURE__ */ new Set(),\n    cleanup: ()=>{\n        globalInspectorState.lastRendered.clear();\n        globalInspectorState.expandedPaths.clear();\n        flashManager.cleanupAll();\n        resetTracking();\n        timelineActions.reset();\n    }\n};\nvar InspectorErrorBoundary = class extends preact__WEBPACK_IMPORTED_MODULE_2__.Component {\n    constructor(){\n        super(...arguments);\n        this.state = {\n            hasError: false,\n            error: null\n        };\n        this.handleReset = ()=>{\n            this.setState({\n                hasError: false,\n                error: null\n            });\n            globalInspectorState.cleanup();\n        };\n    }\n    static getDerivedStateFromError(e) {\n        return {\n            hasError: true,\n            error: e\n        };\n    }\n    render() {\n        if (this.state.hasError) {\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"p-4 bg-red-950/50 h-screen backdrop-blur-sm\",\n                children: [\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"flex items-center gap-2 mb-3 text-red-400 font-medium\",\n                        children: [\n                            /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                name: \"icon-flame\",\n                                className: \"text-red-500\",\n                                size: 16\n                            }),\n                            \"Something went wrong in the inspector\"\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"p-3 bg-black/40 rounded font-mono text-xs text-red-300 mb-4 break-words\",\n                        children: this.state.error?.message || JSON.stringify(this.state.error)\n                    }),\n                    /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: this.handleReset,\n                        className: \"px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md text-sm font-medium transition-colors flex items-center justify-center gap-2\",\n                        children: \"Reset Inspector\"\n                    })\n                ]\n            });\n        }\n        return this.props.children;\n    }\n};\nvar Inspector = constant(()=>{\n    const refInspector = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const refLastInspectedFiber = (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const isSettingsOpen = signalIsSettingsOpen.value;\n    (0,preact_hooks__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n        \"Inspector.useEffect19\": ()=>{\n            const processUpdate = {\n                \"Inspector.useEffect19.processUpdate\": (fiber)=>{\n                    if (!fiber) return;\n                    refLastInspectedFiber.current = fiber;\n                    const { data: inspectorData, shouldUpdate } = collectInspectorData(fiber);\n                    if (shouldUpdate) {\n                        const update = {\n                            timestamp: Date.now(),\n                            fiberInfo: extractMinimalFiberInfo(fiber),\n                            props: inspectorData.fiberProps,\n                            state: inspectorData.fiberState,\n                            context: inspectorData.fiberContext,\n                            stateNames: getStateNames(fiber)\n                        };\n                        timelineActions.addUpdate(update, fiber);\n                    }\n                }\n            }[\"Inspector.useEffect19.processUpdate\"];\n            const unSubState = Store.inspectState.subscribe({\n                \"Inspector.useEffect19.unSubState\": (state2)=>{\n                    if (state2.kind !== \"focused\" || !state2.focusedDomElement) {\n                        refLastInspectedFiber.current = null;\n                        globalInspectorState.cleanup();\n                        return;\n                    }\n                    if (state2.kind === \"focused\") {\n                        signalIsSettingsOpen.value = false;\n                    }\n                    const { parentCompositeFiber } = getCompositeFiberFromElement(state2.focusedDomElement, state2.fiber);\n                    if (!parentCompositeFiber) return;\n                    const isNewComponent = refLastInspectedFiber.current?.type !== parentCompositeFiber.type;\n                    if (isNewComponent) {\n                        refLastInspectedFiber.current = parentCompositeFiber;\n                        globalInspectorState.cleanup();\n                        processUpdate(parentCompositeFiber);\n                    }\n                }\n            }[\"Inspector.useEffect19.unSubState\"]);\n            const unSubInspectorUpdate = inspectorUpdateSignal.subscribe({\n                \"Inspector.useEffect19.unSubInspectorUpdate\": ()=>{\n                    const inspectState = Store.inspectState.value;\n                    if (inspectState.kind !== \"focused\" || !inspectState.focusedDomElement) {\n                        refLastInspectedFiber.current = null;\n                        globalInspectorState.cleanup();\n                        return;\n                    }\n                    const { parentCompositeFiber } = getCompositeFiberFromElement(inspectState.focusedDomElement, inspectState.fiber);\n                    if (!parentCompositeFiber) {\n                        Store.inspectState.value = {\n                            kind: \"inspect-off\"\n                        };\n                        return;\n                    }\n                    processUpdate(parentCompositeFiber);\n                    if (!inspectState.focusedDomElement.isConnected) {\n                        refLastInspectedFiber.current = null;\n                        globalInspectorState.cleanup();\n                        Store.inspectState.value = {\n                            kind: \"inspecting\",\n                            hoveredDomElement: null\n                        };\n                    }\n                }\n            }[\"Inspector.useEffect19.unSubInspectorUpdate\"]);\n            return ({\n                \"Inspector.useEffect19\": ()=>{\n                    unSubState();\n                    unSubInspectorUpdate();\n                    globalInspectorState.cleanup();\n                }\n            })[\"Inspector.useEffect19\"];\n        }\n    }[\"Inspector.useEffect19\"], []);\n    return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(InspectorErrorBoundary, {\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            ref: refInspector,\n            className: cn(\"react-scan-inspector\", \"flex-1\", \"opacity-0\", \"overflow-y-auto overflow-x-hidden\", \"transition-opacity delay-0\", \"pointer-events-none\", {\n                \"opacity-100 delay-300 pointer-events-auto\": !isSettingsOpen\n            }),\n            children: [\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(WhatChangedSection, {}),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                    children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertySection, {\n                            section: \"props\",\n                            ...props\n                        })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                    children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertySection, {\n                            section: \"state\",\n                            ...props\n                        })\n                }),\n                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StickySection, {\n                    children: (props)=>/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PropertySection, {\n                            section: \"context\",\n                            ...props\n                        })\n                })\n            ]\n        })\n    });\n});\n// src/web/views/inspector/utils.ts\nvar getFiberFromElement = (element)=>{\n    if (\"__REACT_DEVTOOLS_GLOBAL_HOOK__\" in window) {\n        const hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n        if (!hook?.renderers) return null;\n        for (const [, renderer] of Array.from(hook.renderers)){\n            try {\n                const fiber = renderer.findFiberByHostInstance?.(element);\n                if (fiber) return fiber;\n            } catch  {}\n        }\n    }\n    if (\"_reactRootContainer\" in element) {\n        const elementWithRoot = element;\n        const rootContainer2 = elementWithRoot._reactRootContainer;\n        return rootContainer2?._internalRoot?.current?.child ?? null;\n    }\n    for(const key in element){\n        if (key.startsWith(\"__reactInternalInstance$\") || key.startsWith(\"__reactFiber\")) {\n            const elementWithFiber = element;\n            return elementWithFiber[key];\n        }\n    }\n    return null;\n};\nvar getFirstStateNode = (fiber)=>{\n    let current = fiber;\n    while(current){\n        if (current.stateNode instanceof Element) {\n            return current.stateNode;\n        }\n        if (!current.child) {\n            break;\n        }\n        current = current.child;\n    }\n    while(current){\n        if (current.stateNode instanceof Element) {\n            return current.stateNode;\n        }\n        if (!current.return) {\n            break;\n        }\n        current = current.return;\n    }\n    return null;\n};\nvar getNearestFiberFromElement = (element)=>{\n    if (!element) return null;\n    try {\n        const fiber = getFiberFromElement(element);\n        if (!fiber) return null;\n        const res = getParentCompositeFiber(fiber);\n        return res ? res[0] : null;\n    } catch  {\n        return null;\n    }\n};\nvar getParentCompositeFiber = (fiber)=>{\n    let current = fiber;\n    let prevHost = null;\n    while(current){\n        if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isCompositeFiber)(current)) return [\n            current,\n            prevHost\n        ];\n        if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isHostFiber)(current) && !prevHost) prevHost = current;\n        current = current.return;\n    }\n    return null;\n};\nvar isFiberInTree = (fiber, root)=>{\n    {\n        const res = !!(0,bippy__WEBPACK_IMPORTED_MODULE_0__.traverseFiber)(root, (searchFiber)=>searchFiber === fiber);\n        return res;\n    }\n};\nvar getAssociatedFiberRect = async (element)=>{\n    const associatedFiber = getNearestFiberFromElement(element);\n    if (!associatedFiber) return null;\n    const stateNode = getFirstStateNode(associatedFiber);\n    if (!stateNode) return null;\n    const rect = (await batchGetBoundingRects([\n        stateNode\n    ])).get(stateNode);\n    if (!rect) return null;\n    return rect;\n};\nvar getCompositeComponentFromElement = (element)=>{\n    const associatedFiber = getNearestFiberFromElement(element);\n    if (!associatedFiber) return {};\n    const stateNode = getFirstStateNode(associatedFiber);\n    if (!stateNode) return {};\n    const parentCompositeFiberInfo = getParentCompositeFiber(associatedFiber);\n    if (!parentCompositeFiberInfo) {\n        return {};\n    }\n    const [parentCompositeFiber] = parentCompositeFiberInfo;\n    return {\n        parentCompositeFiber\n    };\n};\nvar getCompositeFiberFromElement = (element, knownFiber)=>{\n    if (!element.isConnected) return {};\n    let fiber = knownFiber ?? getNearestFiberFromElement(element);\n    if (!fiber) return {};\n    let curr = fiber;\n    let rootFiber = null;\n    let currentRootFiber = null;\n    while(curr){\n        if (!curr.stateNode) {\n            curr = curr.return;\n            continue;\n        }\n        if (ReactScanInternals.instrumentation?.fiberRoots.has(curr.stateNode)) {\n            rootFiber = curr;\n            currentRootFiber = curr.stateNode.current;\n            break;\n        }\n        curr = curr.return;\n    }\n    if (!rootFiber || !currentRootFiber) return {};\n    fiber = isFiberInTree(fiber, currentRootFiber) ? fiber : fiber.alternate ?? fiber;\n    if (!fiber) return {};\n    if (!getFirstStateNode(fiber)) return {};\n    const parentCompositeFiber = getParentCompositeFiber(fiber)?.[0];\n    if (!parentCompositeFiber) return {};\n    return {\n        parentCompositeFiber: isFiberInTree(parentCompositeFiber, currentRootFiber) ? parentCompositeFiber : parentCompositeFiber.alternate ?? parentCompositeFiber\n    };\n};\nvar getChangedPropsDetailed = (fiber)=>{\n    const currentProps = fiber.memoizedProps ?? {};\n    const previousProps = fiber.alternate?.memoizedProps ?? {};\n    const changes = [];\n    for(const key in currentProps){\n        if (key === \"children\") continue;\n        const currentValue = currentProps[key];\n        const prevValue = previousProps[key];\n        if (!isEqual(currentValue, prevValue)) {\n            changes.push({\n                name: key,\n                value: currentValue,\n                prevValue,\n                type: 1 /* Props */ \n            });\n        }\n    }\n    return changes;\n};\nvar isRecord = (value)=>{\n    return value !== null && typeof value === \"object\";\n};\nvar getOverrideMethods = ()=>{\n    let overrideProps = null;\n    let overrideHookState = null;\n    let overrideContext = null;\n    if (\"__REACT_DEVTOOLS_GLOBAL_HOOK__\" in window) {\n        const hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n        if (!hook?.renderers) {\n            return {\n                overrideProps: null,\n                overrideHookState: null,\n                overrideContext: null\n            };\n        }\n        for (const [, renderer] of Array.from(hook.renderers)){\n            try {\n                const devToolsRenderer = renderer;\n                if (overrideHookState) {\n                    const prevOverrideHookState = overrideHookState;\n                    overrideHookState = (fiber, id, path, value)=>{\n                        let current = fiber.memoizedState;\n                        for(let i = 0; i < Number(id); i++){\n                            if (!current?.next) break;\n                            current = current.next;\n                        }\n                        if (current?.queue) {\n                            const queue = current.queue;\n                            if (isRecord(queue) && \"dispatch\" in queue) {\n                                const dispatch = queue.dispatch;\n                                dispatch(value);\n                                return;\n                            }\n                        }\n                        prevOverrideHookState(fiber, id, path, value);\n                        devToolsRenderer.overrideHookState?.(fiber, id, path, value);\n                    };\n                } else if (devToolsRenderer.overrideHookState) {\n                    overrideHookState = devToolsRenderer.overrideHookState;\n                }\n                if (overrideProps) {\n                    const prevOverrideProps = overrideProps;\n                    overrideProps = (fiber, path, value)=>{\n                        prevOverrideProps(fiber, path, value);\n                        devToolsRenderer.overrideProps?.(fiber, path, value);\n                    };\n                } else if (devToolsRenderer.overrideProps) {\n                    overrideProps = devToolsRenderer.overrideProps;\n                }\n                overrideContext = (fiber, contextType, value)=>{\n                    let current = fiber;\n                    while(current){\n                        const type = current.type;\n                        if (type === contextType || type?.Provider === contextType) {\n                            if (overrideProps) {\n                                overrideProps(current, [\n                                    \"value\"\n                                ], value);\n                                if (current.alternate) {\n                                    overrideProps(current.alternate, [\n                                        \"value\"\n                                    ], value);\n                                }\n                            }\n                            break;\n                        }\n                        current = current.return;\n                    }\n                };\n            } catch  {}\n        }\n    }\n    return {\n        overrideProps,\n        overrideHookState,\n        overrideContext\n    };\n};\nvar nonVisualTags = /* @__PURE__ */ new Set([\n    \"HTML\",\n    \"HEAD\",\n    \"META\",\n    \"TITLE\",\n    \"BASE\",\n    \"SCRIPT\",\n    \"SCRIPT\",\n    \"STYLE\",\n    \"LINK\",\n    \"NOSCRIPT\",\n    \"SOURCE\",\n    \"TRACK\",\n    \"EMBED\",\n    \"OBJECT\",\n    \"PARAM\",\n    \"TEMPLATE\",\n    \"PORTAL\",\n    \"SLOT\",\n    \"AREA\",\n    \"XML\",\n    \"DOCTYPE\",\n    \"COMMENT\"\n]);\nvar findComponentDOMNode = (fiber, excludeNonVisualTags = true)=>{\n    if (fiber.stateNode && \"nodeType\" in fiber.stateNode) {\n        const element = fiber.stateNode;\n        if (excludeNonVisualTags && element.tagName && nonVisualTags.has(element.tagName.toLowerCase())) {\n            return null;\n        }\n        return element;\n    }\n    let child = fiber.child;\n    while(child){\n        const result = findComponentDOMNode(child, excludeNonVisualTags);\n        if (result) return result;\n        child = child.sibling;\n    }\n    return null;\n};\nvar getInspectableElements = (root = document.body)=>{\n    const result = [];\n    const findInspectableFiber = (element)=>{\n        if (!element) return null;\n        const { parentCompositeFiber } = getCompositeComponentFromElement(element);\n        if (!parentCompositeFiber) return null;\n        const componentRoot = findComponentDOMNode(parentCompositeFiber);\n        return componentRoot === element ? element : null;\n    };\n    const traverse = (element, depth = 0)=>{\n        const inspectable = findInspectableFiber(element);\n        if (inspectable) {\n            const { parentCompositeFiber } = getCompositeComponentFromElement(inspectable);\n            if (!parentCompositeFiber) return;\n            result.push({\n                element: inspectable,\n                depth,\n                name: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(parentCompositeFiber.type) ?? \"Unknown\",\n                fiber: parentCompositeFiber\n            });\n        }\n        for (const child of Array.from(element.children)){\n            traverse(child, inspectable ? depth + 1 : depth);\n        }\n    };\n    traverse(root);\n    return result;\n};\nvar fiberMap = /* @__PURE__ */ new WeakMap();\nvar getInspectableAncestors = (element)=>{\n    const result = [];\n    const findInspectableFiber = (element2)=>{\n        if (!element2) return null;\n        const { parentCompositeFiber } = getCompositeComponentFromElement(element2);\n        if (!parentCompositeFiber) return null;\n        const componentRoot = findComponentDOMNode(parentCompositeFiber);\n        if (componentRoot === element2) {\n            fiberMap.set(element2, parentCompositeFiber);\n            return element2;\n        }\n        return null;\n    };\n    let current = element;\n    while(current && current !== document.body){\n        const inspectable = findInspectableFiber(current);\n        if (inspectable) {\n            const fiber = fiberMap.get(inspectable);\n            if (fiber) {\n                result.unshift({\n                    element: inspectable,\n                    depth: 0,\n                    name: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber.type) ?? \"Unknown\",\n                    fiber\n                });\n            }\n        }\n        current = current.parentElement;\n    }\n    return result;\n};\nvar isExpandable = (value)=>{\n    if (value === null || typeof value !== \"object\" || isPromise(value)) {\n        return false;\n    }\n    if (value instanceof ArrayBuffer) {\n        return true;\n    }\n    if (value instanceof DataView) {\n        return true;\n    }\n    if (ArrayBuffer.isView(value)) {\n        return true;\n    }\n    if (value instanceof Map || value instanceof Set) {\n        return value.size > 0;\n    }\n    if (Array.isArray(value)) {\n        return value.length > 0;\n    }\n    return Object.keys(value).length > 0;\n};\nvar isEditableValue = (value, parentPath)=>{\n    if (value == null) return true;\n    if (isPromise(value)) return false;\n    if (typeof value === \"function\") {\n        return false;\n    }\n    if (parentPath) {\n        const parts = parentPath.split(\".\");\n        let currentPath = \"\";\n        for (const part of parts){\n            currentPath = currentPath ? `${currentPath}.${part}` : part;\n            const obj = globalInspectorState.lastRendered.get(currentPath);\n            if (obj instanceof DataView || obj instanceof ArrayBuffer || ArrayBuffer.isView(obj)) {\n                return false;\n            }\n        }\n    }\n    switch(value.constructor){\n        case Date:\n        case RegExp:\n        case Error:\n            return true;\n        default:\n            switch(typeof value){\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                case \"bigint\":\n                    return true;\n                default:\n                    return false;\n            }\n    }\n};\nvar getPath = (componentName, section, parentPath, key)=>{\n    if (parentPath) {\n        return `${componentName}.${parentPath}.${key}`;\n    }\n    if (section === \"context\" && !key.startsWith(\"context.\")) {\n        return `${componentName}.${section}.context.${key}`;\n    }\n    return `${componentName}.${section}.${key}`;\n};\nvar sanitizeString = (value)=>{\n    return value.replace(/[<>]/g, \"\").replace(/javascript:/gi, \"\").replace(/data:/gi, \"\").replace(/on\\w+=/gi, \"\").slice(0, 5e4);\n};\nvar formatValue = (value)=>{\n    const metadata2 = ensureRecord(value);\n    return metadata2.displayValue;\n};\nvar formatForClipboard = (value)=>{\n    try {\n        if (value === null) return \"null\";\n        if (value === void 0) return \"undefined\";\n        if (isPromise(value)) return \"Promise\";\n        if (typeof value === \"function\") {\n            const fnStr = value.toString();\n            try {\n                const formatted = fnStr.replace(/\\s+/g, \" \").replace(/{\\s+/g, \"{\\n  \").replace(/;\\s+/g, \";\\n  \").replace(/}\\s*$/g, \"\\n}\").replace(/\\(\\s+/g, \"(\").replace(/\\s+\\)/g, \")\").replace(/,\\s+/g, \", \");\n                return formatted;\n            } catch  {\n                return fnStr;\n            }\n        }\n        switch(true){\n            case value instanceof Date:\n                return value.toISOString();\n            case value instanceof RegExp:\n                return value.toString();\n            case value instanceof Error:\n                return `${value.name}: ${value.message}`;\n            case value instanceof Map:\n                return JSON.stringify(Array.from(value.entries()), null, 2);\n            case value instanceof Set:\n                return JSON.stringify(Array.from(value), null, 2);\n            case value instanceof DataView:\n                return JSON.stringify(Array.from(new Uint8Array(value.buffer)), null, 2);\n            case value instanceof ArrayBuffer:\n                return JSON.stringify(Array.from(new Uint8Array(value)), null, 2);\n            case ArrayBuffer.isView(value) && \"length\" in value:\n                return JSON.stringify(Array.from(value), null, 2);\n            case Array.isArray(value):\n                return JSON.stringify(value, null, 2);\n            case typeof value === \"object\":\n                return JSON.stringify(value, null, 2);\n            default:\n                return String(value);\n        }\n    } catch  {\n        return String(value);\n    }\n};\nvar detectValueType = (value)=>{\n    const trimmed = value.trim();\n    switch(trimmed){\n        case \"undefined\":\n            return {\n                type: \"undefined\",\n                value: void 0\n            };\n        case \"null\":\n            return {\n                type: \"null\",\n                value: null\n            };\n        case \"true\":\n            return {\n                type: \"boolean\",\n                value: true\n            };\n        case \"false\":\n            return {\n                type: \"boolean\",\n                value: false\n            };\n    }\n    if (/^\".*\"$/.test(trimmed)) {\n        return {\n            type: \"string\",\n            value: trimmed.slice(1, -1)\n        };\n    }\n    if (/^-?\\d+(?:\\.\\d+)?$/.test(trimmed)) {\n        return {\n            type: \"number\",\n            value: Number(trimmed)\n        };\n    }\n    return {\n        type: \"string\",\n        value: `\"${trimmed}\"`\n    };\n};\nvar formatInitialValue = (value)=>{\n    if (value === void 0) return \"undefined\";\n    if (value === null) return \"null\";\n    if (typeof value === \"string\") return `\"${value}\"`;\n    return String(value);\n};\nvar updateNestedValue = (obj, path, value)=>{\n    try {\n        if (path.length === 0) return value;\n        const [key, ...rest] = path;\n        if (Array.isArray(obj) && obj.every((item)=>\"name\" in item && \"value\" in item)) {\n            const index = obj.findIndex((item)=>item.name === key);\n            if (index === -1) return obj;\n            const newArray = [\n                ...obj\n            ];\n            if (rest.length === 0) {\n                newArray[index] = {\n                    ...newArray[index],\n                    value\n                };\n            } else {\n                newArray[index] = {\n                    ...newArray[index],\n                    value: updateNestedValue(newArray[index].value, rest, value)\n                };\n            }\n            return newArray;\n        }\n        if (obj instanceof Map) {\n            const newMap = new Map(obj);\n            if (rest.length === 0) {\n                newMap.set(key, value);\n            } else {\n                const currentValue = newMap.get(key);\n                newMap.set(key, updateNestedValue(currentValue, rest, value));\n            }\n            return newMap;\n        }\n        if (Array.isArray(obj)) {\n            const index = Number.parseInt(key, 10);\n            const newArray = [\n                ...obj\n            ];\n            if (rest.length === 0) {\n                newArray[index] = value;\n            } else {\n                newArray[index] = updateNestedValue(obj[index], rest, value);\n            }\n            return newArray;\n        }\n        if (obj && typeof obj === \"object\") {\n            if (rest.length === 0) {\n                return {\n                    ...obj,\n                    [key]: value\n                };\n            }\n            return {\n                ...obj,\n                [key]: updateNestedValue(obj[key], rest, value)\n            };\n        }\n        return value;\n    } catch  {\n        return obj;\n    }\n};\nvar areFunctionsEqual = (prev, current)=>{\n    try {\n        if (typeof prev !== \"function\" || typeof current !== \"function\") {\n            return false;\n        }\n        return prev.toString() === current.toString();\n    } catch  {\n        return false;\n    }\n};\nvar getObjectDiff = (prev, current, path = [], seen = /* @__PURE__ */ new WeakSet())=>{\n    if (prev === current) {\n        return {\n            type: \"primitive\",\n            changes: [],\n            hasDeepChanges: false\n        };\n    }\n    if (typeof prev === \"function\" && typeof current === \"function\") {\n        const isSameFunction = areFunctionsEqual(prev, current);\n        return {\n            type: \"primitive\",\n            changes: [\n                {\n                    path,\n                    prevValue: prev,\n                    currentValue: current,\n                    sameFunction: isSameFunction\n                }\n            ],\n            hasDeepChanges: !isSameFunction\n        };\n    }\n    if (prev === null || current === null || prev === void 0 || current === void 0 || typeof prev !== \"object\" || typeof current !== \"object\") {\n        return {\n            type: \"primitive\",\n            changes: [\n                {\n                    path,\n                    prevValue: prev,\n                    currentValue: current\n                }\n            ],\n            hasDeepChanges: true\n        };\n    }\n    if (seen.has(prev) || seen.has(current)) {\n        return {\n            type: \"object\",\n            changes: [\n                {\n                    path,\n                    prevValue: \"[Circular]\",\n                    currentValue: \"[Circular]\"\n                }\n            ],\n            hasDeepChanges: false\n        };\n    }\n    seen.add(prev);\n    seen.add(current);\n    const prevObj = prev;\n    const currentObj = current;\n    const allKeys = /* @__PURE__ */ new Set([\n        ...Object.keys(prevObj),\n        ...Object.keys(currentObj)\n    ]);\n    const changes = [];\n    let hasDeepChanges = false;\n    for (const key of allKeys){\n        const prevValue = prevObj[key];\n        const currentValue = currentObj[key];\n        if (prevValue !== currentValue) {\n            if (typeof prevValue === \"object\" && typeof currentValue === \"object\" && prevValue !== null && currentValue !== null) {\n                const nestedDiff = getObjectDiff(prevValue, currentValue, [\n                    ...path,\n                    key\n                ], seen);\n                changes.push(...nestedDiff.changes);\n                if (nestedDiff.hasDeepChanges) {\n                    hasDeepChanges = true;\n                }\n            } else {\n                changes.push({\n                    path: [\n                        ...path,\n                        key\n                    ],\n                    prevValue,\n                    currentValue\n                });\n                hasDeepChanges = true;\n            }\n        }\n    }\n    return {\n        type: \"object\",\n        changes,\n        hasDeepChanges\n    };\n};\nvar formatPath = (path)=>{\n    if (path.length === 0) return \"\";\n    return path.reduce((acc, segment, i)=>{\n        if (/^\\d+$/.test(segment)) {\n            return `${acc}[${segment}]`;\n        }\n        return i === 0 ? segment : `${acc}.${segment}`;\n    }, \"\");\n};\nfunction hackyJsFormatter(code) {\n    const normalizedCode = code.replace(/\\s+/g, \" \").trim();\n    const rawTokens = [];\n    let current = \"\";\n    for(let i = 0; i < normalizedCode.length; i++){\n        const c = normalizedCode[i];\n        if (c === \"=\" && normalizedCode[i + 1] === \">\") {\n            if (current.trim()) rawTokens.push(current.trim());\n            rawTokens.push(\"=>\");\n            current = \"\";\n            i++;\n            continue;\n        }\n        if (/[(){}[\\];,<>:\\?!]/.test(c)) {\n            if (current.trim()) {\n                rawTokens.push(current.trim());\n            }\n            rawTokens.push(c);\n            current = \"\";\n        } else if (/\\s/.test(c)) {\n            if (current.trim()) {\n                rawTokens.push(current.trim());\n            }\n            current = \"\";\n        } else {\n            current += c;\n        }\n    }\n    if (current.trim()) {\n        rawTokens.push(current.trim());\n    }\n    const merged = [];\n    for(let i = 0; i < rawTokens.length; i++){\n        const t = rawTokens[i];\n        const n = rawTokens[i + 1];\n        if (t === \"(\" && n === \")\" || t === \"[\" && n === \"]\" || t === \"{\" && n === \"}\" || t === \"<\" && n === \">\") {\n            merged.push(t + n);\n            i++;\n        } else {\n            merged.push(t);\n        }\n    }\n    const arrowParamSet = /* @__PURE__ */ new Set();\n    const genericSet = /* @__PURE__ */ new Set();\n    function findMatchingPair(openTok, closeTok, startIndex) {\n        let depth = 0;\n        for(let j = startIndex; j < merged.length; j++){\n            const token = merged[j];\n            if (token === openTok) depth++;\n            else if (token === closeTok) {\n                depth--;\n                if (depth === 0) return j;\n            }\n        }\n        return -1;\n    }\n    for(let i = 0; i < merged.length; i++){\n        const t = merged[i];\n        if (t === \"(\") {\n            const closeIndex = findMatchingPair(\"(\", \")\", i);\n            if (closeIndex !== -1 && merged[closeIndex + 1] === \"=>\") {\n                for(let k = i; k <= closeIndex; k++){\n                    arrowParamSet.add(k);\n                }\n            }\n        }\n    }\n    for(let i = 1; i < merged.length; i++){\n        const prev = merged[i - 1];\n        const t = merged[i];\n        if (/^[a-zA-Z0-9_$]+$/.test(prev) && t === \"<\") {\n            const closeIndex = findMatchingPair(\"<\", \">\", i);\n            if (closeIndex !== -1) {\n                for(let k = i; k <= closeIndex; k++){\n                    genericSet.add(k);\n                }\n            }\n        }\n    }\n    let indentLevel = 0;\n    const indentStr = \"  \";\n    const lines = [];\n    let line = \"\";\n    function pushLine() {\n        if (line.trim()) {\n            lines.push(line.replace(/\\s+$/, \"\"));\n        }\n        line = \"\";\n    }\n    function newLine() {\n        pushLine();\n        line = indentStr.repeat(indentLevel);\n    }\n    const stack = [];\n    function stackTop() {\n        return stack.length ? stack[stack.length - 1] : null;\n    }\n    function placeToken(tok, noSpaceBefore = false) {\n        if (!line.trim()) {\n            line += tok;\n        } else {\n            if (noSpaceBefore || /^[),;:\\].}>]$/.test(tok)) {\n                line += tok;\n            } else {\n                line += ` ${tok}`;\n            }\n        }\n    }\n    for(let i = 0; i < merged.length; i++){\n        const tok = merged[i];\n        const next = merged[i + 1] || \"\";\n        if ([\n            \"(\",\n            \"{\",\n            \"[\",\n            \"<\"\n        ].includes(tok)) {\n            placeToken(tok);\n            stack.push(tok);\n            if (tok === \"{\") {\n                indentLevel++;\n                newLine();\n            } else if (tok === \"(\" || tok === \"[\" || tok === \"<\") {\n                if (arrowParamSet.has(i) && tok === \"(\" || genericSet.has(i) && tok === \"<\") {} else {\n                    const directClose = {\n                        \"(\": \")\",\n                        \"[\": \"]\",\n                        \"<\": \">\"\n                    }[tok];\n                    if (next !== directClose && next !== \"()\" && next !== \"[]\" && next !== \"<>\") {\n                        indentLevel++;\n                        newLine();\n                    }\n                }\n            }\n        } else if ([\n            \")\",\n            \"}\",\n            \"]\",\n            \">\"\n        ].includes(tok)) {\n            const opening = stackTop();\n            if (tok === \")\" && opening === \"(\" || tok === \"]\" && opening === \"[\" || tok === \">\" && opening === \"<\") {\n                if (!(arrowParamSet.has(i) && tok === \")\") && !(genericSet.has(i) && tok === \">\")) {\n                    indentLevel = Math.max(indentLevel - 1, 0);\n                    newLine();\n                }\n            } else if (tok === \"}\" && opening === \"{\") {\n                indentLevel = Math.max(indentLevel - 1, 0);\n                newLine();\n            }\n            stack.pop();\n            placeToken(tok);\n            if (tok === \"}\") {\n                newLine();\n            }\n        } else if (/^\\(\\)|\\[\\]|\\{\\}|\\<\\>$/.test(tok)) {\n            placeToken(tok);\n        } else if (tok === \"=>\") {\n            placeToken(tok);\n        } else if (tok === \";\") {\n            placeToken(tok, true);\n            newLine();\n        } else if (tok === \",\") {\n            placeToken(tok, true);\n            const top = stackTop();\n            if (!(arrowParamSet.has(i) && top === \"(\") && !(genericSet.has(i) && top === \"<\")) {\n                if (top && [\n                    \"{\",\n                    \"[\",\n                    \"(\",\n                    \"<\"\n                ].includes(top)) {\n                    newLine();\n                }\n            }\n        } else {\n            placeToken(tok);\n        }\n    }\n    pushLine();\n    return lines.join(\"\\n\").replace(/\\n\\s*\\n+/g, \"\\n\").trim();\n}\nvar formatFunctionPreview = (fn, expanded = false)=>{\n    try {\n        const fnStr = fn.toString();\n        const match = fnStr.match(/(?:function\\s*)?(?:\\(([^)]*)\\)|([^=>\\s]+))\\s*=>?/);\n        if (!match) return \"\\u0192\";\n        const params = match[1] || match[2] || \"\";\n        const cleanParams = params.replace(/\\s+/g, \"\");\n        if (!expanded) {\n            return `\\u0192 (${cleanParams}) => ...`;\n        }\n        return hackyJsFormatter(fnStr);\n    } catch  {\n        return \"\\u0192\";\n    }\n};\nvar formatValuePreview = (value)=>{\n    if (value === null) return \"null\";\n    if (value === void 0) return \"undefined\";\n    if (typeof value === \"string\") return `\"${value.length > 150 ? `${value.slice(0, 20)}...` : value}\"`;\n    if (typeof value === \"number\" || typeof value === \"boolean\") return String(value);\n    if (typeof value === \"function\") return formatFunctionPreview(value);\n    if (Array.isArray(value)) return `Array(${value.length})`;\n    if (value instanceof Map) return `Map(${value.size})`;\n    if (value instanceof Set) return `Set(${value.size})`;\n    if (value instanceof Date) return value.toISOString();\n    if (value instanceof RegExp) return value.toString();\n    if (value instanceof Error) return `${value.name}: ${value.message}`;\n    if (typeof value === \"object\") {\n        const keys = Object.keys(value);\n        return `{${keys.length > 2 ? `${keys.slice(0, 2).join(\", \")}, ...` : keys.join(\", \")}}`;\n    }\n    return String(value);\n};\nvar safeGetValue = (value)=>{\n    if (value === null || value === void 0) return {\n        value\n    };\n    if (typeof value === \"function\") return {\n        value\n    };\n    if (typeof value !== \"object\") return {\n        value\n    };\n    if (value instanceof Promise) {\n        return {\n            value: \"Promise\"\n        };\n    }\n    try {\n        const proto = Object.getPrototypeOf(value);\n        if (proto === Promise.prototype || proto?.constructor?.name === \"Promise\") {\n            return {\n                value: \"Promise\"\n            };\n        }\n        return {\n            value\n        };\n    } catch  {\n        return {\n            value: null,\n            error: \"Error accessing value\"\n        };\n    }\n};\nvar calculateSliderValues = (totalUpdates, currentIndex)=>{\n    if (totalUpdates <= TIMELINE_MAX_UPDATES) {\n        return {\n            leftValue: 0,\n            min: 0,\n            max: totalUpdates - 1,\n            value: currentIndex,\n            rightValue: totalUpdates - 1\n        };\n    }\n    return {\n        leftValue: totalUpdates - TIMELINE_MAX_UPDATES,\n        min: 0,\n        max: TIMELINE_MAX_UPDATES - 1,\n        value: currentIndex,\n        rightValue: totalUpdates - 1\n    };\n};\nvar isPromise = (value)=>{\n    return !!value && (value instanceof Promise || typeof value === \"object\" && \"then\" in value);\n};\nvar ensureRecord = (value, maxDepth = 2, seen = /* @__PURE__ */ new WeakSet())=>{\n    if (isPromise(value)) {\n        return {\n            type: \"promise\",\n            displayValue: \"Promise\"\n        };\n    }\n    if (value === null) {\n        return {\n            type: \"null\",\n            displayValue: \"null\"\n        };\n    }\n    if (value === void 0) {\n        return {\n            type: \"undefined\",\n            displayValue: \"undefined\"\n        };\n    }\n    switch(typeof value){\n        case \"object\":\n            {\n                if (seen.has(value)) {\n                    return {\n                        type: \"circular\",\n                        displayValue: \"[Circular Reference]\"\n                    };\n                }\n                if (!value) return {\n                    type: \"null\",\n                    displayValue: \"null\"\n                };\n                seen.add(value);\n                try {\n                    const result = {};\n                    if (value instanceof Element) {\n                        result.type = \"Element\";\n                        result.tagName = value.tagName.toLowerCase();\n                        result.displayValue = value.tagName.toLowerCase();\n                        return result;\n                    }\n                    if (value instanceof Map) {\n                        result.type = \"Map\";\n                        result.size = value.size;\n                        result.displayValue = `Map(${value.size})`;\n                        if (maxDepth > 0) {\n                            const entries = {};\n                            let index = 0;\n                            for (const [key, val] of value.entries()){\n                                if (index >= 50) break;\n                                try {\n                                    entries[String(key)] = ensureRecord(val, maxDepth - 1, seen);\n                                } catch  {\n                                    entries[String(index)] = {\n                                        type: \"error\",\n                                        displayValue: \"Error accessing Map entry\"\n                                    };\n                                }\n                                index++;\n                            }\n                            result.entries = entries;\n                        }\n                        return result;\n                    }\n                    if (value instanceof Set) {\n                        result.type = \"Set\";\n                        result.size = value.size;\n                        result.displayValue = `Set(${value.size})`;\n                        if (maxDepth > 0) {\n                            const items = [];\n                            let count = 0;\n                            for (const item of value){\n                                if (count >= 50) break;\n                                items.push(ensureRecord(item, maxDepth - 1, seen));\n                                count++;\n                            }\n                            result.items = items;\n                        }\n                        return result;\n                    }\n                    if (value instanceof Date) {\n                        result.type = \"Date\";\n                        result.value = value.toISOString();\n                        result.displayValue = value.toLocaleString();\n                        return result;\n                    }\n                    if (value instanceof RegExp) {\n                        result.type = \"RegExp\";\n                        result.value = value.toString();\n                        result.displayValue = value.toString();\n                        return result;\n                    }\n                    if (value instanceof Error) {\n                        result.type = \"Error\";\n                        result.name = value.name;\n                        result.message = value.message;\n                        result.displayValue = `${value.name}: ${value.message}`;\n                        return result;\n                    }\n                    if (value instanceof ArrayBuffer) {\n                        result.type = \"ArrayBuffer\";\n                        result.byteLength = value.byteLength;\n                        result.displayValue = `ArrayBuffer(${value.byteLength})`;\n                        return result;\n                    }\n                    if (value instanceof DataView) {\n                        result.type = \"DataView\";\n                        result.byteLength = value.byteLength;\n                        result.displayValue = `DataView(${value.byteLength})`;\n                        return result;\n                    }\n                    if (ArrayBuffer.isView(value)) {\n                        const typedArray = value;\n                        result.type = typedArray.constructor.name;\n                        result.length = typedArray.length;\n                        result.byteLength = typedArray.buffer.byteLength;\n                        result.displayValue = `${typedArray.constructor.name}(${typedArray.length})`;\n                        return result;\n                    }\n                    if (Array.isArray(value)) {\n                        result.type = \"array\";\n                        result.length = value.length;\n                        result.displayValue = `Array(${value.length})`;\n                        if (maxDepth > 0) {\n                            result.items = value.slice(0, 50).map((item)=>ensureRecord(item, maxDepth - 1, seen));\n                        }\n                        return result;\n                    }\n                    const keys = Object.keys(value);\n                    result.type = \"object\";\n                    result.size = keys.length;\n                    result.displayValue = keys.length <= 5 ? `{${keys.join(\", \")}}` : `{${keys.slice(0, 5).join(\", \")}, ...${keys.length - 5}}`;\n                    if (maxDepth > 0) {\n                        const entries = {};\n                        for (const key of keys.slice(0, 50)){\n                            try {\n                                entries[key] = ensureRecord(value[key], maxDepth - 1, seen);\n                            } catch  {\n                                entries[key] = {\n                                    type: \"error\",\n                                    displayValue: \"Error accessing property\"\n                                };\n                            }\n                        }\n                        result.entries = entries;\n                    }\n                    return result;\n                } finally{\n                    seen.delete(value);\n                }\n            }\n        case \"string\":\n            return {\n                type: \"string\",\n                value,\n                displayValue: `\"${value}\"`\n            };\n        case \"function\":\n            return {\n                type: \"function\",\n                displayValue: \"\\u0192()\",\n                name: value.name || \"anonymous\"\n            };\n        default:\n            return {\n                type: typeof value,\n                value,\n                displayValue: String(value)\n            };\n    }\n};\nvar extractMinimalFiberInfo = (fiber)=>{\n    const timings = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber);\n    return {\n        displayName: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber) || \"Unknown\",\n        type: fiber.type,\n        key: fiber.key,\n        id: fiber.index,\n        selfTime: timings?.selfTime ?? null,\n        totalTime: timings?.totalTime ?? null\n    };\n};\n// src/web/views/inspector/timeline/utils.ts\nvar propsTracker = /* @__PURE__ */ new Map();\nvar stateTracker = /* @__PURE__ */ new Map();\nvar contextTracker = /* @__PURE__ */ new Map();\nvar lastComponentType = null;\nvar STATE_NAME_REGEX = /\\[(?<name>\\w+),\\s*set\\w+\\]/g;\nvar PROPS_ORDER_REGEX = /\\(\\s*{\\s*(?<props>[^}]+)\\s*}\\s*\\)/;\nvar getStateNames = (fiber)=>{\n    const componentSource = fiber.type?.toString?.() || \"\";\n    return componentSource ? Array.from(componentSource.matchAll(STATE_NAME_REGEX), (m)=>m.groups?.name ?? \"\") : [];\n};\nvar resetTracking = ()=>{\n    propsTracker.clear();\n    stateTracker.clear();\n    contextTracker.clear();\n    lastComponentType = null;\n};\nvar isInitialComponentUpdate = (fiber)=>{\n    const isNewComponent = fiber.type !== lastComponentType;\n    lastComponentType = fiber.type;\n    return isNewComponent;\n};\nvar trackChange = (tracker, key, currentValue, previousValue)=>{\n    const existing = tracker.get(key);\n    const isInitialValue = tracker === propsTracker || tracker === contextTracker;\n    const hasChanged = !isEqual(currentValue, previousValue);\n    if (!existing) {\n        tracker.set(key, {\n            count: hasChanged && isInitialValue ? 1 : 0,\n            currentValue,\n            previousValue,\n            lastUpdated: Date.now()\n        });\n        return {\n            hasChanged,\n            count: hasChanged && isInitialValue ? 1 : isInitialValue ? 0 : 1\n        };\n    }\n    if (!isEqual(existing.currentValue, currentValue)) {\n        const newCount = existing.count + 1;\n        tracker.set(key, {\n            count: newCount,\n            currentValue,\n            previousValue: existing.currentValue,\n            lastUpdated: Date.now()\n        });\n        return {\n            hasChanged: true,\n            count: newCount\n        };\n    }\n    return {\n        hasChanged: false,\n        count: existing.count\n    };\n};\nvar getStateFromFiber = (fiber)=>{\n    if (!fiber) return {};\n    if (fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.FunctionComponentTag || fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ForwardRefTag || fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.SimpleMemoComponentTag || fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.MemoComponentTag) {\n        let memoizedState = fiber.memoizedState;\n        const state2 = {};\n        let index = 0;\n        while(memoizedState){\n            if (memoizedState.queue && memoizedState.memoizedState !== void 0) {\n                state2[index] = memoizedState.memoizedState;\n            }\n            memoizedState = memoizedState.next;\n            index++;\n        }\n        return state2;\n    }\n    if (fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ClassComponentTag) {\n        return fiber.memoizedState || {};\n    }\n    return {};\n};\nvar getPropsOrder = (fiber)=>{\n    const componentSource = fiber.type?.toString?.() || \"\";\n    const match = componentSource.match(PROPS_ORDER_REGEX);\n    if (!match?.groups?.props) return [];\n    return match.groups.props.split(\",\").map((prop)=>prop.trim().split(\":\")[0].split(\"=\")[0].trim()).filter(Boolean);\n};\nvar collectPropsChanges = (fiber)=>{\n    const currentProps = fiber.memoizedProps || {};\n    const prevProps = fiber.alternate?.memoizedProps || {};\n    const orderedProps = getPropsOrder(fiber);\n    const current = {};\n    const prev = {};\n    const allProps = [\n        .../* @__PURE__ */ new Set([\n            ...orderedProps,\n            ...Object.keys(currentProps)\n        ])\n    ];\n    for (const key of allProps){\n        if (key in currentProps) {\n            current[key] = currentProps[key];\n            prev[key] = prevProps[key];\n        }\n    }\n    const changes = getChangedPropsDetailed(fiber).map((change)=>({\n            name: change.name,\n            value: change.value,\n            prevValue: change.prevValue\n        }));\n    return {\n        current,\n        prev,\n        changes\n    };\n};\nvar collectStateChanges = (fiber)=>{\n    const current = getStateFromFiber(fiber);\n    const prev = fiber.alternate ? getStateFromFiber(fiber.alternate) : {};\n    const changes = [];\n    for (const [index, value] of Object.entries(current)){\n        const stateKey = fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ClassComponentTag ? index : Number(index);\n        if (fiber.alternate && !isEqual(prev[index], value)) {\n            changes.push({\n                name: stateKey,\n                value,\n                prevValue: prev[index]\n            });\n        }\n    }\n    return {\n        current,\n        prev,\n        changes\n    };\n};\nvar collectContextChanges = (fiber)=>{\n    const currentContexts = getAllFiberContexts(fiber);\n    const prevContexts = fiber.alternate ? getAllFiberContexts(fiber.alternate) : /* @__PURE__ */ new Map();\n    const current = {};\n    const prev = {};\n    const changes = [];\n    const seenContexts = /* @__PURE__ */ new Set();\n    for (const [contextType, ctx2] of currentContexts){\n        const name = ctx2.displayName;\n        const contextKey = `${name}-${contextType?.toString()}`;\n        if (seenContexts.has(contextKey)) continue;\n        seenContexts.add(contextKey);\n        current[name] = ctx2.value;\n        const prevCtx = prevContexts.get(contextType);\n        if (prevCtx) {\n            prev[name] = prevCtx.value;\n            if (!isEqual(prevCtx.value, ctx2.value)) {\n                changes.push({\n                    name,\n                    value: ctx2.value,\n                    prevValue: prevCtx.value,\n                    contextType\n                });\n            }\n        }\n    }\n    return {\n        current,\n        prev,\n        changes\n    };\n};\nvar collectInspectorDataWithoutCounts = (fiber)=>{\n    const emptySection = ()=>({\n            current: [],\n            changes: /* @__PURE__ */ new Set(),\n            changesCounts: /* @__PURE__ */ new Map()\n        });\n    if (!fiber) {\n        return {\n            fiberProps: emptySection(),\n            fiberState: emptySection(),\n            fiberContext: emptySection()\n        };\n    }\n    let hasNewChanges = false;\n    const propsData = emptySection();\n    if (fiber.memoizedProps) {\n        const { current: current2, changes: changes2 } = collectPropsChanges(fiber);\n        for (const [key, value] of Object.entries(current2)){\n            propsData.current.push({\n                name: key,\n                value: isPromise(value) ? {\n                    type: \"promise\",\n                    displayValue: \"Promise\"\n                } : value\n            });\n        }\n        for (const change of changes2){\n            hasNewChanges = true;\n            propsData.changes.add(change.name);\n            propsData.changesCounts.set(change.name, 1);\n        }\n    }\n    const stateData = emptySection();\n    if (fiber.memoizedState) {\n        const { current: current2, changes: changes2 } = collectStateChanges(fiber);\n        for (const [key, value] of Object.entries(current2)){\n            stateData.current.push({\n                name: key,\n                value: isPromise(value) ? {\n                    type: \"promise\",\n                    displayValue: \"Promise\"\n                } : value\n            });\n        }\n        for (const change of changes2){\n            hasNewChanges = true;\n            stateData.changes.add(change.name);\n            stateData.changesCounts.set(change.name, 1);\n        }\n    }\n    const contextData = emptySection();\n    const { current, changes } = collectContextChanges(fiber);\n    for (const [key, value] of Object.entries(current)){\n        contextData.current.push({\n            name: key,\n            value: isPromise(value) ? {\n                type: \"promise\",\n                displayValue: \"Promise\"\n            } : value\n        });\n    }\n    for (const change of changes){\n        hasNewChanges = true;\n        contextData.changes.add(change.name);\n        contextData.changesCounts.set(change.name, 1);\n    }\n    return {\n        // data: {\n        fiberProps: propsData,\n        fiberState: stateData,\n        fiberContext: contextData\n    };\n};\nvar collectInspectorData = (fiber)=>{\n    const emptySection = ()=>({\n            current: [],\n            changes: /* @__PURE__ */ new Set(),\n            changesCounts: /* @__PURE__ */ new Map()\n        });\n    if (!fiber) {\n        return {\n            data: {\n                fiberProps: emptySection(),\n                fiberState: emptySection(),\n                fiberContext: emptySection()\n            },\n            shouldUpdate: false\n        };\n    }\n    let hasNewChanges = false;\n    const isInitialUpdate = isInitialComponentUpdate(fiber);\n    const propsData = emptySection();\n    if (fiber.memoizedProps) {\n        const { current, changes } = collectPropsChanges(fiber);\n        for (const [key, value] of Object.entries(current)){\n            propsData.current.push({\n                name: key,\n                value: isPromise(value) ? {\n                    type: \"promise\",\n                    displayValue: \"Promise\"\n                } : value\n            });\n        }\n        for (const change of changes){\n            const { hasChanged, count } = trackChange(propsTracker, change.name, change.value, change.prevValue);\n            if (hasChanged) {\n                hasNewChanges = true;\n                propsData.changes.add(change.name);\n                propsData.changesCounts.set(change.name, count);\n            }\n        }\n    }\n    const stateData = emptySection();\n    const { current: stateCurrent, changes: stateChanges } = collectStateChanges(fiber);\n    for (const [index, value] of Object.entries(stateCurrent)){\n        const stateKey = fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ClassComponentTag ? index : Number(index);\n        stateData.current.push({\n            name: stateKey,\n            value\n        });\n    }\n    for (const change of stateChanges){\n        const { hasChanged, count } = trackChange(stateTracker, change.name, change.value, change.prevValue);\n        if (hasChanged) {\n            hasNewChanges = true;\n            stateData.changes.add(change.name);\n            stateData.changesCounts.set(change.name, count);\n        }\n    }\n    const contextData = emptySection();\n    const { current: contextCurrent, changes: contextChanges } = collectContextChanges(fiber);\n    for (const [name, value] of Object.entries(contextCurrent)){\n        contextData.current.push({\n            name,\n            value\n        });\n    }\n    if (!isInitialUpdate) {\n        for (const change of contextChanges){\n            const { hasChanged, count } = trackChange(contextTracker, change.name, change.value, change.prevValue);\n            if (hasChanged) {\n                hasNewChanges = true;\n                contextData.changes.add(change.name);\n                contextData.changesCounts.set(change.name, count);\n            }\n        }\n    }\n    if (!hasNewChanges && !isInitialUpdate) {\n        propsData.changes.clear();\n        stateData.changes.clear();\n        contextData.changes.clear();\n    }\n    return {\n        data: {\n            fiberProps: propsData,\n            fiberState: stateData,\n            fiberContext: contextData\n        },\n        shouldUpdate: hasNewChanges || isInitialUpdate\n    };\n};\nvar fiberContextsCache = /* @__PURE__ */ new WeakMap();\nvar getAllFiberContexts = (fiber)=>{\n    if (!fiber) {\n        return /* @__PURE__ */ new Map();\n    }\n    const cachedContexts = fiberContextsCache.get(fiber);\n    if (cachedContexts) {\n        return cachedContexts;\n    }\n    const contexts = /* @__PURE__ */ new Map();\n    let currentFiber = fiber;\n    while(currentFiber){\n        const dependencies = currentFiber.dependencies;\n        if (dependencies?.firstContext) {\n            let contextItem = dependencies.firstContext;\n            while(contextItem){\n                const memoizedValue = contextItem.memoizedValue;\n                const displayName = contextItem.context?.displayName;\n                if (!contexts.has(memoizedValue)) {\n                    contexts.set(contextItem.context, {\n                        value: memoizedValue,\n                        displayName: displayName ?? \"UnnamedContext\",\n                        contextType: null\n                    });\n                }\n                if (contextItem === contextItem.next) {\n                    break;\n                }\n                contextItem = contextItem.next;\n            }\n        }\n        currentFiber = currentFiber.return;\n    }\n    fiberContextsCache.set(fiber, contexts);\n    return contexts;\n};\n// src/core/instrumentation.ts\nvar fps = 0;\nvar lastTime = performance.now();\nvar frameCount = 0;\nvar initedFps = false;\nvar fpsListeners = [];\nvar updateFPS = (onChange)=>{\n    frameCount++;\n    const now = performance.now();\n    const timeSinceLastUpdate = now - lastTime;\n    if (timeSinceLastUpdate >= 500) {\n        const calculatedFPS = Math.round(frameCount / timeSinceLastUpdate * 1e3);\n        if (calculatedFPS !== fps) {\n            for (const listener of fpsListeners){\n                listener(calculatedFPS);\n            }\n        }\n        fps = calculatedFPS;\n        frameCount = 0;\n        lastTime = now;\n    }\n    requestAnimationFrame(()=>updateFPS(onChange));\n};\nvar getFPS = ()=>{\n    if (!initedFps) {\n        initedFps = true;\n        updateFPS();\n        fps = 60;\n    }\n    return fps;\n};\nvar isValueUnstable = (prevValue, nextValue)=>{\n    const prevValueString = fastSerialize(prevValue);\n    const nextValueString = fastSerialize(nextValue);\n    return prevValueString === nextValueString && unstableTypes.includes(typeof prevValue) && unstableTypes.includes(typeof nextValue);\n};\nvar unstableTypes = [\n    \"function\",\n    \"object\"\n];\nvar cache = /* @__PURE__ */ new WeakMap();\nfunction fastSerialize(value, depth = 0) {\n    if (depth < 0) return \"\\u2026\";\n    switch(typeof value){\n        case \"function\":\n            return value.toString();\n        case \"string\":\n            return value;\n        case \"number\":\n        case \"boolean\":\n        case \"undefined\":\n            return String(value);\n        case \"object\":\n            break;\n        default:\n            return String(value);\n    }\n    if (value === null) return \"null\";\n    if (cache.has(value)) {\n        const cached = cache.get(value);\n        if (cached !== void 0) {\n            return cached;\n        }\n    }\n    if (Array.isArray(value)) {\n        const str2 = value.length ? `[${value.length}]` : \"[]\";\n        cache.set(value, str2);\n        return str2;\n    }\n    if ((0,preact__WEBPACK_IMPORTED_MODULE_2__.isValidElement)(value)) {\n        const type = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(value.type) ?? \"\";\n        const propCount = value.props ? Object.keys(value.props).length : 0;\n        const str2 = `<${type} ${propCount}>`;\n        cache.set(value, str2);\n        return str2;\n    }\n    if (Object.getPrototypeOf(value) === Object.prototype) {\n        const keys = Object.keys(value);\n        const str2 = keys.length ? `{${keys.length}}` : \"{}\";\n        cache.set(value, str2);\n        return str2;\n    }\n    const ctor = value && typeof value === \"object\" ? value.constructor : void 0;\n    if (ctor && typeof ctor === \"function\" && ctor.name) {\n        const str2 = `${ctor.name}{\\u2026}`;\n        cache.set(value, str2);\n        return str2;\n    }\n    const tagString = Object.prototype.toString.call(value).slice(8, -1);\n    const str = `${tagString}{\\u2026}`;\n    cache.set(value, str);\n    return str;\n}\nvar instrumentationInstances = /* @__PURE__ */ new Map();\nvar inited = false;\nvar getAllInstances = ()=>Array.from(instrumentationInstances.values());\nfunction isRenderUnnecessaryTraversal(_propsName, prevValue, nextValue) {\n    if (!isEqual(prevValue, nextValue) && !isValueUnstable(prevValue, nextValue)) {\n        this.isRequiredChange = true;\n    }\n}\nvar isRenderUnnecessary = (fiber)=>{\n    if (!(0,bippy__WEBPACK_IMPORTED_MODULE_0__.didFiberCommit)(fiber)) return true;\n    const mutatedHostFibers = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getMutatedHostFibers)(fiber);\n    for (const mutatedHostFiber of mutatedHostFibers){\n        const state2 = {\n            isRequiredChange: false\n        };\n        (0,bippy__WEBPACK_IMPORTED_MODULE_0__.traverseProps)(mutatedHostFiber, isRenderUnnecessaryTraversal.bind(state2));\n        if (state2.isRequiredChange) return false;\n    }\n    return true;\n};\nvar TRACK_UNNECESSARY_RENDERS = false;\nvar createInstrumentation = (instanceKey, config)=>{\n    const instrumentation = {\n        // this will typically be false, but in cases where a user provides showToolbar: true, this will be true\n        isPaused: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(!ReactScanInternals.options.value.enabled),\n        fiberRoots: /* @__PURE__ */ new WeakSet()\n    };\n    instrumentationInstances.set(instanceKey, {\n        key: instanceKey,\n        config,\n        instrumentation\n    });\n    if (!inited) {\n        inited = true;\n        (0,bippy__WEBPACK_IMPORTED_MODULE_0__.instrument)({\n            name: \"react-scan\",\n            onActive: config.onActive,\n            onCommitFiberRoot (_rendererID, root) {\n                instrumentation.fiberRoots.add(root);\n                const allInstances = getAllInstances();\n                for (const instance of allInstances){\n                    instance.config.onCommitStart();\n                }\n                const renderedAt = Date.now();\n                (0,bippy__WEBPACK_IMPORTED_MODULE_0__.traverseRenderedFibers)(root.current, (fiber, phase)=>{\n                    const type = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getType)(fiber.type);\n                    if (!type) return null;\n                    const allInstances2 = getAllInstances();\n                    const validInstancesIndicies = [];\n                    for(let i = 0, len = allInstances2.length; i < len; i++){\n                        const instance = allInstances2[i];\n                        if (!instance.config.isValidFiber(fiber)) continue;\n                        validInstancesIndicies.push(i);\n                    }\n                    if (!validInstancesIndicies.length) return null;\n                    const changes = [];\n                    if (allInstances2.some((instance)=>instance.config.trackChanges)) {\n                        const changesProps = collectPropsChanges(fiber).changes;\n                        const changesState = collectStateChanges(fiber).changes;\n                        const changesContext = collectContextChanges(fiber).changes;\n                        changes.push.apply(null, changesProps.map((change)=>({\n                                type: 1 /* Props */ ,\n                                name: change.name,\n                                value: change.value\n                            })));\n                        for (const change of changesState){\n                            if (fiber.tag === bippy__WEBPACK_IMPORTED_MODULE_0__.ClassComponentTag) {\n                                changes.push({\n                                    type: 3 /* ClassState */ ,\n                                    name: change.name.toString(),\n                                    value: change.value\n                                });\n                            } else {\n                                changes.push({\n                                    type: 2 /* FunctionalState */ ,\n                                    name: change.name.toString(),\n                                    value: change.value\n                                });\n                            }\n                        }\n                        changes.push.apply(null, changesContext.map((change)=>({\n                                type: 4 /* Context */ ,\n                                name: change.name,\n                                value: change.value,\n                                contextType: Number(change.contextType)\n                            })));\n                    }\n                    const { selfTime } = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getTimings)(fiber);\n                    const fps2 = getFPS();\n                    const render2 = {\n                        phase: RENDER_PHASE_STRING_TO_ENUM[phase],\n                        componentName: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(type),\n                        count: 1,\n                        changes,\n                        time: selfTime,\n                        forget: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.hasMemoCache)(fiber),\n                        // todo: allow this to be toggle-able through toolbar\n                        // todo: performance optimization: if the last fiber measure was very off screen, do not run isRenderUnnecessary\n                        unnecessary: TRACK_UNNECESSARY_RENDERS ? isRenderUnnecessary(fiber) : null,\n                        didCommit: (0,bippy__WEBPACK_IMPORTED_MODULE_0__.didFiberCommit)(fiber),\n                        fps: fps2\n                    };\n                    for(let i = 0, len = validInstancesIndicies.length; i < len; i++){\n                        const index = validInstancesIndicies[i];\n                        const instance = allInstances2[index];\n                        instance.config.onRender(fiber, [\n                            render2\n                        ], renderedAt);\n                    }\n                });\n                for (const instance of allInstances){\n                    instance.config.onCommitFinish();\n                }\n            }\n        });\n    }\n    return instrumentation;\n};\n// src/web/utils/log.ts\nvar log = (renders)=>{\n    const logMap = /* @__PURE__ */ new Map();\n    for(let i = 0, len = renders.length; i < len; i++){\n        const render2 = renders[i];\n        if (!render2.componentName) continue;\n        const changeLog = logMap.get(render2.componentName) ?? [];\n        renders;\n        const labelText = getLabelText([\n            {\n                aggregatedCount: 1,\n                computedKey: null,\n                name: render2.componentName,\n                frame: null,\n                ...render2,\n                changes: {\n                    // TODO(Alexis): use a faster reduction method\n                    type: render2.changes.reduce((set, change)=>set | change.type, 0),\n                    unstable: render2.changes.some((change)=>change.unstable)\n                },\n                phase: render2.phase,\n                computedCurrent: null\n            }\n        ]);\n        if (!labelText) continue;\n        let prevChangedProps = null;\n        let nextChangedProps = null;\n        if (render2.changes) {\n            for(let i2 = 0, len2 = render2.changes.length; i2 < len2; i2++){\n                const { name, prevValue, nextValue, unstable, type } = render2.changes[i2];\n                if (type === 1 /* Props */ ) {\n                    prevChangedProps ??= {};\n                    nextChangedProps ??= {};\n                    prevChangedProps[`${unstable ? \"\\u26A0\\uFE0F\" : \"\"}${name} (prev)`] = prevValue;\n                    nextChangedProps[`${unstable ? \"\\u26A0\\uFE0F\" : \"\"}${name} (next)`] = nextValue;\n                } else {\n                    changeLog.push({\n                        prev: prevValue,\n                        next: nextValue,\n                        type: type === 4 /* Context */  ? \"context\" : \"state\",\n                        unstable: unstable ?? false\n                    });\n                }\n            }\n        }\n        if (prevChangedProps && nextChangedProps) {\n            changeLog.push({\n                prev: prevChangedProps,\n                next: nextChangedProps,\n                type: \"props\",\n                unstable: false\n            });\n        }\n        logMap.set(labelText, changeLog);\n    }\n    for (const [name, changeLog] of Array.from(logMap.entries())){\n        console.group(`%c${name}`, \"background: hsla(0,0%,70%,.3); border-radius:3px; padding: 0 2px;\");\n        for (const { type, prev, next, unstable } of changeLog){\n            console.log(`${type}:`, unstable ? \"\\u26A0\\uFE0F\" : \"\", prev, \"!==\", next);\n        }\n        console.groupEnd();\n    }\n};\nvar logIntro = ()=>{\n    console.log(\"%c[\\xB7] %cReact Scan\", \"font-weight:bold;color:#7a68e8;font-size:20px;\", \"font-weight:bold;font-size:14px;\");\n    console.log(\"Try React Scan Monitoring to target performance issues in production: https://react-scan.com/monitoring\");\n};\n// src/new-outlines/canvas.ts\nvar OUTLINE_ARRAY_SIZE = 7;\nvar MONO_FONT = \"Menlo,Consolas,Monaco,Liberation Mono,Lucida Console,monospace\";\nvar INTERPOLATION_SPEED = 0.1;\nvar lerp2 = (start2, end)=>{\n    return Math.floor(start2 + (end - start2) * INTERPOLATION_SPEED);\n};\nvar MAX_PARTS_LENGTH = 4;\nvar MAX_LABEL_LENGTH = 40;\nvar TOTAL_FRAMES = 45;\nvar primaryColor = \"115,97,230\";\nvar getLabelText2 = (outlines)=>{\n    const nameByCount = /* @__PURE__ */ new Map();\n    for (const outline of outlines){\n        const { name, count } = outline;\n        nameByCount.set(name, (nameByCount.get(name) || 0) + count);\n    }\n    const countByNames = /* @__PURE__ */ new Map();\n    for (const [name, count] of nameByCount.entries()){\n        const names = countByNames.get(count);\n        if (names) {\n            names.push(name);\n        } else {\n            countByNames.set(count, [\n                name\n            ]);\n        }\n    }\n    const partsEntries = Array.from(countByNames.entries()).sort(([countA], [countB])=>countB - countA);\n    const partsLength = partsEntries.length;\n    let labelText = \"\";\n    for(let i = 0; i < partsLength; i++){\n        const [count, names] = partsEntries[i];\n        let part = `${names.slice(0, MAX_PARTS_LENGTH).join(\", \")} \\xD7${count}`;\n        if (part.length > MAX_LABEL_LENGTH) {\n            part = `${part.slice(0, MAX_LABEL_LENGTH)}\\u2026`;\n        }\n        if (i !== partsLength - 1) {\n            part += \", \";\n        }\n        labelText += part;\n    }\n    if (labelText.length > MAX_LABEL_LENGTH) {\n        return `${labelText.slice(0, MAX_LABEL_LENGTH)}\\u2026`;\n    }\n    return labelText;\n};\nvar getAreaFromOutlines = (outlines)=>{\n    let area = 0;\n    for (const outline of outlines){\n        area += outline.width * outline.height;\n    }\n    return area;\n};\nvar updateOutlines = (activeOutlines2, outlines)=>{\n    for (const { id, name, count, x, y, width, height, didCommit } of outlines){\n        const outline = {\n            id,\n            name,\n            count,\n            x,\n            y,\n            width,\n            height,\n            frame: 0,\n            targetX: x,\n            targetY: y,\n            targetWidth: width,\n            targetHeight: height,\n            didCommit\n        };\n        const key = String(outline.id);\n        const existingOutline = activeOutlines2.get(key);\n        if (existingOutline) {\n            existingOutline.count++;\n            existingOutline.frame = 0;\n            existingOutline.targetX = x;\n            existingOutline.targetY = y;\n            existingOutline.targetWidth = width;\n            existingOutline.targetHeight = height;\n            existingOutline.didCommit = didCommit;\n        } else {\n            activeOutlines2.set(key, outline);\n        }\n    }\n};\nvar updateScroll = (activeOutlines2, deltaX, deltaY)=>{\n    for (const outline of activeOutlines2.values()){\n        const newX = outline.x - deltaX;\n        const newY = outline.y - deltaY;\n        outline.targetX = newX;\n        outline.targetY = newY;\n    }\n};\nvar initCanvas = (canvas2, dpr2)=>{\n    const ctx2 = canvas2.getContext(\"2d\", {\n        alpha: true\n    });\n    if (ctx2) {\n        ctx2.scale(dpr2, dpr2);\n    }\n    return ctx2;\n};\nvar drawCanvas = (ctx2, canvas2, dpr2, activeOutlines2)=>{\n    ctx2.clearRect(0, 0, canvas2.width / dpr2, canvas2.height / dpr2);\n    const groupedOutlinesMap = /* @__PURE__ */ new Map();\n    const rectMap = /* @__PURE__ */ new Map();\n    for (const outline of activeOutlines2.values()){\n        const { x, y, width, height, targetX, targetY, targetWidth, targetHeight, frame } = outline;\n        if (targetX !== x) {\n            outline.x = lerp2(x, targetX);\n        }\n        if (targetY !== y) {\n            outline.y = lerp2(y, targetY);\n        }\n        if (targetWidth !== width) {\n            outline.width = lerp2(width, targetWidth);\n        }\n        if (targetHeight !== height) {\n            outline.height = lerp2(height, targetHeight);\n        }\n        const labelKey = `${targetX ?? x},${targetY ?? y}`;\n        const rectKey = `${labelKey},${targetWidth ?? width},${targetHeight ?? height}`;\n        const outlines = groupedOutlinesMap.get(labelKey);\n        if (outlines) {\n            outlines.push(outline);\n        } else {\n            groupedOutlinesMap.set(labelKey, [\n                outline\n            ]);\n        }\n        const alpha = 1 - frame / TOTAL_FRAMES;\n        outline.frame++;\n        const rect = rectMap.get(rectKey) || {\n            x,\n            y,\n            width,\n            height,\n            alpha\n        };\n        if (alpha > rect.alpha) {\n            rect.alpha = alpha;\n        }\n        rectMap.set(rectKey, rect);\n    }\n    for (const rect of rectMap.values()){\n        const { x, y, width, height, alpha } = rect;\n        ctx2.strokeStyle = `rgba(${primaryColor},${alpha})`;\n        ctx2.lineWidth = 1;\n        ctx2.beginPath();\n        ctx2.rect(x, y, width, height);\n        ctx2.stroke();\n        ctx2.fillStyle = `rgba(${primaryColor},${alpha * 0.1})`;\n        ctx2.fill();\n    }\n    ctx2.font = `11px ${MONO_FONT}`;\n    const labelMap = /* @__PURE__ */ new Map();\n    ctx2.textRendering = \"optimizeSpeed\";\n    for (const outlines of groupedOutlinesMap.values()){\n        const first = outlines[0];\n        const { x, y, frame } = first;\n        const alpha = 1 - frame / TOTAL_FRAMES;\n        const text = getLabelText2(outlines);\n        const { width } = ctx2.measureText(text);\n        const height = 11;\n        labelMap.set(`${x},${y},${width},${text}`, {\n            text,\n            width,\n            height,\n            alpha,\n            x,\n            y,\n            outlines\n        });\n        let labelY = y - height - 4;\n        if (labelY < 0) {\n            labelY = 0;\n        }\n        if (frame > TOTAL_FRAMES) {\n            for (const outline of outlines){\n                activeOutlines2.delete(String(outline.id));\n            }\n        }\n    }\n    const sortedLabels = Array.from(labelMap.entries()).sort(([_, a], [__, b])=>{\n        return getAreaFromOutlines(b.outlines) - getAreaFromOutlines(a.outlines);\n    });\n    for (const [labelKey, label] of sortedLabels){\n        if (!labelMap.has(labelKey)) continue;\n        for (const [otherKey, otherLabel] of labelMap.entries()){\n            if (labelKey === otherKey) continue;\n            const { x, y, width, height } = label;\n            const { x: otherX, y: otherY, width: otherWidth, height: otherHeight } = otherLabel;\n            if (x + width > otherX && otherX + otherWidth > x && y + height > otherY && otherY + otherHeight > y) {\n                label.text = getLabelText2([\n                    ...label.outlines,\n                    ...otherLabel.outlines\n                ]);\n                label.width = ctx2.measureText(label.text).width;\n                labelMap.delete(otherKey);\n            }\n        }\n    }\n    for (const label of labelMap.values()){\n        const { x, y, alpha, width, height, text } = label;\n        let labelY = y - height - 4;\n        if (labelY < 0) {\n            labelY = 0;\n        }\n        ctx2.fillStyle = `rgba(${primaryColor},${alpha})`;\n        ctx2.fillRect(x, labelY, width + 4, height + 4);\n        ctx2.fillStyle = `rgba(255,255,255,${alpha})`;\n        ctx2.fillText(text, x + 2, labelY + height);\n    }\n    return activeOutlines2.size > 0;\n};\n// src/new-outlines/index.ts\nvar workerCode = \"\\\"use strict\\\";(()=>{var Y=\\\"Menlo,Consolas,Monaco,Liberation Mono,Lucida Console,monospace\\\";var C=(t,l)=>Math.floor(t+(l-t)*.1);var _=\\\"115,97,230\\\";var $=t=>{let l=new Map;for(let o of t){let{name:f,count:e}=o;l.set(f,(l.get(f)||0)+e)}let u=new Map;for(let[o,f]of l.entries()){let e=u.get(f);e?e.push(o):u.set(f,[o])}let m=Array.from(u.entries()).sort(([o],[f])=>f-o),s=m.length,i=\\\"\\\";for(let o=0;o<s;o++){let[f,e]=m[o],n=`${e.slice(0,4).join(\\\", \\\")} \\\\xD7${f}`;n.length>40&&(n=`${n.slice(0,40)}\\\\u2026`),o!==s-1&&(n+=\\\", \\\"),i+=n}return i.length>40?`${i.slice(0,40)}\\\\u2026`:i},S=t=>{let l=0;for(let u of t)l+=u.width*u.height;return l};var X=(t,l)=>{let u=t.getContext(\\\"2d\\\",{alpha:!0});return u&&u.scale(l,l),u},N=(t,l,u,m)=>{t.clearRect(0,0,l.width/u,l.height/u);let s=new Map,i=new Map;for(let e of m.values()){let{x:n,y:c,width:a,height:h,targetX:r,targetY:d,targetWidth:g,targetHeight:A,frame:x}=e;r!==n&&(e.x=C(n,r)),d!==c&&(e.y=C(c,d)),g!==a&&(e.width=C(a,g)),A!==h&&(e.height=C(h,A));let O=`${r??n},${d??c}`,y=`${O},${g??a},${A??h}`,R=s.get(O);R?R.push(e):s.set(O,[e]);let M=1-x/45;e.frame++;let E=i.get(y)||{x:n,y:c,width:a,height:h,alpha:M};M>E.alpha&&(E.alpha=M),i.set(y,E)}for(let e of i.values()){let{x:n,y:c,width:a,height:h,alpha:r}=e;t.strokeStyle=`rgba(${_},${r})`,t.lineWidth=1,t.beginPath(),t.rect(n,c,a,h),t.stroke(),t.fillStyle=`rgba(${_},${r*.1})`,t.fill()}t.font=`11px ${Y}`;let o=new Map;t.textRendering=\\\"optimizeSpeed\\\";for(let e of s.values()){let n=e[0],{x:c,y:a,frame:h}=n,r=1-h/45,d=$(e),{width:g}=t.measureText(d),A=11;o.set(`${c},${a},${g},${d}`,{text:d,width:g,height:A,alpha:r,x:c,y:a,outlines:e});let x=a-A-4;if(x<0&&(x=0),h>45)for(let O of e)m.delete(String(O.id))}let f=Array.from(o.entries()).sort(([e,n],[c,a])=>S(a.outlines)-S(n.outlines));for(let[e,n]of f)if(o.has(e))for(let[c,a]of o.entries()){if(e===c)continue;let{x:h,y:r,width:d,height:g}=n,{x:A,y:x,width:O,height:y}=a;h+d>A&&A+O>h&&r+g>x&&x+y>r&&(n.text=$([...n.outlines,...a.outlines]),n.width=t.measureText(n.text).width,o.delete(c))}for(let e of o.values()){let{x:n,y:c,alpha:a,width:h,height:r,text:d}=e,g=c-r-4;g<0&&(g=0),t.fillStyle=`rgba(${_},${a})`,t.fillRect(n,g,h+4,r+4),t.fillStyle=`rgba(255,255,255,${a})`,t.fillText(d,n+2,g+r)}return m.size>0};var p=null,w=null,b=1,L=new Map,T=null,v=()=>{if(!w||!p)return;N(w,p,b,L)?T=requestAnimationFrame(v):T=null};self.onmessage=t=>{let{type:l}=t.data;if(l===\\\"init\\\"&&(p=t.data.canvas,b=t.data.dpr,p&&(p.width=t.data.width,p.height=t.data.height,w=X(p,b))),!(!p||!w)){if(l===\\\"resize\\\"){b=t.data.dpr,p.width=t.data.width*b,p.height=t.data.height*b,w.resetTransform(),w.scale(b,b),v();return}if(l===\\\"draw-outlines\\\"){let{data:u,names:m}=t.data,s=new Float32Array(u);for(let i=0;i<s.length;i+=7){let o=s[i+2],f=s[i+3],e=s[i+4],n=s[i+5],c=s[i+6],a={id:s[i],name:m[i/7],count:s[i+1],x:o,y:f,width:e,height:n,frame:0,targetX:o,targetY:f,targetWidth:e,targetHeight:n,didCommit:c},h=String(a.id),r=L.get(h);r?(r.count++,r.frame=0,r.targetX=o,r.targetY=f,r.targetWidth=e,r.targetHeight=n,r.didCommit=c):L.set(h,a)}T||(T=requestAnimationFrame(v));return}if(l===\\\"scroll\\\"){let{deltaX:u,deltaY:m}=t.data;for(let s of L.values()){let i=s.x-u,o=s.y-m;s.targetX=i,s.targetY=o}}}};})();\\n\";\nvar worker = null;\nvar canvas = null;\nvar ctx = null;\nvar dpr = 1;\nvar animationFrameId = null;\nvar activeOutlines = /* @__PURE__ */ new Map();\nvar blueprintMap = /* @__PURE__ */ new Map();\nvar blueprintMapKeys = /* @__PURE__ */ new Set();\nvar outlineFiber = (fiber, renderedAt)=>{\n    if (!(0,bippy__WEBPACK_IMPORTED_MODULE_0__.isCompositeFiber)(fiber)) return;\n    const name = typeof fiber.type === \"string\" ? fiber.type : (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getDisplayName)(fiber);\n    if (!name) return;\n    const blueprint = blueprintMap.get(fiber);\n    const nearestFibers = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getNearestHostFibers)(fiber);\n    const didCommit = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.didFiberCommit)(fiber);\n    if (!blueprint) {\n        blueprintMap.set(fiber, {\n            name,\n            count: 1,\n            elements: nearestFibers.map((fiber2)=>fiber2.stateNode),\n            didCommit: didCommit ? 1 : 0,\n            renderedAt\n        });\n        blueprintMapKeys.add(fiber);\n    } else {\n        blueprint.count++;\n        blueprint.renderedAt = renderedAt;\n    }\n};\nvar mergeRects = (rects)=>{\n    const firstRect = rects[0];\n    if (rects.length === 1) return firstRect;\n    let minX;\n    let minY;\n    let maxX;\n    let maxY;\n    for(let i = 0, len = rects.length; i < len; i++){\n        const rect = rects[i];\n        minX = minX == null ? rect.x : Math.min(minX, rect.x);\n        minY = minY == null ? rect.y : Math.min(minY, rect.y);\n        maxX = maxX == null ? rect.x + rect.width : Math.max(maxX, rect.x + rect.width);\n        maxY = maxY == null ? rect.y + rect.height : Math.max(maxY, rect.y + rect.height);\n    }\n    if (minX == null || minY == null || maxX == null || maxY == null) {\n        return rects[0];\n    }\n    return new DOMRect(minX, minY, maxX - minX, maxY - minY);\n};\nvar elementInvariant = (shouldBeEl)=>{\n    if (!(shouldBeEl instanceof Element)) {\n        throw new Error(\"Element Invariant\");\n    }\n};\nvar getBatchedRectMap = async function*(elements) {\n    elements.forEach(elementInvariant);\n    const uniqueElements = new Set(elements);\n    const seenElements = /* @__PURE__ */ new Set();\n    let resolveNext = null;\n    let done = false;\n    const observer = new IntersectionObserver((entries)=>{\n        const newEntries = [];\n        for (const entry of entries){\n            const element = entry.target;\n            if (!seenElements.has(element)) {\n                seenElements.add(element);\n                newEntries.push(entry);\n            }\n        }\n        if (newEntries.length > 0 && resolveNext) {\n            resolveNext(newEntries);\n            resolveNext = null;\n        }\n        if (seenElements.size === uniqueElements.size) {\n            observer.disconnect();\n            done = true;\n            if (resolveNext) {\n                resolveNext([]);\n            }\n        }\n    });\n    for (const element of uniqueElements){\n        observer.observe(element);\n    }\n    while(!done){\n        const entries = await new Promise((resolve)=>{\n            resolveNext = resolve;\n        });\n        if (entries.length > 0) {\n            yield entries;\n        }\n    }\n};\nvar SupportedArrayBuffer = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : ArrayBuffer;\nvar currentTimeout;\nvar flushOutlines = async ()=>{\n    const elements = [];\n    for (const fiber of blueprintMapKeys){\n        const blueprint = blueprintMap.get(fiber);\n        if (!blueprint) continue;\n        for(let i = 0; i < blueprint.elements.length; i++){\n            if (!(blueprint.elements[i] instanceof Element)) {\n                continue;\n            }\n            elements.push(blueprint.elements[i]);\n        }\n    }\n    const rectsMap = /* @__PURE__ */ new Map();\n    if (currentTimeout) {\n        clearTimeout(currentTimeout);\n    }\n    const timeout2 = new Promise((_, reject)=>{\n        currentTimeout = setTimeout(()=>reject(new Error(\"Timed out getting rects\")), 2500);\n    });\n    try {\n        await Promise.race([\n            (async ()=>{\n                for await (const entries of getBatchedRectMap(elements)){\n                    for (const entry of entries){\n                        const element = entry.target;\n                        const rect = entry.intersectionRect;\n                        if (entry.isIntersecting && rect.width && rect.height) {\n                            rectsMap.set(element, rect);\n                        }\n                    }\n                    const blueprints = [];\n                    const blueprintRects = [];\n                    const blueprintIds = [];\n                    for (const fiber of blueprintMapKeys){\n                        const blueprint = blueprintMap.get(fiber);\n                        if (!blueprint) continue;\n                        const rects = [];\n                        for(let i = 0; i < blueprint.elements.length; i++){\n                            const element = blueprint.elements[i];\n                            const rect = rectsMap.get(element);\n                            if (!rect) continue;\n                            rects.push(rect);\n                        }\n                        if (!rects.length) continue;\n                        blueprints.push(blueprint);\n                        blueprintRects.push(mergeRects(rects));\n                        blueprintIds.push((0,bippy__WEBPACK_IMPORTED_MODULE_0__.getFiberId)(fiber));\n                    }\n                    if (blueprints.length > 0) {\n                        const arrayBuffer = new SupportedArrayBuffer(blueprints.length * OUTLINE_ARRAY_SIZE * 4);\n                        const sharedView = new Float32Array(arrayBuffer);\n                        const blueprintNames = new Array(blueprints.length);\n                        let outlineData;\n                        for(let i = 0, len = blueprints.length; i < len; i++){\n                            const blueprint = blueprints[i];\n                            const id = blueprintIds[i];\n                            const { x, y, width, height } = blueprintRects[i];\n                            const { count, name, didCommit } = blueprint;\n                            if (worker) {\n                                const scaledIndex = i * OUTLINE_ARRAY_SIZE;\n                                sharedView[scaledIndex] = id;\n                                sharedView[scaledIndex + 1] = count;\n                                sharedView[scaledIndex + 2] = x;\n                                sharedView[scaledIndex + 3] = y;\n                                sharedView[scaledIndex + 4] = width;\n                                sharedView[scaledIndex + 5] = height;\n                                sharedView[scaledIndex + 6] = didCommit;\n                                blueprintNames[i] = name;\n                            } else {\n                                outlineData ||= new Array(blueprints.length);\n                                outlineData[i] = {\n                                    id,\n                                    name,\n                                    count,\n                                    x,\n                                    y,\n                                    width,\n                                    height,\n                                    didCommit\n                                };\n                            }\n                        }\n                        if (worker) {\n                            worker.postMessage({\n                                type: \"draw-outlines\",\n                                data: arrayBuffer,\n                                names: blueprintNames\n                            });\n                        } else if (canvas && ctx && outlineData) {\n                            updateOutlines(activeOutlines, outlineData);\n                            if (!animationFrameId) {\n                                animationFrameId = requestAnimationFrame(draw);\n                            }\n                        }\n                    }\n                }\n            })(),\n            timeout2\n        ]);\n    } catch  {}\n    for (const fiber of blueprintMapKeys){\n        blueprintMap.delete(fiber);\n        blueprintMapKeys.delete(fiber);\n    }\n};\nvar draw = ()=>{\n    if (!ctx || !canvas) return;\n    const shouldContinue = drawCanvas(ctx, canvas, dpr, activeOutlines);\n    if (shouldContinue) {\n        animationFrameId = requestAnimationFrame(draw);\n    } else {\n        animationFrameId = null;\n    }\n};\nvar CANVAS_HTML_STR = `<canvas style=\"position:fixed;top:0;left:0;pointer-events:none;z-index:2147483646\" aria-hidden=\"true\"></canvas>`;\nvar IS_OFFSCREEN_CANVAS_WORKER_SUPPORTED = typeof OffscreenCanvas !== \"undefined\" && typeof Worker !== \"undefined\";\nvar getDpr = ()=>{\n    return Math.min(window.devicePixelRatio || 1, 2);\n};\nvar getCanvasEl = ()=>{\n    cleanup();\n    const host = document.createElement(\"div\");\n    host.setAttribute(\"data-react-scan\", \"true\");\n    const shadowRoot2 = host.attachShadow({\n        mode: \"open\"\n    });\n    shadowRoot2.innerHTML = CANVAS_HTML_STR;\n    const canvasEl = shadowRoot2.firstChild;\n    if (!canvasEl) return null;\n    dpr = getDpr();\n    canvas = canvasEl;\n    const { innerWidth, innerHeight } = window;\n    canvasEl.style.width = `${innerWidth}px`;\n    canvasEl.style.height = `${innerHeight}px`;\n    const width = innerWidth * dpr;\n    const height = innerHeight * dpr;\n    canvasEl.width = width;\n    canvasEl.height = height;\n    if (IS_OFFSCREEN_CANVAS_WORKER_SUPPORTED) {\n        try {\n            const useExtensionWorker = readLocalStorage(\"use-extension-worker\");\n            removeLocalStorage(\"use-extension-worker\");\n            if (useExtensionWorker) {\n                worker = new Worker(URL.createObjectURL(new Blob([\n                    workerCode\n                ], {\n                    type: \"application/javascript\"\n                })));\n                const offscreenCanvas = canvasEl.transferControlToOffscreen();\n                worker?.postMessage({\n                    type: \"init\",\n                    canvas: offscreenCanvas,\n                    width: canvasEl.width,\n                    height: canvasEl.height,\n                    dpr\n                }, [\n                    offscreenCanvas\n                ]);\n            }\n        } catch (e) {\n            console.warn(\"Failed to initialize OffscreenCanvas worker:\", e);\n        }\n    }\n    if (!worker) {\n        ctx = initCanvas(canvasEl, dpr);\n    }\n    let isResizeScheduled = false;\n    window.addEventListener(\"resize\", ()=>{\n        if (!isResizeScheduled) {\n            isResizeScheduled = true;\n            setTimeout(()=>{\n                const width2 = window.innerWidth;\n                const height2 = window.innerHeight;\n                dpr = getDpr();\n                canvasEl.style.width = `${width2}px`;\n                canvasEl.style.height = `${height2}px`;\n                if (worker) {\n                    worker.postMessage({\n                        type: \"resize\",\n                        width: width2,\n                        height: height2,\n                        dpr\n                    });\n                } else {\n                    canvasEl.width = width2 * dpr;\n                    canvasEl.height = height2 * dpr;\n                    if (ctx) {\n                        ctx.resetTransform();\n                        ctx.scale(dpr, dpr);\n                    }\n                    draw();\n                }\n                isResizeScheduled = false;\n            });\n        }\n    });\n    let prevScrollX = window.scrollX;\n    let prevScrollY = window.scrollY;\n    let isScrollScheduled = false;\n    window.addEventListener(\"scroll\", ()=>{\n        if (!isScrollScheduled) {\n            isScrollScheduled = true;\n            setTimeout(()=>{\n                const { scrollX, scrollY } = window;\n                const deltaX = scrollX - prevScrollX;\n                const deltaY = scrollY - prevScrollY;\n                prevScrollX = scrollX;\n                prevScrollY = scrollY;\n                if (worker) {\n                    worker.postMessage({\n                        type: \"scroll\",\n                        deltaX,\n                        deltaY\n                    });\n                } else {\n                    requestAnimationFrame(()=>{\n                        updateScroll(activeOutlines, deltaX, deltaY);\n                    });\n                }\n                isScrollScheduled = false;\n            }, 16 * 2);\n        }\n    });\n    setInterval(()=>{\n        try {\n            if (blueprintMapKeys.size) {\n                requestAnimationFrame(()=>{\n                    flushOutlines();\n                });\n            }\n        } catch  {}\n    }, 16 * 2);\n    shadowRoot2.appendChild(canvasEl);\n    return host;\n};\nvar hasStopped = ()=>{\n    return globalThis.__REACT_SCAN_STOP__;\n};\nvar cleanup = ()=>{\n    const host = document.querySelector(\"[data-react-scan]\");\n    if (host) {\n        host.remove();\n    }\n};\nvar needsReport = false;\nvar reportInterval;\nvar startReportInterval = ()=>{\n    clearInterval(reportInterval);\n    reportInterval = setInterval(()=>{\n        if (needsReport) {\n            Store.lastReportTime.value = Date.now();\n            needsReport = false;\n        }\n    }, 50);\n};\nvar isValidFiber = (fiber)=>{\n    if (ignoredProps.has(fiber.memoizedProps)) {\n        return false;\n    }\n    return true;\n};\nvar initReactScanInstrumentation = ({ onActive })=>{\n    if (hasStopped()) return;\n    const instrumentation = createInstrumentation(\"react-scan-devtools-0.1.0\", {\n        onCommitStart: ()=>{\n            ReactScanInternals.options.value.onCommitStart?.();\n        },\n        onActive,\n        onError () {},\n        isValidFiber,\n        onRender: (fiber, renders, renderedAt)=>{\n            if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isCompositeFiber)(fiber)) {\n                Store.monitor.value?.interactionListeningForRenders?.(fiber, renders);\n            }\n            const isOverlayPaused = ReactScanInternals.instrumentation?.isPaused.value;\n            const isInspectorInactive = Store.inspectState.value.kind === \"inspect-off\" || Store.inspectState.value.kind === \"uninitialized\";\n            const shouldFullyAbort = isOverlayPaused && isInspectorInactive;\n            if (shouldFullyAbort) {\n                return;\n            }\n            if (!isOverlayPaused) {\n                outlineFiber(fiber, renderedAt);\n            }\n            if (ReactScanInternals.options.value.log) {\n                log(renders);\n            }\n            if (Store.inspectState.value.kind === \"focused\") {\n                inspectorUpdateSignal.value = Date.now();\n            }\n            ReactScanInternals.options.value.onRender?.(fiber, renders);\n        },\n        onCommitFinish: ()=>{\n            ReactScanInternals.options.value.onCommitFinish?.();\n        },\n        trackChanges: false\n    });\n    ReactScanInternals.instrumentation = instrumentation;\n};\n// src/web/assets/css/styles.css\nvar styles_default = '*, ::before, ::after {\\n  --tw-border-spacing-x: 0;\\n  --tw-border-spacing-y: 0;\\n  --tw-translate-x: 0;\\n  --tw-translate-y: 0;\\n  --tw-rotate: 0;\\n  --tw-skew-x: 0;\\n  --tw-skew-y: 0;\\n  --tw-scale-x: 1;\\n  --tw-scale-y: 1;\\n  --tw-pan-x:  ;\\n  --tw-pan-y:  ;\\n  --tw-pinch-zoom:  ;\\n  --tw-scroll-snap-strictness: proximity;\\n  --tw-gradient-from-position:  ;\\n  --tw-gradient-via-position:  ;\\n  --tw-gradient-to-position:  ;\\n  --tw-ordinal:  ;\\n  --tw-slashed-zero:  ;\\n  --tw-numeric-figure:  ;\\n  --tw-numeric-spacing:  ;\\n  --tw-numeric-fraction:  ;\\n  --tw-ring-inset:  ;\\n  --tw-ring-offset-width: 0px;\\n  --tw-ring-offset-color: #fff;\\n  --tw-ring-color: rgb(59 130 246 / 0.5);\\n  --tw-ring-offset-shadow: 0 0 #0000;\\n  --tw-ring-shadow: 0 0 #0000;\\n  --tw-shadow: 0 0 #0000;\\n  --tw-shadow-colored: 0 0 #0000;\\n  --tw-blur:  ;\\n  --tw-brightness:  ;\\n  --tw-contrast:  ;\\n  --tw-grayscale:  ;\\n  --tw-hue-rotate:  ;\\n  --tw-invert:  ;\\n  --tw-saturate:  ;\\n  --tw-sepia:  ;\\n  --tw-drop-shadow:  ;\\n  --tw-backdrop-blur:  ;\\n  --tw-backdrop-brightness:  ;\\n  --tw-backdrop-contrast:  ;\\n  --tw-backdrop-grayscale:  ;\\n  --tw-backdrop-hue-rotate:  ;\\n  --tw-backdrop-invert:  ;\\n  --tw-backdrop-opacity:  ;\\n  --tw-backdrop-saturate:  ;\\n  --tw-backdrop-sepia:  ;\\n  --tw-contain-size:  ;\\n  --tw-contain-layout:  ;\\n  --tw-contain-paint:  ;\\n  --tw-contain-style:  ;\\n}\\n\\n::backdrop {\\n  --tw-border-spacing-x: 0;\\n  --tw-border-spacing-y: 0;\\n  --tw-translate-x: 0;\\n  --tw-translate-y: 0;\\n  --tw-rotate: 0;\\n  --tw-skew-x: 0;\\n  --tw-skew-y: 0;\\n  --tw-scale-x: 1;\\n  --tw-scale-y: 1;\\n  --tw-pan-x:  ;\\n  --tw-pan-y:  ;\\n  --tw-pinch-zoom:  ;\\n  --tw-scroll-snap-strictness: proximity;\\n  --tw-gradient-from-position:  ;\\n  --tw-gradient-via-position:  ;\\n  --tw-gradient-to-position:  ;\\n  --tw-ordinal:  ;\\n  --tw-slashed-zero:  ;\\n  --tw-numeric-figure:  ;\\n  --tw-numeric-spacing:  ;\\n  --tw-numeric-fraction:  ;\\n  --tw-ring-inset:  ;\\n  --tw-ring-offset-width: 0px;\\n  --tw-ring-offset-color: #fff;\\n  --tw-ring-color: rgb(59 130 246 / 0.5);\\n  --tw-ring-offset-shadow: 0 0 #0000;\\n  --tw-ring-shadow: 0 0 #0000;\\n  --tw-shadow: 0 0 #0000;\\n  --tw-shadow-colored: 0 0 #0000;\\n  --tw-blur:  ;\\n  --tw-brightness:  ;\\n  --tw-contrast:  ;\\n  --tw-grayscale:  ;\\n  --tw-hue-rotate:  ;\\n  --tw-invert:  ;\\n  --tw-saturate:  ;\\n  --tw-sepia:  ;\\n  --tw-drop-shadow:  ;\\n  --tw-backdrop-blur:  ;\\n  --tw-backdrop-brightness:  ;\\n  --tw-backdrop-contrast:  ;\\n  --tw-backdrop-grayscale:  ;\\n  --tw-backdrop-hue-rotate:  ;\\n  --tw-backdrop-invert:  ;\\n  --tw-backdrop-opacity:  ;\\n  --tw-backdrop-saturate:  ;\\n  --tw-backdrop-sepia:  ;\\n  --tw-contain-size:  ;\\n  --tw-contain-layout:  ;\\n  --tw-contain-paint:  ;\\n  --tw-contain-style:  ;\\n}/*\\n! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com\\n*//*\\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\\n*/\\n\\n*,\\n::before,\\n::after {\\n  box-sizing: border-box; /* 1 */\\n  border-width: 0; /* 2 */\\n  border-style: solid; /* 2 */\\n  border-color: #e5e7eb; /* 2 */\\n}\\n\\n::before,\\n::after {\\n  --tw-content: \\'\\';\\n}\\n\\n/*\\n1. Use a consistent sensible line-height in all browsers.\\n2. Prevent adjustments of font size after orientation changes in iOS.\\n3. Use a more readable tab size.\\n4. Use the user\\'s configured `sans` font-family by default.\\n5. Use the user\\'s configured `sans` font-feature-settings by default.\\n6. Use the user\\'s configured `sans` font-variation-settings by default.\\n7. Disable tap highlights on iOS\\n*/\\n\\nhtml,\\n:host {\\n  line-height: 1.5; /* 1 */\\n  -webkit-text-size-adjust: 100%; /* 2 */\\n  -moz-tab-size: 4; /* 3 */\\n  -o-tab-size: 4;\\n     tab-size: 4; /* 3 */\\n  font-family: ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 4 */\\n  font-feature-settings: normal; /* 5 */\\n  font-variation-settings: normal; /* 6 */\\n  -webkit-tap-highlight-color: transparent; /* 7 */\\n}\\n\\n/*\\n1. Remove the margin in all browsers.\\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\\n*/\\n\\nbody {\\n  margin: 0; /* 1 */\\n  line-height: inherit; /* 2 */\\n}\\n\\n/*\\n1. Add the correct height in Firefox.\\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\\n3. Ensure horizontal rules are visible by default.\\n*/\\n\\nhr {\\n  height: 0; /* 1 */\\n  color: inherit; /* 2 */\\n  border-top-width: 1px; /* 3 */\\n}\\n\\n/*\\nAdd the correct text decoration in Chrome, Edge, and Safari.\\n*/\\n\\nabbr:where([title]) {\\n  -webkit-text-decoration: underline dotted;\\n          text-decoration: underline dotted;\\n}\\n\\n/*\\nRemove the default font size and weight for headings.\\n*/\\n\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  font-size: inherit;\\n  font-weight: inherit;\\n}\\n\\n/*\\nReset links to optimize for opt-in styling instead of opt-out.\\n*/\\n\\na {\\n  color: inherit;\\n  text-decoration: inherit;\\n}\\n\\n/*\\nAdd the correct font weight in Edge and Safari.\\n*/\\n\\nb,\\nstrong {\\n  font-weight: bolder;\\n}\\n\\n/*\\n1. Use the user\\'s configured `mono` font-family by default.\\n2. Use the user\\'s configured `mono` font-feature-settings by default.\\n3. Use the user\\'s configured `mono` font-variation-settings by default.\\n4. Correct the odd `em` font sizing in all browsers.\\n*/\\n\\ncode,\\nkbd,\\nsamp,\\npre {\\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace; /* 1 */\\n  font-feature-settings: normal; /* 2 */\\n  font-variation-settings: normal; /* 3 */\\n  font-size: 1em; /* 4 */\\n}\\n\\n/*\\nAdd the correct font size in all browsers.\\n*/\\n\\nsmall {\\n  font-size: 80%;\\n}\\n\\n/*\\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\\n*/\\n\\nsub,\\nsup {\\n  font-size: 75%;\\n  line-height: 0;\\n  position: relative;\\n  vertical-align: baseline;\\n}\\n\\nsub {\\n  bottom: -0.25em;\\n}\\n\\nsup {\\n  top: -0.5em;\\n}\\n\\n/*\\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\\n3. Remove gaps between table borders by default.\\n*/\\n\\ntable {\\n  text-indent: 0; /* 1 */\\n  border-color: inherit; /* 2 */\\n  border-collapse: collapse; /* 3 */\\n}\\n\\n/*\\n1. Change the font styles in all browsers.\\n2. Remove the margin in Firefox and Safari.\\n3. Remove default padding in all browsers.\\n*/\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n  font-family: inherit; /* 1 */\\n  font-feature-settings: inherit; /* 1 */\\n  font-variation-settings: inherit; /* 1 */\\n  font-size: 100%; /* 1 */\\n  font-weight: inherit; /* 1 */\\n  line-height: inherit; /* 1 */\\n  letter-spacing: inherit; /* 1 */\\n  color: inherit; /* 1 */\\n  margin: 0; /* 2 */\\n  padding: 0; /* 3 */\\n}\\n\\n/*\\nRemove the inheritance of text transform in Edge and Firefox.\\n*/\\n\\nbutton,\\nselect {\\n  text-transform: none;\\n}\\n\\n/*\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Remove default button styles.\\n*/\\n\\nbutton,\\ninput:where([type=\\'button\\']),\\ninput:where([type=\\'reset\\']),\\ninput:where([type=\\'submit\\']) {\\n  -webkit-appearance: button; /* 1 */\\n  background-color: transparent; /* 2 */\\n  background-image: none; /* 2 */\\n}\\n\\n/*\\nUse the modern Firefox focus style for all focusable elements.\\n*/\\n\\n:-moz-focusring {\\n  outline: auto;\\n}\\n\\n/*\\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\\n*/\\n\\n:-moz-ui-invalid {\\n  box-shadow: none;\\n}\\n\\n/*\\nAdd the correct vertical alignment in Chrome and Firefox.\\n*/\\n\\nprogress {\\n  vertical-align: baseline;\\n}\\n\\n/*\\nCorrect the cursor style of increment and decrement buttons in Safari.\\n*/\\n\\n::-webkit-inner-spin-button,\\n::-webkit-outer-spin-button {\\n  height: auto;\\n}\\n\\n/*\\n1. Correct the odd appearance in Chrome and Safari.\\n2. Correct the outline style in Safari.\\n*/\\n\\n[type=\\'search\\'] {\\n  -webkit-appearance: textfield; /* 1 */\\n  outline-offset: -2px; /* 2 */\\n}\\n\\n/*\\nRemove the inner padding in Chrome and Safari on macOS.\\n*/\\n\\n::-webkit-search-decoration {\\n  -webkit-appearance: none;\\n}\\n\\n/*\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Change font properties to `inherit` in Safari.\\n*/\\n\\n::-webkit-file-upload-button {\\n  -webkit-appearance: button; /* 1 */\\n  font: inherit; /* 2 */\\n}\\n\\n/*\\nAdd the correct display in Chrome and Safari.\\n*/\\n\\nsummary {\\n  display: list-item;\\n}\\n\\n/*\\nRemoves the default spacing and border for appropriate elements.\\n*/\\n\\nblockquote,\\ndl,\\ndd,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\nhr,\\nfigure,\\np,\\npre {\\n  margin: 0;\\n}\\n\\nfieldset {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\nlegend {\\n  padding: 0;\\n}\\n\\nol,\\nul,\\nmenu {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n/*\\nReset default styling for dialogs.\\n*/\\ndialog {\\n  padding: 0;\\n}\\n\\n/*\\nPrevent resizing textareas horizontally by default.\\n*/\\n\\ntextarea {\\n  resize: vertical;\\n}\\n\\n/*\\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\\n2. Set the default placeholder color to the user\\'s configured gray 400 color.\\n*/\\n\\ninput::-moz-placeholder, textarea::-moz-placeholder {\\n  opacity: 1; /* 1 */\\n  color: #9ca3af; /* 2 */\\n}\\n\\ninput::placeholder,\\ntextarea::placeholder {\\n  opacity: 1; /* 1 */\\n  color: #9ca3af; /* 2 */\\n}\\n\\n/*\\nSet the default cursor for buttons.\\n*/\\n\\nbutton,\\n[role=\"button\"] {\\n  cursor: pointer;\\n}\\n\\n/*\\nMake sure disabled buttons don\\'t get the pointer cursor.\\n*/\\n:disabled {\\n  cursor: default;\\n}\\n\\n/*\\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\\n   This can trigger a poorly considered lint error in some tools but is included by design.\\n*/\\n\\nimg,\\nsvg,\\nvideo,\\ncanvas,\\naudio,\\niframe,\\nembed,\\nobject {\\n  display: block; /* 1 */\\n  vertical-align: middle; /* 2 */\\n}\\n\\n/*\\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\\n*/\\n\\nimg,\\nvideo {\\n  max-width: 100%;\\n  height: auto;\\n}\\n\\n/* Make elements with the HTML hidden attribute stay hidden by default */\\n[hidden]:where(:not([hidden=\"until-found\"])) {\\n  display: none;\\n}\\n.\\\\!container {\\n  width: 100% !important;\\n}\\n.container {\\n  width: 100%;\\n}\\n@media (min-width: 640px) {\\n\\n  .\\\\!container {\\n    max-width: 640px !important;\\n  }\\n\\n  .container {\\n    max-width: 640px;\\n  }\\n}\\n@media (min-width: 768px) {\\n\\n  .\\\\!container {\\n    max-width: 768px !important;\\n  }\\n\\n  .container {\\n    max-width: 768px;\\n  }\\n}\\n@media (min-width: 1024px) {\\n\\n  .\\\\!container {\\n    max-width: 1024px !important;\\n  }\\n\\n  .container {\\n    max-width: 1024px;\\n  }\\n}\\n@media (min-width: 1280px) {\\n\\n  .\\\\!container {\\n    max-width: 1280px !important;\\n  }\\n\\n  .container {\\n    max-width: 1280px;\\n  }\\n}\\n@media (min-width: 1536px) {\\n\\n  .\\\\!container {\\n    max-width: 1536px !important;\\n  }\\n\\n  .container {\\n    max-width: 1536px;\\n  }\\n}\\n.pointer-events-none {\\n  pointer-events: none;\\n}\\n.pointer-events-auto {\\n  pointer-events: auto;\\n}\\n.visible {\\n  visibility: visible;\\n}\\n.static {\\n  position: static;\\n}\\n.fixed {\\n  position: fixed;\\n}\\n.absolute {\\n  position: absolute;\\n}\\n.relative {\\n  position: relative;\\n}\\n.sticky {\\n  position: sticky;\\n}\\n.inset-0 {\\n  inset: 0px;\\n}\\n.inset-x-1 {\\n  left: 4px;\\n  right: 4px;\\n}\\n.inset-y-0 {\\n  top: 0px;\\n  bottom: 0px;\\n}\\n.-right-1 {\\n  right: -4px;\\n}\\n.-right-2\\\\.5 {\\n  right: -10px;\\n}\\n.-top-1 {\\n  top: -4px;\\n}\\n.-top-2\\\\.5 {\\n  top: -10px;\\n}\\n.bottom-0 {\\n  bottom: 0px;\\n}\\n.bottom-4 {\\n  bottom: 16px;\\n}\\n.left-0 {\\n  left: 0px;\\n}\\n.left-2 {\\n  left: 8px;\\n}\\n.left-3 {\\n  left: 12px;\\n}\\n.right-0 {\\n  right: 0px;\\n}\\n.right-2 {\\n  right: 8px;\\n}\\n.right-4 {\\n  right: 16px;\\n}\\n.top-0 {\\n  top: 0px;\\n}\\n.top-1\\\\/2 {\\n  top: 50%;\\n}\\n.top-2 {\\n  top: 8px;\\n}\\n.z-10 {\\n  z-index: 10;\\n}\\n.z-100 {\\n  z-index: 100;\\n}\\n.z-50 {\\n  z-index: 50;\\n}\\n.z-\\\\[124124124124\\\\] {\\n  z-index: 124124124124;\\n}\\n.z-\\\\[214748365\\\\] {\\n  z-index: 214748365;\\n}\\n.z-\\\\[214748367\\\\] {\\n  z-index: 214748367;\\n}\\n.m-\\\\[2px\\\\] {\\n  margin: 2px;\\n}\\n.mx-0\\\\.5 {\\n  margin-left: 2px;\\n  margin-right: 2px;\\n}\\n.\\\\!ml-0 {\\n  margin-left: 0px !important;\\n}\\n.mb-1\\\\.5 {\\n  margin-bottom: 6px;\\n}\\n.mb-2 {\\n  margin-bottom: 8px;\\n}\\n.mb-3 {\\n  margin-bottom: 12px;\\n}\\n.mb-4 {\\n  margin-bottom: 16px;\\n}\\n.mb-px {\\n  margin-bottom: 1px;\\n}\\n.ml-1 {\\n  margin-left: 4px;\\n}\\n.ml-auto {\\n  margin-left: auto;\\n}\\n.mr-0\\\\.5 {\\n  margin-right: 2px;\\n}\\n.mr-1 {\\n  margin-right: 4px;\\n}\\n.mr-1\\\\.5 {\\n  margin-right: 6px;\\n}\\n.mr-16 {\\n  margin-right: 64px;\\n}\\n.mr-auto {\\n  margin-right: auto;\\n}\\n.mt-0\\\\.5 {\\n  margin-top: 2px;\\n}\\n.mt-1 {\\n  margin-top: 4px;\\n}\\n.mt-4 {\\n  margin-top: 16px;\\n}\\n.block {\\n  display: block;\\n}\\n.inline {\\n  display: inline;\\n}\\n.flex {\\n  display: flex;\\n}\\n.table {\\n  display: table;\\n}\\n.grid {\\n  display: grid;\\n}\\n.hidden {\\n  display: none;\\n}\\n.aspect-square {\\n  aspect-ratio: 1 / 1;\\n}\\n.h-1 {\\n  height: 4px;\\n}\\n.h-1\\\\.5 {\\n  height: 6px;\\n}\\n.h-10 {\\n  height: 40px;\\n}\\n.h-12 {\\n  height: 48px;\\n}\\n.h-2\\\\.5 {\\n  height: 10px;\\n}\\n.h-3\\\\.5 {\\n  height: 14px;\\n}\\n.h-4 {\\n  height: 16px;\\n}\\n.h-4\\\\/5 {\\n  height: 80%;\\n}\\n.h-6 {\\n  height: 24px;\\n}\\n.h-7 {\\n  height: 28px;\\n}\\n.h-8 {\\n  height: 32px;\\n}\\n.h-\\\\[150px\\\\] {\\n  height: 150px;\\n}\\n.h-\\\\[235px\\\\] {\\n  height: 235px;\\n}\\n.h-\\\\[28px\\\\] {\\n  height: 28px;\\n}\\n.h-\\\\[48px\\\\] {\\n  height: 48px;\\n}\\n.h-\\\\[50px\\\\] {\\n  height: 50px;\\n}\\n.h-\\\\[calc\\\\(100\\\\%-150px\\\\)\\\\] {\\n  height: calc(100% - 150px);\\n}\\n.h-\\\\[calc\\\\(100\\\\%-200px\\\\)\\\\] {\\n  height: calc(100% - 200px);\\n}\\n.h-\\\\[calc\\\\(100\\\\%-25px\\\\)\\\\] {\\n  height: calc(100% - 25px);\\n}\\n.h-\\\\[calc\\\\(100\\\\%-40px\\\\)\\\\] {\\n  height: calc(100% - 40px);\\n}\\n.h-\\\\[calc\\\\(100\\\\%-48px\\\\)\\\\] {\\n  height: calc(100% - 48px);\\n}\\n.h-fit {\\n  height: -moz-fit-content;\\n  height: fit-content;\\n}\\n.h-full {\\n  height: 100%;\\n}\\n.h-screen {\\n  height: 100vh;\\n}\\n.max-h-0 {\\n  max-height: 0px;\\n}\\n.max-h-40 {\\n  max-height: 160px;\\n}\\n.max-h-8 {\\n  max-height: 32px;\\n}\\n.max-h-9 {\\n  max-height: 36px;\\n}\\n.max-h-\\\\[\\\\\"auto\\\\\"\\\\] {\\n  max-height: \"auto\";\\n}\\n.max-h-\\\\[400px\\\\] {\\n  max-height: 400px;\\n}\\n.min-h-9 {\\n  min-height: 36px;\\n}\\n.min-h-\\\\[48px\\\\] {\\n  min-height: 48px;\\n}\\n.min-h-fit {\\n  min-height: -moz-fit-content;\\n  min-height: fit-content;\\n}\\n.w-1 {\\n  width: 4px;\\n}\\n.w-1\\\\/2 {\\n  width: 50%;\\n}\\n.w-1\\\\/3 {\\n  width: 33.333333%;\\n}\\n.w-16 {\\n  width: 64px;\\n}\\n.w-2\\\\.5 {\\n  width: 10px;\\n}\\n.w-2\\\\/4 {\\n  width: 50%;\\n}\\n.w-3 {\\n  width: 12px;\\n}\\n.w-3\\\\.5 {\\n  width: 14px;\\n}\\n.w-32 {\\n  width: 128px;\\n}\\n.w-4 {\\n  width: 16px;\\n}\\n.w-4\\\\/5 {\\n  width: 80%;\\n}\\n.w-80 {\\n  width: 320px;\\n}\\n.w-\\\\[5\\\\%\\\\] {\\n  width: 5%;\\n}\\n.w-\\\\[72px\\\\] {\\n  width: 72px;\\n}\\n.w-\\\\[90\\\\%\\\\] {\\n  width: 90%;\\n}\\n.w-\\\\[calc\\\\(100\\\\%-200px\\\\)\\\\] {\\n  width: calc(100% - 200px);\\n}\\n.w-fit {\\n  width: -moz-fit-content;\\n  width: fit-content;\\n}\\n.w-full {\\n  width: 100%;\\n}\\n.w-px {\\n  width: 1px;\\n}\\n.w-screen {\\n  width: 100vw;\\n}\\n.min-w-\\\\[200px\\\\] {\\n  min-width: 200px;\\n}\\n.min-w-fit {\\n  min-width: -moz-fit-content;\\n  min-width: fit-content;\\n}\\n.max-w-md {\\n  max-width: 448px;\\n}\\n.flex-1 {\\n  flex: 1 1 0%;\\n}\\n.flex-\\\\[0_0_auto\\\\] {\\n  flex: 0 0 auto;\\n}\\n.grow {\\n  flex-grow: 1;\\n}\\n.-translate-y-1\\\\/2 {\\n  --tw-translate-y: -50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.-translate-y-\\\\[200\\\\%\\\\] {\\n  --tw-translate-y: -200%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.translate-y-0 {\\n  --tw-translate-y: 0px;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.translate-y-1 {\\n  --tw-translate-y: 4px;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.-rotate-90 {\\n  --tw-rotate: -90deg;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.rotate-0 {\\n  --tw-rotate: 0deg;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.rotate-90 {\\n  --tw-rotate: 90deg;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.scale-110 {\\n  --tw-scale-x: 1.1;\\n  --tw-scale-y: 1.1;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n.transform {\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n@keyframes fadeIn {\\n\\n  0% {\\n    opacity: 0;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n.animate-fade-in {\\n  animation: fadeIn ease-in forwards;\\n}\\n.cursor-ew-resize {\\n  cursor: ew-resize;\\n}\\n.cursor-move {\\n  cursor: move;\\n}\\n.cursor-nesw-resize {\\n  cursor: nesw-resize;\\n}\\n.cursor-ns-resize {\\n  cursor: ns-resize;\\n}\\n.cursor-nwse-resize {\\n  cursor: nwse-resize;\\n}\\n.cursor-pointer {\\n  cursor: pointer;\\n}\\n.select-none {\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n          user-select: none;\\n}\\n.resize {\\n  resize: both;\\n}\\n.appearance-none {\\n  -webkit-appearance: none;\\n     -moz-appearance: none;\\n          appearance: none;\\n}\\n.grid-cols-2 {\\n  grid-template-columns: repeat(2, minmax(0, 1fr));\\n}\\n.flex-row-reverse {\\n  flex-direction: row-reverse;\\n}\\n.flex-col {\\n  flex-direction: column;\\n}\\n.flex-wrap {\\n  flex-wrap: wrap;\\n}\\n.items-start {\\n  align-items: flex-start;\\n}\\n.items-end {\\n  align-items: flex-end;\\n}\\n.items-center {\\n  align-items: center;\\n}\\n.items-stretch {\\n  align-items: stretch;\\n}\\n.justify-start {\\n  justify-content: flex-start;\\n}\\n.justify-end {\\n  justify-content: flex-end;\\n}\\n.justify-center {\\n  justify-content: center;\\n}\\n.justify-between {\\n  justify-content: space-between;\\n}\\n.gap-0\\\\.5 {\\n  gap: 2px;\\n}\\n.gap-1 {\\n  gap: 4px;\\n}\\n.gap-1\\\\.5 {\\n  gap: 6px;\\n}\\n.gap-2 {\\n  gap: 8px;\\n}\\n.gap-4 {\\n  gap: 16px;\\n}\\n.gap-x-0\\\\.5 {\\n  -moz-column-gap: 2px;\\n       column-gap: 2px;\\n}\\n.gap-x-1 {\\n  -moz-column-gap: 4px;\\n       column-gap: 4px;\\n}\\n.gap-x-1\\\\.5 {\\n  -moz-column-gap: 6px;\\n       column-gap: 6px;\\n}\\n.gap-x-2 {\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n}\\n.gap-x-3 {\\n  -moz-column-gap: 12px;\\n       column-gap: 12px;\\n}\\n.gap-x-4 {\\n  -moz-column-gap: 16px;\\n       column-gap: 16px;\\n}\\n.gap-x-\\\\[6px\\\\] {\\n  -moz-column-gap: 6px;\\n       column-gap: 6px;\\n}\\n.gap-y-0\\\\.5 {\\n  row-gap: 2px;\\n}\\n.gap-y-1 {\\n  row-gap: 4px;\\n}\\n.gap-y-2 {\\n  row-gap: 8px;\\n}\\n.gap-y-4 {\\n  row-gap: 16px;\\n}\\n.space-y-1 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-space-y-reverse: 0;\\n  margin-top: calc(4px * calc(1 - var(--tw-space-y-reverse)));\\n  margin-bottom: calc(4px * var(--tw-space-y-reverse));\\n}\\n.space-y-1\\\\.5 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-space-y-reverse: 0;\\n  margin-top: calc(6px * calc(1 - var(--tw-space-y-reverse)));\\n  margin-bottom: calc(6px * var(--tw-space-y-reverse));\\n}\\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-space-y-reverse: 0;\\n  margin-top: calc(8px * calc(1 - var(--tw-space-y-reverse)));\\n  margin-bottom: calc(8px * var(--tw-space-y-reverse));\\n}\\n.space-y-4 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-space-y-reverse: 0;\\n  margin-top: calc(16px * calc(1 - var(--tw-space-y-reverse)));\\n  margin-bottom: calc(16px * var(--tw-space-y-reverse));\\n}\\n.divide-y > :not([hidden]) ~ :not([hidden]) {\\n  --tw-divide-y-reverse: 0;\\n  border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\\n  border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\\n}\\n.divide-zinc-800 > :not([hidden]) ~ :not([hidden]) {\\n  --tw-divide-opacity: 1;\\n  border-color: rgb(39 39 42 / var(--tw-divide-opacity, 1));\\n}\\n.overflow-auto {\\n  overflow: auto;\\n}\\n.overflow-hidden {\\n  overflow: hidden;\\n}\\n.\\\\!overflow-visible {\\n  overflow: visible !important;\\n}\\n.overflow-x-auto {\\n  overflow-x: auto;\\n}\\n.overflow-y-auto {\\n  overflow-y: auto;\\n}\\n.overflow-x-hidden {\\n  overflow-x: hidden;\\n}\\n.truncate {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n.whitespace-nowrap {\\n  white-space: nowrap;\\n}\\n.whitespace-pre-wrap {\\n  white-space: pre-wrap;\\n}\\n.text-wrap {\\n  text-wrap: wrap;\\n}\\n.break-words {\\n  overflow-wrap: break-word;\\n}\\n.break-all {\\n  word-break: break-all;\\n}\\n.rounded {\\n  border-radius: 4px;\\n}\\n.rounded-\\\\[2px\\\\] {\\n  border-radius: 2px;\\n}\\n.rounded-full {\\n  border-radius: 9999px;\\n}\\n.rounded-lg {\\n  border-radius: 8px;\\n}\\n.rounded-md {\\n  border-radius: 6px;\\n}\\n.rounded-sm {\\n  border-radius: 2px;\\n}\\n.rounded-l-sm {\\n  border-top-left-radius: 2px;\\n  border-bottom-left-radius: 2px;\\n}\\n.rounded-r-sm {\\n  border-top-right-radius: 2px;\\n  border-bottom-right-radius: 2px;\\n}\\n.rounded-t-lg {\\n  border-top-left-radius: 8px;\\n  border-top-right-radius: 8px;\\n}\\n.rounded-t-sm {\\n  border-top-left-radius: 2px;\\n  border-top-right-radius: 2px;\\n}\\n.border {\\n  border-width: 1px;\\n}\\n.border-4 {\\n  border-width: 4px;\\n}\\n.border-b {\\n  border-bottom-width: 1px;\\n}\\n.border-l-0 {\\n  border-left-width: 0px;\\n}\\n.border-l-1 {\\n  border-left-width: 1px;\\n}\\n.border-r {\\n  border-right-width: 1px;\\n}\\n.border-t {\\n  border-top-width: 1px;\\n}\\n.\\\\!border-red-500 {\\n  --tw-border-opacity: 1 !important;\\n  border-color: rgb(239 68 68 / var(--tw-border-opacity, 1)) !important;\\n}\\n.border-\\\\[\\\\#1e1e1e\\\\] {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(30 30 30 / var(--tw-border-opacity, 1));\\n}\\n.border-\\\\[\\\\#27272A\\\\] {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(39 39 42 / var(--tw-border-opacity, 1));\\n}\\n.border-\\\\[\\\\#333\\\\] {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(51 51 51 / var(--tw-border-opacity, 1));\\n}\\n.border-gray-700\\\\/50 {\\n  border-color: rgb(55 65 81 / 0.5);\\n}\\n.border-red-800\\\\/50 {\\n  border-color: rgb(153 27 27 / 0.5);\\n}\\n.border-transparent {\\n  border-color: transparent;\\n}\\n.border-white\\\\/10 {\\n  border-color: rgb(255 255 255 / 0.1);\\n}\\n.border-white\\\\/20 {\\n  border-color: rgb(255 255 255 / 0.2);\\n}\\n.border-yellow-800\\\\/50 {\\n  border-color: rgb(133 77 14 / 0.5);\\n}\\n.border-zinc-800 {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(39 39 42 / var(--tw-border-opacity, 1));\\n}\\n.bg-\\\\[\\\\#0A0A0A\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(10 10 10 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#141414\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(20 20 20 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#18181B\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(24 24 27 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#18181B\\\\]\\\\/50 {\\n  background-color: rgb(24 24 27 / 0.5);\\n}\\n.bg-\\\\[\\\\#1D3A66\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(29 58 102 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#1a2a1a\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(26 42 26 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#1e1e1e\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(30 30 30 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#214379d4\\\\] {\\n  background-color: #214379d4;\\n}\\n.bg-\\\\[\\\\#27272A\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(39 39 42 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#2a1515\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(42 21 21 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#412162\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(65 33 98 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#4b4b4b\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(75 75 75 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#5f3f9a\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(95 63 154 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#5f3f9a\\\\]\\\\/40 {\\n  background-color: rgb(95 63 154 / 0.4);\\n}\\n.bg-\\\\[\\\\#6a369e\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(106 54 158 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#7521c8\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(117 33 200 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#8e61e3\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(142 97 227 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#A284F5\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(162 132 245 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#EFD81A\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(239 216 26 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#b77116\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(183 113 22 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#b94040\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(185 64 64 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#d36cff\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(211 108 255 / var(--tw-bg-opacity, 1));\\n}\\n.bg-\\\\[\\\\#efd81a6b\\\\] {\\n  background-color: #efd81a6b;\\n}\\n.bg-black {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\\n}\\n.bg-black\\\\/40 {\\n  background-color: rgb(0 0 0 / 0.4);\\n}\\n.bg-gray-200 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity, 1));\\n}\\n.bg-gray-800 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity, 1));\\n}\\n.bg-gray-800\\\\/50 {\\n  background-color: rgb(31 41 55 / 0.5);\\n}\\n.bg-green-500\\\\/50 {\\n  background-color: rgb(34 197 94 / 0.5);\\n}\\n.bg-green-500\\\\/60 {\\n  background-color: rgb(34 197 94 / 0.6);\\n}\\n.bg-neutral-700 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(64 64 64 / var(--tw-bg-opacity, 1));\\n}\\n.bg-purple-500 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(168 85 247 / var(--tw-bg-opacity, 1));\\n}\\n.bg-purple-500\\\\/90 {\\n  background-color: rgb(168 85 247 / 0.9);\\n}\\n.bg-purple-800 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(107 33 168 / var(--tw-bg-opacity, 1));\\n}\\n.bg-red-500 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\\n}\\n.bg-red-500\\\\/90 {\\n  background-color: rgb(239 68 68 / 0.9);\\n}\\n.bg-red-900\\\\/50 {\\n  background-color: rgb(127 29 29 / 0.5);\\n}\\n.bg-red-950\\\\/40 {\\n  background-color: rgb(69 10 10 / 0.4);\\n}\\n.bg-red-950\\\\/50 {\\n  background-color: rgb(69 10 10 / 0.5);\\n}\\n.bg-transparent {\\n  background-color: transparent;\\n}\\n.bg-white {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\\n}\\n.bg-yellow-300 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\\n}\\n.bg-yellow-950\\\\/40 {\\n  background-color: rgb(66 32 6 / 0.4);\\n}\\n.bg-zinc-800 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(39 39 42 / var(--tw-bg-opacity, 1));\\n}\\n.bg-zinc-900\\\\/30 {\\n  background-color: rgb(24 24 27 / 0.3);\\n}\\n.bg-zinc-900\\\\/50 {\\n  background-color: rgb(24 24 27 / 0.5);\\n}\\n.object-contain {\\n  -o-object-fit: contain;\\n     object-fit: contain;\\n}\\n.p-0 {\\n  padding: 0px;\\n}\\n.p-1 {\\n  padding: 4px;\\n}\\n.p-1\\\\.5 {\\n  padding: 6px;\\n}\\n.p-2 {\\n  padding: 8px;\\n}\\n.p-3 {\\n  padding: 12px;\\n}\\n.p-4 {\\n  padding: 16px;\\n}\\n.p-5 {\\n  padding: 20px;\\n}\\n.p-6 {\\n  padding: 24px;\\n}\\n.px-1 {\\n  padding-left: 4px;\\n  padding-right: 4px;\\n}\\n.px-1\\\\.5 {\\n  padding-left: 6px;\\n  padding-right: 6px;\\n}\\n.px-2 {\\n  padding-left: 8px;\\n  padding-right: 8px;\\n}\\n.px-2\\\\.5 {\\n  padding-left: 10px;\\n  padding-right: 10px;\\n}\\n.px-3 {\\n  padding-left: 12px;\\n  padding-right: 12px;\\n}\\n.px-4 {\\n  padding-left: 16px;\\n  padding-right: 16px;\\n}\\n.py-0\\\\.5 {\\n  padding-top: 2px;\\n  padding-bottom: 2px;\\n}\\n.py-1 {\\n  padding-top: 4px;\\n  padding-bottom: 4px;\\n}\\n.py-1\\\\.5 {\\n  padding-top: 6px;\\n  padding-bottom: 6px;\\n}\\n.py-2 {\\n  padding-top: 8px;\\n  padding-bottom: 8px;\\n}\\n.py-3 {\\n  padding-top: 12px;\\n  padding-bottom: 12px;\\n}\\n.py-4 {\\n  padding-top: 16px;\\n  padding-bottom: 16px;\\n}\\n.py-\\\\[1px\\\\] {\\n  padding-top: 1px;\\n  padding-bottom: 1px;\\n}\\n.py-\\\\[3px\\\\] {\\n  padding-top: 3px;\\n  padding-bottom: 3px;\\n}\\n.py-\\\\[5px\\\\] {\\n  padding-top: 5px;\\n  padding-bottom: 5px;\\n}\\n.pb-2 {\\n  padding-bottom: 8px;\\n}\\n.pl-1 {\\n  padding-left: 4px;\\n}\\n.pl-1\\\\.5 {\\n  padding-left: 6px;\\n}\\n.pl-2 {\\n  padding-left: 8px;\\n}\\n.pl-2\\\\.5 {\\n  padding-left: 10px;\\n}\\n.pl-3 {\\n  padding-left: 12px;\\n}\\n.pl-5 {\\n  padding-left: 20px;\\n}\\n.pl-6 {\\n  padding-left: 24px;\\n}\\n.pl-9 {\\n  padding-left: 36px;\\n}\\n.pr-1 {\\n  padding-right: 4px;\\n}\\n.pr-2 {\\n  padding-right: 8px;\\n}\\n.pr-2\\\\.5 {\\n  padding-right: 10px;\\n}\\n.pt-0 {\\n  padding-top: 0px;\\n}\\n.pt-2 {\\n  padding-top: 8px;\\n}\\n.pt-5 {\\n  padding-top: 20px;\\n}\\n.text-left {\\n  text-align: left;\\n}\\n.font-mono {\\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;\\n}\\n.text-\\\\[10px\\\\] {\\n  font-size: 10px;\\n}\\n.text-\\\\[11px\\\\] {\\n  font-size: 11px;\\n}\\n.text-\\\\[13px\\\\] {\\n  font-size: 13px;\\n}\\n.text-\\\\[14px\\\\] {\\n  font-size: 14px;\\n}\\n.text-\\\\[17px\\\\] {\\n  font-size: 17px;\\n}\\n.text-\\\\[8px\\\\] {\\n  font-size: 8px;\\n}\\n.text-sm {\\n  font-size: 14px;\\n  line-height: 20px;\\n}\\n.text-xs {\\n  font-size: 12px;\\n  line-height: 16px;\\n}\\n.font-bold {\\n  font-weight: 700;\\n}\\n.font-medium {\\n  font-weight: 500;\\n}\\n.font-semibold {\\n  font-weight: 600;\\n}\\n.uppercase {\\n  text-transform: uppercase;\\n}\\n.lowercase {\\n  text-transform: lowercase;\\n}\\n.capitalize {\\n  text-transform: capitalize;\\n}\\n.italic {\\n  font-style: italic;\\n}\\n.leading-6 {\\n  line-height: 24px;\\n}\\n.leading-none {\\n  line-height: 1;\\n}\\n.tracking-wide {\\n  letter-spacing: 0.025em;\\n}\\n.tracking-wider {\\n  letter-spacing: 0.05em;\\n}\\n.text-\\\\[\\\\#4ade80\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(74 222 128 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#5a5a5a\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(90 90 90 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#65656D\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(101 101 109 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#666\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(102 102 102 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#6E6E77\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(110 110 119 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#6F6F78\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(111 111 120 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#7346a0\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(115 70 160 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#888\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(136 136 136 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#8E61E3\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(142 97 227 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#999\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(153 153 153 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#A1A1AA\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(161 161 170 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#A284F5\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(162 132 245 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#A855F7\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(168 85 247 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#E4E4E7\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(228 228 231 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#d36cff\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(211 108 255 / var(--tw-text-opacity, 1));\\n}\\n.text-\\\\[\\\\#f87171\\\\] {\\n  --tw-text-opacity: 1;\\n  color: rgb(248 113 113 / var(--tw-text-opacity, 1));\\n}\\n.text-black {\\n  --tw-text-opacity: 1;\\n  color: rgb(0 0 0 / var(--tw-text-opacity, 1));\\n}\\n.text-blue-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(59 130 246 / var(--tw-text-opacity, 1));\\n}\\n.text-gray-100 {\\n  --tw-text-opacity: 1;\\n  color: rgb(243 244 246 / var(--tw-text-opacity, 1));\\n}\\n.text-gray-300 {\\n  --tw-text-opacity: 1;\\n  color: rgb(209 213 219 / var(--tw-text-opacity, 1));\\n}\\n.text-gray-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(156 163 175 / var(--tw-text-opacity, 1));\\n}\\n.text-gray-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(107 114 128 / var(--tw-text-opacity, 1));\\n}\\n.text-green-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(34 197 94 / var(--tw-text-opacity, 1));\\n}\\n.text-inspect {\\n  --tw-text-opacity: 1;\\n  color: rgb(142 97 227 / var(--tw-text-opacity, 1));\\n}\\n.text-neutral-300 {\\n  --tw-text-opacity: 1;\\n  color: rgb(212 212 212 / var(--tw-text-opacity, 1));\\n}\\n.text-neutral-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(163 163 163 / var(--tw-text-opacity, 1));\\n}\\n.text-neutral-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(115 115 115 / var(--tw-text-opacity, 1));\\n}\\n.text-purple-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(192 132 252 / var(--tw-text-opacity, 1));\\n}\\n.text-red-300 {\\n  --tw-text-opacity: 1;\\n  color: rgb(252 165 165 / var(--tw-text-opacity, 1));\\n}\\n.text-red-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(248 113 113 / var(--tw-text-opacity, 1));\\n}\\n.text-red-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(239 68 68 / var(--tw-text-opacity, 1));\\n}\\n.text-white {\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n}\\n.text-white\\\\/30 {\\n  color: rgb(255 255 255 / 0.3);\\n}\\n.text-white\\\\/70 {\\n  color: rgb(255 255 255 / 0.7);\\n}\\n.text-yellow-300 {\\n  --tw-text-opacity: 1;\\n  color: rgb(253 224 71 / var(--tw-text-opacity, 1));\\n}\\n.text-yellow-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(250 204 21 / var(--tw-text-opacity, 1));\\n}\\n.text-yellow-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(234 179 8 / var(--tw-text-opacity, 1));\\n}\\n.text-zinc-200 {\\n  --tw-text-opacity: 1;\\n  color: rgb(228 228 231 / var(--tw-text-opacity, 1));\\n}\\n.text-zinc-400 {\\n  --tw-text-opacity: 1;\\n  color: rgb(161 161 170 / var(--tw-text-opacity, 1));\\n}\\n.text-zinc-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(113 113 122 / var(--tw-text-opacity, 1));\\n}\\n.text-zinc-600 {\\n  --tw-text-opacity: 1;\\n  color: rgb(82 82 91 / var(--tw-text-opacity, 1));\\n}\\n.opacity-0 {\\n  opacity: 0;\\n}\\n.opacity-100 {\\n  opacity: 1;\\n}\\n.opacity-50 {\\n  opacity: 0.5;\\n}\\n.\\\\!shadow {\\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1) !important;\\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color) !important;\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important;\\n}\\n.shadow {\\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n}\\n.shadow-lg {\\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n}\\n.outline {\\n  outline-style: solid;\\n}\\n.ring-1 {\\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\\n}\\n.ring-white\\\\/\\\\[0\\\\.08\\\\] {\\n  --tw-ring-color: rgb(255 255 255 / 0.08);\\n}\\n.blur {\\n  --tw-blur: blur(8px);\\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\\n}\\n.\\\\!filter {\\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow) !important;\\n}\\n.filter {\\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\\n}\\n.backdrop-blur-sm {\\n  --tw-backdrop-blur: blur(4px);\\n  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\\n  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\\n}\\n.transition {\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-\\\\[border-radius\\\\] {\\n  transition-property: border-radius;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-\\\\[max-height\\\\] {\\n  transition-property: max-height;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-\\\\[opacity\\\\] {\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-\\\\[transform\\\\2c color\\\\] {\\n  transition-property: transform,color;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-all {\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-colors {\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-none {\\n  transition-property: none;\\n}\\n.transition-opacity {\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.transition-transform {\\n  transition-property: transform;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n}\\n.delay-0 {\\n  transition-delay: 0s;\\n}\\n.delay-150 {\\n  transition-delay: 150ms;\\n}\\n.delay-300 {\\n  transition-delay: 300ms;\\n}\\n.duration-0 {\\n  transition-duration: 0s;\\n}\\n.duration-200 {\\n  transition-duration: 200ms;\\n}\\n.duration-300 {\\n  transition-duration: 300ms;\\n}\\n.ease-\\\\[cubic-bezier\\\\(0\\\\.23\\\\2c 1\\\\2c 0\\\\.32\\\\2c 1\\\\)\\\\] {\\n  transition-timing-function: cubic-bezier(0.23,1,0.32,1);\\n}\\n.ease-\\\\[cubic-bezier\\\\(0\\\\.25\\\\2c 0\\\\.1\\\\2c 0\\\\.25\\\\2c 1\\\\)\\\\] {\\n  transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);\\n}\\n.ease-in-out {\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n}\\n.ease-out {\\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\\n}\\n.will-change-transform {\\n  will-change: transform;\\n}\\n.animation-duration-300 {\\n  animation-duration: .3s;\\n}\\n.animation-delay-300 {\\n  animation-delay: .3s;\\n}\\n\\n* {\\n  outline: none !important;\\n  text-rendering: optimizeLegibility;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n  backface-visibility: hidden;\\n\\n  /* WebKit (Chrome, Safari, Edge) specific scrollbar styles */\\n  &::-webkit-scrollbar {\\n    width: 6px;\\n    height: 6px;\\n  }\\n\\n  &::-webkit-scrollbar-track {\\n    border-radius: 10px;\\n    background: transparent;\\n  }\\n\\n  &::-webkit-scrollbar-thumb {\\n    border-radius: 10px;\\n    background: rgba(255, 255, 255, 0.3);\\n  }\\n\\n  &::-webkit-scrollbar-thumb:hover {\\n    background: rgba(255, 255, 255, .4);\\n  }\\n\\n  &::-webkit-scrollbar-corner {\\n    background: transparent;\\n  }\\n}\\n\\n@-moz-document url-prefix() {\\n  * {\\n    scrollbar-width: thin;\\n    scrollbar-color: rgba(255, 255, 255, 0.4) transparent;\\n    scrollbar-width: 6px;\\n  }\\n}\\n\\n\\nbutton:hover {\\n  background-image: none;\\n}\\n\\n\\nbutton {\\n  outline: 2px solid transparent;\\n  outline-offset: 2px;\\n  border-style: none;\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n  transition-timing-function: linear;\\n  cursor: pointer;\\n}\\n\\ninput {\\n  border-style: none;\\n  background-color: transparent;\\n  background-image: none;\\n  outline: 2px solid transparent;\\n  outline-offset: 2px;\\n}\\n\\ninput::-moz-placeholder {\\n  font-size: 12px;\\n  line-height: 16px;\\n  font-style: italic;\\n  --tw-text-opacity: 1;\\n  color: rgb(115 115 115 / var(--tw-text-opacity, 1));\\n}\\n\\ninput::placeholder {\\n  font-size: 12px;\\n  line-height: 16px;\\n  font-style: italic;\\n  --tw-text-opacity: 1;\\n  color: rgb(115 115 115 / var(--tw-text-opacity, 1));\\n}\\n\\ninput:-moz-placeholder-shown {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\ninput:placeholder-shown {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\nsvg {\\n  height: auto;\\n  width: auto;\\n  pointer-events: none;\\n}\\n\\n/*\\n  Using CSS content with data attributes is more performant than:\\n  1. React re-renders with JSX text content\\n  2. Direct DOM manipulation methods:\\n     - element.textContent (creates/updates text nodes, triggers repaint)\\n     - element.innerText (triggers reflow by computing styles & layout)\\n     - element.innerHTML (heavy parsing, triggers reflow, security risks)\\n  3. Multiple data attributes with complex CSS concatenation\\n\\n  This approach:\\n  - Avoids React reconciliation\\n  - Uses browser\\'s native CSS engine (optimized content updates)\\n  - Minimizes main thread work\\n  - Reduces DOM operations\\n  - Avoids forced reflows (layout recalculation)\\n  - Only triggers necessary repaints\\n  - Keeps pseudo-element updates in render layer\\n*/\\n.with-data-text {\\n  overflow: hidden;\\n  &::before {\\n    content: attr(data-text);\\n  }\\n  &::before {\\n    display: block;\\n  }\\n  &::before {\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n  }\\n}\\n\\n#react-scan-toolbar {\\n  position: fixed;\\n  left: 0px;\\n  top: 0px;\\n  display: flex;\\n  flex-direction: column;\\n  border-radius: 8px;\\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;\\n  font-size: 13px;\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n          user-select: none;\\n  cursor: move;\\n  opacity: 0;\\n  z-index: 2147483678;\\n}\\n\\n@keyframes fadeIn {\\n\\n  0% {\\n    opacity: 0;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n#react-scan-toolbar {\\n  animation: fadeIn ease-in forwards;\\n  animation-duration: .3s;\\n  animation-delay: .3s;\\n  --tw-shadow: 0 4px 12px rgba(0,0,0,0.2);\\n  --tw-shadow-colored: 0 4px 12px var(--tw-shadow-color);\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n  place-self: start;\\n}\\n\\n.button {\\n  &:hover {\\n    background: rgba(255, 255, 255, 0.1);\\n  }\\n\\n  &:active {\\n    background: rgba(255, 255, 255, 0.15);\\n  }\\n}\\n\\n.resize-line-wrapper {\\n  position: absolute;\\n  overflow: hidden;\\n}\\n\\n.resize-line {\\n  position: absolute;\\n  inset: 0px;\\n  overflow: hidden;\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n\\n  svg {\\n    position: absolute;\\n  }\\n\\n  svg {\\n    top: 50%;\\n  }\\n\\n  svg {\\n    left: 50%;\\n  }\\n\\n  svg {\\n    --tw-translate-x: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  svg {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.resize-right,\\n.resize-left {\\n  top: 0px;\\n  bottom: 0px;\\n  width: 24px;\\n  cursor: ew-resize;\\n\\n  .resize-line-wrapper {\\n    top: 0px;\\n    bottom: 0px;\\n  }\\n\\n  .resize-line-wrapper {\\n    width: 50%;\\n  }\\n\\n  &:hover {\\n    .resize-line {\\n      --tw-translate-x: 0px;\\n      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n    }\\n  }\\n}\\n.resize-right {\\n  right: 0px;\\n  --tw-translate-x: 50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n\\n  .resize-line-wrapper {\\n    right: 0px;\\n  }\\n  .resize-line {\\n    border-top-right-radius: 8px;\\n    border-bottom-right-radius: 8px;\\n  }\\n  .resize-line {\\n    --tw-translate-x: -100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.resize-left {\\n  left: 0px;\\n  --tw-translate-x: -50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n\\n  .resize-line-wrapper {\\n    left: 0px;\\n  }\\n  .resize-line {\\n    border-top-left-radius: 8px;\\n    border-bottom-left-radius: 8px;\\n  }\\n  .resize-line {\\n    --tw-translate-x: 100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.resize-top,\\n.resize-bottom {\\n  left: 0px;\\n  right: 0px;\\n  height: 24px;\\n  cursor: ns-resize;\\n\\n  .resize-line-wrapper {\\n    left: 0px;\\n    right: 0px;\\n  }\\n\\n  .resize-line-wrapper {\\n    height: 50%;\\n  }\\n\\n  &:hover {\\n    .resize-line {\\n      --tw-translate-y: 0px;\\n      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n    }\\n  }\\n}\\n.resize-top {\\n  top: 0px;\\n  --tw-translate-y: -50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n\\n  .resize-line-wrapper {\\n    top: 0px;\\n  }\\n  .resize-line {\\n    border-top-left-radius: 8px;\\n    border-top-right-radius: 8px;\\n  }\\n  .resize-line {\\n    --tw-translate-y: 100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.resize-bottom {\\n  bottom: 0px;\\n  --tw-translate-y: 50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n\\n  .resize-line-wrapper {\\n    bottom: 0px;\\n  }\\n  .resize-line {\\n    border-bottom-right-radius: 8px;\\n    border-bottom-left-radius: 8px;\\n  }\\n  .resize-line {\\n    --tw-translate-y: -100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.react-scan-header {\\n  display: flex;\\n  align-items: center;\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n  padding-left: 12px;\\n  padding-right: 8px;\\n  min-height: 36px;\\n  border-bottom-width: 1px;\\n  border-color: rgb(255 255 255 / 0.1);\\n  overflow: hidden;\\n  white-space: nowrap;\\n}\\n\\n.react-scan-replay-button,\\n.react-scan-close-button {\\n  display: flex;\\n  align-items: center;\\n  padding: 4px;\\n  min-width: -moz-fit-content;\\n  min-width: fit-content;\\n  border-radius: 4px;\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 300ms;\\n}\\n\\n.react-scan-replay-button {\\n  position: relative;\\n  overflow: hidden;\\n  background-color: rgb(168 85 247 / 0.5) !important;\\n\\n  &:hover {\\n    background-color: rgb(168 85 247 / 0.25);\\n  }\\n\\n  &.disabled {\\n    opacity: 0.5;\\n  }\\n\\n  &.disabled {\\n    pointer-events: none;\\n  }\\n\\n  &:before {\\n    content: \\'\\';\\n  }\\n\\n  &:before {\\n    position: absolute;\\n  }\\n\\n  &:before {\\n    inset: 0px;\\n  }\\n\\n  &:before {\\n    --tw-translate-x: -100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  &:before {\\n    animation: shimmer 2s infinite;\\n    background: linear-gradient(to right,\\n      transparent,\\n      rgba(142, 97, 227, 0.3),\\n      transparent);\\n  }\\n}\\n\\n.react-scan-close-button {\\n  background-color: rgb(255 255 255 / 0.1);\\n\\n  &:hover {\\n    background-color: rgb(255 255 255 / 0.15);\\n  }\\n}\\n\\n@keyframes shimmer {\\n  100% {\\n    --tw-translate-x: 100%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n}\\n\\n.react-section-header {\\n  position: sticky;\\n  z-index: 100;\\n  display: flex;\\n  align-items: center;\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n  padding-left: 12px;\\n  padding-right: 12px;\\n  height: 32px;\\n  width: 100%;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  --tw-text-opacity: 1;\\n  color: rgb(136 136 136 / var(--tw-text-opacity, 1));\\n  border-bottom-width: 1px;\\n  --tw-border-opacity: 1;\\n  border-color: rgb(34 34 34 / var(--tw-border-opacity, 1));\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(10 10 10 / var(--tw-bg-opacity, 1));\\n}\\n\\n.react-scan-section {\\n  display: flex;\\n  flex-direction: column;\\n  padding-left: 8px;\\n  padding-right: 8px;\\n  --tw-text-opacity: 1;\\n  color: rgb(136 136 136 / var(--tw-text-opacity, 1));\\n}\\n\\n.react-scan-section::before {\\n  --tw-text-opacity: 1;\\n  color: rgb(107 114 128 / var(--tw-text-opacity, 1));\\n  --tw-content: attr(data-section);\\n  content: var(--tw-content);\\n}\\n\\n.react-scan-section {\\n  font-size: 12px;\\n  line-height: 16px;\\n\\n  > .react-scan-property {\\n    margin-left: -14px;\\n  }\\n}\\n\\n.react-scan-property {\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  padding-left: 32px;\\n  border-left-width: 1px;\\n  border-color: transparent;\\n  overflow: hidden;\\n}\\n\\n.react-scan-property-content {\\n  display: flex;\\n  flex: 1 1 0%;\\n  flex-direction: column;\\n  min-height: 24px;\\n  padding-top: 4px;\\n  padding-bottom: 4px;\\n  max-width: 100%;\\n  overflow: hidden;\\n}\\n\\n.react-scan-string {\\n  color: #9ecbff;\\n}\\n\\n.react-scan-number {\\n  color: #79c7ff;\\n}\\n\\n.react-scan-boolean {\\n  color: #56b6c2;\\n}\\n\\n.react-scan-key {\\n  width: -moz-fit-content;\\n  width: fit-content;\\n  max-width: 240px;\\n  white-space: nowrap;\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n}\\n\\n.react-scan-input {\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\\n}\\n\\n@keyframes blink {\\n  from {\\n    opacity: 1;\\n  }\\n  to {\\n    opacity: 0;\\n  }\\n}\\n\\n.react-scan-arrow {\\n  position: absolute;\\n  top: 4px;\\n  left: 28px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  cursor: pointer;\\n  height: 24px;\\n  width: 24px;\\n  --tw-translate-x: -100%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  z-index: 10;\\n\\n  > svg {\\n    transition-property: transform;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n}\\n\\n.react-scan-expandable {\\n  display: grid;\\n  grid-template-rows: 0fr;\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 75ms;\\n\\n  &.react-scan-expanded {\\n    grid-template-rows: 1fr;\\n  }\\n\\n  &.react-scan-expanded {\\n    transition-duration: 100ms;\\n  }\\n}\\n\\n.react-scan-nested {\\n  position: relative;\\n  overflow: hidden;\\n\\n  &:before {\\n    content: \\'\\';\\n  }\\n\\n  &:before {\\n    position: absolute;\\n  }\\n\\n  &:before {\\n    top: 0px;\\n  }\\n\\n  &:before {\\n    left: 0px;\\n  }\\n\\n  &:before {\\n    height: 100%;\\n  }\\n\\n  &:before {\\n    width: 1px;\\n  }\\n\\n  &:before {\\n    background-color: rgb(107 114 128 / 0.3);\\n  }\\n}\\n\\n.react-scan-settings {\\n  position: absolute;\\n  inset: 0px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n  padding-top: 8px;\\n  padding-bottom: 8px;\\n  padding-left: 16px;\\n  padding-right: 16px;\\n  --tw-text-opacity: 1;\\n  color: rgb(136 136 136 / var(--tw-text-opacity, 1));\\n\\n  >div {\\n    display: flex;\\n  }\\n\\n  >div {\\n    align-items: center;\\n  }\\n\\n  >div {\\n    justify-content: space-between;\\n  }\\n\\n  >div {\\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  >div {\\n    transition-duration: 300ms;\\n  }\\n}\\n\\n.react-scan-preview-line {\\n  position: relative;\\n  display: flex;\\n  min-height: 24px;\\n  align-items: center;\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n}\\n\\n.react-scan-flash-overlay {\\n  position: absolute;\\n  inset: 0px;\\n  opacity: 0;\\n  z-index: 50;\\n  pointer-events: none;\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n  mix-blend-mode: multiply;\\n  background-color: rgb(168 85 247 / 0.9);\\n}\\n\\n.react-scan-toggle {\\n  position: relative;\\n  display: inline-block;\\n  height: 24px;\\n  width: 40px;\\n\\n  input {\\n    position: absolute;\\n  }\\n\\n  input {\\n    inset: 0px;\\n  }\\n\\n  input {\\n    z-index: 20;\\n  }\\n\\n  input {\\n    opacity: 0;\\n  }\\n\\n  input {\\n    cursor: pointer;\\n  }\\n\\n  input:checked {\\n    +div {\\n      --tw-bg-opacity: 1;\\n      background-color: rgb(95 63 154 / var(--tw-bg-opacity, 1));\\n    }\\n    +div {\\n\\n      &::before {\\n        --tw-translate-x: 100%;\\n        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n      }\\n\\n      &::before {\\n        left: auto;\\n      }\\n\\n      &::before {\\n        --tw-border-opacity: 1;\\n        border-color: rgb(95 63 154 / var(--tw-border-opacity, 1));\\n      }\\n    }\\n  }\\n\\n  >div {\\n    position: absolute;\\n  }\\n\\n  >div {\\n    inset: 4px;\\n  }\\n\\n  >div {\\n    --tw-bg-opacity: 1;\\n    background-color: rgb(64 64 64 / var(--tw-bg-opacity, 1));\\n  }\\n\\n  >div {\\n    border-radius: 9999px;\\n  }\\n\\n  >div {\\n    pointer-events: none;\\n  }\\n\\n  >div {\\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  >div {\\n    transition-duration: 300ms;\\n  }\\n\\n  >div {\\n\\n    &:before {\\n      --tw-content: \\'\\';\\n      content: var(--tw-content);\\n    }\\n\\n    &:before {\\n      position: absolute;\\n    }\\n\\n    &:before {\\n      top: 50%;\\n    }\\n\\n    &:before {\\n      left: 0px;\\n    }\\n\\n    &:before {\\n      --tw-translate-y: -50%;\\n      transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n    }\\n\\n    &:before {\\n      height: 16px;\\n    }\\n\\n    &:before {\\n      width: 16px;\\n    }\\n\\n    &:before {\\n      --tw-bg-opacity: 1;\\n      background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\\n    }\\n\\n    &:before {\\n      border-width: 2px;\\n    }\\n\\n    &:before {\\n      --tw-border-opacity: 1;\\n      border-color: rgb(64 64 64 / var(--tw-border-opacity, 1));\\n    }\\n\\n    &:before {\\n      border-radius: 9999px;\\n    }\\n\\n    &:before {\\n      --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\\n      --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\\n      box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\n    }\\n\\n    &:before {\\n      transition-property: all;\\n      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n      transition-duration: 150ms;\\n    }\\n\\n    &:before {\\n      transition-duration: 300ms;\\n    }\\n  }\\n}\\n\\n.react-scan-flash-active {\\n  opacity: 0.4;\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 300ms;\\n}\\n\\n.react-scan-inspector-overlay {\\n  display: flex;\\n  flex-direction: column;\\n  opacity: 0;\\n  transition-property: opacity;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 300ms;\\n\\n  &.fade-out {\\n    opacity: 0;\\n  }\\n\\n  &.fade-in {\\n    opacity: 1;\\n  }\\n}\\n\\n.react-scan-what-changed {\\n  ul {\\n    list-style-type: disc;\\n  }\\n  ul {\\n    padding-left: 16px;\\n  }\\n\\n  li {\\n    white-space: nowrap;\\n  }\\n\\n  li {\\n    > div {\\n      display: flex;\\n    }\\n    > div {\\n      align-items: center;\\n    }\\n    > div {\\n      justify-content: space-between;\\n    }\\n    > div {\\n      -moz-column-gap: 8px;\\n           column-gap: 8px;\\n    }\\n  }\\n}\\n\\n.count-badge {\\n  display: flex;\\n  align-items: center;\\n  -moz-column-gap: 8px;\\n       column-gap: 8px;\\n  padding-left: 6px;\\n  padding-right: 6px;\\n  padding-top: 2px;\\n  padding-bottom: 2px;\\n  border-radius: 4px;\\n  font-size: 12px;\\n  line-height: 16px;\\n  font-weight: 500;\\n  --tw-numeric-spacing: tabular-nums;\\n  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);\\n  --tw-text-opacity: 1;\\n  color: rgb(168 85 247 / var(--tw-text-opacity, 1));\\n  background-color: rgb(168 85 247 / 0.1);\\n  transform-origin: center;\\n  transition-property: all;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-delay: 150ms;\\n  transition-duration: 300ms;\\n}\\n\\n@keyframes countFlash {\\n\\n  0% {\\n    background-color: rgba(168, 85, 247, 0.3);\\n    transform: scale(1.05);\\n  }\\n\\n  100% {\\n    background-color: rgba(168, 85, 247, 0.1);\\n    transform: scale(1);\\n  }\\n}\\n\\n.count-flash {\\n  animation: countFlash .3s ease-out forwards;\\n}\\n\\n@keyframes countFlashShake {\\n\\n  0% {\\n    transform: translateX(0);\\n  }\\n\\n  25% {\\n    transform: translateX(-5px);\\n  }\\n\\n  50% {\\n    transform: translateX(5px) scale(1.1);\\n  }\\n\\n  75% {\\n    transform: translateX(-5px);\\n  }\\n\\n  100% {\\n    transform: translateX(0);\\n  }\\n}\\n\\n.count-flash-white {\\n  animation: countFlashShake .3s ease-out forwards;\\n  transition-delay: 500ms !important;\\n}\\n\\n.change-scope {\\n  display: flex;\\n  align-items: center;\\n  -moz-column-gap: 4px;\\n       column-gap: 4px;\\n  --tw-text-opacity: 1;\\n  color: rgb(102 102 102 / var(--tw-text-opacity, 1));\\n  font-size: 12px;\\n  line-height: 16px;\\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;\\n\\n  > div {\\n    padding-left: 6px;\\n    padding-right: 6px;\\n  }\\n\\n  > div {\\n    padding-top: 2px;\\n    padding-bottom: 2px;\\n  }\\n\\n  > div {\\n    transform-origin: center;\\n  }\\n\\n  > div {\\n    border-radius: 4px;\\n  }\\n\\n  > div {\\n    font-size: 12px;\\n    line-height: 16px;\\n  }\\n\\n  > div {\\n    font-weight: 500;\\n  }\\n\\n  > div {\\n    --tw-numeric-spacing: tabular-nums;\\n    font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);\\n  }\\n\\n  > div {\\n    transform-origin: center;\\n  }\\n\\n  > div {\\n    transition-property: all;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  > div {\\n    transition-delay: 150ms;\\n  }\\n\\n  > div {\\n    transition-duration: 300ms;\\n  }\\n\\n  > div {\\n\\n    &[data-flash=\"true\"] {\\n      background-color: rgb(168 85 247 / 0.1);\\n    }\\n\\n    &[data-flash=\"true\"] {\\n      --tw-text-opacity: 1;\\n      color: rgb(168 85 247 / var(--tw-text-opacity, 1));\\n    }\\n  }\\n}\\n\\n.react-scan-slider {\\n  position: relative;\\n  min-height: 24px;\\n\\n  > input {\\n    position: absolute;\\n  }\\n\\n  > input {\\n    inset: 0px;\\n  }\\n\\n  > input {\\n    opacity: 0;\\n  }\\n\\n  &:before {\\n    --tw-content: \\'\\';\\n    content: var(--tw-content);\\n  }\\n\\n  &:before {\\n    position: absolute;\\n  }\\n\\n  &:before {\\n    left: 0px;\\n    right: 0px;\\n  }\\n\\n  &:before {\\n    top: 50%;\\n  }\\n\\n  &:before {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  &:before {\\n    height: 6px;\\n  }\\n\\n  &:before {\\n    background-color: rgb(142 97 227 / 0.4);\\n  }\\n\\n  &:before {\\n    border-radius: 8px;\\n  }\\n\\n  &:before {\\n    pointer-events: none;\\n  }\\n\\n  &:after {\\n    --tw-content: \\'\\';\\n    content: var(--tw-content);\\n  }\\n\\n  &:after {\\n    position: absolute;\\n  }\\n\\n  &:after {\\n    left: 0px;\\n    right: 0px;\\n  }\\n\\n  &:after {\\n    top: -8px;\\n    bottom: -8px;\\n  }\\n\\n  &:after {\\n    z-index: -10;\\n  }\\n\\n  span {\\n    position: absolute;\\n  }\\n\\n  span {\\n    left: 0px;\\n  }\\n\\n  span {\\n    top: 50%;\\n  }\\n\\n  span {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  span {\\n    height: 10px;\\n  }\\n\\n  span {\\n    width: 10px;\\n  }\\n\\n  span {\\n    border-radius: 8px;\\n  }\\n\\n  span {\\n    --tw-bg-opacity: 1;\\n    background-color: rgb(142 97 227 / var(--tw-bg-opacity, 1));\\n  }\\n\\n  span {\\n    pointer-events: none;\\n  }\\n\\n  span {\\n    transition-property: transform;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  span {\\n    transition-duration: 75ms;\\n  }\\n}\\n\\n.resize-v-line {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  min-width: 20px;\\n  max-width: 20px;\\n  height: 100%;\\n  width: 100%;\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n  transition-duration: 150ms;\\n  cursor: col-resize;\\n\\n  &:hover,\\n  &:active {\\n    > span {\\n      background-color: rgb(255 255 255 / 0.1);\\n    }\\n\\n    svg {\\n      opacity: 1;\\n    }\\n  }\\n\\n  &::before {\\n    --tw-content: \"\";\\n    content: var(--tw-content);\\n  }\\n\\n  &::before {\\n    position: absolute;\\n  }\\n\\n  &::before {\\n    inset: 0px;\\n  }\\n\\n  &::before {\\n    left: 50%;\\n  }\\n\\n  &::before {\\n    --tw-translate-x: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  &::before {\\n    width: 1px;\\n  }\\n\\n  &::before {\\n    background-color: rgb(255 255 255 / 0.1);\\n  }\\n\\n  &::before {\\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  > span {\\n    position: absolute;\\n  }\\n\\n  > span {\\n    left: 50%;\\n  }\\n\\n  > span {\\n    top: 50%;\\n  }\\n\\n  > span {\\n    --tw-translate-x: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  > span {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  > span {\\n    height: 18px;\\n  }\\n\\n  > span {\\n    width: 6px;\\n  }\\n\\n  > span {\\n    border-radius: 4px;\\n  }\\n\\n  > span {\\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  svg {\\n    position: absolute;\\n  }\\n\\n  svg {\\n    left: 50%;\\n  }\\n\\n  svg {\\n    top: 50%;\\n  }\\n\\n  svg {\\n    --tw-translate-x: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  svg {\\n    --tw-translate-y: -50%;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  svg {\\n    --tw-rotate: 90deg;\\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n  }\\n\\n  svg {\\n    --tw-text-opacity: 1;\\n    color: rgb(163 163 163 / var(--tw-text-opacity, 1));\\n  }\\n\\n  svg {\\n    opacity: 0;\\n  }\\n\\n  svg {\\n    transition-property: opacity;\\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transition-duration: 150ms;\\n  }\\n\\n  svg {\\n    z-index: 50;\\n  }\\n}\\n\\n\\n.tree-node-search-highlight {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n\\n  span {\\n    padding-top: 1px;\\n    padding-bottom: 1px;\\n  }\\n\\n  span {\\n    border-radius: 2px;\\n  }\\n\\n  span {\\n    --tw-bg-opacity: 1;\\n    background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\\n  }\\n\\n  span {\\n    font-weight: 500;\\n  }\\n\\n  span {\\n    --tw-text-opacity: 1;\\n    color: rgb(0 0 0 / var(--tw-text-opacity, 1));\\n  }\\n\\n  .single {\\n    margin-right: 1px;\\n  }\\n\\n  .single {\\n    padding-left: 2px;\\n    padding-right: 2px;\\n  }\\n\\n  .regex {\\n    padding-left: 2px;\\n    padding-right: 2px;\\n  }\\n\\n  .start {\\n    margin-left: 1px;\\n  }\\n\\n  .start {\\n    border-top-left-radius: 2px;\\n    border-bottom-left-radius: 2px;\\n  }\\n\\n  .end {\\n    margin-right: 1px;\\n  }\\n\\n  .end {\\n    border-top-right-radius: 2px;\\n    border-bottom-right-radius: 2px;\\n  }\\n\\n  .middle {\\n    margin-left: 1px;\\n    margin-right: 1px;\\n  }\\n\\n  .middle {\\n    border-radius: 2px;\\n  }\\n}\\n\\n\\n.before\\\\:absolute::before {\\n  content: var(--tw-content);\\n  position: absolute;\\n}\\n\\n\\n.before\\\\:inset-x-0::before {\\n  content: var(--tw-content);\\n  left: 0px;\\n  right: 0px;\\n}\\n\\n\\n.before\\\\:bottom-0::before {\\n  content: var(--tw-content);\\n  bottom: 0px;\\n}\\n\\n\\n.before\\\\:h-\\\\[1px\\\\]::before {\\n  content: var(--tw-content);\\n  height: 1px;\\n}\\n\\n\\n.before\\\\:bg-\\\\[\\\\#333\\\\]::before {\\n  content: var(--tw-content);\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(51 51 51 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.before\\\\:content-\\\\[\\\\\"\\\\\"\\\\]::before {\\n  --tw-content: \"\";\\n  content: var(--tw-content);\\n}\\n\\n\\n.after\\\\:absolute::after {\\n  content: var(--tw-content);\\n  position: absolute;\\n}\\n\\n\\n.after\\\\:inset-0::after {\\n  content: var(--tw-content);\\n  inset: 0px;\\n}\\n\\n\\n.after\\\\:left-1\\\\/2::after {\\n  content: var(--tw-content);\\n  left: 50%;\\n}\\n\\n\\n.after\\\\:top-\\\\[100\\\\%\\\\]::after {\\n  content: var(--tw-content);\\n  top: 100%;\\n}\\n\\n\\n.after\\\\:h-\\\\[6px\\\\]::after {\\n  content: var(--tw-content);\\n  height: 6px;\\n}\\n\\n\\n.after\\\\:w-\\\\[10px\\\\]::after {\\n  content: var(--tw-content);\\n  width: 10px;\\n}\\n\\n\\n.after\\\\:-translate-x-1\\\\/2::after {\\n  content: var(--tw-content);\\n  --tw-translate-x: -50%;\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n}\\n\\n\\n@keyframes fadeOut {\\n\\n  0% {\\n    content: var(--tw-content);\\n    opacity: 1;\\n  }\\n\\n  100% {\\n    content: var(--tw-content);\\n    opacity: 0;\\n  }\\n}\\n\\n\\n.after\\\\:animate-\\\\[fadeOut_1s_ease-out_forwards\\\\]::after {\\n  content: var(--tw-content);\\n  animation: fadeOut 1s ease-out forwards;\\n}\\n\\n\\n.after\\\\:border-l-\\\\[5px\\\\]::after {\\n  content: var(--tw-content);\\n  border-left-width: 5px;\\n}\\n\\n\\n.after\\\\:border-r-\\\\[5px\\\\]::after {\\n  content: var(--tw-content);\\n  border-right-width: 5px;\\n}\\n\\n\\n.after\\\\:border-t-\\\\[6px\\\\]::after {\\n  content: var(--tw-content);\\n  border-top-width: 6px;\\n}\\n\\n\\n.after\\\\:border-l-transparent::after {\\n  content: var(--tw-content);\\n  border-left-color: transparent;\\n}\\n\\n\\n.after\\\\:border-r-transparent::after {\\n  content: var(--tw-content);\\n  border-right-color: transparent;\\n}\\n\\n\\n.after\\\\:border-t-white::after {\\n  content: var(--tw-content);\\n  --tw-border-opacity: 1;\\n  border-top-color: rgb(255 255 255 / var(--tw-border-opacity, 1));\\n}\\n\\n\\n.after\\\\:bg-purple-500\\\\/30::after {\\n  content: var(--tw-content);\\n  background-color: rgb(168 85 247 / 0.3);\\n}\\n\\n\\n.after\\\\:content-\\\\[\\\\\"\\\\\"\\\\]::after {\\n  --tw-content: \"\";\\n  content: var(--tw-content);\\n}\\n\\n\\n.focus-within\\\\:border-\\\\[\\\\#454545\\\\]:focus-within {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(69 69 69 / var(--tw-border-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#0f0f0f\\\\]:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(15 15 15 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#18181B\\\\]:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(24 24 27 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#34343b\\\\]:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(52 52 59 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#5f3f9a\\\\]\\\\/20:hover {\\n  background-color: rgb(95 63 154 / 0.2);\\n}\\n\\n\\n.hover\\\\:bg-\\\\[\\\\#5f3f9a\\\\]\\\\/40:hover {\\n  background-color: rgb(95 63 154 / 0.4);\\n}\\n\\n\\n.hover\\\\:bg-red-600:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(220 38 38 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-red-900\\\\/70:hover {\\n  background-color: rgb(127 29 29 / 0.7);\\n}\\n\\n\\n.hover\\\\:bg-white\\\\/5:hover {\\n  background-color: rgb(255 255 255 / 0.05);\\n}\\n\\n\\n.hover\\\\:bg-zinc-700:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(63 63 70 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.hover\\\\:bg-zinc-800\\\\/50:hover {\\n  background-color: rgb(39 39 42 / 0.5);\\n}\\n\\n\\n.hover\\\\:text-gray-300:hover {\\n  --tw-text-opacity: 1;\\n  color: rgb(209 213 219 / var(--tw-text-opacity, 1));\\n}\\n\\n\\n.hover\\\\:text-neutral-300:hover {\\n  --tw-text-opacity: 1;\\n  color: rgb(212 212 212 / var(--tw-text-opacity, 1));\\n}\\n\\n\\n.hover\\\\:text-white:hover {\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\n}\\n\\n\\n.focus\\\\:ring-\\\\[\\\\#A284F5\\\\]:focus {\\n  --tw-ring-opacity: 1;\\n  --tw-ring-color: rgb(162 132 245 / var(--tw-ring-opacity, 1));\\n}\\n\\n\\n.focus\\\\:ring-offset-0:focus {\\n  --tw-ring-offset-width: 0px;\\n}\\n\\n\\n.group:hover .group-hover\\\\:bg-\\\\[\\\\#21437982\\\\] {\\n  background-color: #21437982;\\n}\\n\\n\\n.group:hover .group-hover\\\\:bg-\\\\[\\\\#272727\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(39 39 39 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.group:hover .group-hover\\\\:bg-\\\\[\\\\#5b2d89\\\\] {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(91 45 137 / var(--tw-bg-opacity, 1));\\n}\\n\\n\\n.group:hover .group-hover\\\\:bg-\\\\[\\\\#efda1a2f\\\\] {\\n  background-color: #efda1a2f;\\n}\\n\\n\\n.group:hover .group-hover\\\\:opacity-100 {\\n  opacity: 1;\\n}\\n\\n\\n.peer\\\\/bottom:hover ~ .peer-hover\\\\/bottom\\\\:rounded-b-none {\\n  border-bottom-right-radius: 0px;\\n  border-bottom-left-radius: 0px;\\n}\\n\\n\\n.peer\\\\/left:hover ~ .peer-hover\\\\/left\\\\:rounded-l-none {\\n  border-top-left-radius: 0px;\\n  border-bottom-left-radius: 0px;\\n}\\n\\n\\n.peer\\\\/right:hover ~ .peer-hover\\\\/right\\\\:rounded-r-none {\\n  border-top-right-radius: 0px;\\n  border-bottom-right-radius: 0px;\\n}\\n\\n\\n.peer\\\\/top:hover ~ .peer-hover\\\\/top\\\\:rounded-t-none {\\n  border-top-left-radius: 0px;\\n  border-top-right-radius: 0px;\\n}\\n';\n// src/web/assets/svgs/svgs.ts\nvar ICONS = `\n<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n  <symbol id=\"icon-inspect\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z\"/>\n    <path d=\"M5 3a2 2 0 0 0-2 2\"/>\n    <path d=\"M19 3a2 2 0 0 1 2 2\"/>\n    <path d=\"M5 21a2 2 0 0 1-2-2\"/>\n    <path d=\"M9 3h1\"/>\n    <path d=\"M9 21h2\"/>\n    <path d=\"M14 3h1\"/>\n    <path d=\"M3 9v1\"/>\n    <path d=\"M21 9v2\"/>\n    <path d=\"M3 14v1\"/>\n  </symbol>\n\n  <symbol id=\"icon-focus\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z\"/>\n    <path d=\"M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6\"/>\n  </symbol>\n\n  <symbol id=\"icon-next\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M6 9h6V5l7 7-7 7v-4H6V9z\"/>\n  </symbol>\n\n  <symbol id=\"icon-previous\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M18 15h-6v4l-7-7 7-7v4h6v6z\"/>\n  </symbol>\n\n  <symbol id=\"icon-close\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\n    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\n  </symbol>\n\n  <symbol id=\"icon-replay\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M3 7V5a2 2 0 0 1 2-2h2\"/>\n    <path d=\"M17 3h2a2 2 0 0 1 2 2v2\"/>\n    <path d=\"M21 17v2a2 2 0 0 1-2 2h-2\"/>\n    <path d=\"M7 21H5a2 2 0 0 1-2-2v-2\"/>\n    <circle cx=\"12\" cy=\"12\" r=\"1\"/>\n    <path d=\"M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0\"/>\n  </symbol>\n\n  <symbol id=\"icon-ellipsis\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <circle cx=\"12\" cy=\"12\" r=\"1\"/>\n    <circle cx=\"19\" cy=\"12\" r=\"1\"/>\n    <circle cx=\"5\" cy=\"12\" r=\"1\"/>\n  </symbol>\n\n  <symbol id=\"icon-copy\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\"/>\n    <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"/>\n  </symbol>\n\n  <symbol id=\"icon-check\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M20 6 9 17l-5-5\"/>\n  </symbol>\n\n  <symbol id=\"icon-chevron-right\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"m9 18 6-6-6-6\"/>\n  </symbol>\n\n  <symbol id=\"icon-settings\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\"/><circle cx=\"12\" cy=\"12\" r=\"3\" />\n  </symbol>\n\n  <symbol id=\"icon-flame\" viewBox=\"0 0 24 24\">\n    <path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/>\n  </symbol>\n\n  <symbol id=\"icon-function\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\"/>\n    <path d=\"M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3\"/>\n    <path d=\"M9 11.2h5.7\"/>\n  </symbol>\n\n  <symbol id=\"icon-triangle-alert\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3\"/>\n    <path d=\"M12 9v4\"/>\n    <path d=\"M12 17h.01\"/>\n  </symbol>\n\n  <symbol id=\"icon-gallery-horizontal-end\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M2 7v10\"/><path d=\"M6 5v14\"/>\n    <rect width=\"12\" height=\"18\" x=\"10\" y=\"3\" rx=\"2\"/>\n  </symbol>\n\n  <symbol id=\"icon-search\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <circle cx=\"11\" cy=\"11\" r=\"8\"/>\n    <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"/>\n  </symbol>\n\n  <symbol id=\"icon-lock\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <rect width=\"18\" height=\"11\" x=\"3\" y=\"11\" rx=\"2\" ry=\"2\"/>\n    <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"/>\n  </symbol>\n\n  <symbol id=\"icon-lock-open\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <rect width=\"18\" height=\"11\" x=\"3\" y=\"11\" rx=\"2\" ry=\"2\"/>\n    <path d=\"M7 11V7a5 5 0 0 1 9.9-1\"/>\n  </symbol>\n\n\n</svg>\n`;\n// src/web/toolbar.tsx\n\n\nvar scriptLevelToolbar = null;\nvar ToolbarErrorBoundary = class extends preact__WEBPACK_IMPORTED_MODULE_2__.Component {\n    constructor(){\n        super(...arguments);\n        this.state = {\n            hasError: false,\n            error: null\n        };\n        this.handleReset = ()=>{\n            this.setState({\n                hasError: false,\n                error: null\n            });\n        };\n    }\n    static getDerivedStateFromError(error) {\n        console.error(error);\n        return {\n            hasError: true,\n            error\n        };\n    }\n    render() {\n        if (this.state.hasError) {\n            return /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"fixed bottom-4 right-4 z-[124124124124]\",\n                children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"p-3 bg-black rounded-lg shadow-lg w-80\",\n                    children: [\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                            className: \"flex items-center gap-2 mb-2 text-red-400 text-sm font-medium\",\n                            children: [\n                                /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Icon, {\n                                    name: \"icon-flame\",\n                                    className: \"text-red-500\",\n                                    size: 14\n                                }),\n                                \"React Scan ran into a problem\"\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                            className: \"p-2 bg-black rounded font-mono text-xs text-red-300 mb-3 break-words\",\n                            children: this.state.error?.message || JSON.stringify(this.state.error)\n                        }),\n                        /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"button\", {\n                            type: \"button\",\n                            onClick: this.handleReset,\n                            className: \"px-3 py-1.5 bg-red-500 hover:bg-red-600 text-white rounded text-xs font-medium transition-colors flex items-center justify-center gap-1.5\",\n                            children: \"Restart\"\n                        })\n                    ]\n                })\n            });\n        }\n        return this.props.children;\n    }\n};\nvar createToolbar = (root)=>{\n    const container = document.createElement(\"div\");\n    container.id = \"react-scan-toolbar-root\";\n    window.__REACT_SCAN_TOOLBAR_CONTAINER__ = container;\n    scriptLevelToolbar = container;\n    root.appendChild(container);\n    (0,preact__WEBPACK_IMPORTED_MODULE_2__.render)(/* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ToolbarErrorBoundary, {\n        children: /* @__PURE__ */ (0,preact_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Widget, {})\n    }), container);\n    const originalRemove = container.remove.bind(container);\n    container.remove = ()=>{\n        if (container.hasChildNodes()) {\n            scriptLevelToolbar = null;\n            (0,preact__WEBPACK_IMPORTED_MODULE_2__.render)(null, container);\n            (0,preact__WEBPACK_IMPORTED_MODULE_2__.render)(null, container);\n        }\n        originalRemove();\n    };\n    return container;\n};\n// src/core/index.ts\nvar rootContainer = null;\nvar shadowRoot = null;\nvar initRootContainer = ()=>{\n    if (rootContainer && shadowRoot) {\n        return {\n            rootContainer,\n            shadowRoot\n        };\n    }\n    rootContainer = document.createElement(\"div\");\n    rootContainer.id = \"react-scan-root\";\n    shadowRoot = rootContainer.attachShadow({\n        mode: \"open\"\n    });\n    const fragment = document.createDocumentFragment();\n    const cssStyles = document.createElement(\"style\");\n    cssStyles.textContent = styles_default;\n    const iconSprite = new DOMParser().parseFromString(ICONS, \"image/svg+xml\").documentElement;\n    shadowRoot.appendChild(iconSprite);\n    const root = document.createElement(\"div\");\n    root.id = \"react-scan-toolbar-root\";\n    root.className = \"absolute z-2147483647\";\n    fragment.appendChild(cssStyles);\n    fragment.appendChild(root);\n    shadowRoot.appendChild(fragment);\n    document.documentElement.appendChild(rootContainer);\n    return {\n        rootContainer,\n        shadowRoot\n    };\n};\nvar Store = {\n    wasDetailsOpen: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(true),\n    isInIframe: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)( false && 0),\n    inspectState: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)({\n        kind: \"uninitialized\"\n    }),\n    monitor: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(null),\n    fiberRoots: /* @__PURE__ */ new Set(),\n    reportData: /* @__PURE__ */ new Map(),\n    legacyReportData: /* @__PURE__ */ new Map(),\n    lastReportTime: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)(0),\n    changesListeners: /* @__PURE__ */ new Map()\n};\nvar ReactScanInternals = {\n    instrumentation: null,\n    componentAllowList: null,\n    options: (0,_preact_signals__WEBPACK_IMPORTED_MODULE_1__.signal)({\n        enabled: true,\n        includeChildren: true,\n        playSound: false,\n        log: false,\n        showToolbar: true,\n        renderCountThreshold: 0,\n        report: void 0,\n        alwaysShowLabels: false,\n        animationSpeed: \"fast\",\n        dangerouslyForceRunInProduction: false,\n        smoothlyAnimateOutlines: true,\n        trackUnnecessaryRenders: false,\n        showFPS: true\n    }),\n    onRender: null,\n    scheduledOutlines: /* @__PURE__ */ new Map(),\n    activeOutlines: /* @__PURE__ */ new Map(),\n    Store\n};\nfunction isOptionKey(key) {\n    return key in ReactScanInternals.options.value;\n}\nvar validateOptions = (options)=>{\n    const errors = [];\n    const validOptions = {};\n    for(const key in options){\n        if (!isOptionKey(key)) continue;\n        const value = options[key];\n        switch(key){\n            case \"enabled\":\n            // case 'includeChildren':\n            case \"log\":\n            case \"showToolbar\":\n            // case 'report':\n            // case 'alwaysShowLabels':\n            case \"dangerouslyForceRunInProduction\":\n                if (typeof value !== \"boolean\") {\n                    errors.push(`- ${key} must be a boolean. Got \"${value}\"`);\n                } else {\n                    validOptions[key] = value;\n                }\n                break;\n            // case 'renderCountThreshold':\n            // case 'resetCountTimeout':\n            //   if (typeof value !== 'number' || value < 0) {\n            //     errors.push(`- ${key} must be a non-negative number. Got \"${value}\"`);\n            //   } else {\n            //     validOptions[key] = value as number;\n            //   }\n            //   break;\n            case \"animationSpeed\":\n                if (![\n                    \"slow\",\n                    \"fast\",\n                    \"off\"\n                ].includes(value)) {\n                    errors.push(`- Invalid animation speed \"${value}\". Using default \"fast\"`);\n                } else {\n                    validOptions[key] = value;\n                }\n                break;\n            case \"onCommitStart\":\n                if (typeof value !== \"function\") {\n                    errors.push(`- ${key} must be a function. Got \"${value}\"`);\n                } else {\n                    validOptions.onCommitStart = value;\n                }\n                break;\n            case \"onCommitFinish\":\n                if (typeof value !== \"function\") {\n                    errors.push(`- ${key} must be a function. Got \"${value}\"`);\n                } else {\n                    validOptions.onCommitFinish = value;\n                }\n                break;\n            case \"onRender\":\n                if (typeof value !== \"function\") {\n                    errors.push(`- ${key} must be a function. Got \"${value}\"`);\n                } else {\n                    validOptions.onRender = value;\n                }\n                break;\n            case \"onPaintStart\":\n            case \"onPaintFinish\":\n                if (typeof value !== \"function\") {\n                    errors.push(`- ${key} must be a function. Got \"${value}\"`);\n                } else {\n                    validOptions[key] = value;\n                }\n                break;\n            // case 'trackUnnecessaryRenders': {\n            //   validOptions.trackUnnecessaryRenders =\n            //     typeof value === 'boolean' ? value : false;\n            //   break;\n            // }\n            // case 'smoothlyAnimateOutlines': {\n            //   validOptions.smoothlyAnimateOutlines =\n            //     typeof value === 'boolean' ? value : false;\n            //   break;\n            // }\n            default:\n                errors.push(`- Unknown option \"${key}\"`);\n        }\n    }\n    if (errors.length > 0) {\n        console.warn(`[React Scan] Invalid options:\n${errors.join(\"\\n\")}`);\n    }\n    return validOptions;\n};\nvar getReport = (type)=>{\n    if (type) {\n        for (const reportData of Array.from(Store.legacyReportData.values())){\n            if (reportData.type === type) {\n                return reportData;\n            }\n        }\n        return null;\n    }\n    return Store.legacyReportData;\n};\nvar setOptions = (userOptions)=>{\n    const validOptions = validateOptions(userOptions);\n    if (Object.keys(validOptions).length === 0) {\n        return;\n    }\n    const newOptions = {\n        ...ReactScanInternals.options.value,\n        ...validOptions\n    };\n    const { instrumentation } = ReactScanInternals;\n    if (instrumentation && \"enabled\" in validOptions) {\n        instrumentation.isPaused.value = validOptions.enabled === false;\n    }\n    ReactScanInternals.options.value = newOptions;\n    const existingLocalStorageOptions = readLocalStorage(\"react-scan-options\");\n    saveLocalStorage(\"react-scan-options\", {\n        ...newOptions,\n        enabled: newOptions.showToolbar ? existingLocalStorageOptions?.enabled ?? newOptions.enabled ?? true : newOptions.enabled\n    });\n    return newOptions;\n};\nvar getOptions = ()=>ReactScanInternals.options;\nvar isProduction = null;\nvar rdtHook;\nvar getIsProduction = ()=>{\n    if (isProduction !== null) {\n        return isProduction;\n    }\n    rdtHook ??= (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getRDTHook)();\n    for (const renderer of rdtHook.renderers.values()){\n        const buildType = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.detectReactBuildType)(renderer);\n        if (buildType === \"production\") {\n            isProduction = true;\n        }\n    }\n    return isProduction;\n};\nvar start = ()=>{\n    try {\n        if (true) {\n            return;\n        }\n        Store.monitor.value = {\n            pendingRequests: 0,\n            interactions: [],\n            session: new Promise((res)=>res(null)),\n            url: null,\n            route: null,\n            apiKey: null,\n            commit: null,\n            branch: null,\n            interactionListeningForRenders: null\n        };\n        const localStorageOptions = readLocalStorage(\"react-scan-options\");\n        if (localStorageOptions) {\n            const { enabled } = localStorageOptions;\n            const validLocalOptions = validateOptions({\n                enabled\n            });\n            if (Object.keys(validLocalOptions).length > 0) {\n                ReactScanInternals.options.value = {\n                    ...ReactScanInternals.options.value,\n                    ...validLocalOptions\n                };\n            }\n        }\n        const options = getOptions();\n        initReactScanInstrumentation({\n            onActive: ()=>{\n                const rdtHook2 = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.getRDTHook)();\n                if (hasStopped()) return;\n                for (const renderer of rdtHook2.renderers.values()){\n                    const buildType = (0,bippy__WEBPACK_IMPORTED_MODULE_0__.detectReactBuildType)(renderer);\n                    if (buildType === \"production\") {\n                        isProduction = true;\n                    }\n                }\n                if (isProduction && !ReactScanInternals.options.value.dangerouslyForceRunInProduction) {\n                    setOptions({\n                        enabled: false,\n                        showToolbar: false\n                    });\n                    console.warn(\"[React Scan] Running in production mode is not recommended.\\nIf you really need this, set dangerouslyForceRunInProduction: true in options.\");\n                    return;\n                }\n                startTimingTracking();\n                idempotent_createToolbar(!!options.value.showToolbar);\n                const host = getCanvasEl();\n                if (host) {\n                    document.documentElement.appendChild(host);\n                }\n                globalThis.__REACT_SCAN__ = {\n                    ReactScanInternals\n                };\n                startReportInterval();\n                logIntro();\n            }\n        });\n        const isUsedInBrowserExtension = \"undefined\" !== \"undefined\";\n        if (!Store.monitor.value && !isUsedInBrowserExtension) {\n            setTimeout(()=>{\n                if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.isInstrumentationActive)()) return;\n                console.error(\"[React Scan] Failed to load. Must import React Scan before React runs.\");\n            }, 5e3);\n        }\n    } catch  {}\n};\nvar idempotent_createToolbar = (showToolbar)=>{\n    const windowToolbarContainer = window.__REACT_SCAN_TOOLBAR_CONTAINER__;\n    if (!showToolbar) {\n        windowToolbarContainer?.remove();\n        return;\n    }\n    if (!scriptLevelToolbar && windowToolbarContainer) {\n        windowToolbarContainer.remove();\n        const { shadowRoot: shadowRoot3 } = initRootContainer();\n        createToolbar(shadowRoot3);\n        return;\n    }\n    if (scriptLevelToolbar && windowToolbarContainer) {\n        return;\n    }\n    const { shadowRoot: shadowRoot2 } = initRootContainer();\n    createToolbar(shadowRoot2);\n    try {\n        const highlightRoot = document.documentElement;\n        createHighlightCanvas(highlightRoot);\n    } catch  {}\n};\nvar scan = (options = {})=>{\n    setOptions(options);\n    const isInIframe = Store.isInIframe.value;\n    if (isInIframe) {\n        return;\n    }\n    if (options.enabled === false && options.showToolbar !== true) {\n        return;\n    }\n    start();\n};\nvar useScan = (options = {})=>{\n    setOptions(options);\n    start();\n};\nvar onRender = (type, _onRender)=>{\n    const prevOnRender = ReactScanInternals.onRender;\n    ReactScanInternals.onRender = (fiber, renders)=>{\n        prevOnRender?.(fiber, renders);\n        if ((0,bippy__WEBPACK_IMPORTED_MODULE_0__.getType)(fiber.type) === type) {\n            _onRender(fiber, renders);\n        }\n    };\n};\nvar ignoredProps = /* @__PURE__ */ new WeakSet();\nvar ignoreScan = (node)=>{\n    if (node && typeof node === \"object\") {\n        ignoredProps.add(node);\n    }\n};\n// src/index.ts\ninit();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-scan/dist/index.mjs\n");

/***/ })

};
;