"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bippy";
exports.ids = ["vendor-chunks/bippy"];
exports.modules = {

/***/ "(ssr)/./node_modules/bippy/dist/chunk-ZF32UKFC.js":
/*!***************************************************!*\
  !*** ./node_modules/bippy/dist/chunk-ZF32UKFC.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIPPY_INSTRUMENTATION_STRING: () => (/* binding */ BIPPY_INSTRUMENTATION_STRING),\n/* harmony export */   CONCURRENT_MODE_NUMBER: () => (/* binding */ CONCURRENT_MODE_NUMBER),\n/* harmony export */   CONCURRENT_MODE_SYMBOL_STRING: () => (/* binding */ CONCURRENT_MODE_SYMBOL_STRING),\n/* harmony export */   ClassComponentTag: () => (/* binding */ ClassComponentTag),\n/* harmony export */   ContextConsumerTag: () => (/* binding */ ContextConsumerTag),\n/* harmony export */   DEPRECATED_ASYNC_MODE_SYMBOL_STRING: () => (/* binding */ DEPRECATED_ASYNC_MODE_SYMBOL_STRING),\n/* harmony export */   DehydratedSuspenseComponentTag: () => (/* binding */ DehydratedSuspenseComponentTag),\n/* harmony export */   ELEMENT_TYPE_SYMBOL_STRING: () => (/* binding */ ELEMENT_TYPE_SYMBOL_STRING),\n/* harmony export */   ForwardRefTag: () => (/* binding */ ForwardRefTag),\n/* harmony export */   FragmentTag: () => (/* binding */ FragmentTag),\n/* harmony export */   FunctionComponentTag: () => (/* binding */ FunctionComponentTag),\n/* harmony export */   HostComponentTag: () => (/* binding */ HostComponentTag),\n/* harmony export */   HostHoistableTag: () => (/* binding */ HostHoistableTag),\n/* harmony export */   HostRootTag: () => (/* binding */ HostRootTag),\n/* harmony export */   HostSingletonTag: () => (/* binding */ HostSingletonTag),\n/* harmony export */   HostTextTag: () => (/* binding */ HostTextTag),\n/* harmony export */   INSTALL_HOOK_SCRIPT_STRING: () => (/* binding */ INSTALL_HOOK_SCRIPT_STRING),\n/* harmony export */   LegacyHiddenComponentTag: () => (/* binding */ LegacyHiddenComponentTag),\n/* harmony export */   MemoComponentTag: () => (/* binding */ MemoComponentTag),\n/* harmony export */   OffscreenComponentTag: () => (/* binding */ OffscreenComponentTag),\n/* harmony export */   SimpleMemoComponentTag: () => (/* binding */ SimpleMemoComponentTag),\n/* harmony export */   SuspenseComponentTag: () => (/* binding */ SuspenseComponentTag),\n/* harmony export */   TRANSITIONAL_ELEMENT_TYPE_SYMBOL_STRING: () => (/* binding */ TRANSITIONAL_ELEMENT_TYPE_SYMBOL_STRING),\n/* harmony export */   createFiberVisitor: () => (/* binding */ createFiberVisitor),\n/* harmony export */   detectReactBuildType: () => (/* binding */ detectReactBuildType),\n/* harmony export */   didFiberCommit: () => (/* binding */ didFiberCommit),\n/* harmony export */   didFiberRender: () => (/* binding */ didFiberRender),\n/* harmony export */   fiberIdMap: () => (/* binding */ fiberIdMap),\n/* harmony export */   getDisplayName: () => (/* binding */ getDisplayName),\n/* harmony export */   getFiberFromHostInstance: () => (/* binding */ getFiberFromHostInstance),\n/* harmony export */   getFiberId: () => (/* binding */ getFiberId),\n/* harmony export */   getFiberStack: () => (/* binding */ getFiberStack),\n/* harmony export */   getMutatedHostFibers: () => (/* binding */ getMutatedHostFibers),\n/* harmony export */   getNearestHostFiber: () => (/* binding */ getNearestHostFiber),\n/* harmony export */   getNearestHostFibers: () => (/* binding */ getNearestHostFibers),\n/* harmony export */   getRDTHook: () => (/* binding */ getRDTHook),\n/* harmony export */   getTimings: () => (/* binding */ getTimings),\n/* harmony export */   getType: () => (/* binding */ getType),\n/* harmony export */   hasMemoCache: () => (/* binding */ hasMemoCache),\n/* harmony export */   hasRDTHook: () => (/* binding */ hasRDTHook),\n/* harmony export */   installRDTHook: () => (/* binding */ installRDTHook),\n/* harmony export */   instrument: () => (/* binding */ instrument),\n/* harmony export */   isCompositeFiber: () => (/* binding */ isCompositeFiber),\n/* harmony export */   isHostFiber: () => (/* binding */ isHostFiber),\n/* harmony export */   isInstrumentationActive: () => (/* binding */ isInstrumentationActive),\n/* harmony export */   isReactRefresh: () => (/* binding */ isReactRefresh),\n/* harmony export */   isRealReactDevtools: () => (/* binding */ isRealReactDevtools),\n/* harmony export */   isServiceWorkerRegistered: () => (/* binding */ isServiceWorkerRegistered),\n/* harmony export */   isValidElement: () => (/* binding */ isValidElement),\n/* harmony export */   isValidFiber: () => (/* binding */ isValidFiber),\n/* harmony export */   mountFiberRecursively: () => (/* binding */ mountFiberRecursively),\n/* harmony export */   onCommitFiberRoot: () => (/* binding */ onCommitFiberRoot),\n/* harmony export */   patchRDTHook: () => (/* binding */ patchRDTHook),\n/* harmony export */   secure: () => (/* binding */ secure),\n/* harmony export */   setFiberId: () => (/* binding */ setFiberId),\n/* harmony export */   shouldFilterFiber: () => (/* binding */ shouldFilterFiber),\n/* harmony export */   traverseContexts: () => (/* binding */ traverseContexts),\n/* harmony export */   traverseEffects: () => (/* binding */ traverseEffects),\n/* harmony export */   traverseFiber: () => (/* binding */ traverseFiber),\n/* harmony export */   traverseProps: () => (/* binding */ traverseProps),\n/* harmony export */   traverseRenderedFibers: () => (/* binding */ traverseRenderedFibers),\n/* harmony export */   traverseState: () => (/* binding */ traverseState),\n/* harmony export */   unmountFiber: () => (/* binding */ unmountFiber),\n/* harmony export */   unmountFiberChildrenRecursively: () => (/* binding */ unmountFiberChildrenRecursively),\n/* harmony export */   updateFiberRecursively: () => (/* binding */ updateFiberRecursively),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/**\n * @license bippy\n *\n * Copyright (c) Aiden Bai, Million Software, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// src/rdt-hook.ts\nvar version = \"0.2.7\";\nvar BIPPY_INSTRUMENTATION_STRING = `bippy-${version}`;\nvar NO_OP = () => {\n};\nvar checkDCE = (fn) => {\n  try {\n    const code = Function.prototype.toString.call(fn);\n    if (code.indexOf(\"^_^\") > -1) {\n      setTimeout(() => {\n        throw new Error(\n          \"React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://reactjs.org/link/perf-use-production-build\"\n        );\n      });\n    }\n  } catch {\n  }\n};\nvar isRealReactDevtools = (rdtHook = getRDTHook()) => {\n  return \"getFiberRoots\" in rdtHook;\n};\nvar isReactRefreshOverride = false;\nvar isReactRefresh = (rdtHook = getRDTHook()) => {\n  if (isReactRefreshOverride) return true;\n  return !(\"checkDCE\" in rdtHook);\n};\nvar installRDTHook = (onActive) => {\n  const renderers = /* @__PURE__ */ new Map();\n  let i = 0;\n  const rdtHook = {\n    checkDCE,\n    supportsFiber: true,\n    supportsFlight: true,\n    hasUnsupportedRendererAttached: false,\n    renderers,\n    onCommitFiberRoot: NO_OP,\n    onCommitFiberUnmount: NO_OP,\n    onPostCommitFiberRoot: NO_OP,\n    inject(renderer) {\n      const nextID = ++i;\n      renderers.set(nextID, renderer);\n      if (!rdtHook._instrumentationIsActive) {\n        rdtHook._instrumentationIsActive = true;\n        onActive?.();\n      }\n      return nextID;\n    },\n    _instrumentationSource: BIPPY_INSTRUMENTATION_STRING,\n    _instrumentationIsActive: false\n  };\n  try {\n    Object.defineProperty(globalThis, \"__REACT_DEVTOOLS_GLOBAL_HOOK__\", {\n      value: rdtHook\n    });\n  } catch {\n    patchRDTHook(onActive);\n  }\n  return rdtHook;\n};\nvar patchRDTHook = (onActive) => {\n  try {\n    const rdtHook = globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n    if (!rdtHook._instrumentationSource) {\n      isReactRefreshOverride = isReactRefresh(rdtHook);\n      rdtHook.checkDCE = checkDCE;\n      rdtHook.supportsFiber = true;\n      rdtHook.supportsFlight = true;\n      rdtHook.hasUnsupportedRendererAttached = false;\n      rdtHook._instrumentationSource = BIPPY_INSTRUMENTATION_STRING;\n      rdtHook._instrumentationIsActive = true;\n    }\n  } catch {\n  }\n  onActive?.();\n};\nvar hasRDTHook = () => {\n  return Object.prototype.hasOwnProperty.call(\n    globalThis,\n    \"__REACT_DEVTOOLS_GLOBAL_HOOK__\"\n  );\n};\nvar getRDTHook = (onActive) => {\n  if (!hasRDTHook()) {\n    return installRDTHook(onActive);\n  }\n  patchRDTHook(onActive);\n  return globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n};\nvar isRegistered = false;\nvar isServiceWorkerRegistered = () => {\n  return isRegistered;\n};\ntry {\n  if (typeof window !== \"undefined\" && // @ts-expect-error `document` may not be defined in some enviroments\n  (window.document?.createElement || window.navigator?.product === \"ReactNative\")) {\n    installRDTHook();\n    if (typeof navigator !== \"undefined\" && \"serviceWorker\" in navigator) {\n      navigator.serviceWorker.register(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(0), __webpack_require__.b)).then(() => {\n        isRegistered = true;\n      }).catch(() => {\n      });\n    }\n  }\n} catch {\n}\nvar INSTALL_HOOK_SCRIPT_STRING = \"(()=>{try{var t=()=>{};const n=new Map;let o=0;globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__={checkDCE:t,supportsFiber:!0,supportsFlight:!0,hasUnsupportedRendererAttached:!1,renderers:n,onCommitFiberRoot:t,onCommitFiberUnmount:t,onPostCommitFiberRoot:t,inject(t){var e=++o;return n.set(e,t),globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__._instrumentationIsActive=!0,e},_instrumentationIsActive:!1}}catch{}})()\";\n\n// src/core.ts\nvar FunctionComponentTag = 0;\nvar ClassComponentTag = 1;\nvar HostRootTag = 3;\nvar HostComponentTag = 5;\nvar HostTextTag = 6;\nvar FragmentTag = 7;\nvar ContextConsumerTag = 9;\nvar ForwardRefTag = 11;\nvar SuspenseComponentTag = 13;\nvar MemoComponentTag = 14;\nvar SimpleMemoComponentTag = 15;\nvar DehydratedSuspenseComponentTag = 18;\nvar OffscreenComponentTag = 22;\nvar LegacyHiddenComponentTag = 23;\nvar HostHoistableTag = 26;\nvar HostSingletonTag = 27;\nvar CONCURRENT_MODE_NUMBER = 60111;\nvar ELEMENT_TYPE_SYMBOL_STRING = \"Symbol(react.element)\";\nvar TRANSITIONAL_ELEMENT_TYPE_SYMBOL_STRING = \"Symbol(react.transitional.element)\";\nvar CONCURRENT_MODE_SYMBOL_STRING = \"Symbol(react.concurrent_mode)\";\nvar DEPRECATED_ASYNC_MODE_SYMBOL_STRING = \"Symbol(react.async_mode)\";\nvar PerformedWork = 1;\nvar Placement = 2;\nvar Hydrating = 4096;\nvar Update = 4;\nvar Cloned = 8;\nvar ChildDeletion = 16;\nvar ContentReset = 32;\nvar Snapshot = 1024;\nvar Visibility = 8192;\nvar MutationMask = Placement | Update | ChildDeletion | ContentReset | Hydrating | Visibility | Snapshot;\nvar isValidElement = (element) => typeof element === \"object\" && element != null && \"$$typeof\" in element && // react 18 uses Symbol.for('react.element'), react 19 uses Symbol.for('react.transitional.element')\n[\n  ELEMENT_TYPE_SYMBOL_STRING,\n  TRANSITIONAL_ELEMENT_TYPE_SYMBOL_STRING\n].includes(String(element.$$typeof));\nvar isValidFiber = (fiber) => typeof fiber === \"object\" && fiber != null && \"tag\" in fiber && \"stateNode\" in fiber && \"return\" in fiber && \"child\" in fiber && \"sibling\" in fiber && \"flags\" in fiber;\nvar isHostFiber = (fiber) => {\n  switch (fiber.tag) {\n    case HostComponentTag:\n    // @ts-expect-error: it exists\n    case HostHoistableTag:\n    // @ts-expect-error: it exists\n    case HostSingletonTag:\n      return true;\n    default:\n      return typeof fiber.type === \"string\";\n  }\n};\nvar isCompositeFiber = (fiber) => {\n  switch (fiber.tag) {\n    case FunctionComponentTag:\n    case ClassComponentTag:\n    case SimpleMemoComponentTag:\n    case MemoComponentTag:\n    case ForwardRefTag:\n      return true;\n    default:\n      return false;\n  }\n};\nvar traverseContexts = (fiber, selector) => {\n  try {\n    const nextDependencies = fiber.dependencies;\n    const prevDependencies = fiber.alternate?.dependencies;\n    if (!nextDependencies || !prevDependencies) return false;\n    if (typeof nextDependencies !== \"object\" || !(\"firstContext\" in nextDependencies) || typeof prevDependencies !== \"object\" || !(\"firstContext\" in prevDependencies)) {\n      return false;\n    }\n    let nextContext = nextDependencies.firstContext;\n    let prevContext = prevDependencies.firstContext;\n    while (nextContext && typeof nextContext === \"object\" && \"memoizedValue\" in nextContext || prevContext && typeof prevContext === \"object\" && \"memoizedValue\" in prevContext) {\n      if (selector(nextContext, prevContext) === true) return true;\n      nextContext = nextContext?.next;\n      prevContext = prevContext?.next;\n    }\n  } catch {\n  }\n  return false;\n};\nvar traverseState = (fiber, selector) => {\n  try {\n    let nextState = fiber.memoizedState;\n    let prevState = fiber.alternate?.memoizedState;\n    while (nextState || prevState) {\n      if (selector(nextState, prevState) === true) return true;\n      nextState = nextState?.next;\n      prevState = prevState?.next;\n    }\n  } catch {\n  }\n  return false;\n};\nvar traverseEffects = (fiber, selector) => {\n  try {\n    let nextState = (\n      // biome-ignore lint/suspicious/noExplicitAny: underlying type is unknown\n      fiber.updateQueue?.lastEffect\n    );\n    let prevState = (\n      // biome-ignore lint/suspicious/noExplicitAny: underlying type is unknown\n      fiber.alternate?.updateQueue?.lastEffect\n    );\n    while (nextState || prevState) {\n      if (selector(nextState, prevState) === true) return true;\n      if (nextState?.next === nextState || prevState?.next === prevState) {\n        break;\n      }\n      nextState = nextState?.next;\n      prevState = prevState?.next;\n    }\n  } catch {\n  }\n  return false;\n};\nvar traverseProps = (fiber, selector) => {\n  try {\n    const nextProps = fiber.memoizedProps;\n    const prevProps = fiber.alternate?.memoizedProps || {};\n    const allKeys = /* @__PURE__ */ new Set([\n      ...Object.keys(prevProps),\n      ...Object.keys(nextProps)\n    ]);\n    for (const propName of allKeys) {\n      const prevValue = prevProps?.[propName];\n      const nextValue = nextProps?.[propName];\n      if (selector(propName, nextValue, prevValue) === true) return true;\n    }\n  } catch {\n  }\n  return false;\n};\nvar didFiberRender = (fiber) => {\n  const nextProps = fiber.memoizedProps;\n  const prevProps = fiber.alternate?.memoizedProps || {};\n  const flags = fiber.flags ?? fiber.effectTag ?? 0;\n  switch (fiber.tag) {\n    case ClassComponentTag:\n    case FunctionComponentTag:\n    case ContextConsumerTag:\n    case ForwardRefTag:\n    case MemoComponentTag:\n    case SimpleMemoComponentTag: {\n      return (flags & PerformedWork) === PerformedWork;\n    }\n    default:\n      if (!fiber.alternate) return true;\n      return prevProps !== nextProps || fiber.alternate.memoizedState !== fiber.memoizedState || fiber.alternate.ref !== fiber.ref;\n  }\n};\nvar didFiberCommit = (fiber) => {\n  return Boolean(\n    (fiber.flags & (MutationMask | Cloned)) !== 0 || (fiber.subtreeFlags & (MutationMask | Cloned)) !== 0\n  );\n};\nvar getMutatedHostFibers = (fiber) => {\n  const mutations = [];\n  const stack = [fiber];\n  while (stack.length) {\n    const node = stack.pop();\n    if (!node) continue;\n    if (isHostFiber(node) && didFiberCommit(node) && didFiberRender(node)) {\n      mutations.push(node);\n    }\n    if (node.child) stack.push(node.child);\n    if (node.sibling) stack.push(node.sibling);\n  }\n  return mutations;\n};\nvar getFiberStack = (fiber) => {\n  const stack = [];\n  let currentFiber = fiber;\n  while (currentFiber.return) {\n    stack.push(currentFiber);\n    currentFiber = currentFiber.return;\n  }\n  const newStack = new Array(stack.length);\n  for (let i = 0; i < stack.length; i++) {\n    newStack[i] = stack[stack.length - i - 1];\n  }\n  return newStack;\n};\nvar shouldFilterFiber = (fiber) => {\n  switch (fiber.tag) {\n    case DehydratedSuspenseComponentTag:\n      return true;\n    case HostTextTag:\n    case FragmentTag:\n    case LegacyHiddenComponentTag:\n    case OffscreenComponentTag:\n      return true;\n    case HostRootTag:\n      return false;\n    default: {\n      const symbolOrNumber = typeof fiber.type === \"object\" && fiber.type !== null ? fiber.type.$$typeof : fiber.type;\n      const typeSymbol = typeof symbolOrNumber === \"symbol\" ? symbolOrNumber.toString() : symbolOrNumber;\n      switch (typeSymbol) {\n        case CONCURRENT_MODE_NUMBER:\n        case CONCURRENT_MODE_SYMBOL_STRING:\n        case DEPRECATED_ASYNC_MODE_SYMBOL_STRING:\n          return true;\n        default:\n          return false;\n      }\n    }\n  }\n};\nvar getNearestHostFiber = (fiber, ascending = false) => {\n  let hostFiber = traverseFiber(fiber, isHostFiber, ascending);\n  if (!hostFiber) {\n    hostFiber = traverseFiber(fiber, isHostFiber, !ascending);\n  }\n  return hostFiber;\n};\nvar getNearestHostFibers = (fiber) => {\n  const hostFibers = [];\n  const stack = [];\n  if (isHostFiber(fiber)) {\n    hostFibers.push(fiber);\n  } else if (fiber.child) {\n    stack.push(fiber.child);\n  }\n  while (stack.length) {\n    const currentNode = stack.pop();\n    if (!currentNode) break;\n    if (isHostFiber(currentNode)) {\n      hostFibers.push(currentNode);\n    } else if (currentNode.child) {\n      stack.push(currentNode.child);\n    }\n    if (currentNode.sibling) {\n      stack.push(currentNode.sibling);\n    }\n  }\n  return hostFibers;\n};\nvar traverseFiber = (fiber, selector, ascending = false) => {\n  if (!fiber) return null;\n  if (selector(fiber) === true) return fiber;\n  let child = ascending ? fiber.return : fiber.child;\n  while (child) {\n    const match = traverseFiber(child, selector, ascending);\n    if (match) return match;\n    child = ascending ? null : child.sibling;\n  }\n  return null;\n};\nvar getTimings = (fiber) => {\n  const totalTime = fiber?.actualDuration ?? 0;\n  let selfTime = totalTime;\n  let child = fiber?.child ?? null;\n  while (totalTime > 0 && child != null) {\n    selfTime -= child.actualDuration ?? 0;\n    child = child.sibling;\n  }\n  return { selfTime, totalTime };\n};\nvar hasMemoCache = (fiber) => {\n  return Boolean(\n    fiber.updateQueue?.memoCache\n  );\n};\nvar getType = (type) => {\n  const currentType = type;\n  if (typeof currentType === \"function\") {\n    return currentType;\n  }\n  if (typeof currentType === \"object\" && currentType) {\n    return getType(\n      currentType.type || currentType.render\n    );\n  }\n  return null;\n};\nvar getDisplayName = (type) => {\n  const currentType = type;\n  if (typeof currentType !== \"function\" && !(typeof currentType === \"object\" && currentType)) {\n    return null;\n  }\n  const name = currentType.displayName || currentType.name || null;\n  if (name) return name;\n  const unwrappedType = getType(currentType);\n  if (!unwrappedType) return null;\n  return unwrappedType.displayName || unwrappedType.name || null;\n};\nvar detectReactBuildType = (renderer) => {\n  try {\n    if (typeof renderer.version === \"string\" && renderer.bundleType > 0) {\n      return \"development\";\n    }\n  } catch {\n  }\n  return \"production\";\n};\nvar isInstrumentationActive = () => {\n  const rdtHook = getRDTHook();\n  return Boolean(rdtHook._instrumentationIsActive) || isRealReactDevtools() || isReactRefresh();\n};\nvar fiberId = 0;\nvar fiberIdMap = /* @__PURE__ */ new WeakMap();\nvar setFiberId = (fiber, id = fiberId++) => {\n  fiberIdMap.set(fiber, id);\n};\nvar getFiberId = (fiber) => {\n  let id = fiberIdMap.get(fiber);\n  if (!id && fiber.alternate) {\n    id = fiberIdMap.get(fiber.alternate);\n  }\n  if (!id) {\n    id = fiberId++;\n    setFiberId(fiber, id);\n  }\n  return id;\n};\nvar mountFiberRecursively = (onRender, firstChild, traverseSiblings) => {\n  let fiber = firstChild;\n  while (fiber != null) {\n    if (!fiberIdMap.has(fiber)) {\n      getFiberId(fiber);\n    }\n    const shouldIncludeInTree = !shouldFilterFiber(fiber);\n    if (shouldIncludeInTree && didFiberRender(fiber)) {\n      onRender(fiber, \"mount\");\n    }\n    if (fiber.tag === SuspenseComponentTag) {\n      const isTimedOut = fiber.memoizedState !== null;\n      if (isTimedOut) {\n        const primaryChildFragment = fiber.child;\n        const fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;\n        if (fallbackChildFragment) {\n          const fallbackChild = fallbackChildFragment.child;\n          if (fallbackChild !== null) {\n            mountFiberRecursively(onRender, fallbackChild, false);\n          }\n        }\n      } else {\n        let primaryChild = null;\n        if (fiber.child !== null) {\n          primaryChild = fiber.child.child;\n        }\n        if (primaryChild !== null) {\n          mountFiberRecursively(onRender, primaryChild, false);\n        }\n      }\n    } else if (fiber.child != null) {\n      mountFiberRecursively(onRender, fiber.child, true);\n    }\n    fiber = traverseSiblings ? fiber.sibling : null;\n  }\n};\nvar updateFiberRecursively = (onRender, nextFiber, prevFiber, parentFiber) => {\n  if (!fiberIdMap.has(nextFiber)) {\n    getFiberId(nextFiber);\n  }\n  if (!prevFiber) return;\n  if (!fiberIdMap.has(prevFiber)) {\n    getFiberId(prevFiber);\n  }\n  const isSuspense = nextFiber.tag === SuspenseComponentTag;\n  const shouldIncludeInTree = !shouldFilterFiber(nextFiber);\n  if (shouldIncludeInTree && didFiberRender(nextFiber)) {\n    onRender(nextFiber, \"update\");\n  }\n  const prevDidTimeout = isSuspense && prevFiber.memoizedState !== null;\n  const nextDidTimeOut = isSuspense && nextFiber.memoizedState !== null;\n  if (prevDidTimeout && nextDidTimeOut) {\n    const nextFallbackChildSet = nextFiber.child?.sibling ?? null;\n    const prevFallbackChildSet = prevFiber.child?.sibling ?? null;\n    if (nextFallbackChildSet !== null && prevFallbackChildSet !== null) {\n      updateFiberRecursively(\n        onRender,\n        nextFallbackChildSet,\n        prevFallbackChildSet);\n    }\n  } else if (prevDidTimeout && !nextDidTimeOut) {\n    const nextPrimaryChildSet = nextFiber.child;\n    if (nextPrimaryChildSet !== null) {\n      mountFiberRecursively(onRender, nextPrimaryChildSet, true);\n    }\n  } else if (!prevDidTimeout && nextDidTimeOut) {\n    unmountFiberChildrenRecursively(onRender, prevFiber);\n    const nextFallbackChildSet = nextFiber.child?.sibling ?? null;\n    if (nextFallbackChildSet !== null) {\n      mountFiberRecursively(onRender, nextFallbackChildSet, true);\n    }\n  } else if (nextFiber.child !== prevFiber.child) {\n    let nextChild = nextFiber.child;\n    while (nextChild) {\n      if (nextChild.alternate) {\n        const prevChild = nextChild.alternate;\n        updateFiberRecursively(\n          onRender,\n          nextChild,\n          prevChild);\n      } else {\n        mountFiberRecursively(onRender, nextChild, false);\n      }\n      nextChild = nextChild.sibling;\n    }\n  }\n};\nvar unmountFiber = (onRender, fiber) => {\n  const isRoot = fiber.tag === HostRootTag;\n  if (isRoot || !shouldFilterFiber(fiber)) {\n    onRender(fiber, \"unmount\");\n  }\n};\nvar unmountFiberChildrenRecursively = (onRender, fiber) => {\n  const isTimedOutSuspense = fiber.tag === SuspenseComponentTag && fiber.memoizedState !== null;\n  let child = fiber.child;\n  if (isTimedOutSuspense) {\n    const primaryChildFragment = fiber.child;\n    const fallbackChildFragment = primaryChildFragment?.sibling ?? null;\n    child = fallbackChildFragment?.child ?? null;\n  }\n  while (child !== null) {\n    if (child.return !== null) {\n      unmountFiber(onRender, child);\n      unmountFiberChildrenRecursively(onRender, child);\n    }\n    child = child.sibling;\n  }\n};\nvar commitId = 0;\nvar rootInstanceMap = /* @__PURE__ */ new WeakMap();\nvar traverseRenderedFibers = (root, onRender) => {\n  const fiber = \"current\" in root ? root.current : root;\n  let rootInstance = rootInstanceMap.get(root);\n  if (!rootInstance) {\n    rootInstance = { prevFiber: null, id: commitId++ };\n    rootInstanceMap.set(root, rootInstance);\n  }\n  const { prevFiber } = rootInstance;\n  if (!fiber) {\n    unmountFiber(onRender, fiber);\n  } else if (prevFiber !== null) {\n    const wasMounted = prevFiber && prevFiber.memoizedState != null && prevFiber.memoizedState.element != null && // A dehydrated root is not considered mounted\n    prevFiber.memoizedState.isDehydrated !== true;\n    const isMounted = fiber.memoizedState != null && fiber.memoizedState.element != null && // A dehydrated root is not considered mounted\n    fiber.memoizedState.isDehydrated !== true;\n    if (!wasMounted && isMounted) {\n      mountFiberRecursively(onRender, fiber, false);\n    } else if (wasMounted && isMounted) {\n      updateFiberRecursively(onRender, fiber, fiber.alternate);\n    } else if (wasMounted && !isMounted) {\n      unmountFiber(onRender, fiber);\n    }\n  } else {\n    mountFiberRecursively(onRender, fiber, true);\n  }\n  rootInstance.prevFiber = fiber;\n};\nvar createFiberVisitor = ({\n  onRender\n}) => {\n  return (_rendererID, root, _state) => {\n    traverseRenderedFibers(root, onRender);\n  };\n};\nvar instrument = (options) => {\n  return getRDTHook(() => {\n    const rdtHook = getRDTHook();\n    options.onActive?.();\n    rdtHook._instrumentationSource = options.name ?? BIPPY_INSTRUMENTATION_STRING;\n    const prevOnCommitFiberRoot = rdtHook.onCommitFiberRoot;\n    if (options.onCommitFiberRoot) {\n      rdtHook.onCommitFiberRoot = (rendererID, root, priority) => {\n        if (prevOnCommitFiberRoot)\n          prevOnCommitFiberRoot(rendererID, root, priority);\n        options.onCommitFiberRoot?.(rendererID, root, priority);\n      };\n    }\n    const prevOnCommitFiberUnmount = rdtHook.onCommitFiberUnmount;\n    if (options.onCommitFiberUnmount) {\n      rdtHook.onCommitFiberUnmount = (rendererID, root) => {\n        if (prevOnCommitFiberUnmount)\n          prevOnCommitFiberUnmount(rendererID, root);\n        options.onCommitFiberUnmount?.(rendererID, root);\n      };\n    }\n    const prevOnPostCommitFiberRoot = rdtHook.onPostCommitFiberRoot;\n    if (options.onPostCommitFiberRoot) {\n      rdtHook.onPostCommitFiberRoot = (rendererID, root) => {\n        if (prevOnPostCommitFiberRoot)\n          prevOnPostCommitFiberRoot(rendererID, root);\n        options.onPostCommitFiberRoot?.(rendererID, root);\n      };\n    }\n  });\n};\nvar getFiberFromHostInstance = (hostInstance) => {\n  const rdtHook = getRDTHook();\n  for (const renderer of rdtHook.renderers.values()) {\n    try {\n      const fiber = renderer.findFiberByHostInstance?.(hostInstance);\n      if (fiber) return fiber;\n    } catch {\n    }\n  }\n  if (typeof hostInstance === \"object\" && hostInstance != null) {\n    if (\"_reactRootContainer\" in hostInstance) {\n      return hostInstance._reactRootContainer?._internalRoot?.current?.child;\n    }\n    for (const key in hostInstance) {\n      if (key.startsWith(\"__reactInternalInstance$\") || key.startsWith(\"__reactFiber\")) {\n        return hostInstance[key] || null;\n      }\n    }\n  }\n  return null;\n};\nvar secure = (options, secureOptions = {}) => {\n  const onActive = options.onActive;\n  const isRDTHookInstalled = hasRDTHook();\n  const isUsingRealReactDevtools = isRealReactDevtools();\n  const isUsingReactRefresh = isReactRefresh();\n  let timeout;\n  let isProduction = false;\n  options.onActive = () => {\n    clearTimeout(timeout);\n    let isSecure = true;\n    try {\n      onActive?.();\n      const rdtHook = getRDTHook();\n      for (const renderer of rdtHook.renderers.values()) {\n        const [majorVersion] = renderer.version.split(\".\");\n        if (Number(majorVersion) < (secureOptions.minReactMajorVersion ?? 17)) {\n          isSecure = false;\n        }\n        const buildType = detectReactBuildType(renderer);\n        if (buildType !== \"development\") {\n          isProduction = true;\n          if (!secureOptions.dangerouslyRunInProduction) {\n            isSecure = false;\n          }\n        }\n      }\n    } catch (err) {\n      secureOptions.onError?.(err);\n    }\n    if (!isSecure) {\n      options.onCommitFiberRoot = void 0;\n      options.onCommitFiberUnmount = void 0;\n      options.onPostCommitFiberRoot = void 0;\n      options.onActive = void 0;\n      return;\n    }\n    try {\n      const onCommitFiberRoot2 = options.onCommitFiberRoot;\n      if (onCommitFiberRoot2) {\n        options.onCommitFiberRoot = (rendererID, root, priority) => {\n          try {\n            onCommitFiberRoot2(rendererID, root, priority);\n          } catch (err) {\n            secureOptions.onError?.(err);\n          }\n        };\n      }\n      const onCommitFiberUnmount = options.onCommitFiberUnmount;\n      if (onCommitFiberUnmount) {\n        options.onCommitFiberUnmount = (rendererID, root) => {\n          try {\n            onCommitFiberUnmount(rendererID, root);\n          } catch (err) {\n            secureOptions.onError?.(err);\n          }\n        };\n      }\n      const onPostCommitFiberRoot = options.onPostCommitFiberRoot;\n      if (onPostCommitFiberRoot) {\n        options.onPostCommitFiberRoot = (rendererID, root) => {\n          try {\n            onPostCommitFiberRoot(rendererID, root);\n          } catch (err) {\n            secureOptions.onError?.(err);\n          }\n        };\n      }\n    } catch (err) {\n      secureOptions.onError?.(err);\n    }\n  };\n  if (!isRDTHookInstalled && !isUsingRealReactDevtools && !isUsingReactRefresh) {\n    timeout = setTimeout(() => {\n      if (!isProduction) {\n        secureOptions.onError?.();\n      }\n      stop();\n    }, secureOptions.installCheckTimeout ?? 100);\n  }\n  return options;\n};\nvar onCommitFiberRoot = (handler) => {\n  return instrument(\n    secure({\n      onCommitFiberRoot: (_, root) => {\n        handler(root);\n      }\n    })\n  );\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bippy/dist/chunk-ZF32UKFC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bippy/dist/sw.js":
/*!***************************************!*\
  !*** ./node_modules/bippy/dist/sw.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/**\n * @license bippy\n *\n * Copyright (c) Aiden Bai, Million Software, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// src/sw.ts\n(() => {\n  try {\n    const NO_OP = () => {\n    };\n    const renderers = /* @__PURE__ */ new Map();\n    let id = 0;\n    globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__ = {\n      checkDCE: NO_OP,\n      supportsFiber: true,\n      supportsFlight: true,\n      hasUnsupportedRendererAttached: false,\n      renderers,\n      onCommitFiberRoot: NO_OP,\n      onCommitFiberUnmount: NO_OP,\n      onPostCommitFiberRoot: NO_OP,\n      inject(renderer) {\n        const nextID = ++id;\n        renderers.set(nextID, renderer);\n        globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__._instrumentationIsActive = true;\n        return nextID;\n      },\n      _instrumentationIsActive: false\n    };\n  } catch {\n  }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmlwcHkvZGlzdC9zdy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxsYXJzX3dvcmtcXGVrc2FtZW5cXGJpYmxpby1jYXNlXFxiaWJsaW9cXG5vZGVfbW9kdWxlc1xcYmlwcHlcXGRpc3RcXHN3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgYmlwcHlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEFpZGVuIEJhaSwgTWlsbGlvbiBTb2Z0d2FyZSwgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIHNyYy9zdy50c1xuKCgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBOT19PUCA9ICgpID0+IHtcbiAgICB9O1xuICAgIGNvbnN0IHJlbmRlcmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgbGV0IGlkID0gMDtcbiAgICBnbG9iYWxUaGlzLl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9IHtcbiAgICAgIGNoZWNrRENFOiBOT19PUCxcbiAgICAgIHN1cHBvcnRzRmliZXI6IHRydWUsXG4gICAgICBzdXBwb3J0c0ZsaWdodDogdHJ1ZSxcbiAgICAgIGhhc1Vuc3VwcG9ydGVkUmVuZGVyZXJBdHRhY2hlZDogZmFsc2UsXG4gICAgICByZW5kZXJlcnMsXG4gICAgICBvbkNvbW1pdEZpYmVyUm9vdDogTk9fT1AsXG4gICAgICBvbkNvbW1pdEZpYmVyVW5tb3VudDogTk9fT1AsXG4gICAgICBvblBvc3RDb21taXRGaWJlclJvb3Q6IE5PX09QLFxuICAgICAgaW5qZWN0KHJlbmRlcmVyKSB7XG4gICAgICAgIGNvbnN0IG5leHRJRCA9ICsraWQ7XG4gICAgICAgIHJlbmRlcmVycy5zZXQobmV4dElELCByZW5kZXJlcik7XG4gICAgICAgIGdsb2JhbFRoaXMuX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLl9pbnN0cnVtZW50YXRpb25Jc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHJldHVybiBuZXh0SUQ7XG4gICAgICB9LFxuICAgICAgX2luc3RydW1lbnRhdGlvbklzQWN0aXZlOiBmYWxzZVxuICAgIH07XG4gIH0gY2F0Y2gge1xuICB9XG59KSgpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bippy/dist/sw.js\n");

/***/ })

};
;